[{"documents":[{"i":1,"t":"","u":"/blog/blog/archive","b":[]},{"i":2,"t":"面经","u":"/blog/blog/面经","b":["面经"]},{"i":4,"t":"技术文档","u":"/blog/docs/","b":["技术文档"]},{"i":6,"t":"index","u":"/blog/docs/CICD/","b":["技术文档","CICD"]},{"i":8,"t":"DevOps学习笔记","u":"/blog/docs/CICD/DevOps学习笔记","b":["技术文档","CICD"]},{"i":16,"t":"Docker笔记","u":"/blog/docs/CICD/Docker笔记","b":["技术文档","CICD"]},{"i":49,"t":"jenkins-api","u":"/blog/docs/CICD/jenkins-api","b":["技术文档","CICD"]},{"i":67,"t":"jenkins-install","u":"/blog/docs/CICD/jenkins-install","b":["技术文档","CICD"]},{"i":76,"t":"Jenkins源码学习","u":"/blog/docs/CICD/jenkins源码学习","b":["技术文档","CICD"]},{"i":95,"t":"Jenkins共享库","u":"/blog/docs/CICD/share-library","b":["技术文档","CICD"]},{"i":124,"t":"声明式pipeline语法","u":"/blog/docs/CICD/声明式pipeline语法","b":["技术文档","CICD"]},{"i":158,"t":"Django admin使用","u":"/blog/docs/Django/DjangoAdmin使用","b":["技术文档","Django"]},{"i":178,"t":"Django REST Framework总结","u":"/blog/docs/Django/DjangoRESTFramework总结","b":["技术文档","Django"]},{"i":228,"t":"Django基础学习笔记","u":"/blog/docs/Django/Django基础学习笔记","b":["技术文档","Django"]},{"i":278,"t":"django目录结构建议","u":"/blog/docs/Django/django目录结构建议","b":["技术文档","Django"]},{"i":290,"t":"Django集成任务队列Celery","u":"/blog/docs/Django/Django集成任务队列Celery","b":["技术文档","Django"]},{"i":291,"t":"Linux学习笔记","u":"/blog/docs/Linux/Linux学习笔记","b":[]},{"i":318,"t":"Mac快捷键","u":"/blog/docs/Linux/Mac快捷键","b":[]},{"i":323,"t":"正则表达式","u":"/blog/docs/python/正则表达式","b":["技术文档","python"]},{"i":338,"t":"慢查询导致服务无法响应","u":"/blog/docs/线上问题/慢查询导致服务无法响应","b":["技术文档","线上问题"]},{"i":345,"t":"Shell编程","u":"/blog/docs/Linux/Shell编程","b":[]},{"i":438,"t":"Nginx学习","u":"/blog/docs/部署学习/nginx","b":["技术文档","部署学习"]},{"i":513,"t":"Kubernetes","u":"/blog/docs/CICD/Kubernetes","b":["技术文档","CICD"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[]],["t/2",[0,1.782]],["t/4",[0,1.782]],["t/6",[1,2.951]],["t/8",[2,2.951]],["t/16",[3,2.951]],["t/49",[4,1.3,5,2.153]],["t/67",[4,1.3,6,2.153]],["t/76",[4,1.782]],["t/95",[4,1.782]],["t/124",[7,2.951]],["t/158",[8,1.3,9,2.153]],["t/178",[8,1.023,10,1.694,11,1.694]],["t/228",[8,1.782]],["t/278",[8,1.782]],["t/290",[12,2.951]],["t/291",[13,2.951]],["t/318",[14,2.951]],["t/323",[0,1.782]],["t/338",[0,1.782]],["t/345",[15,2.951]],["t/438",[16,2.951]],["t/513",[17,2.951]]],"invertedIndex":[["",{"_index":0,"t":{"2":{"position":[[0,2]]},"4":{"position":[[0,4]]},"323":{"position":[[0,5]]},"338":{"position":[[0,11]]}}}],["admin",{"_index":9,"t":{"158":{"position":[[7,7]]}}}],["api",{"_index":5,"t":{"49":{"position":[[8,3]]}}}],["devop",{"_index":2,"t":{"8":{"position":[[0,10]]}}}],["django",{"_index":8,"t":{"158":{"position":[[0,6]]},"178":{"position":[[0,6]]},"228":{"position":[[0,12]]},"278":{"position":[[0,12]]}}}],["django集成任务队列celeri",{"_index":12,"t":{"290":{"position":[[0,18]]}}}],["docker",{"_index":3,"t":{"16":{"position":[[0,8]]}}}],["framework",{"_index":11,"t":{"178":{"position":[[12,11]]}}}],["index",{"_index":1,"t":{"6":{"position":[[0,5]]}}}],["instal",{"_index":6,"t":{"67":{"position":[[8,7]]}}}],["jenkin",{"_index":4,"t":{"49":{"position":[[0,7]]},"67":{"position":[[0,7]]},"76":{"position":[[0,11]]},"95":{"position":[[0,10]]}}}],["kubernet",{"_index":17,"t":{"513":{"position":[[0,10]]}}}],["linux",{"_index":13,"t":{"291":{"position":[[0,9]]}}}],["mac",{"_index":14,"t":{"318":{"position":[[0,6]]}}}],["nginx",{"_index":16,"t":{"438":{"position":[[0,7]]}}}],["pipelin",{"_index":7,"t":{"124":{"position":[[0,13]]}}}],["rest",{"_index":10,"t":{"178":{"position":[[7,4]]}}}],["shell",{"_index":15,"t":{"345":{"position":[[0,7]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":9,"t":"开发流程模型","u":"/blog/docs/CICD/DevOps学习笔记","h":"#开发流程模型","p":8},{"i":11,"t":"DevOps到底是什么","u":"/blog/docs/CICD/DevOps学习笔记","h":"#devops到底是什么","p":8},{"i":13,"t":"Jenkins","u":"/blog/docs/CICD/DevOps学习笔记","h":"#jenkins","p":8},{"i":14,"t":"jenkins插件","u":"/blog/docs/CICD/DevOps学习笔记","h":"#jenkins插件","p":8},{"i":17,"t":"1. docker命令","u":"/blog/docs/CICD/Docker笔记","h":"#1-docker命令","p":16},{"i":18,"t":"1.1 启动与停止","u":"/blog/docs/CICD/Docker笔记","h":"#11-启动与停止","p":16},{"i":20,"t":"1.2 镜像命令","u":"/blog/docs/CICD/Docker笔记","h":"#12-镜像命令","p":16},{"i":22,"t":"1.3 容器命令","u":"/blog/docs/CICD/Docker笔记","h":"#13-容器命令","p":16},{"i":24,"t":"1.4 日志命令","u":"/blog/docs/CICD/Docker笔记","h":"#14-日志命令","p":16},{"i":26,"t":"1.99 DockerFile","u":"/blog/docs/CICD/Docker笔记","h":"#199-dockerfile","p":16},{"i":28,"t":"2. DockerFile","u":"/blog/docs/CICD/Docker笔记","h":"#2-dockerfile","p":16},{"i":29,"t":"2.1 build 命令","u":"/blog/docs/CICD/Docker笔记","h":"#21-build-命令","p":16},{"i":31,"t":"2.2 镜像构建上下文","u":"/blog/docs/CICD/Docker笔记","h":"#22-镜像构建上下文","p":16},{"i":33,"t":"2.3 Docker指令","u":"/blog/docs/CICD/Docker笔记","h":"#23-docker指令","p":16},{"i":35,"t":"3. 数据卷","u":"/blog/docs/CICD/Docker笔记","h":"#3-数据卷","p":16},{"i":37,"t":"3.1 常用命令","u":"/blog/docs/CICD/Docker笔记","h":"#31-常用命令","p":16},{"i":39,"t":"3.2 使用数据卷的最佳场景","u":"/blog/docs/CICD/Docker笔记","h":"#32-使用数据卷的最佳场景","p":16},{"i":41,"t":"3.3 使用 mount 语法挂载数据卷","u":"/blog/docs/CICD/Docker笔记","h":"#33-使用-mount-语法挂载数据卷","p":16},{"i":43,"t":"3.4 数据的覆盖问题","u":"/blog/docs/CICD/Docker笔记","h":"#34-数据的覆盖问题","p":16},{"i":45,"t":"3.5 在 Dockerfile 中添加数据卷","u":"/blog/docs/CICD/Docker笔记","h":"#35-在-dockerfile-中添加数据卷","p":16},{"i":47,"t":"附录","u":"/blog/docs/CICD/Docker笔记","h":"#附录","p":16},{"i":51,"t":"API类型","u":"/blog/docs/CICD/jenkins-api","h":"#api类型","p":49},{"i":53,"t":"接口列表","u":"/blog/docs/CICD/jenkins-api","h":"#接口列表","p":49},{"i":55,"t":"首页","u":"/blog/docs/CICD/jenkins-api","h":"#首页","p":49},{"i":57,"t":"任务","u":"/blog/docs/CICD/jenkins-api","h":"#任务","p":49},{"i":59,"t":"节点","u":"/blog/docs/CICD/jenkins-api","h":"#节点","p":49},{"i":61,"t":"队列","u":"/blog/docs/CICD/jenkins-api","h":"#队列","p":49},{"i":63,"t":"Pipeline","u":"/blog/docs/CICD/jenkins-api","h":"#pipeline","p":49},{"i":65,"t":"参考","u":"/blog/docs/CICD/jenkins-api","h":"#参考","p":49},{"i":69,"t":"Master","u":"/blog/docs/CICD/jenkins-install","h":"#master","p":67},{"i":70,"t":"前置依赖","u":"/blog/docs/CICD/jenkins-install","h":"#前置依赖","p":67},{"i":72,"t":"安装 Jenkins Server","u":"/blog/docs/CICD/jenkins-install","h":"#安装-jenkins-server","p":67},{"i":74,"t":"配置 Jenkins Server","u":"/blog/docs/CICD/jenkins-install","h":"#配置-jenkins-server","p":67},{"i":77,"t":"1. 运行源码","u":"/blog/docs/CICD/jenkins源码学习","h":"#1-运行源码","p":76},{"i":79,"t":"2. stapler框架","u":"/blog/docs/CICD/jenkins源码学习","h":"#2-stapler框架","p":76},{"i":80,"t":"2.1 stapler框架用法","u":"/blog/docs/CICD/jenkins源码学习","h":"#21-stapler框架用法","p":76},{"i":82,"t":"2.2 简单的Stapler框架的demo","u":"/blog/docs/CICD/jenkins源码学习","h":"#22-简单的stapler框架的demo","p":76},{"i":84,"t":"2.3 stapler常用注解","u":"/blog/docs/CICD/jenkins源码学习","h":"#23-stapler常用注解","p":76},{"i":86,"t":"3. jenkins核心注解和类","u":"/blog/docs/CICD/jenkins源码学习","h":"#3-jenkins核心注解和类","p":76},{"i":87,"t":"3.1 Jenkins 中常用的注解及其用法","u":"/blog/docs/CICD/jenkins源码学习","h":"#31-jenkins-中常用的注解及其用法","p":76},{"i":89,"t":"3.2 Jenkins 中核心类及其用法","u":"/blog/docs/CICD/jenkins源码学习","h":"#32-jenkins-中核心类及其用法","p":76},{"i":91,"t":"3.3  Describable接口和Descriptor类","u":"/blog/docs/CICD/jenkins源码学习","h":"#33--describable接口和descriptor类","p":76},{"i":93,"t":"参考","u":"/blog/docs/CICD/jenkins源码学习","h":"#参考","p":76},{"i":96,"t":"1. 介绍","u":"/blog/docs/CICD/share-library","h":"#1-介绍","p":95},{"i":98,"t":"2. 使用","u":"/blog/docs/CICD/share-library","h":"#2-使用","p":95},{"i":100,"t":"2.1 目录结构","u":"/blog/docs/CICD/share-library","h":"#21-目录结构","p":95},{"i":102,"t":"2.2 共享库内容","u":"/blog/docs/CICD/share-library","h":"#22-共享库内容","p":95},{"i":104,"t":"2.3 设置全局共享库","u":"/blog/docs/CICD/share-library","h":"#23-设置全局共享库","p":95},{"i":106,"t":"2.4 示例","u":"/blog/docs/CICD/share-library","h":"#24-示例","p":95},{"i":108,"t":"3. 步骤语法","u":"/blog/docs/CICD/share-library","h":"#3-步骤语法","p":95},{"i":109,"t":"3.1 内置变量","u":"/blog/docs/CICD/share-library","h":"#31-内置变量","p":95},{"i":111,"t":"3.2 常用类","u":"/blog/docs/CICD/share-library","h":"#32-常用类","p":95},{"i":113,"t":"3.3 引用第三方jar包","u":"/blog/docs/CICD/share-library","h":"#33-引用第三方jar包","p":95},{"i":115,"t":"3.4 执行groovy脚本","u":"/blog/docs/CICD/share-library","h":"#34-执行groovy脚本","p":95},{"i":117,"t":"4. 进程内的脚本批准","u":"/blog/docs/CICD/share-library","h":"#4-进程内的脚本批准","p":95},{"i":119,"t":"5. 常见问题","u":"/blog/docs/CICD/share-library","h":"#5-常见问题","p":95},{"i":120,"t":"5.1 NonCPS","u":"/blog/docs/CICD/share-library","h":"#51-noncps","p":95},{"i":122,"t":"99. 参考","u":"/blog/docs/CICD/share-library","h":"#99-参考","p":95},{"i":125,"t":"1. pipeline的组成","u":"/blog/docs/CICD/声明式pipeline语法","h":"#1-pipeline的组成","p":124},{"i":127,"t":"1.1 pipeline最简结构","u":"/blog/docs/CICD/声明式pipeline语法","h":"#11-pipeline最简结构","p":124},{"i":129,"t":"1.2 步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#12-步骤","p":124},{"i":131,"t":"1.3 post部分","u":"/blog/docs/CICD/声明式pipeline语法","h":"#13-post部分","p":124},{"i":133,"t":"2. pipeline指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#2-pipeline指令","p":124},{"i":134,"t":"2.1 pipeline支持的指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#21-pipeline支持的指令","p":124},{"i":136,"t":"2.2 options指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#22-options指令","p":124},{"i":138,"t":"2.3 when指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#23-when指令","p":124},{"i":140,"t":"2.4 parameters指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#24-parameters指令","p":124},{"i":142,"t":"2.5 environment指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#25-environment指令","p":124},{"i":144,"t":"2.6 tools指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#26-tools指令","p":124},{"i":145,"t":"2.7 triggers指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#27-triggers指令","p":124},{"i":146,"t":"3. pipeline内置基础步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#3-pipeline内置基础步骤","p":124},{"i":148,"t":"3.1 文件目录相关步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#31-文件目录相关步骤","p":124},{"i":150,"t":"3.2 制品相关步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#32-制品相关步骤","p":124},{"i":152,"t":"3.3 命令相关步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#33-命令相关步骤","p":124},{"i":154,"t":"3.4 其他命令步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#34-其他命令步骤","p":124},{"i":156,"t":"3.5 Ant风格路径表达式","u":"/blog/docs/CICD/声明式pipeline语法","h":"#35-ant风格路径表达式","p":124},{"i":159,"t":"1. 集成SimpleUi","u":"/blog/docs/Django/DjangoAdmin使用","h":"#1-集成simpleui","p":158},{"i":161,"t":"安装依赖","u":"/blog/docs/Django/DjangoAdmin使用","h":"#安装依赖","p":158},{"i":163,"t":"注册应用","u":"/blog/docs/Django/DjangoAdmin使用","h":"#注册应用","p":158},{"i":165,"t":"配置urls","u":"/blog/docs/Django/DjangoAdmin使用","h":"#配置urls","p":158},{"i":167,"t":"迁移数据库表","u":"/blog/docs/Django/DjangoAdmin使用","h":"#迁移数据库表","p":158},{"i":169,"t":"生产环境配置","u":"/blog/docs/Django/DjangoAdmin使用","h":"#生产环境配置","p":158},{"i":171,"t":"2. 配置admin","u":"/blog/docs/Django/DjangoAdmin使用","h":"#2-配置admin","p":158},{"i":172,"t":"常用模型配置","u":"/blog/docs/Django/DjangoAdmin使用","h":"#常用模型配置","p":158},{"i":174,"t":"配置用户admin","u":"/blog/docs/Django/DjangoAdmin使用","h":"#配置用户admin","p":158},{"i":176,"t":"多对多配置（无外键）","u":"/blog/docs/Django/DjangoAdmin使用","h":"#多对多配置无外键","p":158},{"i":179,"t":"1. 环境安装与配置","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#1-环境安装与配置","p":178},{"i":181,"t":"2. Serializer序列化器","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#2-serializer序列化器","p":178},{"i":183,"t":"2.1 定义Serializer","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#21-定义serializer","p":178},{"i":185,"t":"2.2 序列化使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#22-序列化使用","p":178},{"i":187,"t":"2.3 反序列化使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#23-反序列化使用","p":178},{"i":189,"t":"2.4 模型类序列化器ModelSerializer","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#24-模型类序列化器modelserializer","p":178},{"i":191,"t":"3. 视图","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#3-视图","p":178},{"i":192,"t":"3.1 Request 与 Response","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#31-request-与-response","p":178},{"i":194,"t":"3.2 视图概览","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#32-视图概览","p":178},{"i":196,"t":"3.3 视图说明","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#33-视图说明","p":178},{"i":198,"t":"3.4 视图集ViewSet","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#34-视图集viewset","p":178},{"i":200,"t":"4. 认证Authentication","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#4-认证authentication","p":178},{"i":202,"t":"5. 权限Permissions","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#5-权限permissions","p":178},{"i":204,"t":"使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#使用","p":178},{"i":206,"t":"提供的权限","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#提供的权限","p":178},{"i":208,"t":"举例","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#举例","p":178},{"i":210,"t":"自定义权限","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#自定义权限","p":178},{"i":212,"t":"6. 限流Throttling","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#6-限流throttling","p":178},{"i":214,"t":"使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#使用-1","p":178},{"i":216,"t":"可选限流类","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#可选限流类","p":178},{"i":218,"t":"实例","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#实例","p":178},{"i":220,"t":"7. 过滤Filtering","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#7-过滤filtering","p":178},{"i":222,"t":"8. 排序","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#8-排序","p":178},{"i":224,"t":"9. 分页Pagination","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#9-分页pagination","p":178},{"i":226,"t":"10. 异常处理 Exceptions","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#10-异常处理-exceptions","p":178},{"i":229,"t":"1. 快速入门","u":"/blog/docs/Django/Django基础学习笔记","h":"#1-快速入门","p":228},{"i":231,"t":"2. 项目结构","u":"/blog/docs/Django/Django基础学习笔记","h":"#2-项目结构","p":228},{"i":233,"t":"3. 路由配置","u":"/blog/docs/Django/Django基础学习笔记","h":"#3-路由配置","p":228},{"i":235,"t":"3.1 简单的示例","u":"/blog/docs/Django/Django基础学习笔记","h":"#31-简单的示例","p":228},{"i":237,"t":"3.2 路径转换器","u":"/blog/docs/Django/Django基础学习笔记","h":"#32-路径转换器","p":228},{"i":239,"t":"3.3 正则表达式路由","u":"/blog/docs/Django/Django基础学习笔记","h":"#33-正则表达式路由","p":228},{"i":241,"t":"3.4 包含app的URLconfs","u":"/blog/docs/Django/Django基础学习笔记","h":"#34-包含app的urlconfs","p":228},{"i":243,"t":"3.5 额外传参","u":"/blog/docs/Django/Django基础学习笔记","h":"#35-额外传参","p":228},{"i":245,"t":"3.6 命名 URL 模式¶","u":"/blog/docs/Django/Django基础学习笔记","h":"#36-命名-url-模式","p":228},{"i":246,"t":"4. 视图","u":"/blog/docs/Django/Django基础学习笔记","h":"#4-视图","p":228},{"i":248,"t":"视图装饰器¶","u":"/blog/docs/Django/Django基础学习笔记","h":"#视图装饰器","p":228},{"i":250,"t":"4. 模型层","u":"/blog/docs/Django/Django基础学习笔记","h":"#4-模型层","p":228},{"i":251,"t":"4.1 常见字段类型","u":"/blog/docs/Django/Django基础学习笔记","h":"#41-常见字段类型","p":228},{"i":253,"t":"4.2 字段的参数","u":"/blog/docs/Django/Django基础学习笔记","h":"#42-字段的参数","p":228},{"i":255,"t":"4.3 关联关系","u":"/blog/docs/Django/Django基础学习笔记","h":"#43-关联关系","p":228},{"i":257,"t":"4.4 元数据类Meta","u":"/blog/docs/Django/Django基础学习笔记","h":"#44-元数据类meta","p":228},{"i":259,"t":"4.5 事务","u":"/blog/docs/Django/Django基础学习笔记","h":"#45-事务","p":228},{"i":261,"t":"4.6 配置多数据库¶","u":"/blog/docs/Django/Django基础学习笔记","h":"#46-配置多数据库","p":228},{"i":263,"t":"4.7 查询","u":"/blog/docs/Django/Django基础学习笔记","h":"#47-查询","p":228},{"i":265,"t":"Django缓存","u":"/blog/docs/Django/Django基础学习笔记","h":"#django缓存","p":228},{"i":266,"t":"配置缓存","u":"/blog/docs/Django/Django基础学习笔记","h":"#配置缓存","p":228},{"i":268,"t":"缓存配置类型","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存配置类型","p":228},{"i":270,"t":"缓存配置参数","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存配置参数","p":228},{"i":272,"t":"缓存粒度","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存粒度","p":228},{"i":274,"t":"缓存API","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存api","p":228},{"i":276,"t":"附录","u":"/blog/docs/Django/Django基础学习笔记","h":"#附录","p":228},{"i":279,"t":"1. 规范目录结构理由","u":"/blog/docs/Django/django目录结构建议","h":"#1-规范目录结构理由","p":278},{"i":281,"t":"2. 问题描述","u":"/blog/docs/Django/django目录结构建议","h":"#2-问题描述","p":278},{"i":283,"t":"3. 解决问题（建议）","u":"/blog/docs/Django/django目录结构建议","h":"#3-解决问题建议","p":278},{"i":285,"t":"4. 移动后项目的改变","u":"/blog/docs/Django/django目录结构建议","h":"#4-移动后项目的改变","p":278},{"i":286,"t":"4.1 改变依赖路径","u":"/blog/docs/Django/django目录结构建议","h":"#41-改变依赖路径","p":278},{"i":288,"t":"4.2 已有项目的解决方案","u":"/blog/docs/Django/django目录结构建议","h":"#42-已有项目的解决方案","p":278},{"i":292,"t":"Linux常用命令","u":"/blog/docs/Linux/Linux学习笔记","h":"#linux常用命令","p":291},{"i":293,"t":"cp 命令","u":"/blog/docs/Linux/Linux学习笔记","h":"#cp-命令","p":291},{"i":295,"t":"grep","u":"/blog/docs/Linux/Linux学习笔记","h":"#grep","p":291},{"i":296,"t":"egrep","u":"/blog/docs/Linux/Linux学习笔记","h":"#egrep","p":291},{"i":297,"t":"sed","u":"/blog/docs/Linux/Linux学习笔记","h":"#sed","p":291},{"i":298,"t":"awk","u":"/blog/docs/Linux/Linux学习笔记","h":"#awk","p":291},{"i":299,"t":"参考","u":"/blog/docs/Linux/Linux学习笔记","h":"#参考","p":291},{"i":301,"t":"Linux常识","u":"/blog/docs/Linux/Linux学习笔记","h":"#linux常识","p":291},{"i":302,"t":"linux 输入输出重定向","u":"/blog/docs/Linux/Linux学习笔记","h":"#linux-输入输出重定向","p":291},{"i":304,"t":"&与nohup区别","u":"/blog/docs/Linux/Linux学习笔记","h":"#与nohup区别","p":291},{"i":306,"t":"Vim快捷键","u":"/blog/docs/Linux/Linux学习笔记","h":"#vim快捷键","p":291},{"i":308,"t":"命令模式","u":"/blog/docs/Linux/Linux学习笔记","h":"#命令模式","p":291},{"i":310,"t":"基础编辑，移动光标","u":"/blog/docs/Linux/Linux学习笔记","h":"#基础编辑移动光标","p":291},{"i":312,"t":"删除操作和重复操作","u":"/blog/docs/Linux/Linux学习笔记","h":"#删除操作和重复操作","p":291},{"i":314,"t":"复制 和 粘贴","u":"/blog/docs/Linux/Linux学习笔记","h":"#复制-和-粘贴","p":291},{"i":316,"t":"搜索","u":"/blog/docs/Linux/Linux学习笔记","h":"#搜索","p":291},{"i":319,"t":"键盘按键区别","u":"/blog/docs/Linux/Mac快捷键","h":"#键盘按键区别","p":318},{"i":321,"t":"光标操作","u":"/blog/docs/Linux/Mac快捷键","h":"#光标操作","p":318},{"i":324,"t":"1. 常见匹配模式","u":"/blog/docs/python/正则表达式","h":"#1-常见匹配模式","p":323},{"i":326,"t":"2. 常用正则表达式的方法","u":"/blog/docs/python/正则表达式","h":"#2-常用正则表达式的方法","p":323},{"i":327,"t":"2.1 re.match","u":"/blog/docs/python/正则表达式","h":"#21-rematch","p":323},{"i":329,"t":"2.2 re.search","u":"/blog/docs/python/正则表达式","h":"#22-research","p":323},{"i":331,"t":"2.3 re.findall","u":"/blog/docs/python/正则表达式","h":"#23-refindall","p":323},{"i":332,"t":"2.4 re.sub","u":"/blog/docs/python/正则表达式","h":"#24-resub","p":323},{"i":334,"t":"2.5 re.complie","u":"/blog/docs/python/正则表达式","h":"#25-recomplie","p":323},{"i":336,"t":"3. 参考","u":"/blog/docs/python/正则表达式","h":"#3-参考","p":323},{"i":339,"t":"服务表现","u":"/blog/docs/线上问题/慢查询导致服务无法响应","h":"#服务表现","p":338},{"i":341,"t":"问题排查流程","u":"/blog/docs/线上问题/慢查询导致服务无法响应","h":"#问题排查流程","p":338},{"i":343,"t":"问题原因","u":"/blog/docs/线上问题/慢查询导致服务无法响应","h":"#问题原因","p":338},{"i":346,"t":"1. 运行Shell脚本","u":"/blog/docs/Linux/Shell编程","h":"#1-运行shell脚本","p":345},{"i":348,"t":"2. 变量","u":"/blog/docs/Linux/Shell编程","h":"#2-变量","p":345},{"i":349,"t":"2.1 定义变量","u":"/blog/docs/Linux/Shell编程","h":"#21-定义变量","p":345},{"i":351,"t":"2.2 使用变量","u":"/blog/docs/Linux/Shell编程","h":"#22-使用变量","p":345},{"i":353,"t":"2.3 单引号和双引号的区别","u":"/blog/docs/Linux/Shell编程","h":"#23-单引号和双引号的区别","p":345},{"i":355,"t":"2.4 只读变量","u":"/blog/docs/Linux/Shell编程","h":"#24-只读变量","p":345},{"i":357,"t":"2.5 删除变量","u":"/blog/docs/Linux/Shell编程","h":"#25-删除变量","p":345},{"i":359,"t":"2.6 将Shell命令的结果赋值给变量","u":"/blog/docs/Linux/Shell编程","h":"#26-将shell命令的结果赋值给变量","p":345},{"i":361,"t":"2.7 变量作用域","u":"/blog/docs/Linux/Shell编程","h":"#27-变量作用域","p":345},{"i":363,"t":"2.8 标准输入变量","u":"/blog/docs/Linux/Shell编程","h":"#28-标准输入变量","p":345},{"i":365,"t":"3. 参数","u":"/blog/docs/Linux/Shell编程","h":"#3-参数","p":345},{"i":366,"t":"位置参数","u":"/blog/docs/Linux/Shell编程","h":"#位置参数","p":345},{"i":368,"t":"特殊参数","u":"/blog/docs/Linux/Shell编程","h":"#特殊参数","p":345},{"i":370,"t":"4. 字符串","u":"/blog/docs/Linux/Shell编程","h":"#4-字符串","p":345},{"i":371,"t":"字符串拼接","u":"/blog/docs/Linux/Shell编程","h":"#字符串拼接","p":345},{"i":373,"t":"字符串截取","u":"/blog/docs/Linux/Shell编程","h":"#字符串截取","p":345},{"i":375,"t":"获取字符串长度","u":"/blog/docs/Linux/Shell编程","h":"#获取字符串长度","p":345},{"i":377,"t":"5. 数组","u":"/blog/docs/Linux/Shell编程","h":"#5-数组","p":345},{"i":378,"t":"5.1 定义","u":"/blog/docs/Linux/Shell编程","h":"#51-定义","p":345},{"i":380,"t":"5.2 读取数组","u":"/blog/docs/Linux/Shell编程","h":"#52-读取数组","p":345},{"i":382,"t":"5.3 获取数组中的所有元素","u":"/blog/docs/Linux/Shell编程","h":"#53-获取数组中的所有元素","p":345},{"i":384,"t":"5.4 获取数组的长度","u":"/blog/docs/Linux/Shell编程","h":"#54-获取数组的长度","p":345},{"i":386,"t":"5.5 拼接数组","u":"/blog/docs/Linux/Shell编程","h":"#55-拼接数组","p":345},{"i":388,"t":"5.6 删除数组元素","u":"/blog/docs/Linux/Shell编程","h":"#56-删除数组元素","p":345},{"i":390,"t":"6. 运算符","u":"/blog/docs/Linux/Shell编程","h":"#6-运算符","p":345},{"i":391,"t":"6.1 算术运算符","u":"/blog/docs/Linux/Shell编程","h":"#61-算术运算符","p":345},{"i":393,"t":"6.2 关系运算符","u":"/blog/docs/Linux/Shell编程","h":"#62-关系运算符","p":345},{"i":395,"t":"6.3 布尔运算符","u":"/blog/docs/Linux/Shell编程","h":"#63-布尔运算符","p":345},{"i":397,"t":"6.4 逻辑运算符","u":"/blog/docs/Linux/Shell编程","h":"#64-逻辑运算符","p":345},{"i":399,"t":"6.5 字符串运算符","u":"/blog/docs/Linux/Shell编程","h":"#65-字符串运算符","p":345},{"i":401,"t":"6.6 文件测试运算符","u":"/blog/docs/Linux/Shell编程","h":"#66-文件测试运算符","p":345},{"i":403,"t":"6.7 表达式求值","u":"/blog/docs/Linux/Shell编程","h":"#67-表达式求值","p":345},{"i":405,"t":"7. 流程控制","u":"/blog/docs/Linux/Shell编程","h":"#7-流程控制","p":345},{"i":406,"t":"7.1 if语句","u":"/blog/docs/Linux/Shell编程","h":"#71-if语句","p":345},{"i":408,"t":"7.2 for 循环","u":"/blog/docs/Linux/Shell编程","h":"#72-for-循环","p":345},{"i":410,"t":"7.3 while 语句","u":"/blog/docs/Linux/Shell编程","h":"#73-while-语句","p":345},{"i":412,"t":"7.4 until 循环","u":"/blog/docs/Linux/Shell编程","h":"#74-until-循环","p":345},{"i":414,"t":"7.5 case ... esac","u":"/blog/docs/Linux/Shell编程","h":"#75-case--esac","p":345},{"i":416,"t":"8. Shell函数","u":"/blog/docs/Linux/Shell编程","h":"#8-shell函数","p":345},{"i":417,"t":"8.1 定义格式","u":"/blog/docs/Linux/Shell编程","h":"#81-定义格式","p":345},{"i":419,"t":"8.2 函数参数","u":"/blog/docs/Linux/Shell编程","h":"#82-函数参数","p":345},{"i":421,"t":"8.3 实例","u":"/blog/docs/Linux/Shell编程","h":"#83-实例","p":345},{"i":423,"t":"9. Shell 文件包含","u":"/blog/docs/Linux/Shell编程","h":"#9-shell-文件包含","p":345},{"i":425,"t":"10. Shell 中的 ()、(())、[]、[[]]、{}","u":"/blog/docs/Linux/Shell编程","h":"#10-shell-中的-","p":345},{"i":426,"t":"10.1 小括号，圆括号（）","u":"/blog/docs/Linux/Shell编程","h":"#101-小括号圆括号","p":345},{"i":428,"t":"10.2 中括号，方括号[]","u":"/blog/docs/Linux/Shell编程","h":"#102-中括号方括号","p":345},{"i":430,"t":"","u":"/blog/docs/Linux/Shell编程","h":"","p":345},{"i":431,"t":"10.3 大括号、花括号 {}","u":"/blog/docs/Linux/Shell编程","h":"#103-大括号花括号-","p":345},{"i":433,"t":"","u":"/blog/docs/Linux/Shell编程","h":"#-1","p":345},{"i":434,"t":"10.4 符号$后的括号","u":"/blog/docs/Linux/Shell编程","h":"#104-符号后的括号","p":345},{"i":436,"t":"10.5 使用","u":"/blog/docs/Linux/Shell编程","h":"#105-使用","p":345},{"i":440,"t":"1. 安装","u":"/blog/docs/部署学习/nginx","h":"#1-安装","p":438},{"i":441,"t":"yum安装","u":"/blog/docs/部署学习/nginx","h":"#yum安装","p":438},{"i":443,"t":"docker安装","u":"/blog/docs/部署学习/nginx","h":"#docker安装","p":438},{"i":445,"t":"2. Nginx 常用命令","u":"/blog/docs/部署学习/nginx","h":"#2-nginx-常用命令","p":438},{"i":447,"t":"3. Nginx 配置文件详解","u":"/blog/docs/部署学习/nginx","h":"#3-nginx-配置文件详解","p":438},{"i":448,"t":"3.1 主要结构","u":"/blog/docs/部署学习/nginx","h":"#31-主要结构","p":438},{"i":450,"t":"3.2 main 段核心参数","u":"/blog/docs/部署学习/nginx","h":"#32-main-段核心参数","p":438},{"i":452,"t":"3.3 events 段核心参数","u":"/blog/docs/部署学习/nginx","h":"#33-events-段核心参数","p":438},{"i":454,"t":"3.4 upstream","u":"/blog/docs/部署学习/nginx","h":"#34-upstream","p":438},{"i":456,"t":"3.5 server段核心参数","u":"/blog/docs/部署学习/nginx","h":"#35-server段核心参数","p":438},{"i":458,"t":"4. 变量","u":"/blog/docs/部署学习/nginx","h":"#4-变量","p":438},{"i":460,"t":"5. Nginx 应用核心概念","u":"/blog/docs/部署学习/nginx","h":"#5-nginx-应用核心概念","p":438},{"i":462,"t":"5.1 正向代理","u":"/blog/docs/部署学习/nginx","h":"#51-正向代理","p":438},{"i":464,"t":"5.2 反向代理","u":"/blog/docs/部署学习/nginx","h":"#52-反向代理","p":438},{"i":466,"t":"5.3 动静分离","u":"/blog/docs/部署学习/nginx","h":"#53-动静分离","p":438},{"i":468,"t":"5.4 负载均衡","u":"/blog/docs/部署学习/nginx","h":"#54-负载均衡","p":438},{"i":470,"t":"6. 配置缓存","u":"/blog/docs/部署学习/nginx","h":"#6-配置缓存","p":438},{"i":472,"t":"proxy_cache","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache","p":438},{"i":474,"t":"proxy_cache_path","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_path","p":438},{"i":476,"t":"proxy_cache_key","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_key","p":438},{"i":478,"t":"proxy_cache_valid","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_valid","p":438},{"i":480,"t":"proxy_no_cache","u":"/blog/docs/部署学习/nginx","h":"#proxy_no_cache","p":438},{"i":482,"t":"proxy_cache_bypass","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_bypass","p":438},{"i":484,"t":"upstream_cache_status 变量","u":"/blog/docs/部署学习/nginx","h":"#upstream_cache_status-变量","p":438},{"i":486,"t":"配置实例","u":"/blog/docs/部署学习/nginx","h":"#配置实例-1","p":438},{"i":488,"t":"7. 配置HTTPS","u":"/blog/docs/部署学习/nginx","h":"#7-配置https","p":438},{"i":490,"t":"HTTPS 工作流程","u":"/blog/docs/部署学习/nginx","h":"#https-工作流程","p":438},{"i":492,"t":"配置证书","u":"/blog/docs/部署学习/nginx","h":"#配置证书","p":438},{"i":494,"t":"8. Nginx 架构","u":"/blog/docs/部署学习/nginx","h":"#8-nginx-架构","p":438},{"i":495,"t":"进程结构","u":"/blog/docs/部署学习/nginx","h":"#进程结构","p":438},{"i":497,"t":"配置文件重载原理","u":"/blog/docs/部署学习/nginx","h":"#配置文件重载原理","p":438},{"i":499,"t":"Nginx 模块化管理机制","u":"/blog/docs/部署学习/nginx","h":"#nginx-模块化管理机制","p":438},{"i":501,"t":"9. Nginx的高可用","u":"/blog/docs/部署学习/nginx","h":"#9-nginx的高可用","p":438},{"i":503,"t":"Keepalived+重启脚本+双机热备搭建","u":"/blog/docs/部署学习/nginx","h":"#keepalived重启脚本双机热备搭建","p":438},{"i":505,"t":"Nginx高可用性测试","u":"/blog/docs/部署学习/nginx","h":"#nginx高可用性测试","p":438},{"i":507,"t":"10. nginx执行步骤","u":"/blog/docs/部署学习/nginx","h":"#10-nginx执行步骤","p":438},{"i":509,"t":"11. ngx_lua 运行指令","u":"/blog/docs/部署学习/nginx","h":"#11-ngx_lua-运行指令","p":438},{"i":511,"t":"参考","u":"/blog/docs/部署学习/nginx","h":"#参考","p":438},{"i":514,"t":"kubernetes详细教程","u":"/blog/docs/CICD/Kubernetes","h":"#kubernetes详细教程","p":513},{"i":515,"t":"1. Kubernetes介绍","u":"/blog/docs/CICD/Kubernetes","h":"#1-kubernetes介绍","p":513},{"i":517,"t":"2. kubernetes集群环境搭建","u":"/blog/docs/CICD/Kubernetes","h":"#2-kubernetes集群环境搭建","p":513},{"i":519,"t":"3. 资源管理","u":"/blog/docs/CICD/Kubernetes","h":"#3-资源管理","p":513},{"i":521,"t":"3.3.2 命令式对象配置","u":"/blog/docs/CICD/Kubernetes","h":"#332-命令式对象配置","p":513},{"i":523,"t":"3.3.3 声明式对象配置","u":"/blog/docs/CICD/Kubernetes","h":"#333-声明式对象配置","p":513},{"i":525,"t":"4. 实战入门","u":"/blog/docs/CICD/Kubernetes","h":"#4-实战入门","p":513},{"i":527,"t":"5. Pod详解","u":"/blog/docs/CICD/Kubernetes","h":"#5-pod详解","p":513},{"i":529,"t":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":531,"t":"查看pod状态 （运行失败）","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":533,"t":"查看Pod的详情","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":534,"t":"发现调度失败，提示node选择失败","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":536,"t":"修改文件，将values: [\"xxx\",\"yyy\"]------ [\"pro\",\"yyy\"]","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":538,"t":"再次启动","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":540,"t":"此时查看，发现调度成功，已经将pod调度到了node1上","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":542,"t":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":544,"t":"查看pod状态 （运行成功）","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":546,"t":"启动目标pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":548,"t":"查看pod状况","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":550,"t":"启动pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":552,"t":"查看pod状态，发现未运行","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":554,"t":"查看详细信息","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":556,"t":"接下来修改  values: [\"xxx\",\"yyy\"]-----values:[\"pro\",\"yyy\"]","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":557,"t":"意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":559,"t":"然后重新创建pod，查看效果","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":561,"t":"发现此时Pod运行正常","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":563,"t":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":565,"t":"查看pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":566,"t":"发现调度到了node2上","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":568,"t":"添加容忍之前的pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":570,"t":"添加容忍之后的pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":572,"t":"安装metrics-server","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":574,"t":"查看pod运行情况","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":576,"t":"使用kubectl top node 查看资源使用情况","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":578,"t":"至此,metrics-server安装完成","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":580,"t":"创建deployment","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":582,"t":"创建service","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":584,"t":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":586,"t":"创建hpa","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":588,"t":"查看hpa","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":590,"t":"7. Service详解","u":"/blog/docs/CICD/Kubernetes","h":"#7-service详解","p":513},{"i":592,"t":"创建","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":594,"t":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":596,"t":"创建","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":598,"t":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":600,"t":"查看详情","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":602,"t":"接下来,在本地电脑上配置host文件,解析上面的两个域名到192.168.109.100(master)上","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":603,"t":"然后,就可以分别访问tomcat.itheima.com:32240  和  nginx.itheima.com:32240 查看效果了","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":605,"t":"生成证书","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":607,"t":"创建密钥","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":609,"t":"创建","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":611,"t":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":613,"t":"查看详情","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":615,"t":"下面可以通过浏览器访问https://nginx.itheima.com:31335 和 https://tomcat.itheima.com:31335来查看了","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":617,"t":"创建 pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":619,"t":"查看pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":621,"t":"创建pvc","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":623,"t":"查看pvc","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":625,"t":"查看pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":627,"t":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":629,"t":"查看pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":631,"t":"查看pvc","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":633,"t":"查看pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":635,"t":"查看nfs中的文件存储","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":637,"t":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":639,"t":"查看pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":641,"t":"进入容器，查看secret信息，发现已经自动解码了","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":643,"t":"ClusterRole可以对集群范围内资源、跨namespaces的范围资源、非资源类型进行授权","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":645,"t":"ClusterRoleBinding在整个集群级别和所有namespaces将特定的subject与ClusterRole绑定，授予权限","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":647,"t":"虽然authorization-clusterrole是一个集群角色，但是因为使用了RoleBinding","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":648,"t":"所以heima只能读取dev命名空间中的资源","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":650,"t":"10. DashBoard","u":"/blog/docs/CICD/Kubernetes","h":"#10-dashboard","p":513}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/9",[0,0.602]],["t/11",[1,6.507]],["t/13",[2,4.57]],["t/14",[2,4.57]],["t/17",[3,3.069,4,4.258]],["t/18",[0,0.467,5,4.572]],["t/20",[0,0.467,6,4.572]],["t/22",[0,0.467,7,4.572]],["t/24",[0,0.467,8,5.049]],["t/26",[9,5.049,10,4.258]],["t/28",[10,4.258,11,3.069]],["t/29",[0,0.382,12,2.897,13,4.125]],["t/31",[0,0.467,14,3.546]],["t/33",[4,4.258,15,3.546]],["t/35",[0,0.467,16,3.147]],["t/37",[0,0.467,17,3.546]],["t/39",[0,0.467,18,3.546]],["t/41",[0,0.499,19,2.449,20,3.487]],["t/43",[0,0.467,21,3.68]],["t/45",[0,0.499,10,2.94,22,2.778]],["t/47",[0,0.602]],["t/51",[23,5.892]],["t/53",[0,0.602]],["t/55",[0,0.602]],["t/57",[0,0.602]],["t/59",[0,0.602]],["t/61",[0,0.602]],["t/63",[24,4.742]],["t/65",[0,0.602]],["t/69",[25,6.507]],["t/70",[0,0.602]],["t/72",[0,0.382,2,2.897,26,3.134]],["t/74",[0,0.382,2,2.897,26,3.134]],["t/77",[0,0.467,3,3.069]],["t/79",[11,3.069,27,4.258]],["t/80",[12,3.546,27,4.258]],["t/82",[14,3.546,28,5.049]],["t/84",[15,3.546,27,4.258]],["t/86",[2,3.546,16,3.147]],["t/87",[0,0.382,2,2.897,17,2.897]],["t/89",[0,0.382,2,2.897,18,2.897]],["t/91",[19,3.546,29,5.049]],["t/93",[0,0.602]],["t/96",[0,0.467,3,3.069]],["t/98",[0,0.467,11,3.069]],["t/100",[0,0.467,12,3.546]],["t/102",[0,0.467,14,3.546]],["t/104",[0,0.467,15,3.546]],["t/106",[0,0.467,30,3.836]],["t/108",[0,0.467,16,3.147]],["t/109",[0,0.467,17,3.546]],["t/111",[0,0.467,18,3.546]],["t/113",[19,3.546,31,5.049]],["t/115",[21,3.68,32,5.049]],["t/117",[0,0.467,33,3.429]],["t/119",[0,0.467,34,3.836]],["t/120",[35,4.258,36,5.049]],["t/122",[0,0.467,37,5.049]],["t/125",[3,3.069,24,3.68]],["t/127",[5,4.572,24,3.68]],["t/129",[0,0.467,6,4.572]],["t/131",[7,4.572,38,5.049]],["t/133",[11,3.069,24,3.68]],["t/134",[12,3.546,24,3.68]],["t/136",[14,3.546,39,5.049]],["t/138",[15,4.57]],["t/140",[30,3.836,40,5.049]],["t/142",[41,4.258,42,5.049]],["t/144",[43,4.572,44,5.049]],["t/145",[45,4.572,46,5.049]],["t/146",[16,3.147,24,3.68]],["t/148",[0,0.467,17,3.546]],["t/150",[0,0.467,18,3.546]],["t/152",[0,0.467,19,3.546]],["t/154",[0,0.467,21,3.68]],["t/156",[22,4.023,47,5.049]],["t/159",[3,3.069,48,5.049]],["t/161",[0,0.602]],["t/163",[0,0.602]],["t/165",[49,5.892]],["t/167",[0,0.602]],["t/169",[0,0.602]],["t/171",[11,3.069,50,4.572]],["t/172",[0,0.602]],["t/174",[50,5.892]],["t/176",[0,0.602]],["t/179",[0,0.467,3,3.069]],["t/181",[11,3.069,51,4.572]],["t/183",[12,3.546,51,4.572]],["t/185",[0,0.467,14,3.546]],["t/187",[0,0.467,15,3.546]],["t/189",[30,3.836,52,5.049]],["t/191",[0,0.467,16,3.147]],["t/192",[0,0.323,17,2.449,53,3.487,54,3.487]],["t/194",[0,0.467,18,3.546]],["t/196",[0,0.467,19,3.546]],["t/198",[21,3.68,55,5.049]],["t/200",[33,3.429,56,5.049]],["t/202",[34,3.836,57,5.049]],["t/204",[0,0.602]],["t/206",[0,0.602]],["t/208",[0,0.602]],["t/210",[0,0.602]],["t/212",[58,4.258,59,5.049]],["t/214",[0,0.602]],["t/216",[0,0.602]],["t/218",[0,0.602]],["t/220",[60,4.023,61,5.049]],["t/222",[0,0.467,62,4.258]],["t/224",[63,4.258,64,5.049]],["t/226",[0,0.382,65,3.287,66,4.125]],["t/229",[0,0.467,3,3.069]],["t/231",[0,0.467,11,3.069]],["t/233",[0,0.467,16,3.147]],["t/235",[0,0.467,17,3.546]],["t/237",[0,0.467,18,3.546]],["t/239",[0,0.467,19,3.546]],["t/241",[21,3.68,67,5.049]],["t/243",[0,0.467,22,4.023]],["t/245",[0,0.499,49,3.157,68,3.487]],["t/246",[0,0.467,33,3.429]],["t/248",[0,0.602]],["t/250",[0,0.467,33,3.429]],["t/251",[0,0.467,69,4.572]],["t/253",[0,0.467,70,4.572]],["t/255",[0,0.467,71,5.049]],["t/257",[72,5.049,73,5.049]],["t/259",[0,0.467,74,5.049]],["t/261",[0,0.467,75,5.049]],["t/263",[0,0.467,76,5.049]],["t/265",[77,6.507]],["t/266",[0,0.602]],["t/268",[0,0.602]],["t/270",[0,0.602]],["t/272",[0,0.602]],["t/274",[23,5.892]],["t/276",[0,0.602]],["t/279",[0,0.467,3,3.069]],["t/281",[0,0.467,11,3.069]],["t/283",[0,0.467,16,3.147]],["t/285",[0,0.467,33,3.429]],["t/286",[0,0.467,69,4.572]],["t/288",[0,0.467,70,4.572]],["t/292",[78,5.487]],["t/293",[0,0.467,79,5.049]],["t/295",[80,6.507]],["t/296",[81,6.507]],["t/297",[82,6.507]],["t/298",[83,6.507]],["t/299",[0,0.602]],["t/301",[78,5.487]],["t/302",[0,0.467,78,4.258]],["t/304",[84,6.507]],["t/306",[85,6.507]],["t/308",[0,0.602]],["t/310",[0,0.602]],["t/312",[0,0.602]],["t/314",[0,0.676]],["t/316",[0,0.602]],["t/319",[0,0.602]],["t/321",[0,0.602]],["t/324",[0,0.467,3,3.069]],["t/326",[0,0.467,11,3.069]],["t/327",[12,3.546,86,5.049]],["t/329",[14,3.546,87,5.049]],["t/331",[15,3.546,88,5.049]],["t/332",[30,3.836,89,5.049]],["t/334",[41,4.258,90,5.049]],["t/336",[0,0.467,16,3.147]],["t/339",[0,0.602]],["t/341",[0,0.602]],["t/343",[0,0.602]],["t/346",[3,3.069,91,3.836]],["t/348",[0,0.467,11,3.069]],["t/349",[0,0.467,12,3.546]],["t/351",[0,0.467,14,3.546]],["t/353",[0,0.467,15,3.546]],["t/355",[0,0.467,30,3.836]],["t/357",[0,0.467,41,4.258]],["t/359",[43,4.572,91,3.836]],["t/361",[0,0.467,45,4.572]],["t/363",[0,0.467,92,5.049]],["t/365",[0,0.467,16,3.147]],["t/366",[0,0.602]],["t/368",[0,0.602]],["t/370",[0,0.467,33,3.429]],["t/371",[0,0.602]],["t/373",[0,0.602]],["t/375",[0,0.602]],["t/377",[0,0.467,34,3.836]],["t/378",[0,0.467,35,4.258]],["t/380",[0,0.467,93,4.572]],["t/382",[0,0.467,94,4.572]],["t/384",[0,0.467,95,4.572]],["t/386",[0,0.467,96,5.049]],["t/388",[0,0.467,97,5.049]],["t/390",[0,0.467,58,4.258]],["t/391",[0,0.467,98,5.049]],["t/393",[0,0.467,99,5.049]],["t/395",[0,0.467,100,5.049]],["t/397",[0,0.467,101,5.049]],["t/399",[0,0.467,102,5.049]],["t/401",[0,0.467,103,5.049]],["t/403",[0,0.467,104,5.049]],["t/405",[0,0.467,60,4.023]],["t/406",[105,6.507]],["t/408",[0,0.467,106,5.049]],["t/410",[0,0.467,107,5.049]],["t/412",[0,0.382,108,4.125,109,4.125]],["t/414",[0,0.323,110,3.487,111,3.487,112,3.487]],["t/416",[62,4.258,91,3.836]],["t/417",[0,0.467,113,5.049]],["t/419",[0,0.467,114,5.049]],["t/421",[0,0.467,115,5.049]],["t/423",[0,0.382,63,3.479,91,3.134]],["t/425",[0,0.499,65,2.778,91,2.649]],["t/426",[0,0.467,116,5.049]],["t/428",[0,0.467,117,5.049]],["t/430",[]],["t/431",[0,0.567,118,4.125]],["t/433",[]],["t/434",[0,0.467,119,5.049]],["t/436",[0,0.467,120,5.049]],["t/440",[0,0.467,3,3.069]],["t/441",[121,6.507]],["t/443",[4,5.487]],["t/445",[0,0.382,11,2.507,122,2.801]],["t/447",[0,0.382,16,2.571,122,2.801]],["t/448",[0,0.467,17,3.546]],["t/450",[0,0.382,18,2.897,123,4.125]],["t/452",[0,0.382,19,2.897,124,4.125]],["t/454",[21,3.68,125,5.049]],["t/456",[22,4.023,26,3.836]],["t/458",[0,0.467,33,3.429]],["t/460",[0,0.382,34,3.134,122,2.801]],["t/462",[0,0.467,35,4.258]],["t/464",[0,0.467,93,4.572]],["t/466",[0,0.467,94,4.572]],["t/468",[0,0.467,95,4.572]],["t/470",[0,0.467,58,4.258]],["t/472",[126,6.507]],["t/474",[127,6.507]],["t/476",[128,6.507]],["t/478",[129,6.507]],["t/480",[130,6.507]],["t/482",[131,6.507]],["t/484",[0,0.467,132,5.049]],["t/486",[0,0.602]],["t/488",[60,4.023,133,4.572]],["t/490",[0,0.467,133,4.572]],["t/492",[0,0.602]],["t/494",[0,0.382,62,3.479,122,2.801]],["t/495",[0,0.602]],["t/497",[0,0.602]],["t/499",[0,0.467,122,3.429]],["t/501",[63,4.258,122,3.429]],["t/503",[134,6.507]],["t/505",[122,4.419]],["t/507",[65,4.023,122,3.429]],["t/509",[0,0.382,135,4.125,136,4.125]],["t/511",[0,0.602]],["t/514",[137,5.487]],["t/515",[3,3.069,137,4.258]],["t/517",[11,3.069,137,4.258]],["t/519",[0,0.467,16,3.147]],["t/521",[0,0.467,138,5.049]],["t/523",[0,0.467,139,5.049]],["t/525",[0,0.467,33,3.429]],["t/527",[34,3.836,140,2.562]],["t/529",[140,3.302]],["t/531",[0,0.467,140,2.562]],["t/533",[140,3.302]],["t/534",[141,5.892]],["t/536",[142,3.735,143,3.735,144,4.125]],["t/538",[0,0.602]],["t/540",[145,6.507]],["t/542",[140,3.302]],["t/544",[0,0.467,140,2.562]],["t/546",[140,3.302]],["t/548",[140,3.302]],["t/550",[140,3.302]],["t/552",[140,3.302]],["t/554",[0,0.602]],["t/556",[0,0.323,142,3.157,143,3.157,146,3.487]],["t/557",[147,6.507]],["t/559",[140,3.302]],["t/561",[140,3.302]],["t/563",[140,3.302]],["t/565",[140,3.302]],["t/566",[148,6.507]],["t/568",[140,3.302]],["t/570",[140,3.302]],["t/572",[26,3.836,149,4.572]],["t/574",[140,3.302]],["t/576",[0,0.323,141,3.157,150,3.487,151,3.487]],["t/578",[26,3.836,149,4.572]],["t/580",[152,6.507]],["t/582",[153,5.892]],["t/584",[0,0.602]],["t/586",[154,5.892]],["t/588",[154,5.892]],["t/590",[60,4.023,153,4.572]],["t/592",[0,0.602]],["t/594",[0,0.602]],["t/596",[0,0.602]],["t/598",[0,0.602]],["t/600",[0,0.602]],["t/602",[155,6.507]],["t/603",[0,0.499,156,3.487,157,3.487]],["t/605",[0,0.602]],["t/607",[0,0.602]],["t/609",[0,0.602]],["t/611",[0,0.602]],["t/613",[0,0.602]],["t/615",[0,0.382,158,4.125,159,4.125]],["t/617",[0,0.467,160,4.023]],["t/619",[160,5.185]],["t/621",[161,5.487]],["t/623",[161,5.487]],["t/625",[160,5.185]],["t/627",[140,3.302]],["t/629",[140,3.302]],["t/631",[161,5.487]],["t/633",[160,5.185]],["t/635",[162,6.507]],["t/637",[140,3.302]],["t/639",[140,3.302]],["t/641",[163,6.507]],["t/643",[164,6.507]],["t/645",[165,6.507]],["t/647",[166,5.049,167,5.049]],["t/648",[168,6.507]],["t/650",[65,4.023,169,5.049]]],"invertedIndex":[["",{"_index":0,"t":{"9":{"position":[[0,6]]},"18":{"position":[[4,5]]},"20":{"position":[[4,4]]},"22":{"position":[[4,4]]},"24":{"position":[[4,4]]},"29":{"position":[[10,2]]},"31":{"position":[[4,7]]},"35":{"position":[[3,3]]},"37":{"position":[[4,4]]},"39":{"position":[[4,10]]},"41":{"position":[[4,2],[13,7]]},"43":{"position":[[4,7]]},"45":{"position":[[4,1],[17,6]]},"47":{"position":[[0,2]]},"53":{"position":[[0,4]]},"55":{"position":[[0,2]]},"57":{"position":[[0,2]]},"59":{"position":[[0,2]]},"61":{"position":[[0,2]]},"65":{"position":[[0,2]]},"70":{"position":[[0,4]]},"72":{"position":[[0,2]]},"74":{"position":[[0,2]]},"77":{"position":[[3,4]]},"87":{"position":[[12,10]]},"89":{"position":[[12,8]]},"93":{"position":[[0,2]]},"96":{"position":[[3,2]]},"98":{"position":[[3,2]]},"100":{"position":[[4,4]]},"102":{"position":[[4,5]]},"104":{"position":[[4,7]]},"106":{"position":[[4,2]]},"108":{"position":[[3,4]]},"109":{"position":[[4,4]]},"111":{"position":[[4,3]]},"117":{"position":[[3,8]]},"119":{"position":[[3,4]]},"122":{"position":[[4,2]]},"129":{"position":[[4,2]]},"148":{"position":[[4,8]]},"150":{"position":[[4,6]]},"152":{"position":[[4,6]]},"154":{"position":[[4,6]]},"161":{"position":[[0,4]]},"163":{"position":[[0,4]]},"167":{"position":[[0,6]]},"169":{"position":[[0,6]]},"172":{"position":[[0,6]]},"176":{"position":[[0,10]]},"179":{"position":[[3,7]]},"185":{"position":[[4,5]]},"187":{"position":[[4,6]]},"191":{"position":[[3,2]]},"192":{"position":[[12,1]]},"194":{"position":[[4,4]]},"196":{"position":[[4,4]]},"204":{"position":[[0,2]]},"206":{"position":[[0,5]]},"208":{"position":[[0,2]]},"210":{"position":[[0,5]]},"214":{"position":[[0,2]]},"216":{"position":[[0,5]]},"218":{"position":[[0,2]]},"222":{"position":[[3,2]]},"226":{"position":[[4,4]]},"229":{"position":[[3,4]]},"231":{"position":[[3,4]]},"233":{"position":[[3,4]]},"235":{"position":[[4,5]]},"237":{"position":[[4,5]]},"239":{"position":[[4,7]]},"243":{"position":[[4,4]]},"245":{"position":[[4,2],[11,3]]},"246":{"position":[[3,2]]},"248":{"position":[[0,6]]},"250":{"position":[[3,3]]},"251":{"position":[[4,6]]},"253":{"position":[[4,5]]},"255":{"position":[[4,4]]},"259":{"position":[[4,2]]},"261":{"position":[[4,7]]},"263":{"position":[[4,2]]},"266":{"position":[[0,4]]},"268":{"position":[[0,6]]},"270":{"position":[[0,6]]},"272":{"position":[[0,4]]},"276":{"position":[[0,2]]},"279":{"position":[[3,8]]},"281":{"position":[[3,4]]},"283":{"position":[[3,8]]},"285":{"position":[[3,8]]},"286":{"position":[[4,6]]},"288":{"position":[[4,9]]},"293":{"position":[[3,2]]},"299":{"position":[[0,2]]},"302":{"position":[[6,7]]},"308":{"position":[[0,4]]},"310":{"position":[[0,9]]},"312":{"position":[[0,9]]},"314":{"position":[[0,2],[3,1],[5,2]]},"316":{"position":[[0,2]]},"319":{"position":[[0,6]]},"321":{"position":[[0,4]]},"324":{"position":[[3,6]]},"326":{"position":[[3,10]]},"336":{"position":[[3,2]]},"339":{"position":[[0,4]]},"341":{"position":[[0,6]]},"343":{"position":[[0,4]]},"348":{"position":[[3,2]]},"349":{"position":[[4,4]]},"351":{"position":[[4,4]]},"353":{"position":[[4,10]]},"355":{"position":[[4,4]]},"357":{"position":[[4,4]]},"361":{"position":[[4,5]]},"363":{"position":[[4,6]]},"365":{"position":[[3,2]]},"366":{"position":[[0,4]]},"368":{"position":[[0,4]]},"370":{"position":[[3,3]]},"371":{"position":[[0,5]]},"373":{"position":[[0,5]]},"375":{"position":[[0,7]]},"377":{"position":[[3,2]]},"378":{"position":[[4,2]]},"380":{"position":[[4,4]]},"382":{"position":[[4,10]]},"384":{"position":[[4,7]]},"386":{"position":[[4,4]]},"388":{"position":[[4,6]]},"390":{"position":[[3,3]]},"391":{"position":[[4,5]]},"393":{"position":[[4,5]]},"395":{"position":[[4,5]]},"397":{"position":[[4,5]]},"399":{"position":[[4,6]]},"401":{"position":[[4,7]]},"403":{"position":[[4,5]]},"405":{"position":[[3,4]]},"408":{"position":[[8,2]]},"410":{"position":[[10,2]]},"412":{"position":[[10,2]]},"414":{"position":[[9,3]]},"417":{"position":[[4,4]]},"419":{"position":[[4,4]]},"421":{"position":[[4,2]]},"423":{"position":[[9,4]]},"425":{"position":[[10,2],[13,18]]},"426":{"position":[[5,9]]},"428":{"position":[[5,9]]},"431":{"position":[[5,7],[13,2]]},"434":{"position":[[5,7]]},"436":{"position":[[5,2]]},"440":{"position":[[3,2]]},"445":{"position":[[9,4]]},"447":{"position":[[9,6]]},"448":{"position":[[4,4]]},"450":{"position":[[9,5]]},"452":{"position":[[11,5]]},"458":{"position":[[3,2]]},"460":{"position":[[9,6]]},"462":{"position":[[4,4]]},"464":{"position":[[4,4]]},"466":{"position":[[4,4]]},"468":{"position":[[4,4]]},"470":{"position":[[3,4]]},"484":{"position":[[22,2]]},"486":{"position":[[0,4]]},"490":{"position":[[6,4]]},"492":{"position":[[0,4]]},"494":{"position":[[9,2]]},"495":{"position":[[0,4]]},"497":{"position":[[0,8]]},"499":{"position":[[6,7]]},"509":{"position":[[12,4]]},"511":{"position":[[0,2]]},"519":{"position":[[3,4]]},"521":{"position":[[6,7]]},"523":{"position":[[6,7]]},"525":{"position":[[3,4]]},"531":{"position":[[8,6]]},"538":{"position":[[0,4]]},"544":{"position":[[8,6]]},"554":{"position":[[0,6]]},"556":{"position":[[0,5]]},"576":{"position":[[19,8]]},"584":{"position":[[0,2]]},"592":{"position":[[0,2]]},"594":{"position":[[0,2]]},"596":{"position":[[0,2]]},"598":{"position":[[0,2]]},"600":{"position":[[0,4]]},"603":{"position":[[36,1],[63,5]]},"605":{"position":[[0,4]]},"607":{"position":[[0,4]]},"609":{"position":[[0,2]]},"611":{"position":[[0,2]]},"613":{"position":[[0,4]]},"615":{"position":[[43,1]]},"617":{"position":[[0,2]]}}}],["1",{"_index":3,"t":{"17":{"position":[[0,2]]},"77":{"position":[[0,2]]},"96":{"position":[[0,2]]},"125":{"position":[[0,2]]},"159":{"position":[[0,2]]},"179":{"position":[[0,2]]},"229":{"position":[[0,2]]},"279":{"position":[[0,2]]},"324":{"position":[[0,2]]},"346":{"position":[[0,2]]},"440":{"position":[[0,2]]},"515":{"position":[[0,2]]}}}],["1.1",{"_index":5,"t":{"18":{"position":[[0,3]]},"127":{"position":[[0,3]]}}}],["1.2",{"_index":6,"t":{"20":{"position":[[0,3]]},"129":{"position":[[0,3]]}}}],["1.3",{"_index":7,"t":{"22":{"position":[[0,3]]},"131":{"position":[[0,3]]}}}],["1.4",{"_index":8,"t":{"24":{"position":[[0,3]]}}}],["1.99",{"_index":9,"t":{"26":{"position":[[0,4]]}}}],["10",{"_index":65,"t":{"226":{"position":[[0,3]]},"425":{"position":[[0,3]]},"507":{"position":[[0,3]]},"650":{"position":[[0,3]]}}}],["10.1",{"_index":116,"t":{"426":{"position":[[0,4]]}}}],["10.2",{"_index":117,"t":{"428":{"position":[[0,4]]}}}],["10.3",{"_index":118,"t":{"431":{"position":[[0,4]]}}}],["10.4",{"_index":119,"t":{"434":{"position":[[0,4]]}}}],["10.5",{"_index":120,"t":{"436":{"position":[[0,4]]}}}],["11",{"_index":135,"t":{"509":{"position":[[0,3]]}}}],["2",{"_index":11,"t":{"28":{"position":[[0,2]]},"79":{"position":[[0,2]]},"98":{"position":[[0,2]]},"133":{"position":[[0,2]]},"171":{"position":[[0,2]]},"181":{"position":[[0,2]]},"231":{"position":[[0,2]]},"281":{"position":[[0,2]]},"326":{"position":[[0,2]]},"348":{"position":[[0,2]]},"445":{"position":[[0,2]]},"517":{"position":[[0,2]]}}}],["2.1",{"_index":12,"t":{"29":{"position":[[0,3]]},"80":{"position":[[0,3]]},"100":{"position":[[0,3]]},"134":{"position":[[0,3]]},"183":{"position":[[0,3]]},"327":{"position":[[0,3]]},"349":{"position":[[0,3]]}}}],["2.2",{"_index":14,"t":{"31":{"position":[[0,3]]},"82":{"position":[[0,3]]},"102":{"position":[[0,3]]},"136":{"position":[[0,3]]},"185":{"position":[[0,3]]},"329":{"position":[[0,3]]},"351":{"position":[[0,3]]}}}],["2.3",{"_index":15,"t":{"33":{"position":[[0,3]]},"84":{"position":[[0,3]]},"104":{"position":[[0,3]]},"138":{"position":[[0,3]]},"187":{"position":[[0,3]]},"331":{"position":[[0,3]]},"353":{"position":[[0,3]]}}}],["2.4",{"_index":30,"t":{"106":{"position":[[0,3]]},"140":{"position":[[0,3]]},"189":{"position":[[0,3]]},"332":{"position":[[0,3]]},"355":{"position":[[0,3]]}}}],["2.5",{"_index":41,"t":{"142":{"position":[[0,3]]},"334":{"position":[[0,3]]},"357":{"position":[[0,3]]}}}],["2.6",{"_index":43,"t":{"144":{"position":[[0,3]]},"359":{"position":[[0,3]]}}}],["2.7",{"_index":45,"t":{"145":{"position":[[0,3]]},"361":{"position":[[0,3]]}}}],["2.8",{"_index":92,"t":{"363":{"position":[[0,3]]}}}],["3",{"_index":16,"t":{"35":{"position":[[0,2]]},"86":{"position":[[0,2]]},"108":{"position":[[0,2]]},"146":{"position":[[0,2]]},"191":{"position":[[0,2]]},"233":{"position":[[0,2]]},"283":{"position":[[0,2]]},"336":{"position":[[0,2]]},"365":{"position":[[0,2]]},"447":{"position":[[0,2]]},"519":{"position":[[0,2]]}}}],["3.1",{"_index":17,"t":{"37":{"position":[[0,3]]},"87":{"position":[[0,3]]},"109":{"position":[[0,3]]},"148":{"position":[[0,3]]},"192":{"position":[[0,3]]},"235":{"position":[[0,3]]},"448":{"position":[[0,3]]}}}],["3.2",{"_index":18,"t":{"39":{"position":[[0,3]]},"89":{"position":[[0,3]]},"111":{"position":[[0,3]]},"150":{"position":[[0,3]]},"194":{"position":[[0,3]]},"237":{"position":[[0,3]]},"450":{"position":[[0,3]]}}}],["3.3",{"_index":19,"t":{"41":{"position":[[0,3]]},"91":{"position":[[0,3]]},"113":{"position":[[0,3]]},"152":{"position":[[0,3]]},"196":{"position":[[0,3]]},"239":{"position":[[0,3]]},"452":{"position":[[0,3]]}}}],["3.3.2",{"_index":138,"t":{"521":{"position":[[0,5]]}}}],["3.3.3",{"_index":139,"t":{"523":{"position":[[0,5]]}}}],["3.4",{"_index":21,"t":{"43":{"position":[[0,3]]},"115":{"position":[[0,3]]},"154":{"position":[[0,3]]},"198":{"position":[[0,3]]},"241":{"position":[[0,3]]},"454":{"position":[[0,3]]}}}],["3.5",{"_index":22,"t":{"45":{"position":[[0,3]]},"156":{"position":[[0,3]]},"243":{"position":[[0,3]]},"456":{"position":[[0,3]]}}}],["3.6",{"_index":68,"t":{"245":{"position":[[0,3]]}}}],["4",{"_index":33,"t":{"117":{"position":[[0,2]]},"200":{"position":[[0,2]]},"246":{"position":[[0,2]]},"250":{"position":[[0,2]]},"285":{"position":[[0,2]]},"370":{"position":[[0,2]]},"458":{"position":[[0,2]]},"525":{"position":[[0,2]]}}}],["4.1",{"_index":69,"t":{"251":{"position":[[0,3]]},"286":{"position":[[0,3]]}}}],["4.2",{"_index":70,"t":{"253":{"position":[[0,3]]},"288":{"position":[[0,3]]}}}],["4.3",{"_index":71,"t":{"255":{"position":[[0,3]]}}}],["4.4",{"_index":72,"t":{"257":{"position":[[0,3]]}}}],["4.5",{"_index":74,"t":{"259":{"position":[[0,3]]}}}],["4.6",{"_index":75,"t":{"261":{"position":[[0,3]]}}}],["4.7",{"_index":76,"t":{"263":{"position":[[0,3]]}}}],["5",{"_index":34,"t":{"119":{"position":[[0,2]]},"202":{"position":[[0,2]]},"377":{"position":[[0,2]]},"460":{"position":[[0,2]]},"527":{"position":[[0,2]]}}}],["5.1",{"_index":35,"t":{"120":{"position":[[0,3]]},"378":{"position":[[0,3]]},"462":{"position":[[0,3]]}}}],["5.2",{"_index":93,"t":{"380":{"position":[[0,3]]},"464":{"position":[[0,3]]}}}],["5.3",{"_index":94,"t":{"382":{"position":[[0,3]]},"466":{"position":[[0,3]]}}}],["5.4",{"_index":95,"t":{"384":{"position":[[0,3]]},"468":{"position":[[0,3]]}}}],["5.5",{"_index":96,"t":{"386":{"position":[[0,3]]}}}],["5.6",{"_index":97,"t":{"388":{"position":[[0,3]]}}}],["6",{"_index":58,"t":{"212":{"position":[[0,2]]},"390":{"position":[[0,2]]},"470":{"position":[[0,2]]}}}],["6.1",{"_index":98,"t":{"391":{"position":[[0,3]]}}}],["6.2",{"_index":99,"t":{"393":{"position":[[0,3]]}}}],["6.3",{"_index":100,"t":{"395":{"position":[[0,3]]}}}],["6.4",{"_index":101,"t":{"397":{"position":[[0,3]]}}}],["6.5",{"_index":102,"t":{"399":{"position":[[0,3]]}}}],["6.6",{"_index":103,"t":{"401":{"position":[[0,3]]}}}],["6.7",{"_index":104,"t":{"403":{"position":[[0,3]]}}}],["7",{"_index":60,"t":{"220":{"position":[[0,2]]},"405":{"position":[[0,2]]},"488":{"position":[[0,2]]},"590":{"position":[[0,2]]}}}],["7.1",{"_index":105,"t":{"406":{"position":[[0,3]]}}}],["7.2",{"_index":106,"t":{"408":{"position":[[0,3]]}}}],["7.3",{"_index":107,"t":{"410":{"position":[[0,3]]}}}],["7.4",{"_index":108,"t":{"412":{"position":[[0,3]]}}}],["7.5",{"_index":110,"t":{"414":{"position":[[0,3]]}}}],["8",{"_index":62,"t":{"222":{"position":[[0,2]]},"416":{"position":[[0,2]]},"494":{"position":[[0,2]]}}}],["8.1",{"_index":113,"t":{"417":{"position":[[0,3]]}}}],["8.2",{"_index":114,"t":{"419":{"position":[[0,3]]}}}],["8.3",{"_index":115,"t":{"421":{"position":[[0,3]]}}}],["9",{"_index":63,"t":{"224":{"position":[[0,2]]},"423":{"position":[[0,2]]},"501":{"position":[[0,2]]}}}],["99",{"_index":37,"t":{"122":{"position":[[0,3]]}}}],["admin",{"_index":50,"t":{"171":{"position":[[3,7]]},"174":{"position":[[0,9]]}}}],["ant",{"_index":47,"t":{"156":{"position":[[4,10]]}}}],["api",{"_index":23,"t":{"51":{"position":[[0,5]]},"274":{"position":[[0,5]]}}}],["app的urlconf",{"_index":67,"t":{"241":{"position":[[4,14]]}}}],["authent",{"_index":56,"t":{"200":{"position":[[3,16]]}}}],["author",{"_index":166,"t":{"647":{"position":[[0,15]]}}}],["awk",{"_index":83,"t":{"298":{"position":[[0,3]]}}}],["build",{"_index":13,"t":{"29":{"position":[[4,5]]}}}],["case",{"_index":111,"t":{"414":{"position":[[4,4]]}}}],["clusterrolebinding在整个集群级别和所有namespaces将特定的subject与clusterrol",{"_index":165,"t":{"645":{"position":[[0,68]]}}}],["clusterrole可以对集群范围内资源、跨namespac",{"_index":164,"t":{"643":{"position":[[0,48]]}}}],["clusterrole是一个集群角色，但是因为使用了rolebind",{"_index":167,"t":{"647":{"position":[[16,37]]}}}],["cp",{"_index":79,"t":{"293":{"position":[[0,2]]}}}],["dashboard",{"_index":169,"t":{"650":{"position":[[4,9]]}}}],["deploy",{"_index":152,"t":{"580":{"position":[[0,12]]}}}],["describable接口和descriptor",{"_index":29,"t":{"91":{"position":[[5,25]]}}}],["devop",{"_index":1,"t":{"11":{"position":[[0,11]]}}}],["django",{"_index":77,"t":{"265":{"position":[[0,8]]}}}],["docker",{"_index":4,"t":{"17":{"position":[[3,8]]},"33":{"position":[[4,8]]},"443":{"position":[[0,8]]}}}],["dockerfil",{"_index":10,"t":{"26":{"position":[[5,10]]},"28":{"position":[[3,10]]},"45":{"position":[[6,10]]}}}],["egrep",{"_index":81,"t":{"296":{"position":[[0,5]]}}}],["environ",{"_index":42,"t":{"142":{"position":[[4,13]]}}}],["esac",{"_index":112,"t":{"414":{"position":[[13,4]]}}}],["event",{"_index":124,"t":{"452":{"position":[[4,6]]}}}],["except",{"_index":66,"t":{"226":{"position":[[9,10]]}}}],["filter",{"_index":61,"t":{"220":{"position":[[3,11]]}}}],["grep",{"_index":80,"t":{"295":{"position":[[0,4]]}}}],["groovi",{"_index":32,"t":{"115":{"position":[[4,10]]}}}],["heima只能读取dev",{"_index":168,"t":{"648":{"position":[[0,22]]}}}],["host文件,解析上面的两个域名到192.168.109.100(mast",{"_index":155,"t":{"602":{"position":[[0,53]]}}}],["hpa",{"_index":154,"t":{"586":{"position":[[0,5]]},"588":{"position":[[0,5]]}}}],["http",{"_index":133,"t":{"488":{"position":[[3,7]]},"490":{"position":[[0,5]]}}}],["https://nginx.itheima.com:31335",{"_index":158,"t":{"615":{"position":[[0,42]]}}}],["https://tomcat.itheima.com:31335",{"_index":159,"t":{"615":{"position":[[45,36]]}}}],["jar",{"_index":31,"t":{"113":{"position":[[4,9]]}}}],["jenkin",{"_index":2,"t":{"13":{"position":[[0,7]]},"14":{"position":[[0,9]]},"72":{"position":[[3,7]]},"74":{"position":[[3,7]]},"86":{"position":[[3,13]]},"87":{"position":[[4,7]]},"89":{"position":[[4,7]]}}}],["keepaliv",{"_index":134,"t":{"503":{"position":[[0,22]]}}}],["kubectl",{"_index":150,"t":{"576":{"position":[[0,9]]}}}],["kubernet",{"_index":137,"t":{"514":{"position":[[0,14]]},"515":{"position":[[3,12]]},"517":{"position":[[3,16]]}}}],["linux",{"_index":78,"t":{"292":{"position":[[0,9]]},"301":{"position":[[0,7]]},"302":{"position":[[0,5]]}}}],["main",{"_index":123,"t":{"450":{"position":[[4,4]]}}}],["master",{"_index":25,"t":{"69":{"position":[[0,6]]}}}],["meta",{"_index":73,"t":{"257":{"position":[[4,8]]}}}],["metric",{"_index":149,"t":{"572":{"position":[[0,9]]},"578":{"position":[[0,10]]}}}],["modelseri",{"_index":52,"t":{"189":{"position":[[4,22]]}}}],["mount",{"_index":20,"t":{"41":{"position":[[7,5]]}}}],["nf",{"_index":162,"t":{"635":{"position":[[0,11]]}}}],["nginx",{"_index":122,"t":{"445":{"position":[[3,5]]},"447":{"position":[[3,5]]},"460":{"position":[[3,5]]},"494":{"position":[[3,5]]},"499":{"position":[[0,5]]},"501":{"position":[[3,9]]},"505":{"position":[[0,11]]},"507":{"position":[[4,9]]}}}],["nginx.itheima.com:32240",{"_index":157,"t":{"603":{"position":[[39,23]]}}}],["ngx_lua",{"_index":136,"t":{"509":{"position":[[4,7]]}}}],["node",{"_index":141,"t":{"534":{"position":[[0,17]]},"576":{"position":[[14,4]]}}}],["node2",{"_index":148,"t":{"566":{"position":[[0,12]]}}}],["nohup",{"_index":84,"t":{"304":{"position":[[0,9]]}}}],["noncp",{"_index":36,"t":{"120":{"position":[[4,6]]}}}],["option",{"_index":39,"t":{"136":{"position":[[4,9]]}}}],["pagin",{"_index":64,"t":{"224":{"position":[[3,12]]}}}],["paramet",{"_index":40,"t":{"140":{"position":[[4,12]]}}}],["permiss",{"_index":57,"t":{"202":{"position":[[3,13]]}}}],["pipelin",{"_index":24,"t":{"63":{"position":[[0,8]]},"125":{"position":[[3,11]]},"127":{"position":[[4,12]]},"133":{"position":[[3,10]]},"134":{"position":[[4,13]]},"146":{"position":[[3,14]]}}}],["pod",{"_index":140,"t":{"527":{"position":[[3,5]]},"529":{"position":[[0,5]]},"531":{"position":[[0,7]]},"533":{"position":[[0,8]]},"542":{"position":[[0,5]]},"544":{"position":[[0,7]]},"546":{"position":[[0,7]]},"548":{"position":[[0,7]]},"550":{"position":[[0,5]]},"552":{"position":[[0,13]]},"559":{"position":[[0,14]]},"561":{"position":[[0,11]]},"563":{"position":[[0,5]]},"565":{"position":[[0,5]]},"568":{"position":[[0,10]]},"570":{"position":[[0,10]]},"574":{"position":[[0,9]]},"627":{"position":[[0,5]]},"629":{"position":[[0,5]]},"637":{"position":[[0,5]]},"639":{"position":[[0,5]]}}}],["pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一nod",{"_index":147,"t":{"557":{"position":[[0,52]]}}}],["pod调度到了node1",{"_index":145,"t":{"540":{"position":[[0,28]]}}}],["post",{"_index":38,"t":{"131":{"position":[[4,6]]}}}],["pro\",\"yyi",{"_index":144,"t":{"536":{"position":[[34,13]]}}}],["proxy_cach",{"_index":126,"t":{"472":{"position":[[0,11]]}}}],["proxy_cache_bypass",{"_index":131,"t":{"482":{"position":[[0,18]]}}}],["proxy_cache_key",{"_index":128,"t":{"476":{"position":[[0,15]]}}}],["proxy_cache_path",{"_index":127,"t":{"474":{"position":[[0,16]]}}}],["proxy_cache_valid",{"_index":129,"t":{"478":{"position":[[0,17]]}}}],["proxy_no_cach",{"_index":130,"t":{"480":{"position":[[0,14]]}}}],["pv",{"_index":160,"t":{"617":{"position":[[3,2]]},"619":{"position":[[0,4]]},"625":{"position":[[0,4]]},"633":{"position":[[0,4]]}}}],["pvc",{"_index":161,"t":{"621":{"position":[[0,5]]},"623":{"position":[[0,5]]},"631":{"position":[[0,5]]}}}],["re.compli",{"_index":90,"t":{"334":{"position":[[4,10]]}}}],["re.findal",{"_index":88,"t":{"331":{"position":[[4,10]]}}}],["re.match",{"_index":86,"t":{"327":{"position":[[4,8]]}}}],["re.search",{"_index":87,"t":{"329":{"position":[[4,9]]}}}],["re.sub",{"_index":89,"t":{"332":{"position":[[4,6]]}}}],["request",{"_index":53,"t":{"192":{"position":[[4,7]]}}}],["respons",{"_index":54,"t":{"192":{"position":[[14,8]]}}}],["secret",{"_index":163,"t":{"641":{"position":[[0,25]]}}}],["sed",{"_index":82,"t":{"297":{"position":[[0,3]]}}}],["serial",{"_index":51,"t":{"181":{"position":[[3,14]]},"183":{"position":[[4,12]]}}}],["server",{"_index":26,"t":{"72":{"position":[[11,6]]},"74":{"position":[[11,6]]},"456":{"position":[[4,11]]},"572":{"position":[[10,6]]},"578":{"position":[[11,10]]}}}],["servic",{"_index":153,"t":{"582":{"position":[[0,9]]},"590":{"position":[[3,9]]}}}],["shell",{"_index":91,"t":{"346":{"position":[[3,9]]},"359":{"position":[[4,16]]},"416":{"position":[[3,7]]},"423":{"position":[[3,5]]},"425":{"position":[[4,5]]}}}],["simpleui",{"_index":48,"t":{"159":{"position":[[3,10]]}}}],["stapler",{"_index":27,"t":{"79":{"position":[[3,9]]},"80":{"position":[[4,11]]},"84":{"position":[[4,11]]}}}],["stapler框架的demo",{"_index":28,"t":{"82":{"position":[[4,17]]}}}],["throttl",{"_index":59,"t":{"212":{"position":[[3,12]]}}}],["tomcat.itheima.com:32240",{"_index":156,"t":{"603":{"position":[[0,34]]}}}],["tool",{"_index":44,"t":{"144":{"position":[[4,7]]}}}],["top",{"_index":151,"t":{"576":{"position":[[10,3]]}}}],["trigger",{"_index":46,"t":{"145":{"position":[[4,10]]}}}],["until",{"_index":109,"t":{"412":{"position":[[4,5]]}}}],["upstream",{"_index":125,"t":{"454":{"position":[[4,8]]}}}],["upstream_cache_statu",{"_index":132,"t":{"484":{"position":[[0,21]]}}}],["url",{"_index":49,"t":{"165":{"position":[[0,6]]},"245":{"position":[[7,3]]}}}],["valu",{"_index":142,"t":{"536":{"position":[[0,13]]},"556":{"position":[[7,7]]}}}],["values:[\"pro\",\"yyi",{"_index":146,"t":{"556":{"position":[[33,20]]}}}],["viewset",{"_index":55,"t":{"198":{"position":[[4,10]]}}}],["vim",{"_index":85,"t":{"306":{"position":[[0,6]]}}}],["xxx\",\"yyi",{"_index":143,"t":{"536":{"position":[[14,13]]},"556":{"position":[[15,13]]}}}],["yum",{"_index":121,"t":{"441":{"position":[[0,5]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":3,"t":"早期黑历史 未完待续...","s":"面经","u":"/blog/blog/面经","h":"","p":2},{"i":5,"t":"记录学习、留住生活，尝试坚持写一点东西，让每天过的慢一点。","s":"技术文档","u":"/blog/docs/","h":"","p":4},{"i":7,"t":"CICD","s":"index","u":"/blog/docs/CICD/","h":"","p":6},{"i":10,"t":"瀑布模型 简而言之，就是等一个阶段所有工作完成之后，再进入下一个阶段。这种模型适合条件比较理想化（用户需求非常明确、开发时间非常充足）的项目。大家按部就班，轮流执行自己的职责即可。 敏捷开发 敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。","s":"开发流程模型","u":"/blog/docs/CICD/DevOps学习笔记","h":"#开发流程模型","p":8},{"i":12,"t":"DevOps这个词，其实就是Development和Operations两个词的组合。它的英文发音是 /de'vɒps/，类似于“迪沃普斯”。 DevOps的维基百科定义是这样的： DevOps是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（QA）部门之间的沟通、协作与整合。","s":"DevOps到底是什么","u":"/blog/docs/CICD/DevOps学习笔记","h":"#devops到底是什么","p":8},{"i":15,"t":"Localization: Chinese (Simplified) 汉化插件 Role-based Authorization Strategy 管理Jenkins用户权限 Credentials Binding 管理所有凭证 gitlab","s":"jenkins插件","u":"/blog/docs/CICD/DevOps学习笔记","h":"#jenkins插件","p":8},{"i":19,"t":"# 启动docker sudo service docker start # 停止docker sudo service docker stop # 重启docker sudo service docker restart # 修改配置后重启 Docker sudo systemctl daemon-reload sudo systemctl restart docker docker system df # 命令来便捷的查看镜像、容器、数据卷所占用的空间。 docker inspect 镜像名 # 获取镜像的详细信息，其中，包括创建者，各层的数字摘要等。 docker history 镜像名 # 镜像历史 查看镜像构建历史 # 不截断输出 --no-trunc","s":"1.1 启动与停止","u":"/blog/docs/CICD/Docker笔记","h":"#11-启动与停止","p":16},{"i":21,"t":"列出本机Docker上已经安装的镜像: docker images docker image ls 搜索Docker hub上面的镜像 # 普通搜索,以Tomcat为例 docker search tomcat # 搜索star大于50的镜像实例 docker search -s 50 tomcat 从Docker Hub上面下载镜像 # 以下载tomcat为例 docker pull tomcat[:version] 删除本地的某一个镜像 # 以删除tomcat为例 docker rmi tomcat[:version] # 通过镜像ID删除 docker rmi -f 镜像ID # 通过镜像ID删除多个 docker rmi -f 镜像名1:TAG 镜像名2:TAG # 删除全部 # docker images -qa : 获取所有镜像ID docker rmi -f $(docker images -qa) 镜像打包与运行 #打包一个我们自己的 tomcat docker commit -a bothin -m=\"package my tomcat\" 要打包的镜像ID bothin/tomcat:1.0 # -a : 作者名称 # -m : 打包信息 #启动我们自己打包生成的 tomcat docker run -it -p 7700:8080 bothin/tomcat:1.0 #这个表示docker容器在停止或服务器开机之后会自动重新启动 --restart=always docker run -d --restart=always --name demo -p 8080:8080 my/demo","s":"1.2 镜像命令","u":"/blog/docs/CICD/Docker笔记","h":"#12-镜像命令","p":16},{"i":23,"t":"启动容器 # 新建并进入容器,最后一个为本地容器的ID docker run -it --name=\"rivercentos001\" 9f38484d220f //参数 # 为容器启一个名称 -name=\"新容器名称\" # 后台运行容器,并返回容器ID,也就是启动守护士容器 -d # 以交互模式运行容器,通常与-t同时使用. -i # 为容器重新分配一个伪终端,通过与-i同时使用 -t # 随机端口映射 [大写P] -P # 端口映射 [小写P] -p # 数据卷 加参数 ro:容器内的目录只读,不可写 -v /宿主机绝对路径目录:/容器内目录[:ro] 镜像名 docker diff # 查看容器内部文件变化 查看当前正在运行的Docker 容器 docker ps # 参数 # 列出当前正在运行的以及历史上运行过的 -a # 显示最近创建的容器 -l # 显示最近创建的N个容器 -n # 静默模式,只显示容器编号 -q # 不截断输出 --no-trunc 退出容器 # 退出并停止 exit # 容器不停止退出 ctrl+P+Q 启动容器 docker start 容器ID或容器name #启动全部容器 docker start $(docker ps -qa) 重启容器 docker restart 容器ID或容器name 停止 docker stop 容器ID或容器name 强制停止 docker kill 容器ID或容器name 删除容器 # 删除已经停止的容器 docker rm 容器ID或容器name # 强制删除已经停止或正在运行的容器 docker rm -f 容器ID或容器name 一次性删除所有正在运行的容器 docker rm -f $(docker ps -qa) 重新进入容器 # 第一种方式 docker attach 容器ID或容器名称 # 第二种方式{隔山打牛式,在宿主机向容器发送命令并获取结果} docker exec -t 容器ID或容器名称 ls# 列出文件列表 # 交互 docker exec -it rivertomcat /bin/bash 从容器内拷贝文件到宿主机 docker cp 容器ID或容器名称:/文件路径与文件名 宿主机地址 #例：拷贝容器tomcat的aaa文件夹下的a.txt到宿主机的当前位置 docker cp tomcat:/aaa/a.txt .","s":"1.3 容器命令","u":"/blog/docs/CICD/Docker笔记","h":"#13-容器命令","p":16},{"i":25,"t":"docker logs -f -t --tail 10 容器ID或容器名称 # 加入的时间戳 -t # 跟随最新的日志打印 -f # 输出最后几行的日志 --tail 行数 # 启动一个centos,并且每两秒在Console输出一个Hello bothin docker run -d --name tomcat centos /bin/sh -c \"while true;do echo hello bothin;sleep 2;done\" # 查看最后10行的日志 docker logs -f -t --tail 10 river #查看容器内的进程 docker top 容器ID或容器名称","s":"1.4 日志命令","u":"/blog/docs/CICD/Docker笔记","h":"#14-日志命令","p":16},{"i":27,"t":"FROM 基础镜像,当前新镜像是基于哪个镜像的。 MAINTAINER 镜像维护者的姓名和邮箱地址。 RUN 容器构建时需要运行的命令。 EXPOSE 当前容器对外暴露出的端口。 WORKDIR 指定在创建容器后,终端默认登陆的进来工作目录,也不是运行并登录进来的当前目录位置。 ENV 用来构建镜像过程中设置环境变量。 ADD 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包。 COPY 类似ADD,但只是复制,不带解压压缩包的功能。 VOLUME 容器数据卷,用于数据保存和持久化工作。 CMD 指定一个容器启动时要运行的命令,DockerFile中可以有多个CMD指令,但只有最后一个会生效执行。 ENTRYPOINT 指定一个容器启动时要运行的命令 ENTRYPOINT的作用和CMD一样,都是在指定容器启动程序及参数 相当于CMD的升级版本,CMD只能执行一条命令,运行时如果加一些参数是不行的.但如果把CMD替换成ENTRYPOINT就可以在Run镜像的时候在尾部追回指令. 简单的说如果Run镜像的时候追回了命令,CMD会用追回的覆盖掉旧的,ENTRYPOINT会追回执行。 ONBUILD 当构建一个被继承的DockerFile时运行命令,父镜像在被子继承后父镜像的onbuild被触发。 # 构建自己的centos FROM centos MAINTAINER zzyy<zzyy167@126.com> ENV MYPATH /usr/local WORKDIR $MYPATH RUN yum -y install vim RUN yum -y install net-tools EXPOSE 80 CMD echo $MYPATH CMD echo \"success--------------ok\" CMD /bin/bash # 制作CMD版可以查询IP信息的容器 FROM centos RUN yum install -y curl CMD [ \"curl\", \"-s\", \"http://ip.cn\" ] # 构建自己的tomcat FROM centos MAINTAINER zzyy<zzyybs@126.com> #把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下 COPY c.txt /usr/local/cincontainer.txt #把java与tomcat添加到容器中 ADD jdk-8u171-linux-x64.tar.gz /usr/local/ ADD apache-tomcat-9.0.8.tar.gz /usr/local/ #安装vim编辑器 RUN yum -y install vim #设置工作访问时候的WORKDIR路径，登录落脚点 ENV MYPATH /usr/local WORKDIR $MYPATH #配置java与tomcat环境变量 ENV JAVA_HOME /usr/local/jdk1.8.0_171 ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8 ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8 ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin #容器运行时监听的端口 EXPOSE 8080 #启动时运行tomcat # ENTRYPOINT [\"/usr/local/apache-tomcat-9.0.8/bin/startup.sh\" ] # CMD [\"/usr/local/apache-tomcat-9.0.8/bin/catalina.sh\",\"run\"] CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out","s":"1.99 DockerFile","u":"/blog/docs/CICD/Docker笔记","h":"#199-dockerfile","p":16},{"i":30,"t":"使用了 docker build 命令进行镜像构建。其格式为： # 上下文路径可以是本地路径、远程仓库地址、给定的 tar 压缩包 docker build [选项] <上下文路径/URL/->","s":"2.1 build 命令","u":"/blog/docs/CICD/Docker笔记","h":"#21-build-命令","p":16},{"i":32,"t":"首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。 当我们进行镜像构建的时候，并非所有定制都会通过 RUN 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 COPY 指令、ADD 指令等。 而 docker build 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？ 这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。 如果在 Dockerfile 中这么写： COPY ./package.json /app/ 这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。 因此，COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 COPY ../package.json /app 或者 COPY /opt/xxxx /app 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。 现在就可以理解刚才的命令 docker build -t nginx:v3 . 中的这个 .，实际上是在指定上下文的目录，docker build 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。","s":"2.2 镜像构建上下文","u":"/blog/docs/CICD/Docker笔记","h":"#22-镜像构建上下文","p":16},{"i":34,"t":"2.3.1 COPY 复制文件​ 格式： COPY [--chown=<user>:<group>] <源路径>... <目标路径> COPY [--chown=<user>:<group>] [\"<源路径1>\",... \"<目标路径>\"] COPY 指令将从构建上下文目录中 <源路径> 的文件/目录复制到新的一层的镜像内的 <目标路径> 位置。 <源路径> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如： COPY hom* /mydir/ COPY hom?.txt /mydir/ <目标路径> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。 此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。在使用该指令的时候还可以加上 --chown=<user>:<group> 选项来改变文件的所属用户及所属组。 【注】：如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。 2.3.2 ADD 更高级的复制文件​ ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。 如果 <源路径> 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 <目标路径> 去。 在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。 在使用该指令的时候还可以加上 --chown=<user>:<group> 选项来改变文件的所属用户及所属组。 2.3.3 RUN 执行命令​ RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种： shell 格式：RUN <命令>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。 exec 格式：RUN [\"可执行文件\", \"参数1\", \"参数2\"]，这更像是函数调用中的格式。 多条命令尽量放到一起执行，Dockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首 # 进行注释的格式。 正确的写法应该是这样： FROM debian:stretch RUN set -x; buildDeps='gcc libc6-dev make wget' \\ && apt-get update \\ && apt-get install -y $buildDeps \\ && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\ && mkdir -p /usr/src/redis \\ && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\ && make -C /usr/src/redis \\ && make -C /usr/src/redis install \\ && rm -rf /var/lib/apt/lists/* \\ && rm redis.tar.gz \\ && rm -r /usr/src/redis \\ && apt-get purge -y --auto-remove $buildDeps 2.3.4 CMD 容器启动命令​ CMD 指令的格式和 RUN 相似，也是两种格式： shell 格式：CMD <命令> exec 格式：CMD [\"可执行文件\", \"参数1\", \"参数2\"...] 参数列表格式：CMD [\"参数1\", \"参数2\"...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。 CMD, ENTRYPOINT , HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。 Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的，在运行时可以指定新的命令来替代镜像设置中的这个默认命令。 在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 \"，而不要使用单引号。 如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如： CMD echo $HOME 在实际执行中，会将其变更为： CMD [ \"sh\", \"-c\", \"echo $HOME\" ] 2.3.5 ENTRYPOINT 入口点​ ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。 ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。 当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为： <ENTRYPOINT> \"<CMD>\" Exec格式时,ENTRYPOINT可以通过CMD提供额外参数,CMD的额外参数可以在容器启动时动态替换。在shell格式时ENTRYPOINT会忽略任何CMD或docker run提供的参数。 [root@server1 docker]# vim Dockerfile 文件编辑内容如下： FROM busybox ENTRYPOINT [\"/bin/echo\", \"hello\"] CMD [\"world\"] # 可以动态替换这部分 2.3.6 ENV 设置环境变量​ 格式有两种： ENV <key> <value> ENV <key1>=<value1> <key2>=<value2>... 这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。 # 设置多个环境变量 ENV VERSION=1.0 DEBUG=on \\ NAME=\"Happy Feet\" 2.3.7 ARG 构建参数​ 格式：ARG <参数名>[=<默认值>] 构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。 Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 docker build 中用 --build-arg <参数名>=<值> 来覆盖。 灵活的使用 ARG 指令，能够在不修改 Dockerfile 的情况下，构建出不同的镜像。 ARG 指令有生效范围，如果在 FROM 指令之前指定，那么只能用于 FROM 指令中。 # 只在 FROM 中生效 ARG DOCKER_USERNAME=library FROM ${DOCKER_USERNAME}/alpine # 要想在 FROM 之后使用，必须再次指定 ARG DOCKER_USERNAME=library RUN set -x ; echo ${DOCKER_USERNAME} 2.3.8 VOLUME 定义匿名卷​ 格式为： VOLUME [\"<路径1>\", \"<路径2>\"...] VOLUME <路径> 容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。 VOLUME /data 这里的 /data 目录就会在容器运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。 当然，运行容器时可以覆盖这个挂载设置。比如： $ docker run -d -v mydata:/data xxxx 在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。 3.3.9 EXPOSE 暴露端口​ 格式为 EXPOSE <端口1> [<端口2>...]。 EXPOSE 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。 要将 EXPOSE 和在运行时使用 -p <宿主端口>:<容器端口> 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。 3.3.10 WORKDIR 指定工作目录​ 格式为 WORKDIR <工作目录路径>。 使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。 在Dockerfile每一层镜像构建时都会重置回这个工作目录， 如果你的 WORKDIR 指令使用的相对路径，那么所切换的路径与之前的 WORKDIR 有关： WORKDIR /a WORKDIR b WORKDIR c RUN pwd RUN pwd 的工作目录为 /a/b/c。 3.3.11 USER 指定当前用户​ 格式：USER <用户名>[:<用户组>] USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。 注意，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。 RUN groupadd -r redis && useradd -r -g redis redis USER redis RUN [ \"redis-server\" ] 如果以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 su 或者 sudo，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 gosu。 # 建立 redis 用户，并使用 gosu 换另一个用户执行命令 RUN groupadd -r redis && useradd -r -g redis redis # 下载 gosu RUN wget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/1.12/gosu-amd64\" \\ && chmod +x /usr/local/bin/gosu \\ && gosu nobody true # 设置 CMD，并以另外的用户执行 CMD [ \"exec\", \"gosu\", \"redis\", \"redis-server\" ] 3.3.12 ONBUILD 为他人作嫁衣裳​ 格式：ONBUILD <其它指令>。 ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。 Dockerfile 中的其它指令都是为了定制当前镜像而准备的，唯有 ONBUILD 是为了帮助别人定制自己而准备的。 3.3.13 LABEL 为镜像添加元数据​ LABEL 指令用来给镜像以键值对的形式添加一些元数据（metadata）。 LABEL <key>=<value> <key>=<value> <key>=<value> ... 我们还可以用一些标签来申明镜像的作者、文档地址等： LABEL org.opencontainers.image.authors=\"yeasy\" LABEL org.opencontainers.image.documentation=\"https://yeasy.gitbooks.io\"","s":"2.3 Docker指令","u":"/blog/docs/CICD/Docker笔记","h":"#23-docker指令","p":16},{"i":36,"t":"数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性： 数据卷 可以在容器之间共享和重用 对 数据卷 的修改会立马生效 对 数据卷 的更新，不会影响镜像 数据卷 默认会一直存在，即使容器被删除","s":"3. 数据卷","u":"/blog/docs/CICD/Docker笔记","h":"#3-数据卷","p":16},{"i":38,"t":"docker 专门提供了 volume 子命令来操作数据卷： create 创建数据卷 inspect 显示数据卷的详细信息 ls 列出所有的数据卷 prune 删除所有未使用的 volumes，并且有 -f 选项 rm 删除一个或多个未使用的 volumes，并且有 -f 选项 # 创建数据卷 docker volume create my-vol # 查看所有的 数据卷 $ docker volume ls # 查看指定 数据卷 的信息 $ docker volume inspect my-vol","s":"3.1 常用命令","u":"/blog/docs/CICD/Docker笔记","h":"#31-常用命令","p":16},{"i":40,"t":"在多个容器之间共享数据，多个容器可以同时以只读或者读写的方式挂载同一个数据卷，从而共享数据卷中的数据。 当宿主机不能保证一定存在某个目录或一些固定路径的文件时，使用数据卷可以规避这种限制带来的问题。 当你想把容器中的数据存储在宿主机之外的地方时，比如远程主机上或云存储上。 当你需要把容器数据在不同的宿主机之间备份、恢复或迁移时，数据卷是很好的选择。","s":"3.2 使用数据卷的最佳场景","u":"/blog/docs/CICD/Docker笔记","h":"#32-使用数据卷的最佳场景","p":16},{"i":42,"t":"之前我们使用 --volume(-v) 选项来挂载数据卷，现在 docker 提供了更强大的 --mount 选项来管理数据卷。mount 选项可以通过逗号分隔的多个键值对一次提供多个配置项，因此 mount 选项可以提供比 volume 选项更详细的配置。使用 mount 选项的常用配置如下： type 指定挂载方式，我们这里用到的是 volume，其实还可以有 bind 和 tmpfs。 volume-driver 指定挂载数据卷的驱动程序，默认值是 local。 source 指定挂载的源，对于一个命名的数据卷，这里应该指定这个数据卷的名称。在使用时可以写 source，也可以简写为 src。 destination 指定挂载的数据在容器中的路径。在使用时可以写 destination，也可以简写为 dst 或 target。 readonly 指定挂载的数据为只读。 volume-opt 可以指定多次，用来提高更多的 mount 相关的配置。 $ docker volume create hello $ docker run -id --mount type=volume,source=hello,target=/world ubuntu /bin/bash 使用 volume driver 把数据存储到其它地方 除了默认的把数据卷中的数据存储在宿主机，docker 还允许我们通过指定 volume driver 的方式把数据卷中的数据存储在其它的地方，比如 Azrue Storge 或 AWS 的 S3。 简单起见，我们接下来的 demo 演示如何通过 vieux/sshfs 驱动把数据卷的存储在其它的主机上。 docker 默认是不安装 vieux/sshfs 插件的，我们可以通过下面的命令进行安装： $ docker plugin install --grant-all-permissions vieux/sshfs 然后通过 vieux/sshfs 驱动创建数据卷，并指定远程主机的登录用户名、密码和数据存放目录： docker volume create --driver vieux/sshfs \\ -o sshcmd=nick@10.32.2.134:/home/nick/sshvolume \\ -o password=yourpassword \\ mysshvolume 注意，请确保你指定的远程主机上的挂载点目录是存在的(demo 中是 /home/nick/sshvolume 目录)，否则在启动容器时会报错。 最后在启动容器时指定挂载这个数据卷： docker run -id \\ --name testcon \\ --mount type=volume,volume-driver=vieux/sshfs,source=mysshvolume,target=/world \\ ubuntu /bin/bash","s":"3.3 使用 mount 语法挂载数据卷","u":"/blog/docs/CICD/Docker笔记","h":"#33-使用-mount-语法挂载数据卷","p":16},{"i":44,"t":"如果挂载一个空的数据卷到容器中的一个非空目录中，那么这个目录下的文件会被复制到数据卷中。 如果挂载一个非空的数据卷到容器中的一个目录中，那么容器中的目录中会显示数据卷中的数据。如果原来容器中的目录中有数据，那么这些原始数据会被隐藏掉。 这两个规则都非常重要，灵活利用第一个规则可以帮助我们初始化数据卷中的内容。掌握第二个规则可以保证挂载数据卷后的数据总是你期望的结果。","s":"3.4 数据的覆盖问题","u":"/blog/docs/CICD/Docker笔记","h":"#34-数据的覆盖问题","p":16},{"i":46,"t":"在 Dockerfile 中我们可以使用 VOLUME 指令向容器添加数据卷： VOLUME /data 在使用 docker build 命令生成镜像并且以该镜像启动容器时会挂载一个数据卷到 /data 目录。根据我们已知的数据覆盖规则，如果镜像中存在 /data 目录，这个目录中的内容将全部被复制到宿主机中对应的目录中，并且根据容器中的文件设置合适的权限和所有者。 注意，VOLUME 指令不能挂载主机中指定的目录。这是为了保证 Dockerfile 的可一致性，因为不能保证所有的宿主机都有对应的目录。 在实际的使用中，这里还有一个陷阱需要大家注意：在 Dockerfile 中使用 VOLUME 指令之后的代码，如果尝试对这个数据卷进行修改，这些修改都不会生效！下面是一个这样的例子： FROM ubuntu RUN useradd nick VOLUME /data RUN touch /data/test.txt RUN chown -R nick:nick /data 通过这个 Dockerfile 创建镜像并启动容器后，该容器中存在用户 nick，并且能够看到 /data 目录挂载的数据卷。但是 /data 目录内并没有文件 test.txt，更别说 test.txt 文件的所有者属性了。要解释这个现象需要我们了解通过 Dockerfile 创建镜像的过程： Dockerfile 中除了 FROM 指令的每一行都是基于上一行生成的临时镜像运行一个容器，执行一条指令并执行类似 docker commit 的命令得到一个新的镜像。这条类似 docker commit 的命令不会对挂载的数据卷进行保存。 所以上面的 Dockerfile 最后两行执行时，都会在一个临时的容器上挂载 /data，并对这个临时的数据卷进行操作，但是这一行指令执行并提交后，这个临时的数据卷并没有被保存。因而我们最终通过镜像创建的容器所挂载的数据卷是没有被最后两条指令操作过的。我们姑且叫它 \"Dockerfile 中数据卷的初始化问题\"。 下面的写法可以解决 Dockerfile 中数据卷的初始化问题： FROM ubuntu RUN useradd nick RUN mkdir /data && touch /data/test.txt RUN chown -R nick:nick /data VOLUME /data 通过这个 Dockerfile 创建镜像并启动容器后，数据卷的初始化是符合预期的。这是由于在挂载数据卷时，/data 已经存在，/data 中的文件以及它们的权限和所有者设置会被复制到数据卷中。 还有另外一种方法可以解决 Dockerfile 中数据卷的初始化问题。就是利用 CMD 指令和 ENTRYPOINT 指令的执行特点：与 RUN 指令在镜像构建过程中执行不同，CMD 指令和 ENTRYPOINT 指令是在容器启动时执行。因此使用下面的 Dockerfile 也可以达到对数据卷的初始化目的： FROM ubuntu RUN useradd nick VOLUME /data CMD touch /data/test.txt && chown -R nick:nick /data && /bin/bash","s":"3.5 在 Dockerfile 中添加数据卷","u":"/blog/docs/CICD/Docker笔记","h":"#35-在-dockerfile-中添加数据卷","p":16},{"i":48,"t":"Docker —— 从入门到实践 Dockerfile 最佳实践文档 Dockerfie 官方文档：https://docs.docker.com/engine/reference/builder/ Dockerfile 最佳实践文档：https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ Docker 官方镜像 Dockerfile：https://github.com/docker-library/docs","s":"附录","u":"/blog/docs/CICD/Docker笔记","h":"#附录","p":16},{"i":50,"t":"关于 Jenkins REST api部分，主要参考官方文档和部分实践","s":"jenkins-api","u":"/blog/docs/CICD/jenkins-api","h":"","p":49},{"i":52,"t":"Jenkins 提供了三种风格的 API类型。 XML 即接口返回内容为 xml, eg：http://<JENKINS_HOST>/config.xml JSON 以及 JSONP 支持 接口返回内容格式还可以为 JSON, eg: http://<JENKINS_HOST>/api JSONP 的例子没有给，查了下似乎需要装个secure-requester-whitelist插件使生效 Python 通过 ast.literal_eval(urllib.urlopen(\"JENKINS_URL\").read()) 将远程输出解析成一个 Python对象 感觉第三种效率不是很高，目前看到的封装库也都是对前两种 API的封装","s":"API类型","u":"/blog/docs/CICD/jenkins-api","h":"#api类型","p":49},{"i":54,"t":"官方文档没有给出所有接口的一个列表，需要开发者自己分页面去寻找…… 这里以 JSON接口为主，xml接口为辅总结所有接口。 接口前缀默认为 http://<JENKINS_HOST>","s":"接口列表","u":"/blog/docs/CICD/jenkins-api","h":"#接口列表","p":49},{"i":56,"t":"通过 http://<JENKINS_HOST>/api页面查看 获取首页目录信息​ GET /api/json","s":"首页","u":"/blog/docs/CICD/jenkins-api","h":"#首页","p":49},{"i":58,"t":"通过 http://<JENKINS_HOST>/job/JobName/api页面查看 创建任务​ POST /createItem?name=<JOBNAME> header: Content-Type: application/xml body: config.xml 复制任务​ POST /createItem?name=<NEWJOBNAME>&mode=copy&from=<FROMJOBNAME> 获取/更新任务配置​ POST /job/<JOBNAME>/config.xml POST /job/<JOBNAME>/config.xml, 参数为 更新后的cofig.xml 获取多分支任务列表​ GET /job/<JOBNAME>/api/json 删除任务​ POST /job/<JOBNAME>/doDelete 获取当前任务|分支任务所有构建​ 默认包含最近 50次构建 POST /job/<JOBNAME>/job/<BranchName>/api/json 更新任务描述​ POST /job/<JOBNAME>/job/<BranchName>/description 参数类型为form-data, description=xxx 构建任务​ 无参数构建 POST /job/<JOBNAME>/job/<BranchName>/build 带参数构建为： POST /job/<JOBNAME>/job/<BranchName>/buildWithParameters, 参数形式为 form data","s":"任务","u":"/blog/docs/CICD/jenkins-api","h":"#任务","p":49},{"i":60,"t":"通过 http://local.jenkins.com/computer/api及 http://local.jenkins.com/computer/<DisplayName>/api 页面查看 获取所有节点信息​ GET /computer/api/json 获取特定节点信息​ GET /computer/<DisplayName>/api/json 获取/更新节点配置信息​ GET /computer/<DisplayName>/config.xml POST /computer/<DisplayName>/config.xml, 参数为 更新后的config.xml","s":"节点","u":"/blog/docs/CICD/jenkins-api","h":"#节点","p":49},{"i":62,"t":"通过 http://<JENKINS_HOST>/queue/api/页面查看 获取所有排队任务​ GET /queue/api/json 可以通过 tree参数进行数组过滤，eg： GET /queue/api/json?tree=items[actions[causes[shortDescription]]] 可以对数组结果进行数量筛选 eg: tree=arrs[attr1, attr2]{0,10} {M,N}: From the M-th element (inclusive) to the N-th element (exclusive). {M,}: From the M-th element (inclusive) to the end. {,N}: From the first element (inclusive) to the N-th element (exclusive). The same as {0,N}. {N}: Just retrieve the N-th element. The same as {N,N+1}.","s":"队列","u":"/blog/docs/CICD/jenkins-api","h":"#队列","p":49},{"i":64,"t":"Pipeline REST api","s":"Pipeline","u":"/blog/docs/CICD/jenkins-api","h":"#pipeline","p":49},{"i":66,"t":"python-jenkins","s":"参考","u":"/blog/docs/CICD/jenkins-api","h":"#参考","p":49},{"i":68,"t":"Jenkins 环境搭建","s":"jenkins-install","u":"/blog/docs/CICD/jenkins-install","h":"","p":67},{"i":71,"t":"安装 Java java 8 或 java 11 准备外网权限或代理","s":"前置依赖","u":"/blog/docs/CICD/jenkins-install","h":"#前置依赖","p":67},{"i":73,"t":"参考官网, 有多种安装方式 这里使用的是 war-files的安装方式，原因是方便迁移及升级可控 具体操作，以centos7 为例说明如下 设置工作目录的环境变量 JENKINS_HOME export JENKINS_HOME=/data/home/jenkins/.jenkins 下载稳定版本 jenkins.war包, 放在 $JENKINS_HOME 目录下 写入配置文件到 /etc/sysconfig/jenkins 如下： #jenkins system configuration JENKINS_HOME=/data/jenkins_home/.jenkins # 工作目录，可自定义 JENKINS_USER=root # 启动用户 JENKINS_LOG=/data/jenkins_home/jenkins.log # 日志文件，可自定义 JENKINS_JAVA=/usr/bin/java # 安装的 java路径 JENKINS_JAVAOPTS=\"-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai -Duser.timezone=Asia/Shanghai -Dfile.encoding=UTF-8 -Djava.awt.headless=true -Dhudson.model.DirectoryBrowserSupport.CSP= \" JENKINS_IP=0.0.0.0 # socket ip JENKINS_PORT=8000 # socket port 编写启动脚本 start-jenkins.sh, 放到 $JENKINS_HOME 目录下 #!/bin/bash # import sysconfig settings and set defaults [ -f /etc/sysconfig/jenkins ] && . /etc/sysconfig/jenkins JENKINS_WAR=${JENKINS_HOME}/jenkins.war $JENKINS_JAVA $JENKINS_JAVAOPTS -jar $JENKINS_WAR --httpListenAddress=$JENKINS_IP --httpPort=$JENKINS_PORT $> $JENKINS_LOG 2>&1 & 编写停止脚本 stop-jenkins.sh #!/bin/bash kill `ps -ef | grep [j]enkins.war | awk '{ print $2 }'` 配置 jenkins服务 编写 jenkins.service如下 [Unit] Description=start jenkins server on satrtup After=network.target [Service] User=root EnvironmentFile=/etc/sysconfig/jenkins ExecStart=/bin/bash ${JENKINS_HOME}/start-jenkins.sh Restart=on-abort [Install] WantedBy=multi-user.target 服务操作 #启动服务 sudo systemctl start jenkins #查看服务 sudo systemctl status jenkins #停止服务 sudo systemctl stop jenkins #设置开机自启 sudo systemctl enable jenkins #取消开机自启 sudo systemctl disable jenkins","s":"安装 Jenkins Server","u":"/blog/docs/CICD/jenkins-install","h":"#安装-jenkins-server","p":67},{"i":75,"t":"如果是首次使用，安装必要的插件手动配置 从备份安装​ 有两种方式，推荐第一种 将已有机器的 $JENKINS_HOME目录，打包拷贝过去启动即可 拷贝 thinBackup的备份，安装 thinBackup插件，恢复备份","s":"配置 Jenkins Server","u":"/blog/docs/CICD/jenkins-install","h":"#配置-jenkins-server","p":67},{"i":78,"t":"下载源码 git clone https://github.com/jenkinsci/jenkins.git # 可以切换到某个稳定分支 git checkout stable-2.235 Jenkins2.0以上的版本依赖JDK1.7以上，以及Maven3.0.4以上（如果需要本地调试Jenkins还需要安装Node.js） 安装依赖 Jenkins是一个比较大的项目，里面有非常多的依赖,因此最好使用一个国内的Maven加速源进行加速,可以在.m2的settings.xml中配置mirror <mirrors> <mirror> <id>alimaven</id> <name>aliyun maven</name> <url>http://maven.aliyun.com/nexus/content/groups/public/</url> <mirrorOf>central</mirrorOf> </mirror> </mirrors> 安装前端依赖 yarn install 编译启动 参考文件CONTRIBUTING.md 安装maven多模块依赖 mvn -am -pl war,bom -DskipTests -Dspotbugs.skip clean install 启动服务 mvn -pl war jetty:run 访问服务 http://localhost:8080/jenkins","s":"1. 运行源码","u":"/blog/docs/CICD/jenkins源码学习","h":"#1-运行源码","p":76},{"i":81,"t":"Stapler框架是Jenkins中用于处理HTTP请求的框架。它是一个轻量级的MVC框架，提供了处理HTTP请求的标准化方法，使得开发人员可以轻松地构建RESTful风格的Web应用程序。 Stapler框架基于Java Servlet规范，使用反射机制将HTTP请求映射到Java类和方法。它提供了一些注解来处理请求，例如： @StaplerDispatchable: 标注方法可以被处理请求； @StaplerResponder: 标注返回响应对象的方法； @StaplerFallback: 标注处理请求的默认方法。 另外，Stapler框架提供了一些工具类来处理请求和响应，例如： StaplerRequest: 表示一个HTTP请求，可以获取请求参数、请求头等信息； StaplerResponse: 表示一个HTTP响应，可以设置响应头、响应状态码等信息； Stapler: 框架的核心类，提供了处理请求、路由请求等功能。 在Jenkins中，所有的HTTP请求都通过Stapler框架来处理。开发人员可以使用Stapler框架来编写自己的插件，为Jenkins添加新的功能或扩展现有功能。Stapler框架的使用非常广泛，在Jenkins中的几乎所有的插件都使用了Stapler框架来处理HTTP请求。","s":"2.1 stapler框架用法","u":"/blog/docs/CICD/jenkins源码学习","h":"#21-stapler框架用法","p":76},{"i":83,"t":"import org.kohsuke.stapler.StaplerRequest; import org.kohsuke.stapler.StaplerResponse; import org.kohsuke.stapler.Stapler; import org.kohsuke.stapler.QueryParameter; public class MyController { public void doSomething(StaplerRequest req, StaplerResponse rsp, @QueryParameter String name) { rsp.setContentType(\"text/plain\"); rsp.getWriter().println(\"Hello, \" + name + \"!\"); } public void doIndex(StaplerRequest req, StaplerResponse rsp) { req.getView(this, \"index.jelly\").forward(req, rsp); } } 在上面的例子中，我们创建了一个名为MyController的类，它有两个方法： doSomething: 处理/myservice/something请求，通过@QueryParameter注解获取请求参数，并返回一个文本响应； doIndex: 处理/myservice请求，返回一个Jelly模板渲染的响应。 当请求/myservice/something?name=John时，doSomething方法会被调用，返回一个文本响应Hello, John!。当请求/myservice时，doIndex方法会被调用，返回一个Jelly模板渲染的响应。 在Stapler框架中，我们可以使用注解来声明一个方法可以处理HTTP请求，并且可以获取请求参数、请求头等信息。通过StaplerResponse类，我们可以设置响应头、响应状态码等信息，并且返回一个文本响应、Jelly模板渲染的响应等。","s":"2.2 简单的Stapler框架的demo","u":"/blog/docs/CICD/jenkins源码学习","h":"#22-简单的stapler框架的demo","p":76},{"i":85,"t":"以下是Stapler框架中常用的注解： @StaplerDispatchable: 标注方法可以被处理请求。通常用于处理HTTP GET、POST等请求。如果一个方法没有被标注为@StaplerDispatchable，则无法通过HTTP请求访问它； @StaplerResponder: 标注返回响应对象的方法。通常用于处理HTTP PUT、DELETE等请求。如果一个方法被标注为@StaplerResponder，则它必须返回一个响应对象，否则会抛出异常； @StaplerFallback: 标注处理请求的默认方法。如果没有找到与请求URL对应的方法，就会调用标注了@StaplerFallback的方法。如果没有标注@StaplerFallback的方法，则会返回404错误； @RequirePOST: 标注方法必须使用HTTP POST请求。如果使用其他HTTP请求访问该方法，将返回一个405错误； @QueryParameter: 标注方法参数来获取请求参数。例如：@QueryParameter(\"id\") String id； @Header: 标注方法参数来获取请求头信息。例如：@Header(\"Authorization\") String auth； @AncestorInPath: 标注方法参数来获取请求URL中的祖先节点。例如：@AncestorInPath String projectName； @DataBoundConstructor: 标注构造函数来进行数据绑定。用于构造类的实例，将请求参数绑定到对象属性上； @DataBoundSetter: 标注setter方法来进行数据绑定。用于设置对象属性，将请求参数绑定到对象属性上； @JavaScriptMethod: 标注方法可以在Jelly脚本中被调用。用于实现AJAX功能。 以上是Stapler框架中常用的注解，通过它们可以方便地处理HTTP请求，并获取请求参数、请求头等信息。","s":"2.3 stapler常用注解","u":"/blog/docs/CICD/jenkins源码学习","h":"#23-stapler常用注解","p":76},{"i":88,"t":"@Extension: 标注扩展点的实现类。Jenkins 中有很多扩展点，如 SCM、构建后操作等，如果要实现扩展点，需要创建实现类并标注该注解； @Symbol: 标注扩展点的唯一符号。可以让用户通过符号来引用扩展点，比如 buildDiscarder(logRotator)，其中 logRotator 就是一个扩展点符号； @ExtensionPoint: 标注扩展点接口。如果要创建扩展点，需要先创建扩展点接口，并标注该注解； @DataBoundConstructor: 标注构造函数来进行数据绑定。用于构造类的实例，将请求参数绑定到对象属性上； @DataBoundSetter: 标注 setter 方法来进行数据绑定。用于设置对象属性，将请求参数绑定到对象属性上； @ExtensionMethod: 标注扩展方法。用于在 Jenkins 中提供新的 Groovy 方法，扩展 Jenkins 的 DSL，使得用户可以通过 Groovy 代码来调用 Jenkins API，实现更加复杂的自动化操作； @RequirePOST: 标注方法必须使用 HTTP POST 请求。如果使用其他 HTTP 请求访问该方法，将返回一个 405 错误； @JavaScriptMethod: 标注方法可以在 Jelly 脚本中被调用。用于实现 AJAX 功能； @SuppressFBWarnings: 标注代码中的 FindBugs 警告。Jenkins 使用 FindBugs 工具来检测代码中可能存在的 bug，如果代码中存在 false positive 的警告，可以使用该注解来屏蔽掉这些警告。 @Initializer: 标注初始化方法。Jenkins 中有很多初始化方法，如 init()、start() 等，如果要创建初始化方法，需要在该方法上标注该注解； @Initializer(after = InitMilestone.PLUGINS_PREPARED): 标注在插件初始化后的初始化方法。如果初始化方法依赖于插件，需要使用该注解来保证插件已经初始化完成； @Initializer(before = InitMilestone.PLUGINS_STARTED): 标注在插件启动前的初始化方法。如果初始化方法需要在插件启动前执行，需要使用该注解来保证初始化方法在插件启动前执行； @QueueAction: 标注队列操作。Jenkins 中有很多队列操作，如 ScheduleBuildAction、CauseAction 等，如果要创建队列操作，需要创建实现类并标注该注解； @JavaScriptMethod: 标注方法可以在 Jelly 脚本中被调用。用于实现 AJAX 功能； @RequirePOSTWithJenkinsSession: 标注方法必须使用 HTTP POST 请求，并且需要 Jenkins Session。如果没有 Jenkins Session，则会重定向到登录页面； @QueryParameter: 标注查询参数。可以将查询参数绑定到方法的参数上； @Default: 标注默认值。用于设置方法的参数默认值； @Icon: 标注图标。可以为 Jenkins 插件添加图标； @Localized: 标注本地化。可以为 Jenkins 插件添加本地化支持","s":"3.1 Jenkins 中常用的注解及其用法","u":"/blog/docs/CICD/jenkins源码学习","h":"#31-jenkins-中常用的注解及其用法","p":76},{"i":90,"t":"hudson.model.AbstractProject: 抽象类，表示 Jenkins 中的一个项目。通过该类可以获取项目的各种属性，如构建历史、构建环境等； hudson.model.Build: 表示 Jenkins 中的一个构建。通过该类可以获取构建的各种属性，如构建编号、持续时间、状态等； hudson.model.BuildListener: 表示构建监听器。当构建开始、结束、产生输出等事件时，会触发该监听器中的相应方法； hudson.model.Cause: 表示 Jenkins 中的一个构建原因。Jenkins 中有很多构建原因，如用户手动触发构建、定时触发构建、SCM 变更触发构建等。通过该类可以获取构建原因的各种属性，如描述、用户、时间等； hudson.model.Computer: 表示 Jenkins 中的一个计算机。通过该类可以获取计算机的各种属性，如节点名称、节点描述、在线状态等； hudson.model.Executor: 表示 Jenkins 中的一个执行器。每个执行器都会运行一个构建，通过该类可以获取执行器的各种属性，如进程 ID、当前构建等； hudson.model.Item: 抽象类，表示 Jenkins 中的一个项目或节点。通过该类可以获取项目或节点的各种属性，如名称、描述、权限等； hudson.model.Job: 抽象类，表示 Jenkins 中的一个任务。通过该类可以获取任务的各种属性，如构建历史、构建环境等； hudson.model.Label: 表示 Jenkins 中的一个标签。通过该类可以获取标签的各种属性，如名称、描述等； hudson.model.LabelExpression: 表示 Jenkins 中的一个标签表达式。通过该类可以创建标签表达式，如 node('linux && x86_64')； hudson.model.Node: 抽象类，表示 Jenkins 中的一个节点。通过该类可以获取节点的各种属性，如名称、描述、标签等； hudson.model.ParametersAction: 表示 Jenkins 中的一个构建参数。通过该类可以获取构建参数的各种属性，如名称、值等； hudson.model.Run: 抽象类，表示 Jenkins 中的一个构建或者一个部署。通过该类可以获取构建或部署的各种属性，如构建编号、持续时间、状态等； hudson.model.TaskListener: 表示任务监听器。当任务开始、结束、产生输出等事件时，会触发该监听器中的相应方法； hudson.model.User: 表示 Jenkins 中的一个用户。通过该类可以获取用户的各种属性，如用户名、邮箱、密码等； hudson.model.View: 抽象类，表示 Jenkins 中的一个视图。通过该类可以获取视图的各种属性，如名称、描述、项目列表等； hudson.scm.SCM: 抽象类，表示 Jenkins 中 Hudson：Jenkins 的核心类，包含了所有 Jenkins 系统的配置和状态，它是 Jenkins 服务中的单例对象。 Jenkins：Hudson 类的别名，是为了向后兼容而保留的。 Run：Jenkins 中表示一个构建或者一个构建的一次运行。它包含了构建的状态和结果、构建的日志信息等。 Build：Run 的子类，表示一个构建，包含了构建的一些特定信息，如构建编号、构建时间、构建状态等。 FreeStyleProject：Jenkins 中的一个自由风格项目，是 Jenkins 中最常用的项目类型之一。它可以执行 Shell 脚本、Windows 批处理脚本、Ant、Maven 等构建命令。 AbstractProject：FreeStyleProject 的父类，定义了 Jenkins 中所有项目的一些基本属性和行为，如 SCM 工具、构建触发器、构建后操作等。 Job：AbstractProject 的子类，表示一个抽象的项目或作业，可以是自由风格项目、Maven 项目、多分支流水线项目等。","s":"3.2 Jenkins 中核心类及其用法","u":"/blog/docs/CICD/jenkins源码学习","h":"#32-jenkins-中核心类及其用法","p":76},{"i":92,"t":"Describable接口和Descriptor类是用于实现可描述对象的封装和提供描述信息的类。 具体来说，当您想要创建一个可描述对象时，需要让该对象实现Describable接口，并且为该对象编写Descriptor类。其中，Describable接口定义了一个名为“getDescriptor”的方法，它返回Descriptor对象，而Descriptor类则负责提供有关Describable对象的元数据信息。 主要功能​ Describable接口 Describable接口是所有可描述对象的基本接口。当您的类需要拥有描述信息时，请让该类实现Describable接口。此外，您还需要为该类提供一个Descriptor类，以便外部用户能够获取该类的元数据信息。 Descriptor类 Descriptor类是用于提供Describable对象的元数据信息的类。每个Describable对象都有一个对应的Descriptor对象，它包含该对象的一些信息，例如该对象支持哪些参数、如何验证这些参数、如何显示该对象等等。因此，Descriptor类常常被用于定义各种插件、构建器、触发器、发布者等Jenkins扩展点的元数据信息。 总之，Describable接口和Descriptor类是Jenkins中非常重要的两个类，它们为Jenkins扩展点提供了一种标准化的描述方式，使得Jenkins的插件和其他扩展点更加易用和可扩展。 实现类的示例​ SCM（Source Control Management）类 SCM类是Jenkins中用于管理源代码控制系统的抽象类，该类实现了Describable接口，并且提供了一个Descriptor类。 Descriptor类为用户提供了设置SCM相关参数的界面，并验证这些参数是否合法。 BuildWrapper类 BuildWrapper类是Jenkins中用于包装构建过程的抽象类，该类同样实现了Describable接口，并提供了相应的Descriptor类。 Descriptor类可以为用户提供一些选项来影响构建行为，例如，您可以在Descriptor类中定义一个“超时”选项，以设定构建过程最长执行时间。 Publisher类 Publisher类是Jenkins中用于发布构建结果的抽象类，也实现了Describable接口，同时也有相应的Descriptor类。 Descriptor类可以允许用户配置不同类型的构建后操作，例如发送电子邮件、上传构建结果等等。 Trigger类 Trigger类是Jenkins中用于触发构建过程的抽象类，同样实现了Describable接口并提供相应的Descriptor类。 Descriptor类可以允许用户配置何时触发构建过程，例如，基于定期或者代码仓库更新等条件。 总之，Jenkins中很多扩展点都依赖于Describable接口和Descriptor类，以提供一种标准化的描述方式和用户界面，使得插件或其他扩展点更加易用和可扩展。","s":"3.3  Describable接口和Descriptor类","u":"/blog/docs/CICD/jenkins源码学习","h":"#33--describable接口和descriptor类","p":76},{"i":94,"t":"Learn Jenkins the hard way (1) - 从源码运行Jenkins开始 Maven常用参数说明 Jenkins任务调度源码简要分析 Jenkins 一致性Hash节点调度 [ 源码解析 ] Jenkins 的调度过程以及相关组件的源码解读 stapler (github) jenkins源码阅读：启动和请求处理","s":"参考","u":"/blog/docs/CICD/jenkins源码学习","h":"#参考","p":76},{"i":97,"t":"如果你经常使用 Jenkins Pipeline 一定会遇到多个不同流水线中有大量重复代码的情况，很多时候为了方便我们都是直接复制粘贴到不同的管道中去的，但是长期下去这些代码的维护就会越来越麻烦。为了解决这个问题，Jenkins 中提供了共享库的概念来解决重复代码的问题，我们只需要将公共部分提取出来，然后就可以在所有的 Pipeline 中引用这些共享库下面的代码了。 共享库（shared library）是一些独立的 Groovy 脚本的集合，目的就是将一些反复使用的模块进行封装，比如拉取代码模块，邮件通知模块，这样使得你的Jenkinsfile看起来更加简洁，减少代码量。我们可以在运行 Pipeline 的时候去获取这些共享库代码。使用共享库最好的方式同样是把代码使用 Git 仓库进行托管，这样我们就可以进行版本化管理了。","s":"1. 介绍","u":"/blog/docs/CICD/share-library","h":"#1-介绍","p":95},{"i":99,"t":"使用共享库一般只需要3个步骤即可： 首先创建 Groovy 脚本，添加到 Git 仓库中 然后在 Jenkins 中配置将共享库添加到 Jenkins 中来 最后，在我们的流水线中导入需要使用的共享库：@Library('your-shared-library')，这样就可以使用共享库中的代码了。","s":"2. 使用","u":"/blog/docs/CICD/share-library","h":"#2-使用","p":95},{"i":101,"t":"需要创建一个git仓库，并且目录结构如下 共享库的目录结构如下: (project root) +- src # Groovy source files | +- org | +- foo | +- Bar.groovy # for org.foo.Bar class +- vars | +- foo.groovy # 定义一个名为 foo 的步骤 | +- foo.txt # 为 foo 步骤做解析，也可以说是帮助文档 +- resources # 资源文件夹 | +- org | +- foo | +- bar.json # static helper data for org.foo.Bar src 目录应该看起来像标准的 Java 源目录结构。当执行流水线时，该目录被添加到类路径下。 vars 目录定义可从流水线访问的全局变量的脚本。 每个 *.groovy 文件的基名应该是一个 Groovy (~ Java) 标识符, 通常是 camelCased。 匹配 *.txt, 如果存在, 可以包含文档, 通过系统的配置标记格式化从处理 (所以可能是 HTML, Markdown 等，虽然 txt 扩展是必需的)。 这些目录中的 Groovy 源文件 在脚本化流水线中的 “CPS transformation” 一样。 resources 目录允许从外部库中使用 libraryResource 步骤来加载有关的非 Groovy 文件。 目前，内部库不支持该特性。 根目录下的其他目录被保留下来以便于将来的增强。","s":"2.1 目录结构","u":"/blog/docs/CICD/share-library","h":"#21-目录结构","p":95},{"i":103,"t":"在共享库中一般会有两种通用的代码： Steps：这些 Steps 在 Jenkins 中被称为全局变量，我们可以在所有的 Jenkins Pipeline 中使用这些自定义的 Steps。 比如，我们可以编写一个标准的 Step 来部署应用或者发送消息通知等，我们就可以将代码添加到 vars/YourStepName.groovy 文件中，然后实现一个 call 函数即可： #!/usr/bin/env groovy // vars/YourStepName.groovy def call() { // Do something here... } 其他通用代码：我们可以在这里面添加一些帮助类，还可以定义整个流水线中使用的静态常量等。 这些代码需要放在 src/your/package/name 目录下面，然后就可以使用常规的 Groovy 语法了，例如： #!/usr/bin/env groovy // com/qikqiak/GlobalVars.groovy package com.bothin class GlobalVars { static String foo = \"bar\" } 我们可以在 Jenkins Pipeline 中使用 import 导入上面的类，并引用其中的静态变量，比如 GlobalVars.foo。","s":"2.2 共享库内容","u":"/blog/docs/CICD/share-library","h":"#22-共享库内容","p":95},{"i":105,"t":"通过系统管理 > 系统配置 > Global Pipeline Libraries去添加共享库，可以添加多个。","s":"2.3 设置全局共享库","u":"/blog/docs/CICD/share-library","h":"#23-设置全局共享库","p":95},{"i":107,"t":"在vars目录下新建一个step vars/sayHi.groovy def call(String name='bothin') { echo \"Hello, ${name}.\" } 创建一个名为 src/com/bothin/GlobalVars.groovy 的文件，文件内容如下所示： #!/usr/bin/env groovy package com.bothin class GlobalVars { static String foo = \"bar\" // 在 Pipeline 中可以引用这里的静态变量： // // import com.bothin.GlobalVars // println GlobalVars.foo } 在jenkinsfile中使用 @Library('my-lib@master') _ import com.bothin.GlobalVars pipeline { agent none stage ('Example') { steps { script { sayHi \"jack\" echo GlobalVars.foo } } } }","s":"2.4 示例","u":"/blog/docs/CICD/share-library","h":"#24-示例","p":95},{"i":110,"t":"Jenkins​ Jenkins是Jenkins中的一个中心类，可以通过这个类来操作jenkins的一些资源。通过Jenkins.get()或Jenkins.getInstanceOrNull()可以获取操作实例 类api jenkins.model.Jenkins 常用实例方法 方法名 返回值 说明 getComputer(String name) Computer 获取slave机器实例 getNode(String name) Node 获取给定名称的代理节点 getPluginManager() PluginManager 获取插件管理器 getPlugin(String shortName) Plugin 从其短名称获取插件对象。 getQueue() Queue 获取构建等待队列 env​ 通过env变量可以访问到此次构建所包含的所有环境变量，同时也可以为此次构建添加环境变量 类api org.jenkinsci.plugins.workflow.cps.EnvActionImpl 常用方法 方法名 返回值 说明 getProperty(String propertyName) String 获取环境变量，也可以通过env.xxx获取 setProperty(String propertyName, Object newValue) void 添加环境变量，也可以通过 env.xxx = \"xxx\"来设置 getEnvironment() EnvVars 获取所有环境变量 常见内置环境变量 环境变量名 说明 STAGE_NAME 阶段名称 BUILD_NUMBER 当前构建号 JOB_NAME 流水线全名，如果有文件夹，会包含文件夹。如：foo/bar JOB_BASE_NAME 流水线名称，such as \"foo\" for \"bar/foo\". BUILD_TAG 构建标记 格式如 jenkins-{JOB_NAME}-{BUILD_NUMBER} 常用于保存构建中文件的文件名前缀 EXECUTOR_NUMBER 标识执行此构建的当前执行器（同一机器的执行器之间）的唯一编号 JENKINS_URL jenkins服务地址 NODE_NAME 构建机器名称 NODE_LABELS 构建机器标签 WORKSPACE 构建工作目录 遍历所有环境变量 def call(){ env.getEnvironment().each { name, value -> println \"${name}: ${value}\" } } params​ 通过params可以访问此次构建定义的所有参数，这个变量只能访问不能进行修改。 类 java.util.Collections$UnmodifiableMap 使用示例 if (params.BOOLEAN_PARAM_NAME) {doSomething()} if (params.getOrDefault('BOOLEAN_PARAM_NAME', true)) {doSomething()} currentBuild​ 通过这个变量可以访问当前构建的一些信息。 类api org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper 常用方法 方法名 返回值 说明 getId() String 获取构建号 getResult() String 返回此次构建的结果 getDisplayName() String 获取展示的构建名称，如：#28 getFullDisplayName() String 获取全部展示名称，如：cicd » cicd-pipeline-test #28 getFullProjectName() String 获取全部流水线名称，如: 9/cicd-pipeline-test getRawBuild() Run< ?,?> 访问最核心的构建信息，pipline类型流水线的实现为WorkflowRun WorkflowRun常用方法 方法名 返回值 说明 getId() String 获取构建号 getLog() String （Deprecated）获取全部构建日志 getLog(int maxLines) List< String> 获取最多行数日志 getLogInputStream() InputStream 获取日志文件的输入流 getOneOffExecutor() Executor 如果当前在构建中，则返回构建这个作业的执行器 getResult() Result 返回此次构建的结果","s":"3.1 内置变量","u":"/blog/docs/CICD/share-library","h":"#31-内置变量","p":95},{"i":112,"t":"Computer​ 代表远程构建的机器，获取当前执行构建的机器 Jenkins.get().getComputer(env.NODE_NAME) 类api hudson.model.Computer 方法名 返回值 说明 getHostName() String 返回机器的host getMonitorData() Map<String, Object> 获取机器的一些监控数据 getAllExecutors() List<Executor> 获取所有执行器 getChannel() abstract hudson.remoting.VirtualChannel 获取用来执行构建机器程序的通道 getTiedJobs() List < AbstractProject > 获取绑定在此节点上的项目 isUnix() Boolean 判断是否是unix机器 getAbsoluteRemoteFs() String 获取远程构建机器工作根目录 // 获取当前构建机器实例 def getComputer() { if (\"master\" == env.NODE_NAME) { def instance = Jenkins.get() return instance.getComputer(instance) } return Jenkins.get().getComputer(env.NODE_NAME) } Executor​ 可以通过这个类操作执行器信息。 类api hudson.model.Executor 常用方法 方法名 返回值 说明 isBusy() boolean 判断执行器目前是否在执行构建 getCurrentWorkspace() FilePath 返回这个执行器正在使用的工作目录或null getCurrentWorkUnit() WorkUnit 返回目前正在执行的构建工作单元 getCurrentExecutable() Queue.Executable Returns the current build this executor is running. // 获取正在构建的流水线名称 def getRunningPipelines(computer) { def runningPipeline = new HashSet() for (item in computer.getExecutors()) { if (item.isBusy()) { // org.jenkinsci.plugins.workflow.support.steps.ExecutorStepExecution.PlaceholderTask // println item.getCurrentExecutable() // org.jenkinsci.plugins.workflow.job.WorkflowJob def job = item.getCurrentWorkUnit().work.getOwnerTask() runningPipeline.add(job.getFullName()) } } return runningPipeline } FilePath​ 需要通过FilePath类才可以操作slave节点机器上的文件 误区：直接使用File操作的文件是Jenkins master上的机器 类api hudson.FilePath 如下创建FilePath对象 import hudson.FilePath // 创建FilePath def createFilePath(path) { if (env['NODE_NAME'] == null) { error \"envvar NODE_NAME is not set, probably not inside an node {} or running an older version of Jenkins!\" } else if (env['NODE_NAME'].equals(\"master\")) { return new FilePath(new File(path)) } else { def computer = Jenkins.get().getComputer(env['NODE_NAME']) return new FilePath(computer.getChannel(), path) } }","s":"3.2 常用类","u":"/blog/docs/CICD/share-library","h":"#32-常用类","p":95},{"i":114,"t":"可以通过@Grab引用 // 通过 : 分隔传入group、module和version @Grab('org.apache.commons:commons-math3:3.4.1') import org.apache.commons.math3.primes.Primes void parallelize(int count) { if (!Primes.isPrime(count)) { error \"${count} was not prime\" } // … } @Grab(group='commons-net', module='commons-net', version='2.0') import org.apache.commons.net.ftp.FTPClient // 上传文件到ftp def call(String path, String target) { File file = new File(path) println(\"Name: \" + file.name) println(\"Parent: \" + file.parent) println(\"About to connect....\"); new FTPClient().with { connect \"xxx_ftp.com\" enterLocalPassiveMode() login \"xx_username\", \"xxx_pwd\" changeWorkingDirectory file.parent def incomingFile = new File(file.name) incomingFile.withOutputStream { ostream -> retrieveFile file.name, ostream } disconnect() } println(\" ...Done.\"); if(isUnix()){ sh(\"mv ${file.name} ${target}\") }else{ bat(\"mv ${file.name} ${target}\") } }","s":"3.3 引用第三方jar包","u":"/blog/docs/CICD/share-library","h":"#33-引用第三方jar包","p":95},{"i":116,"t":"可以通过RemotingDiagnostics.executeGroovy()执行groovy脚本 executeGroovy(String script, hudson.remoting.VirtualChannel channel) import hudson.util.RemotingDiagnostics /** * 计算目录大小 * @param computer 执行机器 * @param path 文件夹路径 * @return */ def sizeOfDirectory(computer, String path) { String buildScript = \"org.apache.commons.io.FileUtils.sizeOfDirectory(new File(\\\"${path}\\\"))\" String result = RemotingDiagnostics.executeGroovy(buildScript, computer.getChannel()) // 返回的结果会以 \"Result: \" 为前缀 def size = result.replace(\"Result: \", \"\") return Long.valueOf(size) }","s":"3.4 执行groovy脚本","u":"/blog/docs/CICD/share-library","h":"#34-执行groovy脚本","p":95},{"i":118,"t":"https://www.jenkins.io/zh/doc/book/managing/script-approval/ import org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval ScriptApproval scriptApproval = ScriptApproval.get() def list = [] for (Object it : scriptApproval.pendingScripts) { list.add(it.hash) } for (String hash : list) { println(hash) scriptApproval.approveScript(hash); scriptApproval.save() }","s":"4. 进程内的脚本批准","u":"/blog/docs/CICD/share-library","h":"#4-进程内的脚本批准","p":95},{"i":121,"t":"标有 @NonCPS 注解的任何方法，不经过 CPS 转换 import com.cloudbees.groovy.cps.NonCPS @NonCPS def testMethod() { } jar包地址：groovy-cps 什么是CPS编程","s":"5.1 NonCPS","u":"/blog/docs/CICD/share-library","h":"#51-noncps","p":95},{"i":123,"t":"官方文档","s":"99. 参考","u":"/blog/docs/CICD/share-library","h":"#99-参考","p":95},{"i":126,"t":"Jenkins pipeline其实就是基于Groovy语言实现的一种DSL（领域特定语言），用于描述整条流水线是如何进行的。流水线的内容包括执行编译、打包、测试、输出测试报告等步骤。","s":"1. pipeline的组成","u":"/blog/docs/CICD/声明式pipeline语法","h":"#1-pipeline的组成","p":124},{"i":128,"t":"从软件版本控制库到用户手中这一过程可以分成很多阶段，每个阶段只专注处理一件事情，而这件事情又是通过多个步骤来完成的，这就是软件工程的pipeline。Jenkins对这个过程进行抽象，设计出一个基本的pipeline结构。 pipeline { agent any stages { stage('build') { steps { echo \"hello world\" } } } } pipeline：代表整条流水线，包含整条流水线的逻辑。 stage部分：阶段，代表流水线的阶段。每个阶段都必须有名称。本例中，build就是此阶段的名称。 stages部分：流水线中多个stage的容器。stages部分至少包含一个stage。 steps部分：代表阶段中的一个或多个具体步骤（step）的容器。steps部分至少包含一个步骤，本例中，echo就是一个步骤。在一个stage中有且只有一个steps。 agent部分：指定流水线的执行位置（Jenkins agent）。流水线中的每个阶段都必须在某个地方（物理机、虚拟机或Docker容器）执行，agent部分即指定具体在哪里执行。 以上每一个部分（section）都是必需的，少一个，Jenkins都会报错。","s":"1.1 pipeline最简结构","u":"/blog/docs/CICD/声明式pipeline语法","h":"#11-pipeline最简结构","p":124},{"i":130,"t":"pipeline基本结构决定的是pipeline整体流程，但是真正“做事”的还是pipeline中的每一个步骤。步骤是pipeline中已经不能再拆分的最小操作。前文中，我们只看到两个步骤：sh和echo。sh是指执行一条shell命令；echo是指执行echo命令。这两个步骤只是Jenkins pipeline内置的大量步骤中的两个。 更好的设计是：步骤是可插拔的，就像Jenkins的插件一样。如果现有的插件不用修改或者只需要简单修改，就能在Jenkins pipeline中当成一个步骤来使用。 Jenkins就是这样做的，只需要对现有的插件进行一些修改，就可以在pipeline中被当成一个步骤使用。这样大大降低了从现有依赖于界面的插件过渡到pipeline中步骤的成本。 已经有哪些插件适配了Jenkins pipeline呢？pipeline plugin的GitHub仓库给出了一个列表（https：//github.com/jenkinsci/pipeline-plugin/blob/master/COMPATIBILITY.md）方便大家检索，如图3-1所示（只截取了一部分）。","s":"1.2 步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#12-步骤","p":124},{"i":132,"t":"post部分包含的是在整个pipeline或阶段完成后一些附加的步骤。post部分是可选的，所以并不包含在pipeline最简结构中。但这并不代表它作用不大。 根据pipeline或阶段的完成状态，post部分分成多种条件块，包括： always：不论当前完成状态是什么，都执行。 changed：只要当前完成状态与上一次完成状态不同就执行。 fixed：上一次完成状态为失败或不稳定（unstable），当前完成状态为成功时执行。 regression：上一次完成状态为成功，当前完成状态为失败、不稳定或中止（aborted）时执行。 aborted：当前执行结果是中止状态时（一般为人为中止）执行。 failure：当前完成状态为失败时执行。 success：当前完成状态为成功时执行。 unstable：当前完成状态为不稳定时执行。 cleanup：清理条件块。不论当前完成状态是什么，在其他所有条件块执行完成后都执行。 post部分可以同时包含多种条件块。以下是post部分的完整示例。 pipeline { agent any stages { stage('build') { steps { echo \"hello world\" } post{ always{ echo \"post condition: always\" } success{ echo \"post condition: success\" } failure{ echo \"post condition: failure\" } aborted{ echo \"post condition: aborted\" } } } } post{ always{ echo \"global post condition: always\" } success{ echo \"global post condition: success\" } failure{ echo \"global post condition: failure\" } aborted{ echo \"global post condition: aborted\" } } }","s":"1.3 post部分","u":"/blog/docs/CICD/声明式pipeline语法","h":"#13-post部分","p":124},{"i":135,"t":"显然，基本结构满足不了现实多变的需求。所以，Jenkins pipeline通过各种指令（directive）来丰富自己。指令可以被理解为对Jenkins pipeline基本结构的补充。 Jenkins pipeline支持的指令有： environment：用于设置环境变量，可定义在stage或pipeline部分。 tools：可定义在pipeline或stage部分。它会自动下载并安装我们指定的工具，并将其加入PATH变量中。 input：定义在stage部分，会暂停pipeline，提示你输入内容。 options：用于配置Jenkins pipeline本身的选项，比如options {retry（3）}指当pipeline失败时再重试2次。options指令可定义在stage或pipeline部分。 parallel：并行执行多个step。在pipeline插件1.2版本后，parallel开始支持对多个阶段进行并行执行。 parameters：与input不同，parameters是执行pipeline前传入的一些参数。 triggers：用于定义执行pipeline的触发器。 when：当满足when定义的条件时，阶段才执行。 在使用指令时，需要注意的是每个指令都有自己的“作用域”。如果指令使用的位置不正确，Jenkins将会报错。","s":"2.1 pipeline支持的指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#21-pipeline支持的指令","p":124},{"i":137,"t":"options指令用于配置整个Jenkins pipeline本身的选项。根据具体的选项不同，可以将其放在pipeline块或stage块中。以下例子若没有特别说明，options被放在pipeline块中。 buildDiscarder：保存最近历史构建记录的数量。当pipeline执行完成后，会在硬盘上保存制品和构建执行日志，如果长时间不清理会占用大量空间，设置此选项后会自动清理。此选项只能在pipeline下的options中使用。示例如下： options { buildDiscarder(logRotator(numToKeepStr: '10')) } buildDiscarder：保存最近历史构建记录的数量。当pipeline执行完成后，会在硬盘上保存制品和构建执行日志，如果长时间不清理会占用大量空间，设置此选项后会自动清理。此选项只能在pipeline下的options中使用。示例如下： options { checkoutToSubdirectory('subdir') } disableConcurrentBuilds：同一个pipeline，Jenkins默认是可以同时执行多次的，如图3-2所示。此选项是为了禁止pipeline同时执行。示例如下： options { disableConcurrentBuilds() } newContainerPerStage：当agent为docker或dockerfile时，指定在同一个Jenkins节点上，每个stage都分别运行在一个新的容器中，而不是所有stage都运行在同一个容器中。 options { newContainerPerStage() } retry：当发生失败时进行重试，可以指定整个pipeline的重试次数。需要注意的是，这个次数是指总次数，包括第1次失败。以下例子总共会执行4次。当使用retry选项时，options可以被放在stage块中。 pipeline { agent any options { retry(4) } stages { stage('build') { steps { echo \"hello world\" } } } } timeout：如果 pipeline 执行时间过长，超出了我们设置的 timeout 时间，Jenkins 将中止pipeline。以下例子中以小时为单位，还可以以 SECONDS（秒）、MINUTES（分钟）为单位。当使用timeout选项时，options可以被放在stage块中。 options { timeout(time: 10, unit: 'HOURS') }","s":"2.2 options指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#22-options指令","p":124},{"i":139,"t":"when指令允许pipeline根据给定的条件，决定是否执行阶段内的步骤。when指令必须至少包含一个条件。when指令除了支持branch判断条件，还支持多种判断条件。 changelog：如果版本控制库的changelog符合正则表达式，则执行 when { changelog '.*^\\\\[DEPENDENCY\\\\] .+$' } changeset：如果版本控制库的变更集合中包含一个或多个文件符合给定的Ant风格路径表达式，则执行 when { changeset \"**/*.js\" } environment：如果环境变量的值与给定的值相同，则执行 when { environment name: 'DEPLOY_TO', value: 'production' } equals：如果期望值与给定的值相同，则执行 when { equals expected: 2, actual: currentBuild.number } expression：如果Groovy表达式返回的是true，则执行 当表达式返回的是字符串时，它必须转换成布尔类型或null；否则，所有的字符串都被当作true处理。 when { expression { return env.BRANCH_NAME != 'master' } } buildingTag：如果pipeline所执行的代码被打了tag（代码仓库打tag），则执行 when { buildingTag() } tag：如果pipeline所执行的代码被打了tag，且tag名称符合规则，则执行 如果tag的参数为空，即tag（），则表示不论tag名称是什么都执行，与buildingTag的效果相同。tag条件支持comparator参数，支持的值如下。 EQUALS：简单的文本比较。 when { tag pattern: \"release-3.1\", comparator: \"EQUALS\" } GLOB （默认值）：Ant风格路径表达式。由于是默认值，所以使用时一般省略。完整写法如下： when { tag pattern: \"release-*\", comparator: \"GLOB\" } REGEXP：正则表达式。使用方法如下： when { tag pattern: \"release-\\\\d+\", comparator: \"REGEXP\" } allOf：所有条件都必须符合。下例表示当分支为master且环境变量DEPLOY_TO的值为production时，才符合条件。 when { allOf { branch 'master' environment name: 'DEPLOY_TO', value: 'production' } } anyOf：其中一个条件为true，就符合。下例表示master分支或staging分支都符合条件。 when { anyOf { branch 'master' branch 'staging' } }","s":"2.3 when指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#23-when指令","p":124},{"i":141,"t":"在Jenkins pipeline中定义参数使用的是parameters指令，其只允许被放在pipeline块下。代码如下： pipeline { agent any parameters { booleanParam(defaultValue: true, description: '', name: 'userFlag') } stages { stage(\"foo\") { steps { echo \"flag: ${params.userFlag}\" } } } } 在定义了pipeline的参数后，如何使用呢？被传入的参数会放到一个名为params的对象中，在pipeline中可直接使用。params.userFlag就是引用parameters指令中定义的userFlag参数。 值得注意的是，在Jenkins新增此pipeline后，至少要手动执行一次，它才会被Jenkins加载生效。生效后，在执行项目时，就可以设置参数值了 booleanParam方法用于定义一个布尔类型的参数。 booleanParam方法接收三个参数。 defaultValue：默认值。 description：参数的描述信息。 name：参数名。 string，字符串类型。 text，多行文本类型，换行使用\\n。 choice，选择参数类型，使用\\n来分隔多个选项。 password，密码类型。","s":"2.4 parameters指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#24-parameters指令","p":124},{"i":143,"t":"environment指令可以在pipeline中定义，代表变量作用域为整个pipeline；也可以在stage中定义，代表变量只在该阶段有效。 但是这些变量都不是跨pipeline的，比如pipeline a访问不到pipeline b的变量。在pipeline之间共享变量可以通过参数化pipeline来实现。我们将在第8章中进行讨论。 在实际工作中，还会遇到一个环境变量引用另一个环境变量的情况。在environment中可以这样定义： environment { server_name = 'mail-server' version = \"${BUILD_NUMBER}\" artifact_name = \"${server_name}-${verison}.jar\" } 值得注意的是，如果在environment中定义的变量与env中的变量重名，那么被重名的变量的值会被覆盖掉 Jenkins内置环境变量 pipeline内置环境变量可以通过http://<JENKINS_URL>/job/<job_name>/pipeline-syntax/globalsenv页面查看 在调试pipeline时，可以在pipeline的开始阶段加一句：sh 'printenv'，将env变量的属性值打印出来。这样可以帮助我们避免不少问题。 自定义全局环境变量 env中的变量都是Jenkins内置的，或者是与具体pipeline相关的。有时候，我们需要定义一些全局的跨pipeline的自定义变量。进入Manage Jenkins→Configure System→Global properties页，勾选“Environment variables”复选框，单击“Add”按钮，在输入框中输入变量名和变量值即可","s":"2.5 environment指令","u":"/blog/docs/CICD/声明式pipeline语法","h":"#25-environment指令","p":124},{"i":147,"t":"pipeline内置步骤可以通过http://<JENKINS_URL>/job/<job_name>/pipeline-syntax/html页面查看","s":"3. pipeline内置基础步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#3-pipeline内置基础步骤","p":124},{"i":149,"t":"deleteDir：删除当前目录​ deleteDir是一个无参步骤，删除的是当前工作目录。通常它与dir步骤一起使用，用于删除指定目录下的内容。 dir：切换到目录​ 默认pipeline工作在工作空间目录下，dir步骤可以让我们切换到其他目录。使用方法如下： dir('/var/logs') { deleteDir() } fileExists：判断文件是否存在​ fileExists（'/tmp/a.jar'）判断/tmp/a.jar文件是否存在。如果参数是相对路径，则判断在相对当前工作目录下，该文件是否存在。结果返回布尔类型。 isUnix：判断是否为类UNIX系统​ 如果当前pipeline运行在一个类UNIX系统上，则返回true。 pwd：确认当前目录​ pwd与Linux的pwd命令一样，返回当前所在目录。 它有一个布尔类型的可选参数：tmp，如果参数值为true，则返回与当前工作空间关联的临时目录。 writeFile：将内容写入指定文件中​ writeFile支持的参数有： file：文件路径，可以是绝对路径，也可以是相对路径。 text：要写入的文件内容。 encoding（可选）：目标文件的编码。如果留空，则使用操作系统默认的编码。如果写的是Base64的数据，则可以使用Base64编码。 readFile：读取文件内容​ 读取指定文件的内容，以文本返回。 readFile支持的参数有： file：路径，可以是绝对路径，也可以是相对路径。 encoding（可选）：读取文件时使用的编码。示例如下： script { writeFile(file: \"base.txt\", text: \"amVua21ucyBib29r\", encoding: \"Base64\") def content = readFile(file: 'base.txt', encoding: 'UTF-8') echo \"${content}\" // 打印结果：jenkins book }","s":"3.1 文件目录相关步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#31-文件目录相关步骤","p":124},{"i":151,"t":"stash：保存临时文件​ stash步骤可以将一些文件保存起来，以便被同一次构建的其他步骤或阶段使用。如果整个pipeline的所有阶段在同一台机器上执行，则stash步骤是多余的。所以，通常需要stash的文件都是要跨Jenkins node使用的。 stash步骤会将文件存储在tar文件中，对于大文件的stash操作将会消耗Jenkins master的计算资源。Jenkins官方文档推荐，当文件大小为5∼100MB时，应该考虑使用其他替代方案。 stash步骤的参数列表如下： name：字符串类型，保存文件的集合的唯一标识。 allowEmpty：布尔类型，允许stash内容为空。 excludes：字符串类型，将哪些文件排除。如果排除多个文件，则使用逗号分隔。留空代表不排除任何文件。 includes：字符串类型，stash哪些文件，留空代表当前文件夹下的所有文件。 useDefaultExcludes：布尔类型，如果为true，则代表使用Ant风格路径默认排除文件列表。 除了name参数，其他参数都是可选的。excludes和includes使用的是Ant风格路径表达式。在3.7.5节中将简单介绍该表达式写法。 unstash：取出之前stash的文件​ unstash步骤只有一个name参数，即stash时的唯一标识。通常stash与unstash步骤同时使用。以下是完整示例。 pipeline { agent none stages { stage('stash') { agent { label \"master\" } steps { writeFile file: \"a.txt\",text: \"$BUILD_NUMBER\" stash(name: \"abc\", includes: \"a.txt\") } } stage('unstash') { agent { label \"node2\" } steps { unstash(\"abc\") def content = readFile(\"a.txt\") echo \"${content}\" } } } } stash步骤在master节点上执行，而unstash步骤在node2节点上执行。","s":"3.2 制品相关步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#32-制品相关步骤","p":124},{"i":153,"t":"与命令相关的步骤其实是Pipeline：Nodes and Processes插件提供的步骤。由于它是Pipeline插件的一个组件，所以基本不需要单独安装。 sh：执行shell命令​ sh步骤支持的参数有： script：将要执行的shell脚本，通常在类UNIX系统上可以是多行脚本。 encoding：脚本执行后输出日志的编码，默认值为脚本运行所在系统的编码。 returnStatus：布尔类型，默认脚本返回的是状态码，如果是一个非零的状态码，则会引发pipeline执行失败。如果returnStatus参数为true，则不论状态码是什么，pipeline的执行都不会受影响。 returnStdout：布尔类型，如果为true，则任务的标准输出将作为步骤的返回值，而不是打印到构建日志中（如果有错误，则依然会打印到日志中）。除了script参数，其他参数都是可选的。 returnStatus与returnStdout参数一般不会同时使用，因为返回值只能有一个。如果同时使用，则只有returnStatus参数生效。 bat、powershell步骤​ bat步骤执行的是Windows的批处理命令。powershell步骤执行的是PowerShell脚本，支持3+版本。这两个步骤支持的参数与sh步骤的一样","s":"3.3 命令相关步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#33-命令相关步骤","p":124},{"i":155,"t":"build步骤触发下一流水线​ 既然存在参数化的pipeline，那么就表示可以在一个pipeline中“调用”另一个pipeline。在Jenkinspipeline中可以使用build步骤实现此功能。build步骤是pipeline插件的一个组件，所以不需要另外安装插件，可以直接使用。 build步骤其实也是一种触发pipeline执行的方式，它与triggers指令中的upstream方式有两个区别： （1） build步骤是由上游pipeline使用的，而upstream方式是由下游pipeline使用的。 （2） build步骤是可以带参数的，而upstream方式只是被动触发，并且没有带参数。 如下我们可以在steps部分定义： steps { build( job: 'next-job-name', parameters: [ booleanParam(name: 'userFlag', value:) ] ) } build步骤的基本参数。 job（必填）：目标Jenkins任务的名称。 parameters（可选）：数组类型，传入目标pipeline的参数列表。传参方法与定参方法类似。 parameters: [ booleanParam(name: 'DEBUG_BUILD', value: true), password(name: 'PASSWORD', value: 'prodSECRET'), string(name: 'DEPLOY_ENV', value: 'prod'), text(name: 'DEPLOY_TEXT', value: 'a\\nb\\nc\\n'), string(name: 'CHOICES', value: 'dev') ] 我们注意到choice类型的参数没有对应的传参方法，而是使用string传参方法代替的。 propagate（可选）：布尔类型，如果值为true，则只有当下游pipeline的最终构建状态为SUCCESS时，上游pipeline才算成功；如果值为false，则不论下游pipeline的最终构建状态是什么，上游pipeline都忽略。默认值为true。 quietPeriod（可选）：整型，触发下游pipeline后，下游pipeline等待多久执行。如果不设置此参数，则等待时长由下游pipeline确定。单位为秒。 wait（可选）：布尔类型，是否等待下游pipeline执行完成。默认值为true。 Workspace Cleanup插件清理空间​ 通常，当pipeline执行完成后，并不会自动清理空间。如果需要（通常需要）清理工作空间，则可以通过Workspace Cleanup插件实现。 （1）安装Workspace Cleanup插件（地址为https：//plugins.jenkins.io/ws-cleanup）。 （2）在pipeline的post部分加入插件步骤。 post { always { cleanWs() } }","s":"3.4 其他命令步骤","u":"/blog/docs/CICD/声明式pipeline语法","h":"#34-其他命令步骤","p":124},{"i":157,"t":"Ant是比Maven更老的Java构建工具。Ant发明了一种描述文件路径的表达式，大家都习惯称其为Ant风格路径表达式。Jenkins pipeline的很多步骤的参数也会使用此表达式。 Ant路径表达式包括3种通配符。 ？：匹配任何单字符。 *：匹配0个或者任意数量的字符。 **：匹配0个或者更多的目录。","s":"3.5 Ant风格路径表达式","u":"/blog/docs/CICD/声明式pipeline语法","h":"#35-ant风格路径表达式","p":124},{"i":160,"t":"django原生的admin UI风格太过于古老，因此simpleUI应运而生，让页面更具现代化。 官网链接：https://simpleui.72wo.com/docs/simpleui/#%E5%AE%98%E7%BD%91 官方DEMO源码","s":"1. 集成SimpleUi","u":"/blog/docs/Django/DjangoAdmin使用","h":"#1-集成simpleui","p":158},{"i":162,"t":"pip install django-simpleui==2021.10.15","s":"安装依赖","u":"/blog/docs/Django/DjangoAdmin使用","h":"#安装依赖","p":158},{"i":164,"t":"注册simpleui 放在第一个 # Application definition INSTALLED_APPS = [ # 注册simpleui 放在第一个 'simpleui', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ... ]","s":"注册应用","u":"/blog/docs/Django/DjangoAdmin使用","h":"#注册应用","p":158},{"i":166,"t":"from django.contrib import admin admin.site.site_title = '管理后台' admin.site.site_header = '管理后台' urlpatterns = [ # 后台管理 path('admin', admin.site.urls), ... ]","s":"配置urls","u":"/blog/docs/Django/DjangoAdmin使用","h":"#配置urls","p":158},{"i":168,"t":"python manage.py migrate --fake-initial python manage.py migrate 如遇到报错：1054, \"Unknown column 'name' in 'django_content_type'\" 可以在django_content_type表中添加多一个字段name 再重新执行。","s":"迁移数据库表","u":"/blog/docs/Django/DjangoAdmin使用","h":"#迁移数据库表","p":158},{"i":170,"t":"官方文档：部署静态文件 参考博客： https://juejin.cn/post/6844903587470917646 https://simpleui.72wo.com/topic/1226/ 由于本身Django生产环境（DEBUG=False）不提供静态资源服务，所以我们在生产环境要使用静态文件服务器提供服务。 在settings.py中设置STATIC_ROOT STATIC_ROOT = os.path.join(BASE_DIR, \"static\") 执行collectstatic命令收集静态文件 python manage.py collectstatic 配置Nignx访问静态资源 upstream django_admin { ip_hash; server unix:/deploy/release/web_app/app.sock; # Django服务 } # 访问管理页面配置 server { listen 80; server_name localhost; location ^~ /admin/ { uwsgi_send_timeout 600; uwsgi_connect_timeout 600; uwsgi_read_timeout 600; include /etc/nginx/uwsgi_params; proxy_store off; proxy_redirect off; proxy_set_header X-Forwoarded_For $proxy_add_x_forwarded_for; proxy_set_header X-Readl-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Remote-Host $remote_addr; uwsgi_pass django_admin; } # django simpleui静态文件地址 location /backend/static { alias /deploy/release/web_app/static/; } } # 后台服务配置 server { listen 8000; server_name localhost; client_max_body_size 500m; location / { include uwsgi_params; # uwsgi运行的django项目 socket地址 uwsgi_pass unix:/deploy/release/web_app/app.sock; } # django simpleui静态文件地址 location /backend/static { alias /deploy/release/web_app/static/; } } 重启Nignx，service nginx reload","s":"生产环境配置","u":"/blog/docs/Django/DjangoAdmin使用","h":"#生产环境配置","p":158},{"i":173,"t":"@admin.register(Project) class ProjectAdmin(admin.ModelAdmin): inlines = (UserShipInline, ) list_display = ('id', 'name', 'creator', 'groups', 'users', 'description') filter_horizontal = ('group', ) list_filter = tuple() # 下拉框过滤 search_fields = ('id',) ordering = ('id',) list_per_page = 20 def groups(self, obj): \"\"\"多对多字段显示\"\"\" return [g.name for g in obj.group.all()] def users(self, obj): \"\"\"多对多字段显示\"\"\" return [u.name_ch for u in obj.user.all()]","s":"常用模型配置","u":"/blog/docs/Django/DjangoAdmin使用","h":"#常用模型配置","p":158},{"i":175,"t":"参考： Django 中的自定义验证 - 官方 Django 重写 UserAdmin from django.contrib import admin from django.contrib.auth.admin import UserAdmin from django.contrib.auth.forms import UsernameField from django.forms import ModelForm from .models import User class CUserCreationForm(ModelForm): \"\"\" A form that creates a user, with no privileges, from the given username and password. \"\"\" class Meta: model = User fields = ('name', 'email', 'phone', 'is_superuser', 'is_active', 'is_staff') field_classes = {'username': UsernameField} class UserShipInline(admin.TabularInline): \"\"\" 当你使用 ManyToManyField`的``through 参数指定一个中间模型时，后台管理在新增、编辑模式下默认不会显示这个字段。 解决方法：https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/#working-with-many-to-many-intermediary-models \"\"\" model = UserShip extra = 1 verbose_name_plural = \"用户关联信息\" @admin.register(User) class MyUserAdmin(UserAdmin): model = User inlines = (UserShipInline,) list_display = ('name', 'email', 'phone', 'is_superuser', 'is_active', 'is_staff') list_filter = tuple() # 下拉框过滤 search_fields = ('name',) ordering = ('name', ) filter_horizontal = () # Leave it empty. You have neither `groups` or `user_permissions` # 更新时的字段配置 fieldsets = ( ('基本信息', {'fields': ('name', 'email', 'phone', 'password')}), ('权限', {'fields': ('is_superuser', 'is_active', 'is_staff')}), ) add_form = CUserCreationForm # 新增时的字段配置 add_fieldsets = ( ('基本信息', {'fields': ('name', 'email', 'phone')}), ('权限', {'fields': ('is_superuser', 'is_active', 'is_staff')}), ) list_per_page = 20","s":"配置用户admin","u":"/blog/docs/Django/DjangoAdmin使用","h":"#配置用户admin","p":158},{"i":177,"t":"from django.contrib import admin from django import forms from django.forms import ModelMultipleChoiceField, CheckboxSelectMultiple from .models import Book, Author, BookAuthor class BookForm(forms.ModelForm): authors = ModelMultipleChoiceField( label=\"关联作者\", queryset=Author.objects.all(), required=False, widget=CheckboxSelectMultiple ) class Meta: model = Book fields = '__all__' def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) if self.instance.pk: author_ids = BookAuthor.objects.filter(book_id=self.instance.pk).values_list(\"author_id\", flat=True) authors = Author.objects.filter(id__in=author_ids) self.initial[\"authors\"] = authors # 自定义作者filter class AuthorFilter(admin.SimpleListFilter): title = \"作者\" parameter_name = 'author' def lookups(self, request, model_admin): authors = Author.objects.all() return ( (p.id, p.name) for p in authors ) def queryset(self, request, queryset): if self.value(): ids = BookAuthor.objects.filter(author_id=self.value()).values_list(\"book_id\", flat=True) return queryset.filter(id__in=list(ids)) return queryset @admin.register(Book) class BookAdmin(admin.ModelAdmin): list_display = ('title', 'author_names') list_filter = (AuthorFilter, ) # 下拉框过滤 search_fields = ('title',) ordering = ('id',) list_per_page = 20 form = BookForm def save_model(self, request, obj, form, change): super().save_model(request, obj, form, change) authors = form.cleaned_data['authors'] snp_list = [BookAuthor(book_id=obj.id, author_id=p.id) for p in authors] BookAuthor.objects.filter(book_id=obj.id).delete() BookAuthor.objects.bulk_create(snp_list) def author_names(self, obj): return ', '.join([a.name for a in obj.authors.all()]) def delete_model(self, request, obj): super().delete_model(request, obj) BookAuthor.objects.filter(book_id=obj.id).delete()","s":"多对多配置（无外键）","u":"/blog/docs/Django/DjangoAdmin使用","h":"#多对多配置无外键","p":158},{"i":180,"t":"安装DRF pip install djangorestframework 添加rest_framework应用 我们利用在Django框架学习中创建的demo工程，在settings.py的INSTALLED_APPS中添加'rest_framework'。 INSTALLED_APPS = [ ... 'rest_framework', ]","s":"1. 环境安装与配置","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#1-环境安装与配置","p":178},{"i":182,"t":"序列化器的作用： 进行数据的校验 对数据对象进行转换 优秀博文： Django REST framework 序列化器","s":"2. Serializer序列化器","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#2-serializer序列化器","p":178},{"i":184,"t":"2.1.1 定义方法​ Django REST framework中的Serializer使用类来定义，须继承自rest_framework.serializers.Serializer。 例如，我们已有了一个数据库模型类BookInfo class BookInfo(models.Model): btitle = models.CharField(max_length=20, verbose_name='名称') bpub_date = models.DateField(verbose_name='发布日期') bread = models.IntegerField(default=0, verbose_name='阅读量') bcomment = models.IntegerField(default=0, verbose_name='评论量') image = models.ImageField(upload_to='booktest', verbose_name='图片', null=True) 我们想为这个模型类提供一个序列化器，可以定义如下： class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" id = serializers.IntegerField(label='ID', read_only=True) btitle = serializers.CharField(label='名称', max_length=20) bpub_date = serializers.DateField(label='发布日期', required=True) bread = serializers.IntegerField(label='阅读量', required=False) bcomment = serializers.IntegerField(label='评论量', required=False) image = serializers.ImageField(label='图片', required=False) 注意：serializer不是只能为数据库模型类定义，也可以为非数据库模型类的数据定义。serializer是独立于数据库之外的存在。 \u00132.1.2 字段与选项​ 常用字段类型： 字段 字段构造方式 BooleanField BooleanField() NullBooleanField NullBooleanField() CharField CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) EmailField EmailField(max_length=None, min_length=None, allow_blank=False) RegexField RegexField(regex, max_length=None, min_length=None, allow_blank=False) SlugField SlugField(maxlength=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9-]+ URLField URLField(max_length=200, min_length=None, allow_blank=False) UUIDField UUIDField(format='hex_verbose') format: 1) 'hex_verbose' 如\"5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" 2） 'hex' 如 \"5ce0e9a55ffa654bcee01238041fb31a\" 3）'int' - 如: \"123456789012312313134124512351145145114\" 4）'urn' 如: \"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" IPAddressField IPAddressField(protocol='both', unpack_ipv4=False, **options) IntegerField IntegerField(max_value=None, min_value=None) FloatField FloatField(max_value=None, min_value=None) DecimalField DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits: 最多位数 decimal_palces: 小数点位置 DateTimeField DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None) DateField DateField(format=api_settings.DATE_FORMAT, input_formats=None) TimeField TimeField(format=api_settings.TIME_FORMAT, input_formats=None) DurationField DurationField() ChoiceField ChoiceField(choices) choices与Django的用法相同 MultipleChoiceField MultipleChoiceField(choices) FileField FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) ImageField ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) ListField ListField(child=, min_length=None, max_length=None) DictField DictField(child=) 选项参数： 参数名称 作用 max_length 最大长度 min_lenght 最小长度 allow_blank 是否允许为空 trim_whitespace 是否截断空白字符 max_value 最小值 min_value 最大值 通用参数： 参数名称 说明 read_only 表明该字段仅用于序列化输出，默认False write_only 表明该字段仅用于反序列化输入，默认False required 表明该字段在反序列化时必须输入，默认True default 反序列化时使用的默认值 allow_null 表明该字段是否允许传入None，默认False validators 该字段使用的验证器 error_messages 包含错误编号与错误信息的字典 label 用于HTML展示API页面时，显示的字段名称 help_text 用于HTML展示API页面时，显示的字段帮助提示信息 2.1.3. 创建Serializer对象​ 定义好Serializer类后，就可以创建Serializer对象了。 Serializer的构造方法为： Serializer(instance=None, data=empty, **kwarg) 说明： 1）用于序列化时，将模型类对象传入instance参数 2）用于反序列化时，将要被反序列化的数据传入data参数 3）除了instance和data参数外，在构造Serializer对象时，还可通过context参数额外添加数据，如 serializer = AccountSerializer(account, context={'request': request}) 通过context参数附加的数据，可以通过Serializer对象的context属性获取。","s":"2.1 定义Serializer","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#21-定义serializer","p":178},{"i":186,"t":"我们在django shell中来学习序列化器的使用。 python manage.py shell 2.2.1 基本使用​ 1） 先查询出一个图书对象 from booktest.models import BookInfo book = BookInfo.objects.get(id=2) 2） 构造序列化器对象 from booktest.serializers import BookInfoSerializer serializer = BookInfoSerializer(book) 3）获取序列化数据 通过data属性可以获取序列化后的数据 serializer.data # {'id': 2, 'btitle': '天龙八部', 'bpub_date': '1986-07-24', 'bread': 36, 'bcomment': 40, 'image': None} 4）如果要被序列化的是包含多条数据的查询集QuerySet，可以通过添加many=True参数补充说明 book_qs = BookInfo.objects.all() serializer = BookInfoSerializer(book_qs, many=True) serializer.data # [OrderedDict([('id', 2), ('btitle', '天龙八部'), ('bpub_date', '1986-07-24'), ('bread', 36), ('bcomment', 40), ('image', N]), OrderedDict([('id', 3), ('btitle', '笑傲江湖'), ('bpub_date', '1995-12-24'), ('bread', 20), ('bcomment', 80), ('image'ne)]), OrderedDict([('id', 4), ('btitle', '雪山飞狐'), ('bpub_date', '1987-11-11'), ('bread', 58), ('bcomment', 24), ('ima None)]), OrderedDict([('id', 5), ('btitle', '西游记'), ('bpub_date', '1988-01-01'), ('bread', 10), ('bcomment', 10), ('im', 'booktest/xiyouji.png')])] 2.2.2 关联对象嵌套序列化​ 如果需要序列化的数据中包含有其他关联对象，则对关联对象数据的序列化需要指明。 例如，在定义英雄数据的序列化器时，外键hbook（即所属的图书）字段如何序列化？ 我们先定义HeroInfoSerialzier除外键字段外的其他部分 class HeroInfoSerializer(serializers.Serializer): \"\"\"英雄数据序列化器\"\"\" GENDER_CHOICES = ( (0, 'female'), (1, 'male') ) id = serializers.IntegerField(label='ID', read_only=True) hname = serializers.CharField(label='名字', max_length=20) hgender = serializers.ChoiceField(choices=GENDER_CHOICES, label='性别', required=False) hcomment = serializers.CharField(label='描述信息', max_length=200, required=False, allow_null=True) 对于关联字段，可以采用以下几种方式： 1） PrimaryKeyRelatedField​ 此字段将被序列化为关联对象的主键。 hbook = serializers.PrimaryKeyRelatedField(label='图书', read_only=True) 或 hbook = serializers.PrimaryKeyRelatedField(label='图书', queryset=BookInfo.objects.all()) 指明字段时需要包含read_only=True或者queryset参数： 包含read_only=True参数时，该字段将不能用作反序列化使用 包含queryset参数时，将被用作反序列化时参数校验使用 使用效果： from booktest.serializers import HeroInfoSerializer from booktest.models import HeroInfo hero = HeroInfo.objects.get(id=6) serializer = HeroInfoSerializer(hero) serializer.data # {'id': 6, 'hname': '乔峰', 'hgender': 1, 'hcomment': '降龙十八掌', 'hbook': 2} 2) StringRelatedField​ 此字段将被序列化为关联对象的字符串表示方式（即str方法的返回值） hbook = serializers.StringRelatedField(label='图书') 使用效果 {'id': 6, 'hname': '乔峰', 'hgender': 1, 'hcomment': '降龙十八掌', 'hbook': '天龙八部'} 3）使用关联对象的序列化器​ hbook = BookInfoSerializer() 使用效果 {'id': 6, 'hname': '乔峰', 'hgender': 1, 'hcomment': '降龙十八掌', 'hbook': OrderedDict([('id', 2), ('btitle', '天龙八部')te', '1986-07-24'), ('bread', 36), ('bcomment', 40), ('image', None)])} 2.2.3 many参数​ 如果关联的对象数据不是只有一个，而是包含多个数据，如想序列化图书BookInfo数据，每个BookInfo对象关联的英雄HeroInfo对象可能有多个，此时关联字段类型的指明仍可使用上述几种方式，只是在声明关联字段时，多补充一个many=True参数即可。 此处仅拿PrimaryKeyRelatedField类型来举例，其他相同。 在BookInfoSerializer中添加关联字段： class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" id = serializers.IntegerField(label='ID', read_only=True) btitle = serializers.CharField(label='名称', max_length=20) bpub_date = serializers.DateField(label='发布日期', required=True) bread = serializers.IntegerField(label='阅读量', required=False) bcomment = serializers.IntegerField(label='评论量', required=False) image = serializers.ImageField(label='图片', required=False) heroinfo_set = serializers.PrimaryKeyRelatedField(read_only=True, many=True) # 新增 使用效果： from booktest.serializers import BookInfoSerializer from booktest.models import BookInfo book = BookInfo.objects.get(id=2) serializer = BookInfoSerializer(book) serializer.data # {'id': 2, 'btitle': '天龙八部', 'bpub_date': '1986-07-24', 'bread': 36, 'bcomment': 40, 'image': None, 'heroinfo_set': [6,8, 9]}","s":"2.2 序列化使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#22-序列化使用","p":178},{"i":188,"t":"2.3.1. 验证​ 使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。 在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。 验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。 验证成功，可以通过序列化器对象的validated_data属性获取数据。 在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。 如我们前面定义过的BookInfoSerializer class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" id = serializers.IntegerField(label='ID', read_only=True) btitle = serializers.CharField(label='名称', max_length=20) bpub_date = serializers.DateField(label='发布日期', required=True) bread = serializers.IntegerField(label='阅读量', required=False) bcomment = serializers.IntegerField(label='评论量', required=False) image = serializers.ImageField(label='图片', required=False) 通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证 from booktest.serializers import BookInfoSerializer data = {'bpub_date': 123} serializer = BookInfoSerializer(data=data) serializer.is_valid() # 返回False serializer.errors # {'btitle': [ErrorDetail(string='This field is required.', code='required')], 'bpub_date': [ErrorDetail(string='Date has wrong format. Use one of these formats instead: YYYY[-MM[-DD]].', code='invalid')]} serializer.validated_data # {} data = {'btitle': 'python', 'bpub_date': '1998-12-1'} serializer = BookInfoSerializer(data=data) serializer.is_valid() # True serializer.errors # {} serializer.validated_data # OrderedDict([('btitle', 'python')]) is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception=True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。 # Return a 400 response if the data was invalid. serializer.is_valid(raise_exception=True) 如果觉得这些还不够，需要再补充定义验证行为，可以使用以下三种方法： 1）validate_<field_name>​ 对<field_name>字段进行验证，如 class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" ... def validate_btitle(self, value): if 'django' not in value.lower(): raise serializers.ValidationError(\"图书不是关于Django的\") return value 测试 from booktest.serializers import BookInfoSerializer data = {'btitle': 'python'} serializer = BookInfoSerializer(data=data) serializer.is_valid() # False serializer.errors # {'btitle': [ErrorDetail(string='图书不是关于Django的', code='invalid')]} 2）validate​ 在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如 class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" ... def validate(self, attrs): bread = attrs['bread'] bcomment = attrs['bcomment'] if bread < bcomment: raise serializers.ValidationError('阅读量小于评论量') return attrs 测试 from booktest.serializers import BookInfoSerializer data = {'btitle': 'about django', 'bpub_date': '1998-12-1', 'bread': 10, 'bcomment': 20} s = BookInfoSerializer(data=data) s.is_valid() # False s.errors # {'non_field_errors': [ErrorDetail(string='阅读量小于评论量', code='invalid')]} 3）validators​ 在字段中添加validators选项参数，也可以补充验证行为，如 def about_django(value): if 'django' not in value.lower(): raise serializers.ValidationError(\"图书不是关于Django的\") class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" id = serializers.IntegerField(label='ID', read_only=True) btitle = serializers.CharField(label='名称', max_length=20, validators=[about_django]) bpub_date = serializers.DateField(label='发布日期', required=True) bread = serializers.IntegerField(label='阅读量', required=False) bcomment = serializers.IntegerField(label='评论量', required=False) image = serializers.ImageField(label='图片', required=False) 测试： from booktest.serializers import BookInfoSerializer data = {'btitle': 'python'} serializer = BookInfoSerializer(data=data) serializer.is_valid() # False serializer.errors # {'btitle': [ErrorDetail(string='图书不是关于Django的', code='invalid')]} 2.3.2. 保存​ 如果在验证成功后，想要基于validated_data完成数据对象的创建，可以通过实现create()和update()两个方法来实现。 class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" ... def create(self, validated_data): \"\"\"新建\"\"\" return BookInfo(**validated_data) def update(self, instance, validated_data): \"\"\"更新，instance为要更新的对象实例\"\"\" instance.btitle = validated_data.get('btitle', instance.btitle) instance.bpub_date = validated_data.get('bpub_date', instance.bpub_date) instance.bread = validated_data.get('bread', instance.bread) instance.bcomment = validated_data.get('bcomment', instance.bcomment) return instance 如果需要在返回数据对象的时候，也将数据保存到数据库中，则可以进行如下修改 class BookInfoSerializer(serializers.Serializer): \"\"\"图书数据序列化器\"\"\" ... def create(self, validated_data): \"\"\"新建\"\"\" return BookInfo.objects.create(**validated_data) def update(self, instance, validated_data): \"\"\"更新，instance为要更新的对象实例\"\"\" instance.btitle = validated_data.get('btitle', instance.btitle) instance.bpub_date = validated_data.get('bpub_date', instance.bpub_date) instance.bread = validated_data.get('bread', instance.bread) instance.bcomment = validated_data.get('bcomment', instance.bcomment) instance.save() return instance 实现了上述两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了 book = serializer.save() 如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。 from db.serializers import BookInfoSerializer data = {'btitle': '封神演义', 'bpub_date': '1998-1-1'} serializer = BookInfoSerializer(data=data) serializer.is_valid() # True serializer.save() # <BookInfo: 封神演义> from db.models import BookInfo book = BookInfo.objects.get(id=2) data = {'btitle': '倚天剑', 'bpub_date': '1998-12-18'} serializer = BookInfoSerializer(book, data=data) serializer.is_valid() # True serializer.save() # <BookInfo: 倚天剑> book.btitle # '倚天剑' 两点说明： 1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到 serializer.save(owner=request.user) 2）默认序列化器必须传递所有required为True的字段，否则会抛出验证异常。但是我们可以使用partial参数来允许部分字段在更新操作时可以不传,而使用原有的数据 serializer = BookInfoSerializer(instance=book, data={'btitle': 'hello django', 'bpub_date': book.bpub_date}) # 两种写法最终效果等价 serializer = BookInfoSerializer(instance=book, data={'btitle': 'hello django'}, partial=True)","s":"2.3 反序列化使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#23-反序列化使用","p":178},{"i":190,"t":"如果我们想要使用序列化器对应的是Django的模型类，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。 ModelSerializer与常规的Serializer相同，但提供了： 基于模型类自动生成一系列字段 包含默认的create()和update()的实现 2.4.1. 定义​ 比如我们创建一个BookInfoSerializer class BookInfoSerializer(serializers.ModelSerializer): \"\"\"图书数据序列化器\"\"\" class Meta: model = BookInfo fields = '__all__' model 指明参照哪个模型类 fields 指明为模型类的哪些字段生成 我们可以在python manage.py shell中查看自动生成的BookInfoSerializer的具体实现 >>> from booktest.serializers import BookInfoSerializer >>> serializer = BookInfoSerializer() >>> serializer BookInfoSerializer(): id = IntegerField(label='ID', read_only=True) btitle = CharField(label='名称', max_length=20) bpub_date = DateField(allow_null=True, label='发布日期', required=False) bread = IntegerField(label='阅读量', max_value=2147483647, min_value=-2147483648, required=False) bcomment = IntegerField(label='评论量', max_value=2147483647, min_value=-2147483648, required=False) image = ImageField(allow_null=True, label='图片', max_length=100, required=False) 2.4.2. 指定字段​ 1) 使用fields来明确字段，__all__表名包含所有字段，也可以写明具体哪些字段，如 class BookInfoSerializer(serializers.ModelSerializer): \"\"\"图书数据序列化器\"\"\" class Meta: model = BookInfo fields = ('id', 'btitle', 'bpub_date') 2) 使用exclude可以明确排除掉哪些字段 class BookInfoSerializer(serializers.ModelSerializer): \"\"\"图书数据序列化器\"\"\" class Meta: model = BookInfo exclude = ('image',) 3) 显示指明字段，如： class HeroInfoSerializer(serializers.ModelSerializer): hbook = BookInfoSerializer() class Meta: model = HeroInfo fields = ('id', 'hname', 'hgender', 'hcomment', 'hbook') 4) 指明只读字段 可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段 class BookInfoSerializer(serializers.ModelSerializer): \"\"\"图书数据序列化器\"\"\" class Meta: model = BookInfo fields = ('id', 'btitle', 'bpub_date'， 'bread', 'bcomment') read_only_fields = ('id', 'bread', 'bcomment') 2.4.3. 添加额外参数​ 我们可以使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数 class BookInfoSerializer(serializers.ModelSerializer): \"\"\"图书数据序列化器\"\"\" class Meta: model = BookInfo fields = ('id', 'btitle', 'bpub_date', 'bread', 'bcomment') extra_kwargs = { 'bread': {'min_value': 0, 'required': True}, 'bcomment': {'min_value': 0, 'required': True}, } # BookInfoSerializer(): # id = IntegerField(label='ID', read_only=True) # btitle = CharField(label='名称', max_length=20) # bpub_date = DateField(allow_null=True, label='发布日期', required=False) # bread = IntegerField(label='阅读量', max_value=2147483647, min_value=0, required=True) # bcomment = IntegerField(label='评论量', max_value=2147483647, min_value=0, required=True)","s":"2.4 模型类序列化器ModelSerializer","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#24-模型类序列化器modelserializer","p":178},{"i":193,"t":"3.1.1. Request​ REST framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是REST framework提供的扩展了HttpRequest类的Request类的对象。 REST framework 提供了Parser解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典对象保存到Request对象中。 Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。 无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。 常用属性​ 1）.data request.data 返回解析之后的请求体数据。类似于Django中标准的request.POST和 request.FILES属性，但提供如下特性： 包含了解析之后的文件和非文件数据 包含了对POST、PUT、PATCH请求方式解析后的数据 利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据 2）.query_params request.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。 3.1.2. Response​ rest_framework.response.Response REST framework提供了一个响应类Response，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。 REST framework提供了Renderer 渲染器，用来根据请求头中的Accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。 REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': ( # 默认响应渲染类 'rest_framework.renderers.JSONRenderer', # json渲染器 'rest_framework.renderers.BrowsableAPIRenderer', # 浏览API渲染器 ) } 构造方式 Response(data, status=None, template_name=None, headers=None, content_type=None) data数据不要是render处理之后的数据，只需传递python的内建类型数据即可，REST framework会使用renderer渲染器处理data。 data不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用Serializer序列化器序列化处理后（转为了Python字典类型）再传递给data参数。 参数说明： data: 为响应准备的序列化处理后的数据； status: 状态码，默认200； template_name: 模板名称，如果使用HTMLRenderer 时需指明； headers: 用于存放响应头信息的字典； content_type: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。 常用属性： 1）.data 传给response对象的序列化后，但尚未render处理的数据 2）.status_code 状态码的数字 3）.content 经过render处理后的响应数据 3.1.3. 状态码​ 为了方便设置状态码，REST framewrok在rest_framework.status模块中提供了常用状态码常量。 1）信息告知 - 1xx​ HTTP_100_CONTINUE HTTP_101_SWITCHING_PROTOCOLS 2）成功 - 2xx​ HTTP_200_OK HTTP_201_CREATED HTTP_202_ACCEPTED HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT HTTP_205_RESET_CONTENT HTTP_206_PARTIAL_CONTENT HTTP_207_MULTI_STATUS 3）重定向 - 3xx​ HTTP_300_MULTIPLE_CHOICES HTTP_301_MOVED_PERMANENTLY HTTP_302_FOUND HTTP_303_SEE_OTHER HTTP_304_NOT_MODIFIED HTTP_305_USE_PROXY HTTP_306_RESERVED HTTP_307_TEMPORARY_REDIRECT 4）客户端错误 - 4xx​ HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_402_PAYMENT_REQUIRED HTTP_403_FORBIDDEN HTTP_404_NOT_FOUND HTTP_405_METHOD_NOT_ALLOWED HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT HTTP_409_CONFLICT HTTP_410_GONE HTTP_411_LENGTH_REQUIRED HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED HTTP_422_UNPROCESSABLE_ENTITY HTTP_423_LOCKED HTTP_424_FAILED_DEPENDENCY HTTP_428_PRECONDITION_REQUIRED HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS 5）服务器错误 - 5xx​ HTTP_500_INTERNAL_SERVER_ERROR HTTP_501_NOT_IMPLEMENTED HTTP_502_BAD_GATEWAY HTTP_503_SERVICE_UNAVAILABLE HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_507_INSUFFICIENT_STORAGE HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","s":"3.1 Request 与 Response","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#31-request-与-response","p":178},{"i":195,"t":"REST framework 提供了众多的通用视图基类与扩展类，以简化视图的编写。 视图的继承关系： ![通用视图继承关系](Django REST Framework总结.assets/通用视图的继承关系.png) 视图的方法与属性： ![视图的方法与属性](Django REST Framework总结.assets/通用视图的继承关系_含方法和属性.png)","s":"3.2 视图概览","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#32-视图概览","p":178},{"i":197,"t":"3.3.1. 两个基类​ 1）APIView​ rest_framework.views.APIView APIView是REST framework提供的所有视图的基类，继承自Django的View父类。 APIView与View的不同之处在于： 传入到视图方法中的是REST framework的Request对象，而不是Django的HttpRequeset对象； 视图方法可以返回REST framework的Response对象，视图会为响应数据设置（render）符合前端要求的格式； 任何APIException异常都会被捕获到，并且处理成合适的响应信息； 在进行dispatch()分发前，会对请求进行身份认证、权限检查、流量控制。 支持定义的属性： authentication_classes 列表或元组，身份认证类 permissoin_classes 列表或元组，权限检查类 throttle_classes 列表或元组，流量控制类 在APIView中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法。 举例： from rest_framework.views import APIView from rest_framework.response import Response # url(r'^books/$', views.BookListView.as_view()), class BookListView(APIView): def get(self, request): books = BookInfo.objects.all() serializer = BookInfoSerializer(books, many=True) return Response(serializer.data) 2）GenericAPIView​ rest_framework.generics.GenericAPIView 继承自APIVIew，主要增加了操作序列化器和数据库查询的方法，作用是为下面Mixin扩展类的执行提供方法支持。通常在使用时，可搭配一个或多个Mixin扩展类。 提供的关于序列化器使用的属性与方法 属性： serializer_class 指明视图使用的序列化器 方法： get_serializer_class(self) 返回序列化器类，默认返回serializer_class，可以重写，例如： def get_serializer_class(self): if self.request.user.is_staff: return FullAccountSerializer return BasicAccountSerializer get_serializer(self, *args, **kwargs)​ 返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。 注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。 request 当前视图的请求对象 view 当前请求的类视图对象 format 当前请求期望返回的数据格式 提供的关于数据库查询的属性与方法 属性： queryset 指明使用的数据查询集 方法： get_queryset(self) 返回视图使用的查询集，主要用来提供给Mixin扩展类使用，是列表视图与详情视图获取数据的基础，默认返回queryset属性，可以重写，例如： def get_queryset(self): user = self.request.user return user.accounts.all() get_object(self) 返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。 在试图中可以调用该方法获取详情信息的模型类对象。 若详情访问的模型类对象不存在，会返回404。 该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。 举例： # url(r'^books/(?P<pk>\\d+)/$', views.BookDetailView.as_view()), class BookDetailView(GenericAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer def get(self, request, pk): book = self.get_object() # get_object()方法根据pk参数查找queryset中的数据对象 serializer = self.get_serializer(book) return Response(serializer.data) 其他可以设置的属性 pagination_class 指明分页控制类 filter_backends 指明过滤控制后端 3.3.2. 五个扩展类​ 作用： 提供了几种后端视图（对数据资源进行曾删改查）处理流程的实现，如果需要编写的视图属于这五种，则视图可以通过继承相应的扩展类来复用代码，减少自己编写的代码量。 这五个扩展类需要搭配GenericAPIView父类，因为五个扩展类的实现需要调用GenericAPIView提供的序列化器与数据库查询的方法。 1）ListModelMixin​ 列表视图扩展类，提供list(request, *args, **kwargs)方法快速实现列表视图，返回200状态码。 该Mixin的list方法会对数据进行过滤和分页。 源代码： class ListModelMixin(object): \"\"\" List a queryset. \"\"\" def list(self, request, *args, **kwargs): # 过滤 queryset = self.filter_queryset(self.get_queryset()) # 分页 page = self.paginate_queryset(queryset) if page is not None: serializer = self.get_serializer(page, many=True) return self.get_paginated_response(serializer.data) # 序列化 serializer = self.get_serializer(queryset, many=True) return Response(serializer.data) 举例： from rest_framework.mixins import ListModelMixin class BookListView(ListModelMixin, GenericAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer def get(self, request): return self.list(request) 2）CreateModelMixin​ 创建视图扩展类，提供create(request, *args, **kwargs)方法快速实现创建资源的视图，成功返回201状态码。 如果序列化器对前端发送的数据验证失败，返回400错误。 源代码： class CreateModelMixin(object): \"\"\" Create a model instance. \"\"\" def create(self, request, *args, **kwargs): # 获取序列化器 serializer = self.get_serializer(data=request.data) # 验证 serializer.is_valid(raise_exception=True) # 保存 self.perform_create(serializer) headers = self.get_success_headers(serializer.data) return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers) def perform_create(self, serializer): serializer.save() def get_success_headers(self, data): try: return {'Location': str(data[api_settings.URL_FIELD_NAME])} except (TypeError, KeyError): return {} 3） RetrieveModelMixin​ 详情视图扩展类，提供retrieve(request, *args, **kwargs)方法，可以快速实现返回一个存在的数据对象。 如果存在，返回200， 否则返回404。 源代码： class RetrieveModelMixin(object): \"\"\" Retrieve a model instance. \"\"\" def retrieve(self, request, *args, **kwargs): # 获取对象，会检查对象的权限 instance = self.get_object() # 序列化 serializer = self.get_serializer(instance) return Response(serializer.data) 举例： class BookDetailView(RetrieveModelMixin, GenericAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer def get(self, request, pk): return self.retrieve(request) 4）UpdateModelMixin​ 更新视图扩展类，提供update(request, *args, **kwargs)方法，可以快速实现更新一个存在的数据对象。 同时也提供partial_update(request, *args, **kwargs)方法，可以实现局部更新。 成功返回200，序列化器校验数据失败时，返回400错误。 源代码： class UpdateModelMixin(object): \"\"\" Update a model instance. \"\"\" def update(self, request, *args, **kwargs): partial = kwargs.pop('partial', False) instance = self.get_object() serializer = self.get_serializer(instance, data=request.data, partial=partial) serializer.is_valid(raise_exception=True) self.perform_update(serializer) if getattr(instance, '_prefetched_objects_cache', None): # If 'prefetch_related' has been applied to a queryset, we need to # forcibly invalidate the prefetch cache on the instance. instance._prefetched_objects_cache = {} return Response(serializer.data) def perform_update(self, serializer): serializer.save() def partial_update(self, request, *args, **kwargs): kwargs['partial'] = True return self.update(request, *args, **kwargs) 5）DestroyModelMixin​ 删除视图扩展类，提供destroy(request, *args, **kwargs)方法，可以快速实现删除一个存在的数据对象。 成功返回204，不存在返回404。 源代码： class DestroyModelMixin(object): \"\"\" Destroy a model instance. \"\"\" def destroy(self, request, *args, **kwargs): instance = self.get_object() self.perform_destroy(instance) return Response(status=status.HTTP_204_NO_CONTENT) def perform_destroy(self, instance): instance.delete() 3.3.3. 几个可用子类视图​ 1） CreateAPIView​ 提供 post 方法 继承自： GenericAPIView、CreateModelMixin 2）ListAPIView​ 提供 get 方法 继承自：GenericAPIView、ListModelMixin 3）RetrieveAPIView​ 提供 get 方法 继承自: GenericAPIView、RetrieveModelMixin 4）DestoryAPIView​ 提供 delete 方法 继承自：GenericAPIView、DestoryModelMixin 5）UpdateAPIView​ 提供 put 和 patch 方法 继承自：GenericAPIView、UpdateModelMixin 6）RetrieveUpdateAPIView​ 提供 get、put、patch方法 继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin 7）RetrieveUpdateDestoryAPIView​ 提供 get、put、patch、delete方法 继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin","s":"3.3 视图说明","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#33-视图说明","p":178},{"i":199,"t":"使用视图集ViewSet，可以将一系列逻辑相关的动作放到一个类中： list() 提供一组数据 retrieve() 提供单个数据 create() 创建数据 update() 保存数据 destory() 删除数据 ViewSet视图集类不再实现get()、post()等方法，而是实现动作 action 如 list() 、create() 等。 视图集只在使用as_view()方法的时候，才会将action动作与具体请求方式对应上。如： class BookInfoViewSet(viewsets.ViewSet): def list(self, request): books = BookInfo.objects.all() serializer = BookInfoSerializer(books, many=True) return Response(serializer.data) def retrieve(self, request, pk=None): try: books = BookInfo.objects.get(id=pk) except BookInfo.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) serializer = BookInfoSerializer(books) return Response(serializer.data) 在设置路由时，我们可以如下操作 urlpatterns = [ url(r'^books/$', BookInfoViewSet.as_view({'get':'list'}), url(r'^books/(?P<pk>\\d+)/$', BookInfoViewSet.as_view({'get': 'retrieve'}) ] 3.4.1. 常用视图集父类​ 1） ViewSet 继承自APIView与ViewSetMixin，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。 ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典（如{'get':'list'}）的映射处理工作。 在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。 2）GenericViewSet 使用ViewSet通常并不方便，因为list、retrieve、create、update、destory等方法都需要自己编写，而这些方法与前面讲过的Mixin扩展类提供的方法同名，所以我们可以通过继承Mixin扩展类来复用这些方法而无需自己编写。但是Mixin扩展类依赖与GenericAPIView，所以还需要继承GenericAPIView。 GenericViewSet就帮助我们完成了这样的继承工作，继承自GenericAPIView与ViewSetMixin，在实现了调用as_view()时传入字典（如{'get':'list'}）的映射处理工作的同时，还提供了GenericAPIView提供的基础方法，可以直接搭配Mixin扩展类使用。 举例： from rest_framework import mixins from rest_framework.viewsets import GenericViewSet from rest_framework.decorators import action class BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer url的定义 urlpatterns = [ url(r'^books/$', views.BookInfoViewSet.as_view({'get': 'list'})), url(r'^books/(?P<pk>\\d+)/$', views.BookInfoViewSet.as_view({'get': 'retrieve'})), ] 3）ModelViewSet 继承自GenericViewSet，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。 4）ReadOnlyModelViewSet 继承自GenericViewSet，同时包括了ListModelMixin、RetrieveModelMixin。 3.4.2. 视图集中定义附加action动作​ 在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。 举例： from rest_framework import mixins from rest_framework.viewsets import GenericViewSet from rest_framework.decorators import action class BookInfoViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer def latest(self, request): \"\"\" 返回最新的图书信息 \"\"\" book = BookInfo.objects.latest('id') serializer = self.get_serializer(book) return Response(serializer.data) def read(self, request, pk): \"\"\" 修改图书的阅读量数据 \"\"\" book = self.get_object() book.bread = request.data.get('bread') book.save() serializer = self.get_serializer(book) return Response(serializer.data) url的定义 urlpatterns = [ url(r'^books/$', views.BookInfoViewSet.as_view({'get': 'list'})), url(r'^books/latest/$', views.BookInfoViewSet.as_view({'get': 'latest'})), url(r'^books/(?P<pk>\\d+)/$', views.BookInfoViewSet.as_view({'get': 'retrieve'})), url(r'^books/(?P<pk>\\d+)/read/$', views.BookInfoViewSet.as_view({'put': 'read'})), ] 3.4.3. action属性​ 在视图集中，我们可以通过action对象属性来获取当前请求视图集时的action动作是哪个。 例如： def get_serializer_class(self): if self.action == 'create': return OrderCommitSerializer else: return OrderDataSerializer 3.4.4. 视图集的继承关系​ ![视图集的继承关系](Django REST Framework总结.assets/视图集类继承关系.png)","s":"3.4 视图集ViewSet","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#34-视图集viewset","p":178},{"i":201,"t":"可以在配置文件中配置全局默认的认证方案 REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.BasicAuthentication', # 基本认证 'rest_framework.authentication.SessionAuthentication', # session认证 ) } 也可以在每个视图中通过设置authentication_classess属性来设置 from rest_framework.authentication import SessionAuthentication, BasicAuthentication from rest_framework.views import APIView class ExampleView(APIView): authentication_classes = (SessionAuthentication, BasicAuthentication) ... 认证失败会有两种可能的返回值： 401 Unauthorized 未认证 403 Permission Denied 权限被禁止","s":"4. 认证Authentication","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#4-认证authentication","p":178},{"i":203,"t":"权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。 在执行视图的dispatch()方法前，会先进行视图访问权限的判断 在通过get_object()获取具体对象时，会进行对象访问权限的判断","s":"5. 权限Permissions","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#5-权限permissions","p":178},{"i":205,"t":"可以在配置文件中设置默认的权限管理类，如 REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ) } 如果未指明，则采用如下默认配置 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.AllowAny', ) 也可以在具体的视图中通过permission_classes属性来设置，如 from rest_framework.permissions import IsAuthenticated from rest_framework.views import APIView class ExampleView(APIView): permission_classes = (IsAuthenticated,) ...","s":"使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#使用","p":178},{"i":207,"t":"AllowAny 允许所有用户 IsAuthenticated 仅通过认证的用户 IsAdminUser 仅管理员用户 IsAuthenticatedOrReadOnly 认证的用户可以完全操作，否则只能get读取","s":"提供的权限","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#提供的权限","p":178},{"i":209,"t":"from rest_framework.authentication import SessionAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.generics import RetrieveAPIView class BookDetailView(RetrieveAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer authentication_classes = [SessionAuthentication] permission_classes = [IsAuthenticated]","s":"举例","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#举例","p":178},{"i":211,"t":"如需自定义权限，需继承rest_framework.permissions.BasePermission父类，并实现以下两个任何一个方法或全部 .has_permission(self, request, view) 是否可以访问视图， view表示当前视图对象 .has_object_permission(self, request, view, obj) 是否可以访问数据对象， view表示当前视图， obj为数据对象 例如： class MyPermission(BasePermission): def has_object_permission(self, request, view, obj): \"\"\"控制对obj对象的访问权限，此案例决绝所有对对象的访问\"\"\" return False class BookInfoViewSet(ModelViewSet): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer permission_classes = [IsAuthenticated, MyPermission]","s":"自定义权限","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#自定义权限","p":178},{"i":213,"t":"可以对接口访问的频次进行限制，以减轻服务器压力。","s":"6. 限流Throttling","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#6-限流throttling","p":178},{"i":215,"t":"可以在配置文件中，使用DEFAULT_THROTTLE_CLASSES 和 DEFAULT_THROTTLE_RATES进行全局配置， REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'rest_framework.throttling.AnonRateThrottle', 'rest_framework.throttling.UserRateThrottle' ), 'DEFAULT_THROTTLE_RATES': { 'anon': '100/day', 'user': '1000/day' } } DEFAULT_THROTTLE_RATES 可以使用 second, minute, hour 或day来指明周期。 也可以在具体视图中通过throttle_classess属性来配置，如 from rest_framework.throttling import UserRateThrottle from rest_framework.views import APIView class ExampleView(APIView): throttle_classes = (UserRateThrottle,) ...","s":"使用","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#使用-1","p":178},{"i":217,"t":"1） AnonRateThrottle 限制所有匿名未认证用户，使用IP区分用户。 使用DEFAULT_THROTTLE_RATES['anon'] 来设置频次 2）UserRateThrottle 限制认证用户，使用User id 来区分。 使用DEFAULT_THROTTLE_RATES['user'] 来设置频次 3）ScopedRateThrottle 限制用户对于每个视图的访问频次，使用ip或user id。 例如： class ContactListView(APIView): throttle_scope = 'contacts' ... class ContactDetailView(APIView): throttle_scope = 'contacts' ... class UploadView(APIView): throttle_scope = 'uploads' ... REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'rest_framework.throttling.ScopedRateThrottle', ), 'DEFAULT_THROTTLE_RATES': { 'contacts': '1000/day', 'uploads': '20/day' } }","s":"可选限流类","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#可选限流类","p":178},{"i":219,"t":"from rest_framework.authentication import SessionAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.generics import RetrieveAPIView from rest_framework.throttling import UserRateThrottle class BookDetailView(RetrieveAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer authentication_classes = [SessionAuthentication] permission_classes = [IsAuthenticated] throttle_classes = (UserRateThrottle,)","s":"实例","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#实例","p":178},{"i":221,"t":"对于列表数据可能需要根据字段进行过滤，我们可以通过添加django-fitlter扩展来增强支持。 pip install django-filter 在配置文件中增加过滤后端的设置： INSTALLED_APPS = [ ... 'django_filters', # 需要注册应用， ] REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',) } 在视图中添加filter_fields属性，指定可以过滤的字段 class BookListView(ListAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer filter_fields = ('btitle', 'bread') # 127.0.0.1:8000/books/?btitle=西游记","s":"7. 过滤Filtering","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#7-过滤filtering","p":178},{"i":223,"t":"对于列表数据，REST framework提供了OrderingFilter过滤器来帮助我们快速指明数据按照指定字段进行排序。 使用方法： 在类视图中设置filter_backends，使用rest_framework.filters.OrderingFilter过滤器，REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。 前端可以传递的ordering参数的可选字段值需要在ordering_fields中指明。 示例： class BookListView(ListAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer filter_backends = [OrderingFilter] ordering_fields = ('id', 'bread', 'bpub_date') # 127.0.0.1:8000/books/?ordering=-bread","s":"8. 排序","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#8-排序","p":178},{"i":225,"t":"REST framework提供了分页的支持。 我们可以在配置文件中设置全局的分页方式，如： REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 100 # 每页数目 } 也可通过自定义Pagination类，来为视图添加不同分页行为。在视图中通过pagination_clas属性来指明。 class LargeResultsSetPagination(PageNumberPagination): page_size = 1000 page_size_query_param = 'page_size' max_page_size = 10000 class BookDetailView(RetrieveAPIView): queryset = BookInfo.objects.all() serializer_class = BookInfoSerializer pagination_class = LargeResultsSetPagination 注意：如果在视图内关闭分页功能，只需在视图内设置 pagination_class = None 可选分页器 1） PageNumberPagination 前端访问网址形式： GET http://api.example.org/books/?page=4 可以在子类中定义的属性： page_size 每页数目 page_query_param 前端发送的页数关键字名，默认为\"page\" page_size_query_param 前端发送的每页数目关键字名，默认为None max_page_size 前端最多能设置的每页数量 from rest_framework.pagination import PageNumberPagination class StandardPageNumberPagination(PageNumberPagination): page_size_query_param = 'page_size' max_page_size = 10 class BookListView(ListAPIView): queryset = BookInfo.objects.all().order_by('id') serializer_class = BookInfoSerializer pagination_class = StandardPageNumberPagination # 127.0.0.1/books/?page=1&page_size=2 2）LimitOffsetPagination 前端访问网址形式： GET http://api.example.org/books/?limit=100&offset=400 可以在子类中定义的属性： default_limit 默认限制，默认值与PAGE_SIZE设置一直 limit_query_param limit参数名，默认'limit' offset_query_param offset参数名，默认'offset' max_limit 最大limit限制，默认None from rest_framework.pagination import LimitOffsetPagination class BookListView(ListAPIView): queryset = BookInfo.objects.all().order_by('id') serializer_class = BookInfoSerializer pagination_class = LimitOffsetPagination # 127.0.0.1:8000/books/?offset=3&limit=2","s":"9. 分页Pagination","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#9-分页pagination","p":178},{"i":227,"t":"REST framework提供了异常处理，我们可以自定义异常处理函数。 from rest_framework.views import exception_handler def custom_exception_handler(exc, context): # 先调用REST framework默认的异常处理方法获得标准错误响应对象 response = exception_handler(exc, context) # 在此处补充自定义的异常处理 if response is not None: response.data['status_code'] = response.status_code return response 在配置文件中声明自定义的异常处理 REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler' } 如果未声明，会采用默认的方式，如下 REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler' } 例如： 补充上处理关于数据库的异常 from rest_framework.views import exception_handler as drf_exception_handler from rest_framework import status from django.db import DatabaseError def exception_handler(exc, context): response = drf_exception_handler(exc, context) if response is None: view = context['view'] if isinstance(exc, DatabaseError): print('[%s]: %s' % (view, exc)) response = Response({'detail': '服务器内部错误'}, status=status.HTTP_507_INSUFFICIENT_STORAGE) return response REST framework定义的异常 APIException 所有异常的父类 ParseError 解析错误 AuthenticationFailed 认证失败 NotAuthenticated 尚未认证 PermissionDenied 权限决绝 NotFound 未找到 MethodNotAllowed 请求方式不支持 NotAcceptable 要获取的数据格式不支持 Throttled 超过限流次数 ValidationError 校验失败","s":"10. 异常处理 Exceptions","u":"/blog/docs/Django/DjangoRESTFramework总结","h":"#10-异常处理-exceptions","p":178},{"i":230,"t":"安装django pip install django==3.0 查看安装版本号 python -m django --version 创建项目 使用Django命令创建项目，它会帮你生成Django项目的一些基础代码和配置 django-admin startproject project_name 【注】：在Mac下，默认安装的是Python2.7，可能由于某些原因会找不到django-admin命令，可以使用以下命令代替 ​ python -m django startproject project_name 运行项目 使用命令 python manage.py runserver [addrport] 运行Django项目，默认情况下，runserver 命令会将服务器设置为监听本机内部 IP 的 8000 端口。 每次修改项目代码，不用重新启动django服务。然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时你得自己手动重启服务器。 创建应用 项目 VS 应用 项目和应用有什么区别？应用是一个专门做某件事的网络应用程序——比如博客系统，或者公共记录的数据库，或者小型的投票程序。项目则是一个网站使用的配置和应用的集合。项目可以包含很多个应用。应用可以被很多个项目使用。 在manage.py目录下运行命令，也可以有路径表示manage.py。python manage.py startapp app_name 创建模型 一个模型类代表一张数据库表，一般写在app目录下的models.py文件中。 from django.db import models class Question(models.Model): question_text = models.CharField(max_length=200) pub_date = models.DateTimeField('date published') class Choice(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE) choice_text = models.CharField(max_length=200) votes = models.IntegerField(default=0) 数据库 生成迁移文件 python manage.py makemigrations [app_name] 查看sql，先看看在迁移的时候实际执行的SQL语句是什么。 python manage.py sqlmigrate polls 0001 执行迁移 python manage.py migrate","s":"1. 快速入门","u":"/blog/docs/Django/Django基础学习笔记","h":"#1-快速入门","p":228},{"i":232,"t":"mysite/ manage.py mysite/ __init__.py settings.py urls.py asgi.py wsgi.py # 应用 polls/ __init__.py admin.py apps.py migrations/ __init__.py models.py tests.py views.py 最外层的 mysite/ 根目录只是你项目的容器， 根目录名称对Django没有影响，你可以将它重命名为任何你喜欢的名称。 manage.py: 一个让你用各种方式管理 Django 项目的命令行工具。你可以阅读 django-admin and manage.py 获取所有 manage.py 的细节。 里面一层的 mysite/ 目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 mysite.urls). mysite/__init__.py：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。如果你是 Python 初学者，阅读官方文档中的 更多关于包的知识。 mysite/settings.py：Django 项目的配置文件。如果你想知道这个文件是如何工作的，请查看 Django 配置 了解细节。 mysite/urls.py：Django 项目的 URL 声明，就像你网站的“目录”。阅读 URL调度器 文档来获取更多关于 URL 的内容。 mysite/asgi.py：作为你的项目的运行在 ASGI 兼容的Web服务器上的入口。阅读 如何使用 WSGI 进行部署 了解更多细节。 mysite/wsgi.py：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。阅读 如何使用 WSGI 进行部署 了解更多细节。","s":"2. 项目结构","u":"/blog/docs/Django/Django基础学习笔记","h":"#2-项目结构","p":228},{"i":234,"t":"为了给一个应用设计URL，你需要创建一个Python 模块，通常被称为URLconf(URL configuration)。这个模块是纯粹的Python 代码，包含URL 模式(简单的正则表达式)到Python 函数(你的视图)的简单映射。 附： 路由配置官方文档 Django 还提供根据当前语言翻译URL 的一种方法。更多信息参见 国际化文档。 Django 如何处理一个请求","s":"3. 路由配置","u":"/blog/docs/Django/Django基础学习笔记","h":"#3-路由配置","p":228},{"i":236,"t":"一个路由配置模块就是一个urlpatterns列表，列表的每个元素都是一项path，每一项path都是以path()的形式存在。 path()方法可以接收4个参数，其中前2个是必须的：route和view，以及2个可选的参数：kwargs和name。 from django.urls import path from . import views urlpatterns = [ path('articles/2003/', views.special_case_2003), path('articles/<int:year>/', views.year_archive), path('articles/<int:year>/<int:month>/', views.month_archive), path('articles/<int:year>/<int:month>/<slug:slug>/', views.article_detail), ] 注意： 要从 URL 中取值，使用尖括号<>。 捕获的值可以选择性地包含转换器类型。比如，使用 <int:name> 来捕获整型参数。如果不包含转换器，则会匹配除了 / 外的任何字符。 这里不需要添加反斜杠，因为每个 URL 都有。比如，应该是 articles 而不是 /articles 。 一些请求的例子： /articles/2005/03/ 会匹配 URL 列表中的第三项。Django 会调用函数 views.month_archive(request, year=2005, month=3) 。 /articles/2003/ 将匹配列表中的第一个模式，而不是第二个模式，因为模式是按顺序测试的，而第一个模式是第一个通过的测试。因此如果你需要特别处理一些特殊路由，可以先写在前面。在这里，Django将调用该函数views.special_case_2003(request) /articles/2003 不会匹配这些模式中的任何一个，因为每个模式都要求URL以斜杠结尾。 /articles/2003/03/building-a-django-site/ 会匹配 URL 列表中的最后一项。Django 会调用函数 views.article_detail(request, year=2003, month=3, slug=\"building-a-django-site\") 。","s":"3.1 简单的示例","u":"/blog/docs/Django/Django基础学习笔记","h":"#31-简单的示例","p":228},{"i":238,"t":"下面的路径转换器在默认情况下是有效的： str - 匹配除了 '/' 之外的非空字符串。如果表达式内不包含转换器，则会默认匹配字符串。 int - 匹配 0 或任何正整数。返回一个 int 。 slug - 匹配任意由 ASCII 字母或数字以及连字符和下划线组成的短标签。比如，building-your-1st-django-site 。 uuid - 匹配一个格式化的 UUID 。为了防止多个 URL 映射到同一个页面，必须包含破折号并且字符都为小写。比如，075194d3-6885-417e-a8a8-6c931e272f00。返回一个 UUID 实例。 path - 匹配非空字段，包括路径分隔符 '/' 。它允许你匹配完整的 URL 路径而不是像 str 那样匹配 URL 的一部分。 附：注册自定义的路径转换器","s":"3.2 路径转换器","u":"/blog/docs/Django/Django基础学习笔记","h":"#32-路径转换器","p":228},{"i":240,"t":"如果路径和转化器语法不能很好的定义你的 URL 模式，你可以可以使用正则表达式。如果要这样做，请使用 re_path() 而不是 path() 。 在 Python 正则表达式中，命名正则表达式组的语法是 (?P<name>pattern) ，其中 name 是组名，pattern 是要匹配的模式。 这里是先前 URLconf 的一些例子，现在用正则表达式重写一下： from django.urls import path, re_path from . import views urlpatterns = [ path('articles/2003/', views.special_case_2003), re_path(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive), re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_archive), re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\\w-]+)/$', views.article_detail), ] 这实现了与前面示例大致相同的功能，除了: ^：意思是“模式必须从这里开始” 将要匹配的 URLs 将稍受限制。比如，10000 年将不在匹配，因为 year 被限制长度为4。 无论正则表达式进行哪种匹配，每个捕获的参数都作为字符串发送到视图。 为了完成这个模式，符号$的作用与^相反，表示“模式必须在这里结束”。 当从使用 path() 切换到 re_path() （反之亦然），要特别注意，视图参数类型可能发生变化，你可能需要调整你的视图。 使用未命名的正则表达式组 还有命名组语法，例如 (?P<year>[0-9]{4}) ，你也可以使用更短的未命名组，例如 ([0-9]{4}) 。 不是特别推荐这个用法，因为它会更容易在匹配的预期含义和视图参数之间引发错误。 在任何情况下，推荐在给定的正则表达式里只使用一个样式。当混杂两种样式时，任何未命名的组都会被忽略，而且只有命名的组才会传递给视图函数。","s":"3.3 正则表达式路由","u":"/blog/docs/Django/Django基础学习笔记","h":"#33-正则表达式路由","p":228},{"i":242,"t":"任何时候，你的 urlpatterns 都可以 \"include\" 其它URLconf 模块。这实际上将一部分URL 放置于其它URL 下面。 from django.urls import include, path urlpatterns = [ # ... snip ... path('community/', include('aggregator.urls')), path('contact/', include('contact.urls')), # ... snip ... ] 而当其中某个URL前缀被重复使用时，可以使用include来改进，例如： from django.urls import include, path from . import views urlpatterns = [ path('<page_slug>-<page_id>/', include([ path('history/', views.history), path('edit/', views.edit), path('discuss/', views.discuss), path('permissions/', views.permissions), ])), ] 被包含的URLconf 会收到来自父URLconf 捕获的任何参数，在上面的例子中，捕获的 page_slug page_id 变量将被如期传递给include()指向的URLconf/View。","s":"3.4 包含app的URLconfs","u":"/blog/docs/Django/Django基础学习笔记","h":"#34-包含app的urlconfs","p":228},{"i":244,"t":"URLconfs 有钩子来允许你把其他参数作为 Python 字典来传递给视图函数。 path()函数可带有可选的第三参数（必须是字典），传递到视图函数里。 但是视图函数必须要有相关的参数接收，要不然就会出错。 from django.urls import path from . import views urlpatterns = [ path('blog/<int:year>/', views.year_archive, {'foo': 'bar'}), path('blog/', include('inner'), {'blog_id': 3}), ]","s":"3.5 额外传参","u":"/blog/docs/Django/Django基础学习笔记","h":"#35-额外传参","p":228},{"i":247,"t":"一个视图函数（或简称为视图）是一个 Python 函数/类，它接受 Web 请求并返回一个 Web 响应。这个响应可以是 Web 页面的 HTML 内容，或者重定向，或者404错误，或者 XML 文档，或一个图片...或是任何内容。视图本身包含返回响应所需的任何逻辑。这个代码可以存在任何地方，只要它在你的 Python 路径上就行。可以说，不需要其他东西，这里并没有魔法。为了将代码放置在某处，约定将视图放在名为 views.py 的文件里，这个文件放置在项目或应用目录里。 每个视图函数都将 HttpRequest 对象作为第一个参数，通常名为 request 。 视图返回一个包含生成的响应的 HttpResponse 对象。每个视图函数都要返回 HttpResponse 对象。","s":"4. 视图","u":"/blog/docs/Django/Django基础学习笔记","h":"#4-视图","p":228},{"i":249,"t":"Django 提供很多装饰器，它们可以为视图支持多种 HTTP 特性。位于django.views.decorators包下。 限制http的请求方式 require_http_methods(request_method_list) 要求视图只接受特定的请求方法。 require_GET()装饰器可以要求视图只接受 GET 方法。 require_POST()装饰器可以要求视图只接受 POST 方法。 require_safe()装饰器可以要求视图只接收 GET 和 HEAD 方法。这些方法通常被认为是安全的。 用法如下： from django.views.decorators.http import require_http_methods @require_http_methods([\"GET\", \"POST\"]) def my_view(request): # I can assume now that only GET or POST requests make it this far # ... pass","s":"视图装饰器¶","u":"/blog/docs/Django/Django基础学习笔记","h":"#视图装饰器","p":228},{"i":252,"t":"下表列出了所有Django内置的字段类型，但不包括关系字段类型 类型 说明 AutoField 一个自动增加的整数类型字段。通常你不需要自己编写它，Django会自动帮你添加字段：id = models.AutoField(primary_key=True)，这是一个自增字段，从1开始计数。如果你非要自己设置主键，那么请务必将字段设置为primary_key=True。Django在一个模型中只允许有一个自增字段，并且该字段必须为主键！ BigAutoField 64位整数类型自增字段，数字范围更大，从1到9223372036854775807 BigIntegerField 64位整数字段（看清楚，非自增），类似IntegerField ，-9223372036854775808 到9223372036854775807。在Django的模板表单里体现为一个NumberInput标签。 BinaryField 二进制数据类型。较少使用。 BooleanField 布尔值类型。默认值是None。在HTML表单中体现为CheckboxInput标签。如果设置了参数null=True，则表现为NullBooleanSelect选择框。可以提供default参数值，设置默认值。 CharField 最常用的类型，字符串类型。必须接收一个max_length参数，表示字符串长度不能超过该值。默认的表单标签是text input。 DateField class DateField(auto_now=False, auto_now_add=False, **options) , 日期类型。一个Python中的datetime.date的实例。在HTML中表现为DateInput标签。在admin后台中，Django会帮你自动添加一个JS日历表和一个“Today”快捷方式，以及附加的日期合法性验证。两个重要参数：（参数互斥，不能共存） auto_now:每当对象被保存时将字段设为当前日期，常用于保存最后修改时间。auto_now_add：每当对象被创建时，设为当前日期，常用于保存创建日期(注意，它是不可修改的)。设置上面两个参数就相当于给field添加了editable=False和blank=True属性。如果想具有修改属性，请用default参数。例子：pub_time = models.DateField(auto_now_add=True)，自动添加发布时间。 DateTimeField 日期时间类型。Python的datetime.datetime的实例。与DateField相比就是多了小时、分和秒的显示，其它功能、参数、用法、默认值等等都一样。 DecimalField 固定精度的十进制小数。相当于Python的Decimal实例，必须提供两个指定的参数！参数max_digits：最大的位数，必须大于或等于小数点位数 。decimal_places：小数点位数，精度。 当localize=False时，它在HTML表现为NumberInput标签，否则是textInput类型。例子：储存最大不超过999，带有2位小数位精度的数，定义如下：models.DecimalField(..., max_digits=5, decimal_places=2)。 DurationField 持续时间类型。存储一定期间的时间长度。类似Python中的timedelta。在不同的数据库实现中有不同的表示方法。常用于进行时间之间的加减运算。但是小心了，这里有坑，PostgreSQL等数据库之间有兼容性问题！ EmailField 邮箱类型，默认max_length最大长度254位。使用这个字段的好处是，可以使用Django内置的EmailValidator进行邮箱格式合法性验证。 FileField class FileField(upload_to=None, max_length=100, **options)上传文件类型，后面单独介绍。 FilePathField 文件路径类型，后面单独介绍 FloatField 浮点数类型，对应Python的float。参考整数类型字段。 ImageField 图像类型，后面单独介绍。 IntegerField 整数类型，最常用的字段之一。取值范围-2147483648到2147483647。在HTML中表现为NumberInput或者TextInput标签。 GenericIPAddressField class GenericIPAddressField(protocol='both', unpack_ipv4=False, **options),IPV4或者IPV6地址，字符串形式，例如192.0.2.30或者2a02:42fe::4。在HTML中表现为TextInput标签。参数protocol默认值为‘both’，可选‘IPv4’或者‘IPv6’，表示你的IP地址类型。 JSONField JSON类型字段。Django3.1新增。签名为class JSONField(encoder=None,decoder=None,**options)。其中的encoder和decoder为可选的编码器和解码器，用于自定义编码和解码方式。如果为该字段提供default值，请务必保证该值是个不可变的对象，比如字符串对象。 PositiveBigIntegerField 正的大整数，0到9223372036854775807 PositiveIntegerField 正整数，从0到2147483647 PositiveSmallIntegerField 较小的正整数，从0到32767 SlugField slug是一个新闻行业的术语。一个slug就是一个某种东西的简短标签，包含字母、数字、下划线或者连接线，通常用于URLs中。可以设置max_length参数，默认为50。 SmallAutoField Django3.0新增。类似AutoField，但是只允许1到32767。 SmallIntegerField 小整数，包含-32768到32767。 TextField 用于储存大量的文本内容，在HTML中表现为Textarea标签，最常用的字段类型之一！如果你为它设置一个max_length参数，那么在前端页面中会受到输入字符数量限制，然而在模型和数据库层面却不受影响。只有CharField才能同时作用于两者。 TimeField 时间字段，Python中datetime.time的实例。接收同DateField一样的参数，只作用于小时、分和秒。 URLField 一个用于保存URL地址的字符串类型，默认最大长度200。 UUIDField 用于保存通用唯一识别码（Universally Unique Identifier）的字段。使用Python的UUID类。在PostgreSQL数据库中保存为uuid类型，其它数据库中为char(32)。这个字段是自增主键的最佳替代品，后面有例子展示。 1.FileField class FileField(upload_to=None, max_length=100, **options) 上传文件字段（不能设置为主键）。默认情况下，该字段在HTML中表现为一个ClearableFileInput标签。在数据库内，我们实际保存的是一个字符串类型，默认最大长度100，可以通过max_length参数自定义。真实的文件是保存在服务器的文件系统内的。 重要参数upload_to用于设置上传地址的目录和文件名。如下例所示： class MyModel(models.Model): # 文件被传至`MEDIA_ROOT/uploads`目录，MEDIA_ROOT由你在settings文件中设置 upload = models.FileField(upload_to='uploads/') # 或者 # 被传到`MEDIA_ROOT/uploads/2015/01/30`目录，增加了一个时间划分 upload = models.FileField(upload_to='uploads/%Y/%m/%d/') Django很人性化地帮我们实现了根据日期生成目录或文件的方式！ upload_to参数也可以接收一个回调函数，该函数返回具体的路径字符串，如下例： def user_directory_path(instance, filename): #文件上传到MEDIA_ROOT/user_<id>/<filename>目录中 return 'user_{0}/{1}'.format(instance.user.id, filename) class MyModel(models.Model): upload = models.FileField(upload_to=user_directory_path) 例子中，user_directory_path这种回调函数，必须接收两个参数，然后返回一个Unix风格的路径字符串。参数instace代表一个定义了FileField的模型的实例，说白了就是当前数据记录。filename是原本的文件名。 从Django3.0开始，支持使用pathlib.Path 处理路径。 当你访问一个模型对象中的文件字段时，Django会自动给我们提供一个 FieldFile实例作为文件的代理，通过这个代理，我们可以进行一些文件操作，主要如下： FieldFile.name ： 获取文件名 FieldFile.size： 获取文件大小 FieldFile.url ：用于访问该文件的url FieldFile.open(mode='rb')： 以类似Python文件操作的方式，打开文件 FieldFile.close()： 关闭文件 FieldFile.save(name, content, save=True)： 保存文件 FieldFile.delete(save=True)： 删除文件 这些代理的API和Python原生的文件读写API非常类似，其实本质上就是进行了一层封装，让我们可以在Django内直接对模型中文件字段进行读写，而不需要绕弯子。 2. ImageField class ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options) 用于保存图像文件的字段。该字段继承了FileField，其用法和特性与FileField基本一样，只不过多了两个属性height和width。默认情况下，该字段在HTML中表现为一个ClearableFileInput标签。在数据库内，我们实际保存的是一个字符串类型，默认最大长度100，可以通过max_length参数自定义。真实的图片是保存在服务器的文件系统内的。 height_field参数：保存有图片高度信息的模型字段名。 width_field参数：保存有图片宽度信息的模型字段名。 使用Django的ImageField需要提前安装pillow模块，pip install pillow即可。 3. 使用FileField或者ImageField字段的步骤： 在settings文件中，配置MEDIA_ROOT，作为你上传文件在服务器中的基本路径（为了性能考虑，这些文件不会被储存在数据库中）。再配置个MEDIA_URL，作为公用URL，指向上传文件的基本路径。请确保Web服务器的用户账号对该目录具有写的权限。 添加FileField或者ImageField字段到你的模型中，定义好upload_to参数，文件最终会放在MEDIA_ROOT目录的“upload_to”子目录中。 所有真正被保存在数据库中的，只是指向你上传文件路径的字符串而已。可以通过url属性，在Django的模板中方便的访问这些文件。例如，假设你有一个ImageField字段，名叫mug_shot，那么在Django模板的HTML文件中，可以使用{{ object.mug_shot.url }}来获取该文件。其中的object用你具体的对象名称代替。 可以通过name和size属性，获取文件的名称和大小信息。 安全建议： 无论你如何保存上传的文件，一定要注意他们的内容和格式，避免安全漏洞！务必对所有的上传文件进行安全检查，确保它们不出问题！如果你不加任何检查就盲目的让任何人上传文件到你的服务器文档根目录内，比如上传了一个CGI或者PHP脚本，很可能就会被访问的用户执行，这具有致命的危害。 4. FilePathField class FilePathField(path='', match=None, recursive=False, allow_files=True, allow_folders=False, max_length=100, **options) 一种用来保存文件路径信息的字段。在数据表内以字符串的形式存在，默认最大长度100，可以通过max_length参数设置。 它包含有下面的一些参数： path：必须指定的参数。表示一个系统绝对路径。path通常是个字符串，也可以是个可调用对象，比如函数。 match:可选参数，一个正则表达式，用于过滤文件名。只匹配基本文件名，不匹配路径。例如foo.*\\.txt$，只匹配文件名foo23.txt，不匹配bar.txt与foo23.png。 recursive:可选参数，只能是True或者False。默认为False。决定是否包含子目录，也就是是否递归的意思。 allow_files:可选参数，只能是True或者False。默认为True。决定是否应该将文件名包括在内。它和allow_folders其中，必须有一个为True。 allow_folders： 可选参数，只能是True或者False。默认为False。决定是否应该将目录名包括在内。 比如： FilePathField(path=\"/home/images\", match=\"foo.*\", recursive=True) 它只匹配/home/images/foo.png，但不匹配/home/images/foo/bar.png，因为默认情况，只匹配文件名，而不管路径是怎么样的。 例子： import os from django.conf import settings from django.db import models def images_path(): return os.path.join(settings.LOCAL_FILE_DIR, 'images') class MyModel(models.Model): file = models.FilePathField(path=images_path) 5. UUIDField 数据库无法自己生成uuid，因此需要如下使用default参数： import uuid # Python的内置模块 from django.db import models class MyUUIDModel(models.Model): id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False) # 其它字段 注意不要写成default=uuid.uuid4()","s":"4.1 常见字段类型","u":"/blog/docs/Django/Django基础学习笔记","h":"#41-常见字段类型","p":228},{"i":254,"t":"所有的模型字段都可以接收一定数量的参数，比如CharField至少需要一个max_length参数。下面的这些参数是所有字段都可以使用的，并且是可选的。 null 该值为True时，Django在数据库用NULL保存空值。默认值为False。对于保存字符串类型数据的字段，请尽量避免将此参数设为True，那样会导致两种‘没有数据’的情况，一种是NULL，另一种是空字符串''。Django 的惯例是使用空字符串而不是 NULL。 blank True时，字段可以为空。默认False。和null参数不同的是，null是纯数据库层面的，而blank是验证相关的，它与表单验证是否允许输入框内为空有关，与数据库无关。所以要小心一个null为False，blank为True的字段接收到一个空值可能会出bug或异常。 default 字段的默认值，可以是值或者一个可调用对象。如果是可调用对象，那么每次创建新对象时都会调用。设置的默认值不能是一个可变对象，比如列表、集合等等。lambda匿名函数也不可用于default的调用对象，因为匿名函数不能被migrations序列化。 注意：在某种原因不明的情况下将default设置为None，可能会引发intergyerror：not null constraint failed，即非空约束失败异常，导致python manage.py migrate失败，此时可将None改为False或其它的值，只要不是None就行。 choices 用于页面上的选择框标签，需要先提供一个二维的二元元组，第一个元素表示存在数据库内真实的值，第二个表示页面上显示的具体内容。在浏览器页面上将显示第二个元素的值。例如： gender = models.SmallIntegerField(choices=[ (0, '女'), (1, '男'), (2, '未知') ]) 反过来，要获取一个choices的第二元素的值，可以使用get_FOO_display()方法，其中的FOO用字段名代替，即上述使用get_gender_display()获取。 db_column 该参数用于定义当前字段在数据表内的列名。如果未指定，Django将使用字段名作为列名。 db_index 该参数接收布尔值。如果为True，数据库将为该字段创建索引。 editable 如果设为False，那么当前字段将不会在admin后台或者其它的ModelForm表单中显示，同时还会被模型验证功能跳过。参数默认值为True。 error_messages 用于自定义错误信息。参数接收字典类型的值。字典的键可以是null、 blank、 invalid、 invalid_choice、 unique和unique_for_date其中的一个。 help_text 额外显示在表单部件上的帮助文本。即便你的字段未用于表单，它对于生成文档也是很有用的。 该帮助文本默认情况下是可以带HTML代码的，具有风险： help_text=\"Please use the following format: <em>YYYY-MM-DD</em>.\" 所以使用时请注意转义为纯文本，防止脚本攻击。 primary_key 如果你没有给模型的任何字段设置这个参数为True，Django将自动创建一个AutoField自增字段，名为‘id’，并设置为主键。也就是id = models.AutoField(primary_key=True)。如果你为某个字段设置了primary_key=True，则当前字段变为主键，并关闭Django自动生成id主键的功能。 verbose_name 为字段设置一个人类可读，更加直观的别名。 对于每一个字段类型，除了ForeignKey、ManyToManyField和OneToOneField这三个特殊的关系类型，其第一可选位置参数都是verbose_name。如果没指定这个参数，Django会利用字段的属性名自动创建它，并将下划线转换为空格。 validators 运行在该字段上的验证器的列表。","s":"4.2 字段的参数","u":"/blog/docs/Django/Django基础学习笔记","h":"#42-字段的参数","p":228},{"i":256,"t":"多对一（ForeignKey）​ 多对一的关系，通常被称为外键。外键字段类的定义如下： class ForeignKey(to, on_delete, **options) 外键需要两个位置参数，一个是关联的模型，另一个是on_delete。在Django2.0版本后，on_delete属于必填参数。 自关联（递归外键），可以使用下面方法： models.ForeignKey('self', on_delete=models.CASCADE) 参数说明： on_delete：当一个外键关联的对象被删除时，Django将模仿on_delete参数定义的SQL约束执行相应操作。 user = models.ForeignKey( User, on_delete=models.SET_NULL, blank=True, null=True, ) ​ 该参数可选的值都内置在django.db.models中（全部为大写），包括： CASCADE：模拟SQL语言中的ON DELETE CASCADE约束，将定义有外键的模型对象同时删除！ PROTECT:阻止上面的删除操作，但是弹出ProtectedError异常 SET_NULL：将外键字段设为null，只有当字段设置了null=True时，方可使用该值。 SET_DEFAULT:将外键字段设为默认值。只有当字段设置了default参数时，方可使用。 DO_NOTHING：什么也不做。 SET()：设置为一个传递给SET()的值或者一个回调函数的返回值。注意大小写。 to_field 默认情况下，外键都是关联到被关联对象的主键上（一般为id）。如果指定这个参数，可以关联到指定的字段上，但是该字段必须具有unique=True属性，也就是具有唯一属性。 related_name 用于关联对象反向引用模型的名称。 通常情况下，这个参数我们可以不设置，Django会默认以模型的小写加上_set作为反向关联名。 多对多（ManyToManyField）​ class ManyToManyField(to, **options) 建议为多对多字段名使用复数形式。 多对多关系需要一个位置参数：关联的对象模型，其它用法和外键多对一基本类似。 如果要创建一个关联自己的多对多字段，依然是通过'self'引用。 在数据库后台，Django实际上会额外创建一张用于体现多对多关系的中间表。默认情况下，该表的名称是“多对多字段名+包含该字段的模型名+一个独一无二的哈希码”，例如‘author_books_9cdf4’，当然你也可以通过db_table选项，自定义表名。 通常情况下，这张表在数据库内的结构是这个样子的： 中间表的id列....模型对象的id列.....被关联对象的id列 # 各行数据 参数说明： Related_name、related_query_name、limit_choices_to和外键的用法一致。参考上述用法即可。 null参数对ManyToManyField多对多字段无效！设置null=True毫无意义 through 如果你想自定义多对多关系的那张额外的关联表，可以使用这个参数！参数的值为一个中间模型。 最常见的使用场景是你需要为多对多关系添加额外的数据，比如添加两个人建立QQ好友关系的时间。 from django.db import models class Person(models.Model): name = models.CharField(max_length=50) class Group(models.Model): name = models.CharField(max_length=128) members = models.ManyToManyField( Person, through='Membership', ## 自定义中间表 through_fields=('group', 'person'), ) class Membership(models.Model): # 这就是具体的中间表模型 group = models.ForeignKey(Group, on_delete=models.CASCADE) person = models.ForeignKey(Person, on_delete=models.CASCADE) inviter = models.ForeignKey( Person, on_delete=models.CASCADE, related_name=\"membership_invites\", ) invite_reason = models.CharField(max_length=64) 上面的代码中，通过class Membership(models.Model)定义了一个新的模型，用来保存Person和Group模型的多对多关系，并且同时增加了‘邀请人’和‘邀请原因’的字段。 through_fields through_fields参数指定从中间表模型Membership中选择哪两个字段，作为关系连接字段。 through_fields参数接收一个二元元组('field1', 'field2')，field1是指向定义有多对多关系的模型的外键字段的名称，这里是Membership中的‘group’字段（注意大小写），另外一个则是指向目标模型的外键字段的名称，这里是Membership中的‘person’ db_table 设置中间表的名称。不指定的话，则使用默认值。 一对一（OneToOneField）​ 一对一关系类型的定义如下： class OneToOneField(to, on_delete, parent_link=False, **options) 从概念上讲，一对一关系非常类似具有unique=True属性的外键关系，但是反向关联对象只有一个。这种关系类型多数用于当一个模型需要从别的模型扩展而来的情况。 如果你没有给一对一关系设置related_name参数，Django将使用当前模型的小写名作为默认值。 也可以连接第三方导入的模型。","s":"4.3 关联关系","u":"/blog/docs/Django/Django基础学习笔记","h":"#43-关联关系","p":228},{"i":258,"t":"模型的元数据，指的是“除了字段外的所有内容”，例如排序方式、数据库表名、人类可读的单数或者复数名等等。 想在模型中增加元数据，方法很简单，在模型类中添加一个内部类，名字是固定的Meta，然后在这个Meta类下面增加各种元数据选项或者说设置项。参考下面的例子： from django.db import models class Ox(models.Model): horn_length = models.IntegerField() class Meta: # 注意，是模型的内部类，要缩进！ ordering = [\"horn_length\"] verbose_name_plural = \"oxen\" 配置属性： abstract 如果abstract=True，那么模型会被认为是一个抽象模型。抽象模型本身不实际生成数据库表，而是作为其它模型的父类，被继承使用。具体内容可以参考Django模型的继承。 app_label 如果定义了模型的app没有在INSTALLED_APPS中注册，则必须通过此元选项声明它属于哪个app，例如： app_label = 'myapp' db_table 指定在数据库中，当前模型生成的数据表的表名。不要使用SQL语言或者Python的保留字，注意冲突。 如果你没有指定这个选项，那么Django会自动使用app名和模型名，通过下划线连接生成数据表名，比如app_book。 友情建议：使用MySQL和MariaDB数据库时，db_table用小写英文。 db_tablespace 自定义数据库表空间的名字。默认值是项目的DEFAULT_TABLESPACE配置项指定的值。 base_manager_name 模型的_base_manager管理器的名字，默认是'objects'。 default_manager_name 模型的_default_manager管理器的名字。 default_related_name 默认情况下，从一个模型反向关联设置有关系字段的源模型，我们使用<model_name>_set，也就是源模型的名字+下划线+set。 这个元数据选项可以让你自定义反向关系名，同时也影响反向查询关系名！看下面的例子： from django.db import models class Foo(models.Model): pass class Bar(models.Model): foo = models.ForeignKey(Foo, on_delete=models.CASCADE) class Meta: default_related_name = 'bars' # 关键在这里 具体的使用差别如下： >>> bar = Bar.objects.get(pk=1) >>> # 不能再使用\"bar\"作为反向查询的关键字了。 >>> Foo.objects.get(bar=bar) >>> # 而要使用你自己定义的\"bars\"了。 >>> Foo.objects.get(bars=bar) get_latest_by Django管理器给我们提供有latest()和earliest()方法，分别表示获取最近一个和最前一个数据对象。但是，如何来判断最近一个和最前面一个呢？也就是根据什么来排序呢？ get_latest_by元数据选项帮你解决这个问题，它可以指定一个类似 DateField、DateTimeField或者IntegerField这种可以排序的字段，作为latest()和earliest()方法的排序依据，从而得出最近一个或最前面一个对象。例如： get_latest_by = \"order_date\" # 根据order_date升序排列 get_latest_by = ['-priority', 'order_date'] # 根据priority降序排列，如果发生同序，则接着使用order_date升序排列 managed 该元数据默认值为True，表示Django将按照既定的规则，管理数据库表的生命周期。 如果设置为False，将不会针对当前模型创建和删除数据库表，也就是说Django暂时不管这个模型了。 在某些场景下，这可能有用，但更多时候，你可以忘记该选项。 order_with_respect_to 这个选项不好理解。其用途是根据指定的字段进行排序，通常用于关系字段。看下面的例子： from django.db import models class Question(models.Model): text = models.TextField() # ... class Answer(models.Model): question = models.ForeignKey(Question, on_delete=models.CASCADE) # ... class Meta: order_with_respect_to = 'question' 上面在Answer模型中设置了order_with_respect_to = 'question'，这样的话，Django会自动提供两个API，get_RELATED_order()和set_RELATED_order()，其中的RELATED用小写的模型名代替。假设现在有一个Question对象，它关联着多个Answer对象，下面的操作返回包含关联的Anser对象的主键的列表[1,2,3]： >>> question = Question.objects.get(id=1) >>> question.get_answer_order() [1, 2, 3] 我们可以通过set_RELATED_order()方法，指定上面这个列表的顺序： >>> question.set_answer_order([3, 1, 2]) 同样的，关联的对象也获得了两个方法get_next_in_order()和get_previous_in_order()，用于通过特定的顺序访问对象，如下所示： >>> answer = Answer.objects.get(id=2) >>> answer.get_next_in_order() <Answer: 3> >>> answer.get_previous_in_order() <Answer: 1> 这个元数据的作用......还没用过，囧。 ordering 最常用的元数据之一了！ 用于指定该模型生成的所有对象的排序方式，接收一个字段名组成的元组或列表。默认按升序排列，如果在字段名前加上字符“-”则表示按降序排列，如果使用字符问号“？”表示随机排列。请看下面的例子： 这个顺序是你通过查询语句，获得Queryset后的列表内元素的顺序，切不可和前面的get_latest_by等混淆。 ordering = ['pub_date'] # 表示按'pub_date'字段进行升序排列 ordering = ['-pub_date'] # 表示按'pub_date'字段进行降序排列 ordering = ['-pub_date', 'author'] # 表示先按'pub_date'字段进行降序排列，再按`author`字段进行升序排列。 permissions 该元数据用于当创建对象时增加额外的权限。它接收一个所有元素都是二元元组的列表或元组，每个元素都是(权限代码, 直观的权限名称)的格式。比如下面的例子： 这个Meta选项非常重要，和auth框架的权限系统紧密相关。 permissions = ((\"can_deliver_pizzas\", \"可以送披萨\"),) default_permissions Django默认会在建立数据表的时候就自动给所有的模型设置('add', 'change', 'delete')的权限，也就是增删改。你可以自定义这个选项，比如设置为一个空列表，表示你不需要默认的权限，但是这一操作必须在执行migrate命令之前。也是配合auth框架使用。 proxy 如果设置了proxy = True，表示使用代理模式的模型继承方式。具体内容与abstract选项一样，参考模型继承章节。 required_db_features 声明模型依赖的数据库功能。比如['gis_enabled']，表示模型的建立依赖GIS功能。 required_db_vendor 声明模型支持的数据库。Django默认支持sqlite, postgresql, mysql, oracle。 select_on_save 决定是否使用1.6版本之前的django.db.models.Model.save()算法保存对象。默认值为False。这个选项我们通常不用关心。 indexes 接收一个应用在当前模型上的索引列表，如下例所示： from django.db import models class Customer(models.Model): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) class Meta: indexes = [ models.Index(fields=['last_name', 'first_name']), models.Index(fields=['first_name'], name='first_name_idx'), ] unique_together 这个元数据是非常重要的一个！它等同于数据库的联合约束！ 举个例子，假设有一张用户表，保存有用户的姓名、出生日期、性别和籍贯等等信息。要求是所有的用户唯一不重复，可现在有好几个叫“张伟”的，如何区别它们呢？（不要和我说主键唯一，这里讨论的不是这个问题） 我们可以设置不能有两个用户在同一个地方同一时刻出生并且都叫“张伟”，使用这种联合约束，保证数据库能不能重复添加用户（也不要和我谈小概率问题）。在Django的模型中，如何实现这种约束呢？ 使用unique_together，也就是联合唯一！ 比如： unique_together = [['name', 'birth_day', 'address'],......] 这样，哪怕有两个在同一天出生的张伟，但他们的籍贯不同，也就是两个不同的用户。一旦三者都相同，则会被Django拒绝创建。这个元数据选项经常被用在admin后台，并且强制应用于数据库层面。 unique_together接收一个二维的列表，每个元素都是一维列表，表示一组联合唯一约束，可以同时设置多组约束。为了方便，对于只有一组约束的情况下，可以简单地使用一维元素，例如： unique_together = ['name', 'birth_day', 'address'] 联合唯一无法作用于普通的多对多字段。 index_together 联合索引，用法和特性类似unique_together。 使用 indexes 选项代替。 新的 indexes 选项比 index_together 提供了更多的功能。index_together 今后可能会被废弃。 constraints 为模型添加约束条件。通常是列表的形式，每个列表元素就是一个约束。 from django.db import models class Customer(models.Model): age = models.IntegerField() class Meta: constraints = [ models.CheckConstraint(check=models.Q(age__gte=18), name='age_gte_18'), ] 上例中，会检查age年龄的大小，不得低于18。 verbose_name 最常用的元数据之一！用于设置模型对象的直观、人类可读的名称，用于在各种打印、页面展示等场景。可以用中文。例如： verbose_name = \"story\" verbose_name = \"披萨\" 如果你不指定它，那么Django会使用小写的模型名作为默认值。 verbose_name_plural 英语有单数和复数形式。这个就是模型对象的复数名，比如“apples”。因为我们中文通常不区分单复数，所以保持和verbose_name一致也可以。 verbose_name_plural = \"stories\" verbose_name_plural = \"披萨\" verbose_name_plural = verbose_name 如果不指定该选项，那么默认的复数名字是verbose_name加上‘s’ label 前面介绍的元数据都是可修改和设置的，但还有两个只读的元数据，label就是其中之一。 label等同于app_label.object_name。例如polls.Question，polls是应用名，Question是模型名。 label_lower 同上，不过是小写的模型名。","s":"4.4 元数据类Meta","u":"/blog/docs/Django/Django基础学习笔记","h":"#44-元数据类meta","p":228},{"i":260,"t":"原博文","s":"4.5 事务","u":"/blog/docs/Django/Django基础学习笔记","h":"#45-事务","p":228},{"i":262,"t":"官方文档","s":"4.6 配置多数据库¶","u":"/blog/docs/Django/Django基础学习笔记","h":"#46-配置多数据库","p":228},{"i":264,"t":"复杂查询 # 店铺商品 def mygoods(request, shop_id): if request.method == \"GET\": try: # 卖家数量范围区间 seller_volume_from = request.GET.get('seller_volume_from') seller_volume_to = request.GET.get('seller_volume_to') # 评论数量范围区间 comment_volume_from = request.GET.get('comment_volume_from') comment_volume_to = request.GET.get('comment_volume_to') # 上传时间范围区间 upload_date_from = request.GET.get('upload_date_from') upload_date_to = request.GET.get('upload_date_to') # 关键词模糊查询 search_amazon = request.GET.get('search_amazon') # *********************************************************************** # 定义一个总的Q对象，把下边的q1，q2对象添加进去 con = Q() q1 = Q() q1.connector = 'AND' # q1对象表示‘AND’关系，也就是说q1下的条件都要满足‘AND’ # 判断前台传过来的值是否存在，存在的话追加到去Q对象中，不存在的话可以赋一个空值 if comment_volume_from: q1.children.append(('comment_volume__gte', int(comment_volume_from))) else: comment_volume_from = \"\" if comment_volume_to: q1.children.append(('comment_volume__lte', int(comment_volume_to))) else: comment_volume_to = \"\" # 对时间类型的查询进行一个转换格式的处理（str转date） if upload_date_from: upload_date_from = datetime.strptime(upload_date_from, \"%Y-%m-%d\") upload_date_from = datetime.date(upload_date_from) q1.children.append(('upload_date__gte', upload_date_from)) else: upload_date_from = \"\" # *********************************************************************** q2 = Q() q2.connector = 'OR' # q2对象表示‘OR’关系，也就是说q2下的条件都要满足‘OR’ if search_amazon: search_amazon = search_amazon.strip() # 去除字符串左右空格 # 加上‘__contains’表示包含，可以达成模糊查询的目的，目前模糊查询只对这两个 # 字段进行匹配，如果有多个的话就往下边继续添加,如果不是模糊查询去掉‘__contains’即可 q2.children.append(('product_name__contains', search_amazon)) q2.children.append(('ASIN__contains', search_amazon)) else: search_amazon = \"\" # 把q1和q2对象添加到总的Q对象 con.add(q1, 'AND') con.add(q2, 'AND') # *********************************************************************** # 查询数据（把con这个总的Q对象添加到filter过滤条件中，还可以在con后边继续添加过滤条件） goods = MapMyShopGoods.objects.filter(con, shop=shop_id) # 调用分页 goods_list = mygoods_page_goods(request, goods)['goods_list'] page_list = mygoods_page_goods(request, goods)['page_list'] goods_count = goods.count() return render(request, 'amazonshop/mygoods.html', locals()) except Exception as e: print('店铺商品---', e, str(e.__traceback__.tb_lineno)) return render(request, 'amazonshop/mygoods.html', locals())","s":"4.7 查询","u":"/blog/docs/Django/Django基础学习笔记","h":"#47-查询","p":228},{"i":267,"t":"在settings.py中配置一个名为CACHES的字典，字典中可以配置多个缓存。 CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', 'LOCATION': os.path.join(BASE_DIR, 'caches'), }, '缓存配置名': { '缓存配置项': '配置值' } }","s":"配置缓存","u":"/blog/docs/Django/Django基础学习笔记","h":"#配置缓存","p":228},{"i":269,"t":"数据库缓存​ 需要注意的是，在创建完数据库缓存后还需要手动执行一条命令来创建数据库表： python manage.py createcachetable CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.db.DatabaseCache', 'LOCATION': 'my_cache_table', 'TIMEOUT': '300', # 缓存保存时间 单位秒，默认为300 'OPTIONS': { 'MAX_ENTRIES': 300, # 缓存最大数据条数 'CULL_FREQUENCY': 2, # 缓存条数达到最大值时，删除1/x的缓存数据 } } } 文件缓存​ CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache', 'LOCATION': os.path.join(BASE_DIR, 'caches'), } } 基于本地内存的缓存​ 如果你的本地主机内存够大够快，也可以直接使用它作为缓存，并且这也是Django默认使用的缓存后端。配置如下： CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache', 'LOCATION': 'unique-snowflake', } } LOCATION 被用于标识各个内存存储位置。如果只有一个 locmem 缓存，你可以忽略 LOCATION 。但是如果你有多个本地内存缓存，那么你至少要为其中一个起个名字，以便将它们区分开。 这种缓存使用最近最少使用（LRU）的淘汰策略。 Memcached​ 如果你是新手，那么要清楚： Memcached不是Django自带的软件，而是一个独立的软件，需要你自己安装、配置和启动服务； Memcached安装好了后，还要安装Python操作Memcached的依赖库，最常用的是python-memcached和pylibmc； 上面两个条件都满足了后，还要在Django中进行配置。 配置方法： 根据你安装的Python依赖库不同，将CACHES的BACKEND设置为django.core.cache.backends.memcached.MemcachedCache或者django.core.cache.backends.memcached.PyLibMCCache 设置LOCATION为你的Memecached守护进程所在的主机IP和进程端口，格式为ip:port的字符串。或者unix:path的形式，在Unix操作系统中。 下面是一个参考例子，Memcached运行在localhost (127.0.0.1) port 11211，使用了python-memcached库： CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', 'LOCATION': '127.0.0.1:11211', } } 下面的Memcached运行在本地的Unix socket上：/tmp/memcached.sock，依赖python-memcached： CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', 'LOCATION': 'unix:/tmp/memcached.sock', } } 下面的Memcached运行在/tmp/memcached.sock，不带unix:/前缀，依赖pylibmc库： CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache', 'LOCATION': '/tmp/memcached.sock', } } Memcached支持分布式服务，可能同时在几台机器上运行，将它们的IP地址都加入到LOCATION中，如下所示： CACHES = { 'default': { 'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache', 'LOCATION': [ '172.19.26.240:11211', '172.19.26.242:21423', '172.19.26.244:11213', ] # 我们也可以给缓存机器加权重，权重高的承担更多的请求，如下 'LOCATION': [ ('172.19.26.240:11211',5), ('172.19.26.242:11211',1), ] } } 基于内存的缓存系统有个明显的缺点就是断电数据丢失，尤其是Memcached这种不支持序列化的缓存 基于redis缓存​ 基于redis缓存需求安装redis依赖，pip install django-redis CACHES = { \"default\": { \"BACKEND\": \"django_redis.cache.RedisCache\", \"LOCATION\": 'redis://127.0.0.1:6379/1', \"OPTIONS\": { \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\", \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 100}, \"MAX_ENTRIES\": 500, # \"PASSWORD\": env.REDIS_PASSWORD, }, \"KEY_FUNCTION\": \"make_key.func\" } }","s":"缓存配置类型","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存配置类型","p":228},{"i":271,"t":"每个缓存后端可以通过额外的参数来控制缓存行为。这些参数在 CACHES 配置中作为附加键提供。有效参数如下： TIMEOUT ：缓存的默认超时时间，以秒为单位。这个参数默认为 300 秒（5 分钟）。你可以将 TIMEOUT 设置为 None，这样，默认情况下，缓存键永远不会过期。值为 0 会导致键立即过期（实际上是 “不缓存”）。 OPTIONS ：任何应该传递给缓存后端的选项。有效的选项列表会随着每个后端而变化，由第三方库支持的缓存后端会直接将其选项传递给底层缓存库。 实施自有缓存策略的缓存后端（即 locmem、filesystem 和 database 后端）将尊重以下选项： MAX_ENTRIES ：删除旧值之前允许缓存的最大条目。默认是 300 。 CULL_FREQUENCY ：当达到 MAX_ENTRIES 时，被删除的条目的比例。实际比例是 1 / CULL_FREQUENCY，所以将 CULL_FREQUENCY 设置为 2，即当达到 MAX_ENTRIES 时将删除一半的条目。这个参数应该是一个整数，默认为 3。 CULL_FREQUENCY 的值为 0 意味着当达到 MAX_ENTRIES 时，整个缓存将被转储。在某些后端（特别是 database ），这使得缓存速度 更 快，但代价是缓存未命中更多。 Memcached 后端将 OPTIONS 的内容作为关键字参数传递给客户端构造函数，允许对客户端行为进行更高级的控制。具体用法请看下文¶。 KEY_PREFIX。一个自动包含在 Django 服务器使用的所有缓存键中的字符串（默认为前缀）。 查看 缓存文档 获取更多信息。 VERSION ：Django 服务器生成的缓存键的默认版本号。 查看 缓存文档 获取更多信息。 KEY_FUNCTION 一个字符串，包含一个函数的点分隔路径，该函数定义了如何将前缀、版本和键组成一个最终的缓存键。 查看 缓存文档 获取更多信息 自定义KEY_FUNCTION def make_key(key, key_prefix, version): return ':'.join([\"key_start\", key_prefix, str(version), key])","s":"缓存配置参数","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存配置参数","p":228},{"i":273,"t":"单页缓存​ from django.views.decorators.cache import cache_page @cache_page(5) # 缓存5s钟 def test_cache(request): \"\"\"配置缓存之后，当你五秒钟之内进行访问，时间将会一成不变。\"\"\" import time ctime=time.time() return render(request,'index.html',context={'ctime':ctime}) cache_page有一个必填参数，缓存时限，单位为秒，为了便于理解，可以写成表达式形式，如上60 * 15即900秒。其他选填参数有cache：指定其他的缓存类型；key_prefix：指定键前缀。 在URL配置中使用缓存： from django.views.decorators.cache import cache_page urlpatterns = [ path('foo/<int:code>/', cache_page(60 * 15)(my_view)), ] 类视图不能直接使用cache_page装饰器，因为装饰器本质是个函数，接收函数并返回函数，所以只要把类视图转为函数就行。 # 在views.py中使用 class MyView(View): ... my_view = cache_page(60 * 15)(MyView.as_view()) # 在urls.py中使用 urlpatterns = [ path('foo/<int:code>/', cache_page(60 * 15)(MyView.as_view())), ] 局部缓存​ 在一个模板中，使用tag进行局部缓存： <p>未进行缓存：{{ ctime }}</p> <hr> <!--导入tage--> {% load cache %} <!--5表示5s钟，name是唯一key值--> {% cache 5 'name' %} {{ ctime }} {% endcache %} 缓存全站​ MIDDLEWARE = [ 'django.middleware.cache.UpdateCacheMiddleware', # 这个放在最上面 # ... 其他中间件 'django.middleware.cache.FetchFromCacheMiddleware', # 这个放在最下面 ] 注意： update中间件必须放在列表的开始位置，而fectch中间件，必须放在最后。 这是Django使用中间件的规则，它们是有顺序关系的。 高级技巧​ 使用cache_control 通常用户将会面对两种缓存： 他或她自己的浏览器缓存（私有缓存）以及他或她的提供者缓存（公共缓存）。 公共缓存由多个用户使用，而受其它人的控制。 这就产生了你不想遇到的敏感数据的问题，比如说你的银行账号被存储在公众缓存中。 因此，Web 应用程序需要以某种方式告诉缓存那些数据是私有的，哪些是公共的。 解决方案是标示出某个页面缓存应当是私有的。 要在 Django 中完成此项工作，可使用 cache_control 视图修饰器： from django.views.decorators.cache import cache_control @cache_control(private=True) def my_view(request): # ... # 在下例中， cache_control 告诉缓存对每次访问都重新验证缓存并在最长 3600 秒内保存所缓存版本。 @cache_control(must_revalidate=True, max_age=3600) def my_view(request): # ... 使用vary_on_headers 缺省情况下，Django 的缓存系统使用所请求的路径(如blog/article/1)来创建其缓存键。这意味着不同用户请求同样路径都会得到同样的缓存版本，不考虑客户端user-agent, cookie和语言配置的不同, 除非你使用Vary头部通知缓存机制需要考虑请求头里的cookie和语言的不同。 from django.views.decorators.vary import vary_on_headers @vary_on_headers('User-Agent', 'Cookie') def my_view(request): ... 使用never_cache禁用缓存 如果你想用头部完全禁掉缓存, 你可以使用django.views.decorators.cache.never_cache装饰器。如果你不在视图中使用缓存，服务器端是肯定不会缓存的，然而用户的客户端如浏览器还是会缓存一些数据，这时你可以使用never_cache禁用掉客户端的缓存。 from django.views.decorators.cache import never_cache @never_cache def myview(request): # ...","s":"缓存粒度","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存粒度","p":228},{"i":275,"t":"Django还提供了一个简单的API，可以保存任意粒度的数据。你可以使用一个类似字典的对象，django.core.cache.caches，来访问缓存，这允许使用不同缓存方式： from django.core.cache import caches cache1 = caches['default'] cache2 = caches['others'] 如果只有一个缓存默认的设置，使用from django.core.cache import cache获取默认缓存，这等于caches['default']。 方法 描述 cache.set(key,value,timeout=DEFAULT_TIMEOUT,version=None) 设置缓存，当不存在时则创建。 cache.get(key,default=None,version=None) 根据key获取缓存，若不存在则返回默认值None cache.add(key,value,timeout=DEFAULT_TIMEOUT,version=None) 使用与set相同，当缓存已存在时，将不会更新，而set则会更新 cache.get_or_set(key,default,timeout=DEFALUT_TIMEOUT,version=None) 获取缓存，当获取不到时设置缓存，并拿到设置的值 cache.get_many(key,version=None) 传入一个可迭代对象，它将会返回一个字典，将可迭代对象中所有key对应的value取出 cache.set_many(dict,timeout) 传入一个dict，它将会迭代该dict并且为每一组k，v存放到缓存中 cache.delete(key,version=None) 清除特定对象 delete_many({ list }) 清除多个对象 cache.clear() 清楚缓存。clear() 将删除缓存里的 任何 键 cache.touch(key,timeout=DEFAULT_TIMEOUT,version=None) 当缓存马上到期时，重新设置它的过期时间 cache.incr(key,delta=1,version=None) 对缓存中的数据做递增操作，如k对应的v原本是1，使用该方法后变为2 cache.decr(key,delta=1,version=None) 对缓存中的数据做递减操作，如k对应的v原本是2，使用该方法后变为1 cache.close() 关闭缓存链接 基本的用法很简单： >>> cache.set('my_key', 'hello, world!', 30) >>> cache.get('my_key') 'hello, world!' >>> # 等待 30 秒，'my_key'将过期... >>> cache.get('my_key') None >>> # add()方法只添加不存在或失效的key，如果key仍有效则不会更新 >>> cache.set('add_key', 'Initial value') >>> cache.add('add_key', 'New value') # 使用add()方法来新增一个原来没有的键值。 它接受的参数和set()一样，但是并不去尝试更新已经存在的键值。 >>> cache.get('add_key') 'Initial value' >>> # 同时设置获取多对值 >>> cache.set('a', 1) >>> cache.set('b', 2) >>> cache.set('c', 3) >>> cache.get_many(['a', 'b', 'c']) {'a': 1, 'b': 2, 'c': 3} >>> cache.set_many({'a': 1, 'b': 2, 'c': 3}) >>> cache.get_many(['a', 'b', 'c']) {'a': 1, 'b': 2, 'c': 3} >>> # 删除缓存 >>> cache.delete('a') >>> cache.delete_many(['a', 'b', 'c']) >>> cache.clear() >>> # 关闭连接 >>> cache.close()","s":"缓存API","u":"/blog/docs/Django/Django基础学习笔记","h":"#缓存api","p":228},{"i":277,"t":"django中引入常见的包​ # urls.py # django路由 from django.urls import include, path # 引入django配置 from django.conf import settings # views.py # http响应 from django.http import HttpResponse # 内置校验器 from django.core import validators # 缓存 from django.core.cache import caches from django.core.cache import cache DRF中引入常见的包​ from rest_framework import serializers # 转成JSON from rest_framework.renderers import JSONRenderer # 解析JSON from rest_framework.parsers import JSONParser import rest_framework.status import rest_framework.Request import rest_framework.Response import rest_framework.mixins # 通用视图 import rest_framework.generics sudo ln -s /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/config-3.8-darwin /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/config-3.8/libpython3.8.a","s":"附录","u":"/blog/docs/Django/Django基础学习笔记","h":"#附录","p":228},{"i":280,"t":"\"项目目录结构\"其实也是属于\"可读性和可维护性\"的范畴，我们设计一个层次清晰的目录结构，就是为了达到以下两点好处: 1.可读性高: 不熟悉这个项目的代码的人，一眼就能看懂目录结构，知道程序启动脚本是哪个，测试目录在哪儿，配置文件在哪儿等等。从而非常快速的了解这个项目。 2.可维护性高: 定义好组织规则后，维护者就能很明确地知道，新增的哪个文件和代码应该放在什么目录之下。这个好处是，随着时间的推移，代码/配置的规模增加，项目结构不会混乱，仍然能够组织良好。 所以，我认为，保持一个层次清晰的目录结构是有必要的。更何况组织一个良好的工程目录，其实是一件很简单的事儿。","s":"1. 规范目录结构理由","u":"/blog/docs/Django/django目录结构建议","h":"#1-规范目录结构理由","p":278},{"i":282,"t":"目前组内的django项目，应用都是创建在项目根目录下。除开应用的目录，还有其他文档docs目录、项目的djangoLearnNotes目录、配置目录env、脚本目录scripts，全部在一个层级就会比较混乱。 假设我有三个应用blogs、learn、polls，直接创建之后的文档结构如下：","s":"2. 问题描述","u":"/blog/docs/Django/django目录结构建议","h":"#2-问题描述","p":278},{"i":284,"t":"可以创建一个apps的目录，将应用放入其中，这里就会显得目录结构比较清晰","s":"3. 解决问题（建议）","u":"/blog/docs/Django/django目录结构建议","h":"#3-解决问题建议","p":278},{"i":287,"t":"移动项目会使之前对其他应用模块的依赖出现错乱，要在所有import依赖前加上apps. 根项目下的urls.py要改变的依赖要改变，要在所有依赖前加上apps. 应用目录下的apps.py中的类XxxConfig中的name属性要加前缀apps. 要修改settings.py中的引入应用INSTALLED_APPS，加上前缀apps.（其实这里的配置如果采用简写形式配置的话，应该要和类XxxConfig中的name属性一致才行），下图展示了两种配置形式：","s":"4.1 改变依赖路径","u":"/blog/docs/Django/django目录结构建议","h":"#41-改变依赖路径","p":278},{"i":289,"t":"4.2.1 避免上述四处的修改​ 对于上述移动目录后的修改还是蛮大的，可以采取将apps目录加入sys.path中去，这样就可以避免上述四处的修改了。 在settings.py中添加以下配置： # 设置apps路径 import sys sys.path.insert(0, os.path.join(BASE_DIR, 'apps')) 注意：在使用Pycharm将应用拖入apps目录下时要注意去勾选Search for references，防止Pycharm自动帮你在import语句那加上apps.前缀 4.2.2 新建app​ 怎么新建app在apps目录下呢？ 生成的app默认是被创建在执行命令的当前目录下，因此 可以采取以下方式生成app在apps目录下： # 先进入apps目录下，再执行startapp命令 cd apps && python3 ../manage.py startapp app_name","s":"4.2 已有项目的解决方案","u":"/blog/docs/Django/django目录结构建议","h":"#42-已有项目的解决方案","p":278},{"i":294,"t":"语法 cp [options] source dest 参数说明： -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。 -d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。 -f：覆盖已经存在的目标文件而不给出提示。 -i：与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖。 -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。 -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。 -l：不复制文件，只是生成链接文件。 注意：用户使用该指令复制目录时，必须使用参数 -r 或者 -R","s":"cp 命令","u":"/blog/docs/Linux/Linux学习笔记","h":"#cp-命令","p":291},{"i":300,"t":"Linux常用命令详解 Linux命令列表【简洁】 菜鸟教程 常见Linux命令 菜鸟教程 Linux 命令大全 Linux中的pushd和popd","s":"参考","u":"/blog/docs/Linux/Linux学习笔记","h":"#参考","p":291},{"i":303,"t":"什么是输入输出方向呢？​ 一般情况下，我们都是从键盘读取用户输入的数据，然后再把数据拿到程序（C语言程序、Shell 脚本程序等）中使用；这就是标准的输入方向，也就是从键盘到程序。反过来说，程序中也会产生数据，这些数据一般都是直接呈现到显示器上，这就是标准的输出方向，也就是从程序到显示器。 其实输入输出方向就是数据的流动方向： 输入方向就是数据从哪里流向程序。数据默认从键盘流向程序，如果改变了它的方向，数据就从其它地方流入，这就是输入重定向。 输出方向就是数据从程序流向哪里。数据默认从程序流向显示器，如果改变了它的方向，数据就流向其它地方，这就是输出重定向。 文件描述符​ Linux 中一切皆文件，包括标准输入设备（键盘）和标准输出设备（显示器）在内的所有计算机硬件都是文件。 为了表示和区分已经打开的文件，Linux 会给每个文件分配一个 ID，这个 ID 就是一个整数，被称为文件描述符（File Descriptor）。 文件描述符 文件名 类型 硬件 0 stdin 标准输入文件 键盘 1 stdout 标准输出文件 显示器 2 stderr 标准错误输出文件 显示器 Linux 程序在执行任何形式的 I/O 操作时，都是在读取或者写入一个文件描述符。一个文件描述符只是一个和打开的文件相关联的整数，它的背后可能是一个硬盘上的普通文件、FIFO、管道、终端、键盘、显示器，甚至是一个网络连接。 stdin、stdout、stderr 默认都是打开的，在重定向的过程中，0、1、2 这三个文件描述符可以直接使用。 Shell 输出重定向​ 输出重定向是指命令的结果不再输出到显示器上，而是输出到其它地方，一般是文件中。这样做的最大好处就是把命令的结果保存起来，当我们需要的时候可以随时查询。Bash 支持的输出重定向符号如下表所示。 在输出重定向中，>代表的是覆盖，>>代表的是追加。 command > file 2>&1 其中&1为转义为标准输出文件描述符 首先是command > file将标准输出重定向到file中， 2>&1 是标准错误拷贝了标准输出的行为，也就是同样被重定向到file中，最终结果就是标准输出和错误都被重定向到file中。 注意 输出重定向的完整写法其实是fd>file或者fd>>file，其中 fd 表示文件描述符，如果不写，默认为 1，也就是标准输出文件。 当文件描述符为 1 时，一般都省略不写，如上表所示；当然，如果你愿意，也可以将command >file写作command 1>file，但这样做是多此一举。 当文件描述符为大于 1 的值时，比如 2，就必须写上。 需要重点说明的是，fd和>之间不能有空格，否则 Shell 会解析失败；>和file之间的空格可有可无。为了保持一致，我习惯在>两边都不加空格。 下面的语句是一个反面教材： echo \"c.biancheng.net\" 1 >log.txt 注意1和>之间的空格。echo 命令的输出结果是c.biancheng.net，我们的初衷是将输出结果重定向到 log.txt，但是当你打开 log.txt 文件后，发现文件的内容为c.biancheng.net 1，这就是多余的空格导致的解析错误。也就是说，Shell 将该条语句理解成了下面的形式： echo \"c.biancheng.net\" 1 1>log.txt 【实例】将 echo 命令的输出结果以追加的方式写入到 demo.txt 文件中。 #!/bin/bashfor str in \"C语言中文网\" \"http://c.biancheng.net/\" \"成立7年了\" \"日IP数万\"do echo $str >>demo.txt #将输入结果以追加的方式重定向到文件done 运行以上脚本，使用cat demo.txt查看文件内容，显示如下： C语言中文网 http://c.biancheng.net/ 成立7年了 日IP数万 Shell 输入重定向​ 输入重定向就是改变输入的方向，不再使用键盘作为命令输入的来源，而是使用文件作为命令的输入。 符号 说明 command <file 将 file 文件中的内容作为 command 的输入。 command <<END 从标准输入（键盘）中读取数据，直到遇见分界符 END 才停止（分界符可以是任意的字符串，用户自己定义）。 command <file1 >file2 将 file1 作为 command 的输入，并将 command 的处理结果输出到 file2。 和输出重定向类似，输入重定向的完整写法是fd<file，其中 fd 表示文件描述符，如果不写，默认为 0，也就是标准输入文件。 【实例】统计用户在终端输入的文本的行数。 此处我们使用输入重定向符号<<，这个符号的作用是使用特定的分界符作为命令输入的结束标志，而不使用 Ctrl+D 键。 admin@bothinlideMac-mini test % wc -c <<EOF heredoc> abc heredoc> cc dd heredoc> adsafdsadf heredoc> EOF 22 wc 命令会一直等待用输入，直到遇见分界符 END 才结束读取。 常见Shell用法，将字符串内容输出到文件中 cat > file.txt << EOF ls -lh export AA=aa EOF","s":"linux 输入输出重定向","u":"/blog/docs/Linux/Linux学习笔记","h":"#linux-输入输出重定向","p":291},{"i":305,"t":"&：是指在后台运行，当用户退出（挂起）的时候，命令自动跟着结束 nohup：（no hang up）不挂断的运行，注意并没有后台运行的功能，就是指用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&才是后台运行 因此将nohup和&结合使用，就可以实现使命令永久地在后台执行的功能 举例 sh test.sh & 将sh test.sh任务放到后台 ，关闭xshell，对应的任务也跟着停止 nohup sh test.sh 将sh test.sh任务放到后台，关闭标准输入，终端不再能够接收任何输入（标准输入），重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行 nohup sh test.sh & 将sh test.sh任务放到后台，但是依然可以使用标准输入，终端能够接收任何输入，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行 输出重定向 作业在后台运行的时候，可以把输出重定向到某个文件中，相当于一个日志文件，记录运行过程中的输出。使用方法：nohup command > out.file 2>&1 & command>out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.file文件中。","s":"&与nohup区别","u":"/blog/docs/Linux/Linux学习笔记","h":"#与nohup区别","p":291},{"i":307,"t":"原文：https://segmentfault.com/a/1190000016056004","s":"Vim快捷键","u":"/blog/docs/Linux/Linux学习笔记","h":"#vim快捷键","p":291},{"i":309,"t":":w 存储文本 :q 退出文本，如果你对文本做了改动，这个是退不出去的。需要下面： :q! 退出不保存文本 :wq 保存并退出文本 :set nu 显示行号 :set nonu 不显示行号 :syntax enable 语法高亮 （如果支持的话） :set filetype=html 文档格式，配合上面语句","s":"命令模式","u":"/blog/docs/Linux/Linux学习笔记","h":"#命令模式","p":291},{"i":311,"t":"指令 解释 $ 行尾 ^ 行首 w 下一个单词 (词首） e 下一个单词（词尾） b 前一个单词 x del 删除后一个字符 X backspace 删除前一个字符 u 撤销 ctrl + r 重做 对撤消的撤消 h 左 j 下 k 上 l 右 i 插入，开始写东西 s 覆盖 esc 退出输入模式，进入普通模式，可执行各种命令 [Ctrl] + [f] 屏幕『向下』移动一页 [Ctrl] + [b] 屏幕『向上』移动一页 [Ctrl] + [d] 屏幕『向下』移动半页 [Ctrl] + [u] 屏幕『向上』移动半页 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 \"30j\" 或 \"30↓\" 的组合按键","s":"基础编辑，移动光标","u":"/blog/docs/Linux/Linux学习笔记","h":"#基础编辑移动光标","p":291},{"i":313,"t":"指令 解释 f 查找字符，按f后再按需要移动到的字符，光标就会移动到那 f; 就会移动到下一个 ;的位置 F 反向查找字符 . 重复上一个操作 v 选择模式，用上下左右选择文本，按相应的指令直接执行，如：选中后执行 d 就直接删除选中的文本 ctrl + v 块状选择模式，可以纵向选择文本块，而非以行的形式 D 删除到行末 d 高级删除指令： dw 删除一个单词 df( 配合 f ，删除从光标处到 ( 的字符，单行操作 dd 删除当前行 d2w 删除两个单词 d2t, 删除当前位置到后面第二个 , 之间的内容，不包含 , （t = to）","s":"删除操作和重复操作","u":"/blog/docs/Linux/Linux学习笔记","h":"#删除操作和重复操作","p":291},{"i":315,"t":"指令 解释 y 复制 yy 复制当前行 p 粘贴到后面 P 粘贴到前面 o 在当前行的下一行添加空行并开始输入 O 在当前行的上一行添加空行并开始输入","s":"复制 和 粘贴","u":"/blog/docs/Linux/Linux学习笔记","h":"#复制-和-粘贴","p":291},{"i":317,"t":"指令 解释 / 从当前位置向后搜索 ？ 从当前位置后前搜索 n 搜索完之后，如果有多个结果，跳到 下一个匹 配项 N 跳到 上一个 匹配项 * 直接匹配当前光标下面的字符串，移到下一个匹配项，跟/ ? 没有关系 # 上一个匹配项 安装常见软件和学习Linux系统管理和权限管理","s":"搜索","u":"/blog/docs/Linux/Linux学习笔记","h":"#搜索","p":291},{"i":320,"t":"图形 按键 ⌘ Command 键 ⌃ Control 键 ⌥ Option 键 ⇧ Shift 键 ⇪ Caps Lock","s":"键盘按键区别","u":"/blog/docs/Linux/Mac快捷键","h":"#键盘按键区别","p":318},{"i":322,"t":"可以用于shell 移动到行首 【⌃+a】 移动到行尾 【⌃+e】 Shell清屏 【⌃+l】 Shell清空一行【⌃+u】 光标前进 【⌃+f】 光标后退 【⌃+b】 光标向上 【⌃+p】 光标向下 【⌃+n】","s":"光标操作","u":"/blog/docs/Linux/Mac快捷键","h":"#光标操作","p":318},{"i":325,"t":"模式 描述 \\w 匹配字母、数字、下划线 \\W 匹配非字母、数字、下划线 \\s 匹配任意空白字符，等价于 [\\t\\n\\r\\f]. \\S 匹配任意非空字符 \\d 匹配任意数字，等价于 [0-9] \\D 匹配任意非数字 \\A 匹配字符串开始 \\Z 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串 \\z 匹配字符串结束 \\G 匹配最后匹配完成的位置 \\n 匹配一个换行符 \\t 匹配一个制表符 ^ 匹配一行字符串的开头注意区分 \\A 匹配字符串开始 $ 匹配字符串的末尾。 . 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。 [...] 用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k' ... 不在[]中的字符：abc 匹配除了a,b,c之外的字符。 * 匹配0个或多个的表达式。 + 匹配1个或多个的表达式。 ? 匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式 {n} 精确匹配n个前面表达式。 {n, m} 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式 a|b 匹配a或b ( ) 匹配括号内的表达式，也表示一个组","s":"1. 常见匹配模式","u":"/blog/docs/python/正则表达式","h":"#1-常见匹配模式","p":323},{"i":328,"t":"re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 none。 match(pattern, string, flags=0) pattern：正则表达式 string：被操作字符串 flags：修饰符 修饰符 描述 re.I 使匹配对大小写不敏感 re.L 做本地化识别（locale-aware）匹配 re.M 多行匹配，影响 ^ 和 $ re.S 使 . 匹配包括换行在内的所有字符 re.U 根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B. re.X 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。 匹配目标：使用()来分组匹配目标 content = 'Hello 123 4567 World_This is a Regex Demo' result = re.match('^Hello\\s(\\d+)\\s(\\d+).*Demo$', content) # 指定左右空格 \\s print(result) # <re.Match object; span=(0, 41), match='Hello 123 4567 World_This is a Regex Demo'> # 分组 print(result.group(1)) # 123 print(result.group(2)) # 4567 # 如果有两个括号指定，那就是result.group(n) >>> n 你说的数据 print(result.span()) # (0, 41) .* ：尽可能多的匹配（贪婪匹配） .（点） ： 匹配任意字符，除了换行符 *（星号）：匹配0次或者多次，这里的多次就是很多次（不限匹配次数） .* ： 连起来就是，匹配表达式：.（点） 的次数（也就是0次或多次） .*? ：尽可能少的匹配（非贪婪匹配） ？ ：匹配次数只有0次或者1次（这就非常好理解了）","s":"2.1 re.match","u":"/blog/docs/python/正则表达式","h":"#21-rematch","p":323},{"i":330,"t":"re.search 扫描整个字符串并返回第一个成功的匹配。 search(pattern, string, flags=0) pattern：正则表达式 string：被操作字符串 flags：修饰符","s":"2.2 re.search","u":"/blog/docs/python/正则表达式","h":"#22-research","p":323},{"i":333,"t":"替换字符串中每一个匹配的子串后返回替换后的字符串。 re.sub(pattern, repl, string, count=0, flags=0) pattern：正则表达式 repl：你要替换的成的字符串 string：被操作字符串 count：替换次数 0表示替换所有 flags：修饰符","s":"2.4 re.sub","u":"/blog/docs/python/正则表达式","h":"#24-resub","p":323},{"i":335,"t":"将正则字符串编译成正则表达式对象","s":"2.5 re.complie","u":"/blog/docs/python/正则表达式","h":"#25-recomplie","p":323},{"i":337,"t":"Python 正则表达式详解（re 库）","s":"3. 参考","u":"/blog/docs/python/正则表达式","h":"#3-参考","p":323},{"i":340,"t":"用户返回页面白屏，页面长时间无响应，无法操作。","s":"服务表现","u":"/blog/docs/线上问题/慢查询导致服务无法响应","h":"#服务表现","p":338},{"i":342,"t":"首先查看服务的 CPU、内存、网络、磁盘等指标，是否有异常。 发现无异常 查看服务的日志，是否有报错。 也没有发现异常日志 使用postman请求后端接口，响应504 Gateway Time-out。 说明是服务无法响应，而不是前端页面的问题。 这时候，为了避免服务长时间不可用，先重启了服务。然后发现服务恢复正常了。 重启是解决问题的最快方式，但是不是最好的方式，因为重启后，问题可能会再次出现 然后这时候怀疑是不是昨晚发的特性导致的服务异常，于是查看了相关日志，发现昨晚的特性没有问题。 这时候查看了一个飞书，发现收到了数据库CPU 100%告警，然后去查看了一下慢查询日志，发现一些慢查询耗时较长，十几秒（平时都是一两秒）。 接着就怀疑是慢查询导致的服务异常，后面就是优化慢查询，解决问题。","s":"问题排查流程","u":"/blog/docs/线上问题/慢查询导致服务无法响应","h":"#问题排查流程","p":338},{"i":344,"t":"慢查询导致服务无法响应。 uwsgi的配置如下： processes=4 threads=8 说明该服务同时只能处理32个请求，如果有请求耗时较长，就会导致其他请求无法响应。 为此还在测试环境测试了一下 def request_count_test(request, *args, **kwargs): logger.info(\"request_count_test start\") import time time.sleep(300) logger.info(\"request_count_test end\") return CustomResponse({}, \"request_count_test success\") 同时并发50个请求，发现有一些请求会响应504 Gateway Time-out，服务也无法正常响应了。 def test_request_count(): import requests import uuid def get(url): gid = uuid.uuid4() print(f\"start {gid}\") res = requests.get(url) print(gid, res.status_code) print(gid, res.text) args = [(\"http://test.com:8080/request_count_test\", )] * 50 utils.run_async_tasks(get, args, max_workers=50)","s":"问题原因","u":"/blog/docs/线上问题/慢查询导致服务无法响应","h":"#问题原因","p":338},{"i":347,"t":"作为可执行程序 chmod +x ./test.sh #使脚本具有执行权限 ./test.sh #执行脚本 注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。 作为解释器参数 这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如： /bin/sh test.sh /bin/php test.php 这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。","s":"1. 运行Shell脚本","u":"/blog/docs/Linux/Shell编程","h":"#1-运行shell脚本","p":345},{"i":350,"t":"在 Bash shell 中，每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。这意味着，Bash shell 在默认情况下不会区分变量类型，即使你将整数和小数赋值给变量，它们也会被视为字符串。 Shell 支持以下三种定义变量的方式： variable=value # 赋值号`=`的周围不能有空格 variable='value' variable=\"value\" variable 是变量名，value 是赋给变量的值。如果 value 不包含任何空白符（例如空格、Tab 缩进等），那么可以不使用引号；如果 value 包含了空白符，那么就必须使用引号包围起来。使用单引号和使用双引号也是有区别的，稍后我们会详细说明。 注意，赋值号=的周围不能有空格，这可能和你熟悉的大部分编程语言都不一样。 已定义的变量，可以被重新赋值，如： url=\"http://c.baidu.net\" echo ${url} url=\"http://c.baidu.net/shell/\" echo ${url} 第二次对变量赋值时不能在变量名前加$，只有在使用变量时才能加$。","s":"2.1 定义变量","u":"/blog/docs/Linux/Shell编程","h":"#21-定义变量","p":345},{"i":352,"t":"使用一个定义过的变量，只要在变量名前面加美元符号$即可，如： author=\"严长生\" echo $author echo ${author} skill=\"Java\" echo \"I am good at ${skill}Script\" 变量名外面的花括号{ }是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界 推荐给所有变量加上花括号{ }，这是个良好的编程习惯。","s":"2.2 使用变量","u":"/blog/docs/Linux/Shell编程","h":"#22-使用变量","p":345},{"i":354,"t":"定义变量时，变量的值可以由单引号' '包围，也可以由双引号\" \"包围 以单引号' '包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。这种方式比较适合定义显示纯字符串的情况，即不希望解析变量、命令等的场景。 以双引号\" \"包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。这种方式比较适合字符串中附带有变量和命令并且想将其解析后再输出的变量定义。","s":"2.3 单引号和双引号的区别","u":"/blog/docs/Linux/Shell编程","h":"#23-单引号和双引号的区别","p":345},{"i":356,"t":"使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。 下面的例子尝试更改只读变量，结果报错： 纯文本复制 #!/bin/bash myUrl=\"http://baidu.net/shell/\" readonly myUrl","s":"2.4 只读变量","u":"/blog/docs/Linux/Shell编程","h":"#24-只读变量","p":345},{"i":358,"t":"使用 unset 命令可以删除变量。语法： unset variable_name 变量被删除后不能再次使用；unset 命令不能删除只读变量。","s":"2.5 删除变量","u":"/blog/docs/Linux/Shell编程","h":"#25-删除变量","p":345},{"i":360,"t":"Shell 也支持将命令的执行结果赋值给变量，常见的有以下两种方式： variable=`command` variable=$(command) 第一种方式把命令用反引号 （位于 Esc 键的下方）包围起来，反引号和单引号非常相似，容易产生混淆，所以不推荐使用这种方式；第二种方式把命令用$()包围起来，区分更加明显，所以推荐使用这种方式。","s":"2.6 将Shell命令的结果赋值给变量","u":"/blog/docs/Linux/Shell编程","h":"#26-将shell命令的结果赋值给变量","p":345},{"i":362,"t":"Shell 变量的作用域可以分为三种： 有的变量只能在函数内部使用，这叫做局部变量（local variable）； 使用关键字local声明 有的变量可以在当前 Shell 进程中使用，这叫做全局变量（global variable）； 在Shell定义的变量默认是全局变量。全局变量，就是指变量在当前的整个 Shell 进程中都有效。 而有的变量还可以在子进程中使用，这叫做环境变量（environment variable）。 如果使用export命令将全局变量导出，那么它就在所有的子进程中也有效了，这称为“环境变量”。如果最顶层的父进程被关闭了，那么环境变量也就随之消失了 在 Shell 函数中定义的变量默认也是全局变量，它和在函数外部定义变量拥有一样的效果。","s":"2.7 变量作用域","u":"/blog/docs/Linux/Shell编程","h":"#27-变量作用域","p":345},{"i":364,"t":"read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量 #!/bin/sh read name echo \"$name It is a test\"","s":"2.8 标准输入变量","u":"/blog/docs/Linux/Shell编程","h":"#28-标准输入变量","p":345},{"i":367,"t":"Shell使用位置参数来保存参数，在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……。当参数超过10时就要使用花括号来取值，如${10}；其中 $0 为执行的文件名（包含文件路径）","s":"位置参数","u":"/blog/docs/Linux/Shell编程","h":"#位置参数","p":345},{"i":369,"t":"参数处理 说明 $# 传递到脚本的参数个数 $* 以一个单字符串显示所有向脚本传递的参数。 如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。 $$ 脚本运行的当前进程ID号 $! 后台运行的最后一个进程的ID号 $@ 与$*相同，但是使用时加引号，并在引号中返回每个参数。 如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。 $- 显示Shell使用的当前选项，与set命令功能相同。 $? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。或者获取函数返回值 $* 与 $@ 区别： 相同点：都是引用所有参数。 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。 #!/bin/bash # author:菜鸟教程 # url:www.runoob.com echo \"-- \\$* 演示 ---\" for i in \"$*\"; do echo $i done echo \"-- \\$@ 演示 ---\" for i in \"$@\"; do echo $i done 执行脚本，输出结果如下所示： $ chmod +x test.sh $ ./test.sh 1 2 3 -- $* 演示 --- 1 2 3 -- $@ 演示 --- 1 2 3","s":"特殊参数","u":"/blog/docs/Linux/Shell编程","h":"#特殊参数","p":345},{"i":372,"t":"在 Shell 中你不需要使用任何运算符，将两个字符串并排放在一起就能实现拼接，非常简单粗暴。请看下面的例子： #!/bin/bash name=\"Shell\" url=\"http://c.biancheng.net/shell/\" str1=$name$url #中间不能有空格 str2=\"$name $url\" #如果被双引号包围，那么中间可以有空格 str3=$name\": \"$url #中间可以出现别的字符串 str4=\"$name: $url\" #这样写也可以 str5=\"${name}Script: ${url}index.html\" #这个时候需要给变量名加上大括号","s":"字符串拼接","u":"/blog/docs/Linux/Shell编程","h":"#字符串拼接","p":345},{"i":374,"t":"格式 说明 ${string: start :length} 从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。 ${string: start} 从 string 字符串的左边第 start 个字符开始截取，直到最后。 ${string: 0-start :length} 从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。 ${string: 0-start} 从 string 字符串的右边第 start 个字符开始截取，直到最后。 ${string#*chars} 从 string 字符串第一次出现 chars 的位置开始，截取 chars 右边的所有字符。 ${string##*chars} 从 string 字符串最后一次出现 chars 的位置开始，截取 chars 右边的所有字符。 ${string%*chars} 从 string 字符串第一次出现 chars 的位置开始，截取 chars 左边的所有字符。 ${string%%*chars} 从 string 字符串最后一次出现 chars 的位置开始，截取 chars 左边的所有字符。 #!/bin/bash url=\"http://c.biancheng.net/index.html\" echo ${url%/*} #结果为 http://c.biancheng.net echo ${url%%/*} #结果为 http: str=\"---aa+++aa@@@\" echo ${str%aa*} #结果为 ---aa+++ echo ${str%%aa*} #结果为 ---","s":"字符串截取","u":"/blog/docs/Linux/Shell编程","h":"#字符串截取","p":345},{"i":376,"t":"string=\"abcd\" echo ${#string} #输出 4","s":"获取字符串长度","u":"/blog/docs/Linux/Shell编程","h":"#获取字符串长度","p":345},{"i":379,"t":"Shell 数组用括号来表示，元素用\"空格\"符号分割开，语法格式如下： array_name=(value1 value2 ... valuen)","s":"5.1 定义","u":"/blog/docs/Linux/Shell编程","h":"#51-定义","p":345},{"i":381,"t":"读取数组元素值的一般格式是： ${array_name[index]}","s":"5.2 读取数组","u":"/blog/docs/Linux/Shell编程","h":"#52-读取数组","p":345},{"i":383,"t":"使用@ 或 * 可以获取数组中的所有元素 ${array_name[*]}或者${array_name[@]}","s":"5.3 获取数组中的所有元素","u":"/blog/docs/Linux/Shell编程","h":"#53-获取数组中的所有元素","p":345},{"i":385,"t":"获取数组长度的方法与获取字符串长度的方法相同，${#array_name[*]}或者${#array_name[@]}","s":"5.4 获取数组的长度","u":"/blog/docs/Linux/Shell编程","h":"#54-获取数组的长度","p":345},{"i":387,"t":"拼接数组的思路是：先利用@或*，将数组扩展成列表，然后再合并到一起。具体格式如下： array_new=(${array1[@]} ${array2[@]}) array_new=(${array1[*]} ${array2[*]})","s":"5.5 拼接数组","u":"/blog/docs/Linux/Shell编程","h":"#55-拼接数组","p":345},{"i":389,"t":"在 Shell 中，使用 unset 关键字来删除数组元素，具体格式如下： unset array_name[index] 其中，array_name 表示数组名，index 表示数组下标。 如果不写下标，而是写成下面的形式： unset array_name 那么就是删除整个数组","s":"5.6 删除数组元素","u":"/blog/docs/Linux/Shell编程","h":"#56-删除数组元素","p":345},{"i":392,"t":"下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20： 运算符 说明 举例 + 加法 expr $a + $b 结果为 30。 - 减法 expr $a - $b 结果为 -10。 * 乘法 expr $a \\* $b 结果为 200。 / 除法 expr $b / $a 结果为 2。 % 取余 expr $b % $a 结果为 0。 = 赋值 a=$b 将把变量 b 的值赋给 a。 == 相等。用于比较两个数字，相同则返回 true。 [ $a == $b ] 返回 false。 != 不相等。用于比较两个数字，不相同则返回 true。 [ $a != $b ] 返回 true。 注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。 注意： 乘号(*)前边必须加反斜杠()才能实现乘法运算； 在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 \"*\" 不需要转义符号 \"\\\" 。","s":"6.1 算术运算符","u":"/blog/docs/Linux/Shell编程","h":"#61-算术运算符","p":345},{"i":394,"t":"关系运算符只支持数字，不支持字符串，除非字符串的值是数字。 下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20： 运算符 说明 举例 -eq 检测两个数是否相等，相等返回 true。 [ $a -eq $b ] 返回 false。 -ne 检测两个数是否不相等，不相等返回 true。 [ $a -ne $b ] 返回 true。 -gt 检测左边的数是否大于右边的，如果是，则返回 true。 [ $a -gt $b ] 返回 false。 -lt 检测左边的数是否小于右边的，如果是，则返回 true。 [ $a -lt $b ] 返回 true。 -ge 检测左边的数是否大于等于右边的，如果是，则返回 true。 [ $a -ge $b ] 返回 false。 -le 检测左边的数是否小于等于右边的，如果是，则返回 true。 [ $a -le $b ] 返回 true。","s":"6.2 关系运算符","u":"/blog/docs/Linux/Shell编程","h":"#62-关系运算符","p":345},{"i":396,"t":"下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20： 运算符 说明 举例 ! 非运算，表达式为 true 则返回 false，否则返回 true。 [ ! false ] 返回 true。 -o 或运算，有一个表达式为 true 则返回 true。 [ $a -lt 20 -o $b -gt 100 ] 返回 true。 -a 与运算，两个表达式都为 true 才返回 true。 [ $a -lt 20 -a $b -gt 100 ] 返回 false。","s":"6.3 布尔运算符","u":"/blog/docs/Linux/Shell编程","h":"#63-布尔运算符","p":345},{"i":398,"t":"以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20: 运算符 说明 举例 && 逻辑的 AND [[ $a -lt 100 && $b -gt 100 ]] 返回 false || 逻辑的 OR [[ $a -lt 100 || $b -gt 100 ]] 返回 true","s":"6.4 逻辑运算符","u":"/blog/docs/Linux/Shell编程","h":"#64-逻辑运算符","p":345},{"i":400,"t":"下表列出了常用的字符串运算符，假定变量 a 为 \"abc\"，变量 b 为 \"efg\"： 运算符 说明 举例 = 检测两个字符串是否相等，相等返回 true。 [ $a = $b ] 返回 false。 != 检测两个字符串是否不相等，不相等返回 true。 [ $a != $b ] 返回 true。 -z 检测字符串长度是否为0，为0返回 true。 [ -z $a ] 返回 false。 -n 检测字符串长度是否不为 0，不为 0 返回 true。 [ -n \"$a\" ] 返回 true。 $ 检测字符串是否为空，不为空返回 true。 [ $a ] 返回 true。","s":"6.5 字符串运算符","u":"/blog/docs/Linux/Shell编程","h":"#65-字符串运算符","p":345},{"i":402,"t":"文件测试运算符用于检测 Unix 文件的各种属性。 变量 file 表示文件 /var/test.sh，它的大小为 100 字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性： 属性检测描述如下： 操作符 说明 举例 -b file 检测文件是否是块设备文件，如果是，则返回 true。 [ -b $file ] 返回 false。 -c file 检测文件是否是字符设备文件，如果是，则返回 true。 [ -c $file ] 返回 false。 -d file 检测文件是否是目录，如果是，则返回 true。 [ -d $file ] 返回 false。 -f file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 [ -f $file ] 返回 true。 -g file 检测文件是否设置了 SGID 位，如果是，则返回 true。 [ -g $file ] 返回 false。 -k file 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 [ -k $file ] 返回 false。 -p file 检测文件是否是有名管道，如果是，则返回 true。 [ -p $file ] 返回 false。 -u file 检测文件是否设置了 SUID 位，如果是，则返回 true。 [ -u $file ] 返回 false。 -r file 检测文件是否可读，如果是，则返回 true。 [ -r $file ] 返回 true。 -w file 检测文件是否可写，如果是，则返回 true。 [ -w $file ] 返回 true。 -x file 检测文件是否可执行，如果是，则返回 true。 [ -x $file ] 返回 true。 -s file 检测文件是否为空（文件大小是否大于0），不为空返回 true。 [ -s $file ] 返回 true。 -e file 检测文件（包括目录）是否存在，如果是，则返回 true。 [ -e $file ] 返回 true。 其他检查符： -S: 判断某文件是否 socket。 -L: 检测文件是否存在并且是一个符号链接。","s":"6.6 文件测试运算符","u":"/blog/docs/Linux/Shell编程","h":"#66-文件测试运算符","p":345},{"i":404,"t":"num=1 num2=$[$num+1] num3=`expr $num + 1` let num4=$num+1","s":"6.7 表达式求值","u":"/blog/docs/Linux/Shell编程","h":"#67-表达式求值","p":345},{"i":407,"t":"if condition1 then command1 elif condition2 then command2 else commandN fi","s":"7.1 if语句","u":"/blog/docs/Linux/Shell编程","h":"#71-if语句","p":345},{"i":409,"t":"与其他编程语言类似，Shell支持for循环。 for循环一般格式为： for var in item1 item2 ... itemN do command1 command2 ... commandN done","s":"7.2 for 循环","u":"/blog/docs/Linux/Shell编程","h":"#72-for-循环","p":345},{"i":411,"t":"while 循环用于不断执行一系列命令，也用于从输入文件中读取数据。其语法格式为： while condition do command done","s":"7.3 while 语句","u":"/blog/docs/Linux/Shell编程","h":"#73-while-语句","p":345},{"i":413,"t":"until 循环执行一系列命令直至条件为 true 时停止。 until 循环与 while 循环在处理方式上刚好相反。 一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。 until 语法格式: until condition do command done condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。","s":"7.4 until 循环","u":"/blog/docs/Linux/Shell编程","h":"#74-until-循环","p":345},{"i":415,"t":"case ... esac 为多选择语句，与其他语言中的 switch ... case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 ;; 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。 可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。 case ... esac 语法格式如下： case 值 in 模式1) command1 command2 ... commandN ;; 模式2） command1 command2 ... commandN ;; 模式3|模式4|模式5） command1 command2 ... commandN ;; *） command1 command2 ... commandN ;; esac","s":"7.5 case ... esac","u":"/blog/docs/Linux/Shell编程","h":"#75-case--esac","p":345},{"i":418,"t":"hell中函数的定义格式如下： [function] funname [()] { action; [return int] { 说明： 1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。 2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255","s":"8.1 定义格式","u":"/blog/docs/Linux/Shell编程","h":"#81-定义格式","p":345},{"i":420,"t":"在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数... 带参数的函数示例：","s":"8.2 函数参数","u":"/blog/docs/Linux/Shell编程","h":"#82-函数参数","p":345},{"i":422,"t":"#!/bin/bash # author:菜鸟教程 # url:www.runoob.com funWithParam(){ echo \"第一个参数为 $1 !\" echo \"第二个参数为 $2 !\" echo \"第十个参数为 $10 !\" echo \"第十个参数为 ${10} !\" echo \"第十一个参数为 ${11} !\" echo \"参数总数有 $# 个!\" echo \"作为一个字符串输出所有参数 $* !\" } funWithParam 1 2 3 4 5 6 7 8 9 34 73 输出结果： 第一个参数为 1 ! 第二个参数为 2 ! 第十个参数为 10 ! 第十个参数为 34 ! 第十一个参数为 73 ! 参数总数有 11 个! 作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !","s":"8.3 实例","u":"/blog/docs/Linux/Shell编程","h":"#83-实例","p":345},{"i":424,"t":"和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。 Shell 文件包含的语法格式如下： . filename # 注意点号(.)和文件名中间有一空格 或 source filename","s":"9. Shell 文件包含","u":"/blog/docs/Linux/Shell编程","h":"#9-shell-文件包含","p":345},{"i":427,"t":"1、单小括号 () ① 命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。 ② 命令替换。等同于cmd，shell扫描一遍命令行，发现了$(cmd)结构，便将$(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。 ③ 用于初始化数组。如：array=(a b c d) 2、双小括号 (( )) ① 整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，是\"假\"；而一个非零值的表达式所返回的退出状态码将为0，是\"true\"。若是逻辑判断，表达式exp为真则为1,假则为0。 ② 只要括号中的运算符、表达式符合C语言运算规则，都可用在$((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo $((16#5f)) 结果为95 (16进位转十进制) ③ 单纯用 (( )) 也可重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6 ④ 常用于算术运算比较，双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开。 只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i<5;i++)), 如果不使用双括号, 则为for i in seq 0 4或者for i in {0..4}。再如可以直接使用if (($i<5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。","s":"10.1 小括号，圆括号（）","u":"/blog/docs/Linux/Shell编程","h":"#101-小括号圆括号","p":345},{"i":429,"t":"1、单中括号 [] ① bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if/test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if/test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。 ② Test和[]中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较\"ab\"和\"bc\"：[ ab < bc ]，结果为真，也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。 ③ 字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。 ④ 在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。 2、双中括号[[ ]] ① [[是 bash 程序语言的关键字。并不是一个命令，[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。 ② 支持字符串的模式匹配，使用=~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。 ③ 使用[[ ... ]]条件判断结构，而不是[ ... ]，能够防止脚本中的许多逻辑错误。比如，&&、||、<和> 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a != 1 && $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] && [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。 ④ bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。 例子： if ($i<5) if [ $i -lt 5 ] if [ $a -ne 1 -a $a != 2 ] if [ $a -ne 1] && [ $a != 2 ] if [[ $a != 1 && $a != 2 ]] for i in $(seq 0 4);do echo $i;done for i in `seq 0 4`;do echo $i;done for ((i=0;i<5;i++));do echo $i;done for i in {0..4};do echo $i;done","s":"10.2 中括号，方括号[]","u":"/blog/docs/Linux/Shell编程","h":"#102-中括号方括号","p":345},{"i":432,"t":"1、常规用法 ①大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch {a..d}.txt 结果为a.txt b.txt c.txt d.txt # ls {ex1,ex2}.sh ex1.sh ex2.sh # ls {ex{1..3},ex4}.sh ex1.sh ex2.sh ex3.sh ex4.sh # ls {ex[1-3],ex4}.sh ex1.sh ex2.sh ex3.sh ex4.sh ②代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。 2、几种特殊的替换结构 ${var:-string},${var:+string},${var:=string},${var:?string} ① ${var:-string}和${var:=string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；对于${var:=string}的替换规则和${var:-string}是一样的，所不同之处是${var:=string}若var为空时，用string替换${var:=string}的同时，把string赋给变量var： ${var:=string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。 ② ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) ③ ${var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。 补充扩展：在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。 3、四种模式匹配替换结构 模式匹配记忆方法： # 是去掉左边(在键盘上#在$之左边) % 是去掉右边(在键盘上%在$之右边) #和%中的单一符号是最小匹配，两个相同符号是最大匹配。 ${var%pattern},${var%%pattern},${var#pattern},${var##pattern} 第一种模式：${variable%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最短的匹配模式 第二种模式： ${variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式 第三种模式：${variable#pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern开始，如果是，就从命令行把variable中的内容去掉左边最短的匹配模式 第四种模式： ${variable##pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式 这四种模式中都不会改变variable的值，其中，只有在pattern中使用了匹配符号时，%和%%，#和##才有区别。结构中的pattern支持通配符，表示零个或多个任意字符，?表示仅与一个任意字符匹配，[...]表示匹配中括号里面的字符，[!...]表示不匹配中括号里面的字符。 # var=testcase # echo $var testcase # echo ${var%s*e} testca # echo $var testcase # echo ${var%%s*e} te # echo ${var#?e} stcase # echo ${var##?e} stcase # echo ${var##*e} # echo ${var##*s} e # echo ${var##test} case 4、字符串提取和替换 ${var:num},${var:num1:num2},${var/pattern/pattern},${var//pattern/pattern} 第一种模式：${var:num}，这种模式时，shell在var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var: -2}、${var:1-3}或${var:(-2)}。 第二种模式：${var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。 第三种模式：${var/pattern/pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern。 第四种模式：${var//pattern/pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern。 [root@centos ~]# var=/home/centos [root@centos ~]# echo $var /home/centos [root@centos ~]# echo ${var:5} /centos [root@centos ~]# echo ${var: -6} centos [root@centos ~]# echo ${var:(-6)} centos [root@centos ~]# echo ${var:1:4} home [root@centos ~]# echo ${var/o/h} /hhme/centos [root@centos ~]# echo ${var//o/h} /hhme/cenths","s":"10.3 大括号、花括号 {}","u":"/blog/docs/Linux/Shell编程","h":"#103-大括号花括号-","p":345},{"i":435,"t":"（1）${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。 （2）$(cmd) 命令替换，和cmd效果相同，结果为shell命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。 （3）$((expression)) 和exprexpression效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。","s":"10.4 符号$后的括号","u":"/blog/docs/Linux/Shell编程","h":"#104-符号后的括号","p":345},{"i":437,"t":"多条命令执行 （1）单小括号，(cmd1;cmd2;cmd3) 新开一个子shell顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后可以没有分号。 （2）单大括号，{ cmd1;cmd2;cmd3;} 在当前shell顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后必须有分号, 第一条命令和左括号之间必须用空格隔开。 对{}和()而言, 括号中的重定向符只影响该条命令， 而括号外的重定向符影响到括号中的所有命令。","s":"10.5 使用","u":"/blog/docs/Linux/Shell编程","h":"#105-使用","p":345},{"i":439,"t":"大部分内容来源于：万字总结，体系化带你全面认识 Nginx ！","s":"Nginx学习","u":"/blog/docs/部署学习/nginx","h":"","p":438},{"i":442,"t":"$ sudo yum -y install nginx # 安装 nginx $ sudo yum remove nginx # 卸载 nginx 使用 yum 进行 Nginx 安装时，Nginx 配置文件在 /etc/nginx 目录下。也通过 rpm -ql nginx 命令查看 Nginx 的安装信息。 # Nginx配置文件 /etc/nginx/nginx.conf # nginx 主配置文件 /etc/nginx/nginx.conf.default # 可执行程序文件 /usr/bin/nginx-upgrade /usr/sbin/nginx # nginx库文件 /usr/lib/systemd/system/nginx.service # 用于配置系统守护进程 /usr/lib64/nginx/modules # Nginx模块目录 # 帮助文档 /usr/share/doc/nginx-1.16.1 /usr/share/doc/nginx-1.16.1/CHANGES /usr/share/doc/nginx-1.16.1/README /usr/share/doc/nginx-1.16.1/README.dynamic /usr/share/doc/nginx-1.16.1/UPGRADE-NOTES-1.6-to-1.10 # 静态资源目录 /usr/share/nginx/html/404.html /usr/share/nginx/html/50x.html /usr/share/nginx/html/index.html # 存放Nginx日志文件 /var/log/nginx 主要关注的文件夹有两个： /etc/nginx/conf.d/ 是子配置项存放处， /etc/nginx/nginx.conf 主配置文件会默认把这个文件夹中所有子配置项都引入； /usr/share/nginx/html/ 静态文件都放在这个文件夹，也可以根据你自己的习惯放在其他地方","s":"yum安装","u":"/blog/docs/部署学习/nginx","h":"#yum安装","p":438},{"i":444,"t":"docker run --name nginx -p 8100:80 -v D:/Code/data/nginx/nginx.conf:/etc/nginx/nginx.conf -v D:/Code/data/nginx/conf.d:/etc/nginx/conf.d -d nginx","s":"docker安装","u":"/blog/docs/部署学习/nginx","h":"#docker安装","p":438},{"i":446,"t":"systemctl 系统命令： # 开机配置 systemctl enable nginx # 开机自动启动 systemctl disable nginx # 关闭开机自动启动 # 启动Nginx systemctl start nginx # 启动Nginx成功后，可以直接访问主机IP，此时会展示Nginx默认页面 # 停止Nginx systemctl stop nginx # 重启Nginx systemctl restart nginx # 重新加载Nginx systemctl reload nginx # 查看 Nginx 运行状态 systemctl status nginx # 查看Nginx进程 ps -ef | grep nginx # 杀死Nginx进程 kill -9 pid # 根据上面查看到的Nginx进程号，杀死Nginx进程，-9 表示强制结束进程 Nginx 应用程序命令 nginx -s reload # 向主进程发送信号，重新加载配置文件，热重启 nginx -s reopen # 重启 Nginx nginx -s stop # 快速关闭 nginx -s quit # 等待工作进程处理完成后关闭 nginx -T # 查看当前 Nginx 最终的配置 nginx -t # 检查配置是否有问题","s":"2. Nginx 常用命令","u":"/blog/docs/部署学习/nginx","h":"#2-nginx-常用命令","p":438},{"i":449,"t":"# main段配置信息 user nginx; # 运行用户，默认即是nginx，可以不进行设置 worker_processes auto; # Nginx 进程数，一般设置为和 CPU 核数一样 error_log /var/log/nginx/error.log warn; # Nginx 的错误日志存放目录 pid /var/run/nginx.pid; # Nginx 服务启动时的 pid 存放位置 # events段配置信息 events { use epoll; # 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的) worker_connections 1024; # 每个进程允许最大并发数 } # http段配置信息 # 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置 http { # 设置日志模式 log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; # Nginx访问日志存放位置 sendfile on; # 开启高效传输模式 tcp_nopush on; # 减少网络报文段的数量 tcp_nodelay on; keepalive_timeout 65; # 保持连接的时间，也叫超时时间，单位秒 types_hash_max_size 2048; include /etc/nginx/mime.types; # 文件扩展名与类型映射表 default_type application/octet-stream; # 默认文件类型 include /etc/nginx/conf.d/*.conf; # 加载子配置项 # server段配置信息 server { listen 80; # 配置监听的端口 server_name localhost; # 配置的域名 # location段配置信息 location / { root /usr/share/nginx/html; # 网站根目录 index index.html index.htm; # 默认首页文件 deny 172.168.22.11; # 禁止访问的ip地址，可以为all allow 172.168.33.44；# 允许访问的ip地址，可以为all } error_page 500 502 503 504 /50x.html; # 默认50x对应的访问页面 error_page 400 404 error.html; # 同上 } } main 全局配置，对全局生效； events 配置影响 Nginx 服务器与用户的网络连接； http 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置； server 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块； location 用于配置匹配的 uri ； upstream 配置后端服务器具体地址，负载均衡配置不可或缺的部分； 下图能清晰的展示它的层级结构：","s":"3.1 主要结构","u":"/blog/docs/部署学习/nginx","h":"#31-主要结构","p":438},{"i":451,"t":"user​ 指定运行 Nginx 的 woker 子进程的属主和属组，其中组可以不指定。 user USERNAME [GROUP] user nginx lion; # 用户是nginx;组是lion pid​ 指定运行 Nginx master 主进程的 pid 文件存放路径。 pid /opt/nginx/logs/nginx.pid # master主进程的的pid存放在nginx.pid的文件 worker_rlimit_nofile_number​ 指定 worker 子进程可以打开的最大文件句柄数。 worker_rlimit_nofile 20480; # 可以理解成每个worker子进程的最大连接数量。 worker_rlimit_core​ 指定 worker 子进程异常终止后的 core 文件，用于记录分析问题。 worker_rlimit_core 50M; # 存放大小限制 working_directory /opt/nginx/tmp; # 存放目录 worker_processes_number​ 指定 Nginx 启动的 worker 子进程数量。 worker_processes 4; # 指定具体子进程数量 worker_processes auto; # 与当前cpu物理核心数一致 worker_cpu_affinity​ 将每个 worker 子进程与我们的 cpu 物理核心绑定。 worker_cpu_affinity 0001 0010 0100 1000; # 4个物理核心，4个worker子进程 将每个 worker 子进程与特定 CPU 物理核心绑定，优势在于，避免同一个 worker 子进程在不同的 CPU 核心上切换，缓存失效，降低性能。但其并不能真正的避免进程切换。 worker_priority​ 指定 worker 子进程的 nice 值，以调整运行 Nginx 的优先级，通常设定为负值，以优先调用 Nginx 。 worker_priority -10; # 120-10=110，110就是最终的优先级 Linux 默认进程的优先级值是120，值越小越优先； nice 定范围为 -20 到 +19 。 [备注] 应用的默认优先级值是120加上 nice 值等于它最终的值，这个值越小，优先级越高。 worker_shutdown_timeout​ 指定 worker 子进程优雅退出时的超时时间。 worker_shutdown_timeout 5s; timer_resolution​ worker 子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性能提升；反之，系统调用越多，性能下降。 timer_resolution 100ms; 在 Linux 系统中，用户需要获取计时器时需要向操作系统内核发送请求，有请求就必然会有开销，因此这个间隔越大开销就越小。 daemon​ 指定 Nginx 的运行方式，前台还是后台，前台用于调试，后台用于生产。 daemon off; # 默认是on，后台运行模式","s":"3.2 main 段核心参数","u":"/blog/docs/部署学习/nginx","h":"#32-main-段核心参数","p":438},{"i":453,"t":"use​ Nginx 使用何种事件驱动模型。 use method; # 不推荐配置它，让nginx自己选择 method 可选值为：select、poll、kqueue、epoll、/dev/poll、eventport worker_connections​ worker 子进程能够处理的最大并发连接数。 worker_connections 1024 # 每个子进程的最大连接数为1024 accept_mutex​ 是否打开负载均衡互斥锁。 accept_mutex on # 默认是off关闭的，这里推荐打开","s":"3.3 events 段核心参数","u":"/blog/docs/部署学习/nginx","h":"#33-events-段核心参数","p":438},{"i":455,"t":"用于定义上游服务器（指的就是后台提供的应用服务器）的相关信息。 语法：upstream name { ... } 上下文：http 示例： upstream back_end_server{ server 192.168.100.33:8081 } 在 upstream 内可使用的指令： server 定义上游服务器地址； zone 定义共享内存，用于跨 worker 子进程； keepalive 对上游服务启用长连接； keepalive_requests 一个长连接最多请求 HTTP 的个数； keepalive_timeout 空闲情形下，一个长连接的超时时长； hash 哈希负载均衡算法； ip_hash 依据 IP 进行哈希计算的负载均衡算法； least_conn 最少连接数负载均衡算法； least_time 最短响应时间负载均衡算法； random 随机负载均衡算法； server​ 定义上游服务器地址。 语法：server address [parameters] 上下文：upstream parameters 可选值： weight=number 权重值，默认为1； max_conns=number 上游服务器的最大并发连接数； fail_timeout=time 服务器不可用的判定时间； max_fails=numer 服务器不可用的检查次数； backup 备份服务器，仅当其他服务器都不可用时才会启用； down 标记服务器长期不可用，离线维护； keepalive​ 限制每个 worker 子进程与上游服务器空闲长连接的最大数量。 keepalive connections; 上下文：upstream 示例：keepalive 16; keepalive_requests​ 单个长连接可以处理的最多 HTTP 请求个数。 语法：keepalive_requests number; 默认值：keepalive_requests 100; 上下文：upstream keepalive_timeout​ 空闲长连接的最长保持时间。 语法：keepalive_timeout time; 默认值：keepalive_timeout 60s; 上下文：upstream 配置实例​ upstream back_end{ server 127.0.0.1:8081 weight=3 max_conns=1000 fail_timeout=10s max_fails=2; keepalive 32; keepalive_requests 50; keepalive_timeout 30s; } 配置负载均衡​ 配置负载均衡主要是要使用 upstream 指令。默认的负载均衡策略为轮询策略。还有其它分发策略如下。 hash 算法 通过制定关键字作为 hash key ，基于 hash 算法映射到特定的上游服务器中。关键字可以包含有变量、字符串。 upstream demo_server { hash $request_uri; server 121.42.11.34:8020; server 121.42.11.34:8030; server 121.42.11.34:8040; } server { listen 80; server_name balance.lion.club; location /balance/ { proxy_pass http://demo_server; } } hash $request_uri 表示使用 request_uri 变量作为 hash 的 key 值，只要访问的 URI 保持不变，就会一直分发给同一台服务器。 ip_hash 根据客户端的请求 ip 进行判断，只要 ip 地址不变就永远分配到同一台主机。它可以有效解决后台服务器 session 保持的问题。 upstream demo_server { ip_hash; server 121.42.11.34:8020; server 121.42.11.34:8030; server 121.42.11.34:8040; } server { listen 80; server_name balance.lion.club; location /balance/ { proxy_pass http://demo_server; } } 最少连接数算法 各个 worker 子进程通过读取共享内存的数据，来获取后端服务器的信息。来挑选一台当前已建立连接数最少的服务器进行分配请求。 语法：least_conn; 上下文：upstream; 示例： upstream demo_server { zone test 10M; # zone可以设置共享内存空间的名字和大小 least_conn; server 121.42.11.34:8020; server 121.42.11.34:8030; server 121.42.11.34:8040; } server { listen 80; server_name balance.lion.club; location /balance/ { proxy_pass http://demo_server; } }","s":"3.4 upstream","u":"/blog/docs/部署学习/nginx","h":"#34-upstream","p":438},{"i":457,"t":"server_name 指令​ 指定虚拟主机域名。 server_name name1 name2 name3 # 示例： server_name www.nginx.com; 域名匹配的四种写法： 精确匹配： server_name www.nginx.com ; 左侧通配： server_name *.nginx.com ; 右侧统配： server_name www.nginx.* ; 正则匹配： server_name ~^www\\.nginx\\.*$ ; 匹配优先级：精确匹配 > 左侧通配符匹配 > 右侧通配符匹配 > 正则表达式匹配 server_name 配置实例： 1、配置本地 DNS 解析 vim /etc/hosts （ macOS 系统） # 添加如下内容，其中 121.42.11.34 是阿里云服务器IP地址 121.42.11.34 www.nginx-test.com 121.42.11.34 mail.nginx-test.com 121.42.11.34 www.nginx-test.org 121.42.11.34 doc.nginx-test.com 121.42.11.34 www.nginx-test.cn 121.42.11.34 fe.nginx-test.club [注意] 这里使用的是虚拟域名进行测试，因此需要配置本地 DNS 解析，如果使用阿里云上购买的域名，则需要在阿里云上设置好域名解析。 2、配置阿里云 Nginx ，vim /etc/nginx/nginx.conf # 这里只列举了http端中的sever端配置 # 左匹配 server { listen 80; server_name *.nginx-test.com; root /usr/share/nginx/html/nginx-test/left-match/; location / { index index.html; } } # 正则匹配 server { listen 80; server_name ~^.*\\.nginx-test\\..*$; root /usr/share/nginx/html/nginx-test/reg-match/; location / { index index.html; } } # 右匹配 server { listen 80; server_name www.nginx-test.*; root /usr/share/nginx/html/nginx-test/right-match/; location / { index index.html; } } # 完全匹配 server { listen 80; server_name www.nginx-test.com; root /usr/share/nginx/html/nginx-test/all-match/; location / { index index.html; } } 3、访问分析 当访问 www.nginx-test.com 时，都可以被匹配上，因此选择优先级最高的“完全匹配”； 当访问 mail.nginx-test.com 时，会进行“左匹配”； 当访问 www.nginx-test.org 时，会进行“右匹配”； 当访问 doc.nginx-test.com 时，会进行“左匹配”； 当访问 www.nginx-test.cn 时，会进行“右匹配”； 当访问 fe.nginx-test.club 时，会进行“正则匹配”； root​ 指定静态资源目录位置，它可以写在 http 、 server 、 location 等配置中。 root path 例如： location /image { root /opt/nginx/static; } 当用户访问 www.test.com/image/1.png 时，实际在服务器找的路径是 /opt/nginx/static/image/1.png [注意] root 会将定义路径与 URI 叠加， alias 则只取定义路径。 alias​ 它也是指定静态资源目录位置，它只能写在 location 中。 location /image { alias /opt/nginx/static/image/; } 当用户访问 www.test.com/image/1.png 时，实际在服务器找的路径是 /opt/nginx/static/image/1.png [注意] 使用 alias 末尾一定要添加 / ，并且它只能位于 location 中。 location​ 配置路径。 location [ = | ~ | ~* | ^~ ] uri { ... } 匹配规则： = 精确匹配； ~ 正则匹配，区分大小写； ~* 正则匹配，不区分大小写； ^~ 匹配到即停止搜索； 匹配优先级： = > ^~ > ~ > ~* > 不带任何字符。 实例： server { listen 80; server_name www.nginx-test.com; # 只有当访问 www.nginx-test.com/match_all/ 时才会匹配到/usr/share/nginx/html/match_all/index.html location = /match_all/ { root /usr/share/nginx/html index index.html } # 当访问 www.nginx-test.com/1.jpg 等路径时会去 /usr/share/nginx/images/1.jpg 找对应的资源 location ~ \\.(jpeg|jpg|png|svg)$ { root /usr/share/nginx/images; } # 当访问 www.nginx-test.com/bbs/ 时会匹配上 /usr/share/nginx/html/bbs/index.html location ^~ /bbs/ { root /usr/share/nginx/html; index index.html index.htm; } } location 中的反斜线 location /test { ... } location /test/ { ... } 不带 / 当访问 www.nginx-test.com/test 时， Nginx 先找是否有 test 目录，如果有则找 test 目录下的 index.html ；如果没有 test 目录， nginx 则会找是否有 test 文件。 带 / 当访问 www.nginx-test.com/test 时， Nginx 先找是否有 test 目录，如果有则找 test 目录下的 index.html ，如果没有它也不会去找是否存在 test 文件。 return​ 停止处理请求，直接返回响应码或重定向到其他 URL ；执行 return 指令后， location 中后续指令将不会被执行。 return code [text]; return code URL; return URL; 例如： location / { return 404; # 直接返回状态码 } location / { return 404 \"pages not found\"; # 返回状态码 + 一段文本 } location / { return 302 /bbs ; # 返回状态码 + 重定向地址 } location / { return https://www.baidu.com ; # 返回重定向地址 } rewrite​ 根据指定正则表达式匹配规则，重写 URL 。 语法：rewrite 正则表达式 要替换的内容 [flag]; 上下文：server、location、if 示例：rewirte /images/(.*\\.jpg)$ /pic/$1; # $1是前面括号(.*\\.jpg)的反向引用 flag 可选值的含义： last 重写后的 URL 发起新请求，再次进入 server 段，重试 location 的中的匹配； break 直接使用重写后的 URL ，不再匹配其它 location 中语句； redirect 返回302临时重定向； permanent 返回301永久重定向； server{ listen 80; server_name fe.lion.club; # 要在本地hosts文件进行配置 root html; location /search { rewrite ^/(.*) https://www.baidu.com redirect; } location /images { rewrite /images/(.*) /pics/$1; } location /pics { rewrite /pics/(.*) /photos/$1; } location /photos { } } 按照这个配置我们来分析： 当访问 fe.lion.club/search 时，会自动帮我们重定向到 https://www.baidu.com。 当访问 fe.lion.club/images/1.jpg 时，第一步重写 URL 为 fe.lion.club/pics/1.jpg ，找到 pics 的 location ，继续重写 URL 为 fe.lion.club/photos/1.jpg ，找到 /photos 的 location 后，去 html/photos 目录下寻找 1.jpg 静态资源。 if 指令​ 语法：if (condition) {...} 上下文：server、location 示例： if($http_user_agent ~ Chrome){ rewrite /(.*)/browser/$1 break; } condition 判断条件： $variable 仅为变量时，值为空或以0开头字符串都会被当做 false 处理； = 或 != 相等或不等； ~ 正则匹配； ! ~ 非正则匹配； ~* 正则匹配，不区分大小写； -f 或 ! -f 检测文件存在或不存在； -d 或 ! -d 检测目录存在或不存在； -e 或 ! -e 检测文件、目录、符号链接等存在或不存在； -x 或 ! -x 检测文件可以执行或不可执行； 实例： server { listen 8080; server_name localhost; root html; location / { if ( $uri = \"/images/\" ){ rewrite (.*) /pics/ break; } } } 当访问 localhost:8080/images/ 时，会进入 if 判断里面执行 rewrite 命令。 autoindex​ 用户请求以 / 结尾时，列出目录结构，可以用于快速搭建静态资源下载网站。 autoindex.conf 配置信息： server { listen 80; server_name fe.lion-test.club; location /download/ { root /opt/source; autoindex on; # 打开 autoindex，，可选参数有 on | off autoindex_exact_size on; # 修改为off，以KB、MB、GB显示文件大小，默认为on，以bytes显示出⽂件的确切⼤⼩ autoindex_format html; # 以html的方式进行格式化，可选参数有 html | json | xml autoindex_localtime off; # 显示的⽂件时间为⽂件的服务器时间。默认为off，显示的⽂件时间为GMT时间 } } 当访问 fe.lion.com/download/ 时，会把服务器 /opt/source/download/ 路径下的文件展示出来，如下图所示： proxy_pass​ 用于配置代理服务器。 语法：proxy_pass URL; 上下文：location、if、limit_except 示例： proxy_pass http://127.0.0.1:8081 proxy_pass http://127.0.0.1:8081/proxy URL 参数原则 URL 必须以 http 或 https 开头； URL 中可以携带变量； URL 中是否带 URI ，会直接影响发往上游请求的 URL ； 接下来让我们来看看两种常见的 URL 用法： proxy_pass http://192.168.100.33:8081 proxy_pass http://192.168.100.33:8081/ 这两种用法的区别就是带 / 和不带 / ，在配置代理时它们的区别可大了： 不带 / 意味着 Nginx 不会修改用户 URL ，而是直接透传给上游的应用服务器； 带 / 意味着 Nginx 会修改用户 URL ，修改方法是将 location 后的 URL 从用户 URL 中删除； 不带 / 的用法： location /bbs/{ proxy_pass http://127.0.0.1:8080; } 分析： 用户请求 URL ： /bbs/abc/test.html 请求到达 Nginx 的 URL ： /bbs/abc/test.html 请求到达上游应用服务器的 URL ： /bbs/abc/test.html 带 / 的用法： location /bbs/{ proxy_pass http://127.0.0.1:8080/; } 分析： 用户请求 URL ： /bbs/abc/test.html 请求到达 Nginx 的 URL ： /bbs/abc/test.html 请求到达上游应用服务器的 URL ： /abc/test.html 并没有拼接上 /bbs ，这点和 root 与 alias 之间的区别是保持一致的。 例如： 假设下面四种情况分别用 http://192.168.1.188/proxy/test.html 进行访问。 第一种： location /proxy/ { proxy_pass http://127.0.0.1/; } 代理到URL：http://127.0.0.1/test.html 第二种（相对于第一种，最后少一个 / ） location /proxy/ { proxy_pass http://127.0.0.1; } 代理到URL：http://127.0.0.1/proxy/test.html 第三种： location /proxy/ { proxy_pass http://127.0.0.1/aaa/; } 代理到URL：http://127.0.0.1/aaa/test.html 第四种（相对于第三种，最后少一个 / ） location /proxy/ { proxy_pass http://127.0.0.1/aaa; } 代理到URL：http://127.0.0.1/aaatest.html","s":"3.5 server段核心参数","u":"/blog/docs/部署学习/nginx","h":"#35-server段核心参数","p":438},{"i":459,"t":"Nginx 提供给使用者的变量非常多，但是终究是一个完整的请求过程所产生数据， Nginx 将这些数据以变量的形式提供给使用者。 下面列举些项目中常用的变量： 变量名 含义 remote_addr 客户端 IP 地址 remote_port 客户端端口 server_addr 服务端 IP 地址 server_port 服务端端口 server_protocol 服务端协议 binary_remote_addr 二进制格式的客户端 IP 地址 connection TCP 连接的序号，递增 connection_request TCP 连接当前的请求数量 uri 请求的URL，不包含参数 request_uri 请求的URL，包含参数 scheme 协议名， http 或 https request_method 请求方法 request_length 全部请求的长度，包含请求行、请求头、请求体 args 全部参数字符串 arg_参数名 获取特定参数值 is_args URL 中是否有参数，有的话返回 ? ，否则返回空 query_string 与 args 相同 host 请求信息中的 Host ，如果请求中没有 Host 行，则在请求头中找，最后使用 nginx 中设置的 server_name 。 http_user_agent 用户浏览器 http_referer 从哪些链接过来的请求 http_via 每经过一层代理服务器，都会添加相应的信息 http_cookie 获取用户 cookie request_time 处理请求已消耗的时间 https 是否开启了 https ，是则返回 on ，否则返回空 request_filename 磁盘文件系统待访问文件的完整路径 document_root 由 URI 和 root/alias 规则生成的文件夹路径 limit_rate 返回响应时的速度上限值","s":"4. 变量","u":"/blog/docs/部署学习/nginx","h":"#4-变量","p":438},{"i":461,"t":"代理是在服务器和客户端之间假设的一层服务器，代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。 不管是正向代理还是反向代理，实现的都是上面的功能。","s":"5. Nginx 应用核心概念","u":"/blog/docs/部署学习/nginx","h":"#5-nginx-应用核心概念","p":438},{"i":463,"t":"正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。 正向代理是为我们服务的，即为客户端服务的，客户端可以根据正向代理访问到它本身无法访问到的服务器资源。 正向代理对我们是透明的，对服务端是非透明的，即服务端并不知道自己收到的是来自代理的访问还是来自真实客户端的访问。","s":"5.1 正向代理","u":"/blog/docs/部署学习/nginx","h":"#51-正向代理","p":438},{"i":465,"t":"反向代理*（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。 反向代理是为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发，负载均衡等。 反向代理对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为他服务。 反向代理的优势： 隐藏真实服务器； 负载均衡便于横向扩充后端动态服务； 动静分离，提升系统健壮性； 那么“动静分离”是什么？负载均衡又是什么？","s":"5.2 反向代理","u":"/blog/docs/部署学习/nginx","h":"#52-反向代理","p":438},{"i":467,"t":"动静分离是指在 web 服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提示整个服务的访问性和可维护性。 一般来说，都需要将动态资源和静态资源分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。 使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。","s":"5.3 动静分离","u":"/blog/docs/部署学习/nginx","h":"#53-动静分离","p":438},{"i":469,"t":"一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。 这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。 很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是负载均衡。 请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是负载均衡，核心是「分摊压力」。 Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。 举个具体的例子，晚高峰乘坐地铁的时候，入站口经常会有地铁工作人员大喇叭“请走 B 口， B 口人少车空....”，这个工作人员的作用就是负载均衡。 Nginx 实现负载均衡的策略： 轮询策略：默认情况下采用的策略，将所有客户端请求轮询分配给服务端。这种策略是可以正常工作的，但是如果其中某一台服务器压力太大，出现延迟，会影响所有分配在这台服务器下的用户。 最小连接数策略：将请求优先分配给压力较小的服务器，它可以平衡每个队列的长度，并避免向压力大的服务器添加更多的请求。 最快响应时间策略：优先分配给响应时间最短的服务器。 客户端 ip 绑定策略：来自同一个 ip 的请求永远只分配一台服务器，有效解决了动态网页存在的 session 共享问题。","s":"5.4 负载均衡","u":"/blog/docs/部署学习/nginx","h":"#54-负载均衡","p":438},{"i":471,"t":"缓存可以非常有效的提升性能，因此不论是客户端（浏览器），还是代理服务器（ Nginx ），乃至上游服务器都多少会涉及到缓存。可见缓存在每个环节都是非常重要的。下面让我们来学习 Nginx 中如何设置缓存策略。","s":"6. 配置缓存","u":"/blog/docs/部署学习/nginx","h":"#6-配置缓存","p":438},{"i":473,"t":"存储一些之前被访问过、而且可能将要被再次访问的资源，使用户可以直接从代理服务器获得，从而减少上游服务器的压力，加快整个访问速度。 语法：proxy_cache zone | off ; # zone 是共享内存的名称 默认值：proxy_cache off; 上下文：http、server、location","s":"proxy_cache","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache","p":438},{"i":475,"t":"设置缓存文件的存放路径。 语法：proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time]; 默认值：proxy_cache_path off 上下文：http 参数含义： path：缓存的路径地址。 levels：缓存存储的层次结构，最多允许三层目录。 use_temp_path：是否使用临时目录。 keys_zone：指定一个共享内存空间来存储热点Key(1M可存储8000个Key)。 inactive：设置缓存多长时间未被访问后删除（默认是十分钟）。 max_size：允许缓存的最大存储空间，超出后会基于LRU算法移除缓存，Nginx会创建一个Cache manager的进程移除数据，也可以通过purge方式。 manager_files：manager进程每次移除缓存文件数量的上限。 manager_sleep：manager进程每次移除缓存文件的时间上限。 manager_threshold：manager进程每次移除缓存后的间隔时间。 loader_files：重启Nginx载入缓存时，每次加载的个数，默认100。 loader_sleep：每次载入时，允许的最大时间上限，默认200ms。 loader_threshold：一次载入后，停顿的时间间隔，默认50ms。 purger：是否开启purge方式移除数据。 purger_files：每次移除缓存文件时的数量。 purger_sleep：每次移除时，允许消耗的最大时间。 purger_threshold：每次移除完成后，停顿的间隔时间。","s":"proxy_cache_path","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_path","p":438},{"i":477,"t":"设置缓存文件的 key 。 语法：proxy_cache_key 默认值：proxy_cache_key $scheme$proxy_host$request_uri; 上下文：http、server、location","s":"proxy_cache_key","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_key","p":438},{"i":479,"t":"配置什么状态码可以被缓存，以及缓存时长。 语法：proxy_cache_valid [code...] time; 上下文：http、server、location 配置示例：proxy_cache_valid 200 304 2m;; # 说明对于状态为200和304的缓存文件的缓存时间是2分钟","s":"proxy_cache_valid","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_valid","p":438},{"i":481,"t":"定义相应保存到缓存的条件，如果字符串参数的至少一个值不为空且不等于“ 0”，则将不保存该响应到缓存。 语法：proxy_no_cache string; 上下文：http、server、location 示例：proxy_no_cache $http_pragma $http_authorization;","s":"proxy_no_cache","u":"/blog/docs/部署学习/nginx","h":"#proxy_no_cache","p":438},{"i":483,"t":"定义条件，在该条件下将不会从缓存中获取响应。 语法：proxy_cache_bypass string; 上下文：http、server、location 示例：proxy_cache_bypass $http_pragma $http_authorization;","s":"proxy_cache_bypass","u":"/blog/docs/部署学习/nginx","h":"#proxy_cache_bypass","p":438},{"i":485,"t":"它存储了缓存是否命中的信息，会设置在响应头信息中，在调试中非常有用。 MISS: 未命中缓存 HIT： 命中缓存 EXPIRED: 缓存过期 STALE: 命中了陈旧缓存 REVALIDDATED: Nginx验证陈旧缓存依然有效 UPDATING: 内容陈旧，但正在更新 BYPASS: X响应从原始服务器获取","s":"upstream_cache_status 变量","u":"/blog/docs/部署学习/nginx","h":"#upstream_cache_status-变量","p":438},{"i":487,"t":"我们把 121.42.11.34 服务器作为上游服务器，做如下配置（ /etc/nginx/conf.d/cache.conf ）： server { listen 1010; root /usr/share/nginx/html/1010; location / { index index.html; } } server { listen 1020; root /usr/share/nginx/html/1020; location / { index index.html; } } 把 121.5.180.193 服务器作为代理服务器，做如下配置（ /etc/nginx/conf.d/cache.conf ）： proxy_cache_path /etc/nginx/cache_temp levels=2:2 keys_zone=cache_zone:30m max_size=2g inactive=60m use_temp_path=off; upstream cache_server{ server 121.42.11.34:1010; server 121.42.11.34:1020; } server { listen 80; server_name cache.lion.club; location / { proxy_cache cache_zone; # 设置缓存内存，上面配置中已经定义好的 proxy_cache_valid 200 5m; # 缓存状态为200的请求，缓存时长为5分钟 proxy_cache_key $request_uri; # 缓存文件的key为请求的URI add_header Nginx-Cache-Status $upstream_cache_status # 把缓存状态设置为头部信息，响应给客户端 proxy_pass http://cache_server; # 代理转发 } } 缓存就是这样配置，我们可以在 /etc/nginx/cache_temp 路径下找到相应的缓存文件。 对于一些实时性要求非常高的页面或数据来说，就不应该去设置缓存，下面来看看如何配置不缓存的内容。 ... server { listen 80; server_name cache.lion.club; # URI 中后缀为 .txt 或 .text 的设置变量值为 \"no cache\" if ($request_uri ~ \\.(txt|text)$) { set $cache_name \"no cache\" } location / { proxy_no_cache $cache_name; # 判断该变量是否有值，如果有值则不进行缓存，如果没有值则进行缓存 proxy_cache cache_zone; # 设置缓存内存 proxy_cache_valid 200 5m; # 缓存状态为200的请求，缓存时长为5分钟 proxy_cache_key $request_uri; # 缓存文件的key为请求的URI add_header Nginx-Cache-Status $upstream_cache_status # 把缓存状态设置为头部信息，响应给客户端 proxy_pass http://cache_server; # 代理转发 } }","s":"配置实例","u":"/blog/docs/部署学习/nginx","h":"#配置实例-1","p":438},{"i":489,"t":"在学习如何配置 HTTPS 之前，我们先来简单回顾下 HTTPS 的工作流程是怎么样的？它是如何进行加密保证安全的？","s":"7. 配置HTTPS","u":"/blog/docs/部署学习/nginx","h":"#7-配置https","p":438},{"i":491,"t":"客户端（浏览器）访问 https://www.baidu.com 百度网站； 百度服务器返回 HTTPS 使用的 CA 证书； 浏览器验证 CA 证书是否为合法证书； 验证通过，证书合法，生成一串随机数并使用公钥（证书中提供的）进行加密； 发送公钥加密后的随机数给百度服务器； 百度服务器拿到密文，通过私钥进行解密，获取到随机数（公钥加密，私钥解密，反之也可以）； 百度服务器把要发送给浏览器的内容，使用随机数进行加密后传输给浏览器； 此时浏览器可以使用随机数进行解密，获取到服务器的真实传输内容； 这就是 HTTPS 的基本运作原理，使用对称加密和非对称机密配合使用，保证传输内容的安全性。 关于HTTPS更多知识，可以查看另外一篇文章《学习 HTTP 协议》。","s":"HTTPS 工作流程","u":"/blog/docs/部署学习/nginx","h":"#https-工作流程","p":438},{"i":493,"t":"下载证书的压缩文件，里面有个 Nginx 文件夹，把 xxx.crt 和 xxx.key 文件拷贝到服务器目录，再进行如下配置： server { listen 443 ssl http2 default_server; # SSL 访问端口号为 443 server_name lion.club; # 填写绑定证书的域名(我这里是随便写的) ssl_certificate /etc/nginx/https/lion.club_bundle.crt; # 证书地址 ssl_certificate_key /etc/nginx/https/lion.club.key; # 私钥地址 ssl_session_timeout 10m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 支持ssl协议版本，默认为后三个，主流版本是[TLSv1.2] location / { root /usr/share/nginx/html; index index.html index.htm; } } # ---------HTTP请求转HTTPS------------- server { # 监听HTTP默认的80端口 listen 80; # 如果80端口出现访问该域名的请求 server_name www.xxx.com; # 将请求改写为HTTPS（这里写你配置了HTTPS的域名） rewrite ^(.*)$ https://www.xxx.com; } 如此配置后就能正常访问 HTTPS 版的网站了。","s":"配置证书","u":"/blog/docs/部署学习/nginx","h":"#配置证书","p":438},{"i":496,"t":"多进程结构 Nginx 的进程模型图： 多进程中的 Nginx 进程架构如下图所示，会有一个父进程（ Master Process ），它会有很多子进程（ Child Processes ）。 Master Process 用来管理子进程的，其本身并不真正处理用户请求。 某个子进程 down 掉的话，它会向 Master 进程发送一条消息，表明自己不可用了，此时 Master 进程会去新起一个子进程。 某个配置文件被修改了 Master 进程会去通知 work 进程获取新的配置信息，这也就是我们所说的热部署。 子进程间是通过共享内存的方式进行通信的。","s":"进程结构","u":"/blog/docs/部署学习/nginx","h":"#进程结构","p":438},{"i":498,"t":"reload 重载配置文件的流程： 向 master 进程发送 HUP 信号（ reload 命令）； master 进程检查配置语法是否正确； master 进程打开监听端口； master 进程使用新的配置文件启动新的 worker 子进程； master 进程向老的 worker 子进程发送 QUIT 信号； 老的 worker 进程关闭监听句柄，处理完当前连接后关闭进程； 整个过程 Nginx 始终处于平稳运行中，实现了平滑升级，用户无感知；","s":"配置文件重载原理","u":"/blog/docs/部署学习/nginx","h":"#配置文件重载原理","p":438},{"i":500,"t":"Nginx 的内部结构是由核心部分和一系列的功能模块所组成。这样划分是为了使得每个模块的功能相对简单，便于开发，同时也便于对系统进行功能扩展。Nginx 的模块是互相独立的,低耦合高内聚。","s":"Nginx 模块化管理机制","u":"/blog/docs/部署学习/nginx","h":"#nginx-模块化管理机制","p":438},{"i":502,"t":"线上如果采用单个节点的方式部署Nginx，难免会出现天灾人祸，比如系统异常、程序宕机、服务器断电、机房爆炸、地球毁灭....哈哈哈，夸张了。但实际生产环境中确实存在隐患问题，由于Nginx作为整个系统的网关层接入外部流量，所以一旦Nginx宕机，最终就会导致整个系统不可用，这无疑对于用户的体验感是极差的，因此也得保障Nginx高可用的特性。 接下来则会通过keepalived的VIP机制，实现Nginx的高可用。 VIP并不是只会员的意思，而是指Virtual IP，即虚拟IP。 keepalived在之前单体架构开发时，是一个用的较为频繁的高可用技术，比如MySQL、Redis、MQ、Proxy、Tomcat等各处都会通过keepalived提供的VIP机制，实现单节点应用的高可用。","s":"9. Nginx的高可用","u":"/blog/docs/部署学习/nginx","h":"#9-nginx的高可用","p":438},{"i":504,"t":"①首先创建一个对应的目录并下载keepalived到Linux中并解压： [root@localhost]# mkdir /soft/keepalived && cd /soft/keepalived [root@localhost]# wget https://www.keepalived.org/software/keepalived-2.2.4.tar.gz [root@localhost]# tar -zxvf keepalived-2.2.4.tar.gz ②进入解压后的keepalived目录并构建安装环境，然后编译并安装： [root@localhost]# cd keepalived-2.2.4 [root@localhost]# ./configure --prefix=/soft/keepalived/ [root@localhost]# make && make install ③进入安装目录的/soft/keepalived/etc/keepalived/并编辑配置文件： [root@localhost]# cd /soft/keepalived/etc/keepalived/ [root@localhost]# vi keepalived.conf ④编辑主机的keepalived.conf核心配置文件，如下： global_defs { # 自带的邮件提醒服务，建议用独立的监控或第三方SMTP，也可选择配置邮件发送。 notification_email { root@localhost } notification_email_from root@localhost smtp_server localhost smtp_connect_timeout 30 # 高可用集群主机身份标识(集群中主机身份标识名称不能重复，建议配置成本机IP) router_id 192.168.12.129 } # 定时运行的脚本文件配置 vrrp_script check_nginx_pid_restart { # 之前编写的nginx重启脚本的所在位置 script \"/soft/scripts/keepalived/check_nginx_pid_restart.sh\" # 每间隔3秒执行一次 interval 3 # 如果脚本中的条件成立，重启一次则权重-20 weight -20 } # 定义虚拟路由，VI_1为虚拟路由的标示符（可自定义名称） vrrp_instance VI_1 { # 当前节点的身份标识：用来决定主从（MASTER为主机，BACKUP为从机） state MASTER # 绑定虚拟IP的网络接口，根据自己的机器的网卡配置 interface ens33 # 虚拟路由的ID号，主从两个节点设置必须一样 virtual_router_id 121 # 填写本机IP mcast_src_ip 192.168.12.129 # 节点权重优先级，主节点要比从节点优先级高 priority 100 # 优先级高的设置nopreempt，解决异常恢复后再次抢占造成的脑裂问题 nopreempt # 组播信息发送间隔，两个节点设置必须一样，默认1s（类似于心跳检测） advert_int 1 authentication { auth_type PASS auth_pass 1111 } # 将track_script块加入instance配置块 track_script { # 执行Nginx监控的脚本 check_nginx_pid_restart } virtual_ipaddress { # 虚拟IP(VIP)，也可扩展，可配置多个。 192.168.12.111 } } ⑤克隆一台之前的虚拟机作为从（备）机，编辑从机的keepalived.conf文件，如下： global_defs { # 自带的邮件提醒服务，建议用独立的监控或第三方SMTP，也可选择配置邮件发送。 notification_email { root@localhost } notification_email_from root@localhost smtp_server localhost smtp_connect_timeout 30 # 高可用集群主机身份标识(集群中主机身份标识名称不能重复，建议配置成本机IP) router_id 192.168.12.130 } # 定时运行的脚本文件配置 vrrp_script check_nginx_pid_restart { # 之前编写的nginx重启脚本的所在位置 script \"/soft/scripts/keepalived/check_nginx_pid_restart.sh\" # 每间隔3秒执行一次 interval 3 # 如果脚本中的条件成立，重启一次则权重-20 weight -20 } # 定义虚拟路由，VI_1为虚拟路由的标示符（可自定义名称） vrrp_instance VI_1 { # 当前节点的身份标识：用来决定主从（MASTER为主机，BACKUP为从机） state BACKUP # 绑定虚拟IP的网络接口，根据自己的机器的网卡配置 interface ens33 # 虚拟路由的ID号，主从两个节点设置必须一样 virtual_router_id 121 # 填写本机IP mcast_src_ip 192.168.12.130 # 节点权重优先级，主节点要比从节点优先级高 priority 90 # 优先级高的设置nopreempt，解决异常恢复后再次抢占造成的脑裂问题 nopreempt # 组播信息发送间隔，两个节点设置必须一样，默认1s（类似于心跳检测） advert_int 1 authentication { auth_type PASS auth_pass 1111 } # 将track_script块加入instance配置块 track_script { # 执行Nginx监控的脚本 check_nginx_pid_restart } virtual_ipaddress { # 虚拟IP(VIP)，也可扩展，可配置多个。 192.168.12.111 } } ⑥新建scripts目录并编写Nginx的重启脚本，check_nginx_pid_restart.sh： [root@localhost]# mkdir /soft/scripts /soft/scripts/keepalived [root@localhost]# touch /soft/scripts/keepalived/check_nginx_pid_restart.sh [root@localhost]# vi /soft/scripts/keepalived/check_nginx_pid_restart.sh #!/bin/sh # 通过ps指令查询后台的nginx进程数，并将其保存在变量nginx_number中 nginx_number=`ps -C nginx --no-header | wc -l` # 判断后台是否还有Nginx进程在运行 if [ $nginx_number -eq 0 ];then # 如果后台查询不到`Nginx`进程存在，则执行重启指令 /soft/nginx/sbin/nginx -c /soft/nginx/conf/nginx.conf # 重启后等待1s后，再次查询后台进程数 sleep 1 # 如果重启后依旧无法查询到nginx进程 if [ `ps -C nginx --no-header | wc -l` -eq 0 ];then # 将keepalived主机下线，将虚拟IP漂移给从机，从机上线接管Nginx服务 systemctl stop keepalived.service fi fi ⑦编写的脚本文件需要更改编码格式，并赋予执行权限，否则可能执行失败： [root@localhost]# vi /soft/scripts/keepalived/check_nginx_pid_restart.sh :set fileformat=unix # 在vi命令里面执行，修改编码格式 :set ff # 查看修改后的编码格式 [root@localhost]# chmod +x /soft/scripts/keepalived/check_nginx_pid_restart.sh ⑧由于安装keepalived时，是自定义的安装位置，因此需要拷贝一些文件到系统目录中： [root@localhost]# mkdir /etc/keepalived/ [root@localhost]# cp /soft/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/ [root@localhost]# cp /soft/keepalived/keepalived-2.2.4/keepalived/etc/init.d/keepalived /etc/init.d/ [root@localhost]# cp /soft/keepalived/etc/sysconfig/keepalived /etc/sysconfig/ ⑨将keepalived加入系统服务并设置开启自启动，然后测试启动是否正常： [root@localhost]# chkconfig keepalived on [root@localhost]# systemctl daemon-reload [root@localhost]# systemctl enable keepalived.service [root@localhost]# systemctl start keepalived.service 其他命令： systemctl disable keepalived.service # 禁止开机自动启动 systemctl restart keepalived.service # 重启keepalived systemctl stop keepalived.service # 停止keepalived tail -f /var/log/messages # 查看keepalived运行时日志 ⑩最后测试一下VIP是否生效，通过查看本机是否成功挂载虚拟IP： [root@localhost]# ip addr 从上图中可以明显看见虚拟IP已经成功挂载，但另外一台机器192.168.12.130并不会挂载这个虚拟IP，只有当主机下线后，作为从机的192.168.12.130才会上线，接替VIP。最后测试一下外网是否可以正常与VIP通信，即在Windows中直接ping VIP： 外部通过VIP通信时，也可以正常Ping通，代表虚拟IP配置成功。","s":"Keepalived+重启脚本+双机热备搭建","u":"/blog/docs/部署学习/nginx","h":"#keepalived重启脚本双机热备搭建","p":438},{"i":506,"t":"经过上述步骤后，keepalived的VIP机制已经搭建成功，在上个阶段中主要做了几件事： 一、为部署Nginx的机器挂载了VIP。 二、通过keepalived搭建了主从双机热备。 三、通过keepalived实现了Nginx宕机重启。 由于前面没有域名的原因，因此最初server_name配置的是当前机器的IP，所以需稍微更改一下nginx.conf的配置： sever{ listen 80; # 这里从机器的本地IP改为虚拟IP server_name 192.168.12.111; # 如果这里配置的是域名，那么则将域名的映射配置改为虚拟IP } 最后来实验一下效果： 在上述过程中，首先分别启动了keepalived、nginx服务，然后通过手动停止nginx的方式模拟了Nginx宕机情况，过了片刻后再次查询后台进程，我们会发现nginx依旧存活。 从这个过程中不难发现，keepalived已经为我们实现了Nginx宕机后自动重启的功能，那么接着再模拟一下服务器出现故障时的情况： 在上述过程中，我们通过手动关闭keepalived服务模拟了机器断电、硬件损坏等情况（因为机器断电等情况=主机中的keepalived进程消失），然后再次查询了一下本机的IP信息，很明显会看到VIP消失了！ 现在再切换到另外一台机器：192.168.12.130来看看情况： 此刻我们会发现，在主机192.168.12.129宕机后，VIP自动从主机飘移到了从机192.168.12.130上，而此时客户端的请求就最终会来到130这台机器的Nginx上。 最终，利用Keepalived对Nginx做了主从热备之后，无论是遇到线上宕机还是机房断电等各类故障时，都能够确保应用系统能够为用户提供7x24小时服务。","s":"Nginx高可用性测试","u":"/blog/docs/部署学习/nginx","h":"#nginx高可用性测试","p":438},{"i":508,"t":"nginx在处理每一个用户请求时，都是按照若干个不同的阶段依次处理的，与配置文件上的顺序没有关系，详细内容可以阅读《深入理解nginx:模块开发与架构解析》这本书，这里只做简单介绍； （1）post-read 读取请求内容阶段，nginx读取并解析完请求头之后就立即开始运行； （2）server-rewrite server请求地址重写阶段； （3）find-config 配置查找阶段，用来完成当前请求与location配重块之间的配对工作； （4）rewrite location请求地址重写阶段，当ngx_rewrite指令用于location中，就是再这个阶段运行的； （5）post-rewrite 请求地址重写提交阶段，当nginx完成rewrite阶段所要求的内部跳转动作，如果rewrite阶段有这个要求的话； （6）preaccess 访问权限检查准备阶段，ngx_limit_req和ngx_limit_zone在这个阶段运行，ngx_limit_req可以控制请求的访问频率，ngx_limit_zone可以控制访问的并发度； （7）access 权限检查阶段，ngx_access在这个阶段运行，配置指令多是执行访问控制相关的任务，如检查用户的访问权限，检查用户的来源IP是否合法； （8）post-access 访问权限检查提交阶段； （9）try-files 配置项try_files处理阶段； （10）content 内容产生阶段，是所有请求处理阶段中最为重要的阶段，因为这个阶段的指令通常是用来生成HTTP响应内容的； （11）log 日志模块处理阶段； 图：Nginx 模块执行顺序与阶段","s":"10. nginx执行步骤","u":"/blog/docs/部署学习/nginx","h":"#10-nginx执行步骤","p":438},{"i":510,"t":"ngx_lua属于nginx的一部分，它的执行指令都包含在nginx的11个步骤之中了，相应的处理阶段可以做插入式处理，即可插拔式架构，不过ngx_lua并不是所有阶段都会运行的；另外指令可以在http、server、server if、location、location if几个范围进行配置： 指令 所处处理阶段 使用范围 解释 init_by_lua init_by_lua_file loading-config http nginx Master进程加载配置时执行； 通常用于初始化全局配置/预加载Lua模块 init_worker_by_lua init_worker_by_lua_file starting-worker http 每个Nginx Worker进程启动时调用的计时器，如果Master进程不允许则只会在init_by_lua之后调用； 通常用于定时拉取配置/数据，或者后端服务的健康检查 set_by_lua set_by_lua_file rewrite server,server if,location,location if 设置nginx变量，可以实现复杂的赋值逻辑；此处是阻塞的，Lua代码要做到非常快； rewrite_by_lua rewrite_by_lua_file rewrite tail http,server,location,location if rrewrite阶段处理，可以实现复杂的转发/重定向逻辑； access_by_lua access_by_lua_file access tail http,server,location,location if 请求访问阶段处理，用于访问控制 content_by_lua content_by_lua_file content location，location if 内容处理器，接收请求处理并输出响应 header_filter_by_lua header_filter_by_lua_file output-header-filter http，server，location，location if 设置header和cookie body_filter_by_lua body_filter_by_lua_file output-body-filter http，server，location，location if 对响应数据进行过滤，比如截断、替换。 log_by_lua log_by_lua_file log http，server，location，location if log阶段处理，比如记录访问量/统计平均响应时间","s":"11. ngx_lua 运行指令","u":"/blog/docs/部署学习/nginx","h":"#11-ngx_lua-运行指令","p":438},{"i":512,"t":"万字总结，体系化带你全面认识 Nginx ！ Nginx中文文档 gitbook Nginx中文文档 Nginx一网打尽：动静分离、压缩、缓存、黑白名单、跨域、高可用、性能优化...想要的这都有！","s":"参考","u":"/blog/docs/部署学习/nginx","h":"#参考","p":438},{"i":516,"t":"1.1 应用部署方式演变​ 在部署应用程序的方式上，主要经历了三个时代： 传统部署：互联网早期，会直接将应用程序部署在物理机上 优点：简单，不需要其它技术的参与 缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响 虚拟化部署：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境 优点：程序环境不会相互产生影响，提供了一定程度的安全性 缺点：增加了操作系统，浪费了部分资源 容器化部署：与虚拟化类似，但是共享了操作系统 优点： 可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等 运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦 容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署 容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说： 一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器 当并发访问量变大的时候，怎么样做到横向扩展容器数量 这些容器管理的问题统称为容器编排问题，为了解决这些容器编排问题，就产生了一些容器编排的软件： Swarm：Docker自己的容器编排工具 Mesos：Apache的一个资源统一管控的工具，需要和Marathon结合使用 Kubernetes：Google开源的的容器编排工具 1.2 kubernetes简介​ kubernetes，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器----Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。 kubernetes的本质是一组服务器集群，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能： 自我修复：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器 弹性伸缩：可以根据需要，自动对集群中正在运行的容器数量进行调整 服务发现：服务可以通过自动发现的形式找到它所依赖的服务 负载均衡：如果一个服务起动了多个容器，能够自动实现请求的负载均衡 版本回退：如果发现新发布的程序版本有问题，可以立即回退到原来的版本 存储编排：可以根据容器自身的需求自动创建存储卷 1.3 kubernetes组件​ 一个kubernetes集群主要是由控制节点(master)、工作节点(node)构成，每个节点上都会安装不同的组件。 master：集群的控制平面，负责集群的决策 ( 管理 ) ApiServer : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制 Scheduler : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上 ControllerManager : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等 Etcd ：负责存储集群中各种资源对象的信息 node：集群的数据平面，负责为容器提供运行环境 ( 干活 ) Kubelet : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器 KubeProxy : 负责提供集群内部的服务发现和负载均衡 Docker : 负责节点上容器的各种操作 下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系： 首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中 一个nginx服务的安装请求会首先被发送到master节点的apiServer组件 apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上 在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer apiServer调用controller-manager去调度Node节点安装nginx服务 kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod pod是kubernetes的最小操作单元，容器必须跑在pod中至此， 一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理 这样，外界用户就可以访问集群中的nginx服务了 1.4 kubernetes概念​ Master：集群控制节点，每个集群需要至少一个master节点负责集群的管控 Node：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行 Pod：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器 Controller：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等 Service：pod对外服务的统一入口，下面可以维护者同一类的多个pod Label：标签，用于对pod进行分类，同一类pod会拥有相同的标签 NameSpace：命名空间，用来隔离pod的运行环境 2. kubernetes集群环境搭建​ 2.1 前置知识点​ 目前生产部署Kubernetes 集群主要有两种方式： kubeadm Kubeadm 是一个K8s 部署工具，提供kubeadm init 和kubeadm join，用于快速部署Kubernetes 集群。 官方地址：https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/ 二进制包 从github 下载发行版的二进制包，手动部署每个组件，组成Kubernetes 集群。 Kubeadm 降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可控，推荐使用二进制包部署Kubernetes 集群，虽然手动部署麻烦点，期间可以学习很多工作原理，也利于后期维护。 2.2 kubeadm 部署方式介绍​ kubeadm 是官方社区推出的一个用于快速部署kubernetes 集群的工具，这个工具能通过两条指令完成一个kubernetes 集群的部署： 创建一个Master 节点kubeadm init 将Node 节点加入到当前集群中$ kubeadm join <Master 节点的IP 和端口 2.3 安装要求​ 在开始之前，部署Kubernetes 集群机器需要满足以下几个条件： 一台或多台机器，操作系统CentOS7.x-86_x64 硬件配置：2GB 或更多RAM，2 个CPU 或更多CPU，硬盘30GB 或更多 集群中所有机器之间网络互通 可以访问外网，需要拉取镜像 禁止swap 分区 2.4 最终目标​ 在所有节点上安装Docker 和kubeadm 部署Kubernetes Master 部署容器网络插件 部署Kubernetes Node，将节点加入Kubernetes 集群中 部署Dashboard Web 页面，可视化查看Kubernetes 资源 2.5 准备环境​ 角色 IP地址 组件 master01 192.168.5.3 docker，kubectl，kubeadm，kubelet node01 192.168.5.4 docker，kubectl，kubeadm，kubelet node02 192.168.5.5 docker，kubectl，kubeadm，kubelet 2.6 环境初始化​ 2.6.1 检查操作系统的版本​ # 此方式下安装kubernetes集群要求Centos版本要在7.5或之上 [root@master ~]# cat /etc/redhat-release Centos Linux 7.5.1804 (Core) 2.6.2 主机名解析​ 为了方便集群节点间的直接调用，在这个配置一下主机名解析，企业中推荐使用内部DNS服务器 # 主机名成解析 编辑三台服务器的/etc/hosts文件，添加下面内容 192.168.90.100 master 192.168.90.106 node1 192.168.90.107 node2 2.6.3 时间同步​ kubernetes要求集群中的节点时间必须精确一直，这里使用chronyd服务从网络同步时间 企业中建议配置内部的会见同步服务器 # 启动chronyd服务 [root@master ~]# systemctl start chronyd [root@master ~]# systemctl enable chronyd [root@master ~]# date 2.6.4 禁用iptable和firewalld服务​ kubernetes和docker 在运行的中会产生大量的iptables规则，为了不让系统规则跟它们混淆，直接关闭系统的规则 # 1 关闭firewalld服务 [root@master ~]# systemctl stop firewalld [root@master ~]# systemctl disable firewalld # 2 关闭iptables服务 [root@master ~]# systemctl stop iptables [root@master ~]# systemctl disable iptables 2.6.5 禁用selinux​ selinux是linux系统下的一个安全服务，如果不关闭它，在安装集群中会产生各种各样的奇葩问题 # 编辑 /etc/selinux/config 文件，修改SELINUX的值为disable # 注意修改完毕之后需要重启linux服务 SELINUX=disabled 2.6.6 禁用swap分区​ swap分区指的是虚拟内存分区，它的作用是物理内存使用完，之后将磁盘空间虚拟成内存来使用，启用swap设备会对系统的性能产生非常负面的影响，因此kubernetes要求每个节点都要禁用swap设备，但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明 # 编辑分区配置文件/etc/fstab，注释掉swap分区一行 # 注意修改完毕之后需要重启linux服务 vim /etc/fstab 注释掉 /dev/mapper/centos-swap swap # /dev/mapper/centos-swap swap 2.6.7 修改linux的内核参数​ # 修改linux的内核采纳数，添加网桥过滤和地址转发功能 # 编辑/etc/sysctl.d/kubernetes.conf文件，添加如下配置： net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 # 重新加载配置 [root@master ~]# sysctl -p # 加载网桥过滤模块 [root@master ~]# modprobe br_netfilter # 查看网桥过滤模块是否加载成功 [root@master ~]# lsmod | grep br_netfilter 2.6.8 配置ipvs功能​ 在Kubernetes中Service有两种带来模型，一种是基于iptables的，一种是基于ipvs的两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块 # 1.安装ipset和ipvsadm [root@master ~]# yum install ipset ipvsadmin -y # 2.添加需要加载的模块写入脚本文件 [root@master ~]# cat <<EOF /etc/sysconfig/modules/ipvs.modules #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF # 3.为脚本添加执行权限 [root@master ~]# chmod +x /etc/sysconfig/modules/ipvs.modules # 4.执行脚本文件 [root@master ~]# /bin/bash /etc/sysconfig/modeules/ipvs.modules # 5.查看对应的模块是否加载成功 [root@master ~]# lsmod | grep -e -ip_vs -e nf_conntrack_ipv4 2.6.9 安装docker​ # 1、切换镜像源 [root@master ~]# wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d.docker-ce.repo # 2、查看当前镜像源中支持的docker版本 [root@master ~]# yum list docker-ce --showduplicates # 3、安装特定版本的docker-ce # 必须制定--setopt=obsoletes=0，否则yum会自动安装更高版本 [root@master ~]# yum install --setopt=obsoletes=0 docker-ce-18.06.3.ce-3.el7 -y # 4、添加一个配置文件 #Docker 在默认情况下使用Vgroup Driver为cgroupfs，而Kubernetes推荐使用systemd来替代cgroupfs [root@master ~]# mkdir /etc/docker [root@master ~]# cat <<EOF /etc/docker/daemon.json { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"registry-mirrors\": [\"https://kn0t2bca.mirror.aliyuncs.com\"] } EOF # 5、启动dokcer [root@master ~]# systemctl restart docker [root@master ~]# systemctl enable docker 2.6.10 安装Kubernetes组件​ # 1、由于kubernetes的镜像在国外，速度比较慢，这里切换成国内的镜像源 # 2、编辑/etc/yum.repos.d/kubernetes.repo,添加下面的配置 [kubernetes] name=Kubernetes baseurl=http://mirror.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgchech=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg # 3、安装kubeadm、kubelet和kubectl [root@master ~]# yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y # 4、配置kubelet的cgroup #编辑/etc/sysconfig/kubelet, 添加下面的配置 KUBELET_CGROUP_ARGS=\"--cgroup-driver=systemd\" KUBE_PROXY_MODE=\"ipvs\" # 5、设置kubelet开机自启 [root@master ~]# systemctl enable kubelet 2.6.11 准备集群镜像​ # 在安装kubernetes集群之前，必须要提前准备好集群需要的镜像，所需镜像可以通过下面命令查看 [root@master ~]# kubeadm config images list # 下载镜像 # 此镜像kubernetes的仓库中，由于网络原因，无法连接，下面提供了一种替换方案 images=( kube-apiserver:v1.17.4 kube-controller-manager:v1.17.4 kube-scheduler:v1.17.4 kube-proxy:v1.17.4 pause:3.1 etcd:3.4.3-0 coredns:1.6.5 ) for imageName in ${images[@]};do docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName done 2.6.11 集群初始化​ 下面的操作只需要在master节点上执行即可 # 创建集群 [root@master ~]# kubeadm init --apiserver-advertise-address=192.168.90.100 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version=v1.17.4 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16 # 创建必要文件 [root@master ~]# mkdir -p $HOME/.kube [root@master ~]# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config [root@master ~]# sudo chown $(id -u):$(id -g) $HOME/.kube/config 下面的操作只需要在node节点上执行即可 kubeadm join 192.168.0.100:6443 --token awk15p.t6bamck54w69u4s8 \\ --discovery-token-ca-cert-hash sha256:a94fa09562466d32d29523ab6cff122186f1127599fa4dcd5fa0152694f17117 在master上查看节点信息 [root@master ~]# kubectl get nodes NAME STATUS ROLES AGE VERSION master NotReady master 6m v1.17.4 node1 NotReady <none 22s v1.17.4 node2 NotReady <none 19s v1.17.4 2.6.13 安装网络插件，只在master节点操作即可​ wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 由于外网不好访问，如果出现无法访问的情况，可以直接用下面的 记得文件名是kube-flannel.yml，位置：/root/kube-flannel.yml内容： https://github.com/flannel-io/flannel/tree/master/Documentation/kube-flannel.yml ![截屏2021-10-01 下午10.23.00](images/截屏2021-10-01 下午10.23.00.png) 2.6.14 使用kubeadm reset重置集群​ #在master节点之外的节点进行操作 kubeadm reset systemctl stop kubelet systemctl stop docker rm -rf /var/lib/cni/ rm -rf /var/lib/kubelet/* rm -rf /etc/cni/ ifconfig cni0 down ifconfig flannel.1 down ifconfig docker0 down ip link delete cni0 ip link delete flannel.1 ##重启kubelet systemctl restart kubelet ##重启docker systemctl restart docker 2.6.15 重启kubelet和docker​ # 重启kubelet systemctl restart kubelet # 重启docker systemctl restart docker 使用配置文件启动fannel kubectl apply -f kube-flannel.yml 等待它安装完毕 发现已经是 集群的状态已经是Ready 2.6.16 kubeadm中的命令​ # 生成 新的token [root@master ~]# kubeadm token create --print-join-command 2.7 集群测试​ 2.7.1 创建一个nginx服务​ kubectl create deployment nginx --image=nginx:1.14-alpine 2.7.2 暴露端口​ kubectl expose deploy nginx --port=80 --target-port=80 --type=NodePort 2.7.3 查看服务​ kubectl get pod,svc 2.7.4 查看pod​ 浏览器测试结果： 3. 资源管理​ 3.1 资源管理介绍​ 在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。 kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。 kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在Pod中，而kubernetes一般也不会直接管理Pod，而是通过Pod控制器来管理Pod的。 Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了Service资源实现这个功能。 当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种存储系统。 学习kubernetes的核心，就是学习如何对集群上的Pod、Pod控制器、Service、存储等各种资源进行操作 3.2 YAML语言介绍​ YAML是一个类似 XML、JSON 的标记性语言。它强调以数据为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称\"一种人性化的数据格式语言\"。 <heima <age15</age <addressBeijing</address </heima heima: age: 15 address: Beijing YAML的语法比较简单，主要有下面几个： 大小写敏感 使用缩进表示层级关系 缩进不允许使用tab，只允许空格( 低版本限制 ) 缩进的空格数不重要，只要相同层级的元素左对齐即可 '#'表示注释 YAML支持以下几种数据类型： 纯量：单个的、不可再分的值 对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） # 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期 # 1 布尔类型 c1: true (或者True) # 2 整型 c2: 234 # 3 浮点型 c3: 3.14 # 4 null类型 c4: ~ # 使用~表示null # 5 日期类型 c5: 2018-02-17 # 日期必须使用ISO 8601格式，即yyyy-MM-dd # 6 时间类型 c6: 2018-02-17T15:02:31+08:00 # 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区 # 7 字符串类型 c7: heima # 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 c8: line1 line2 # 字符串过多的情况可以拆成多行，每一行会被转化成一个空格 # 对象 # 形式一(推荐): heima: age: 15 address: Beijing # 形式二(了解): heima: {age: 15,address: Beijing} # 数组 # 形式一(推荐): address: - 顺义 - 昌平 # 形式二(了解): address: [顺义,昌平] 小提示： 1 书写yaml切记: 后面要加一个空格 2 如果需要将多段yaml配置放在一个文件中，中间要使用---分隔 3 下面是一个yaml转json的网站，可以通过它验证yaml是否书写正确 https://www.json2yaml.com/convert-yaml-to-json 3.3 资源管理方式​ 命令式对象管理：直接使用命令去操作kubernetes资源 kubectl run nginx-pod --image=nginx:1.17.1 --port=80 命令式对象配置：通过命令配置和配置文件去操作kubernetes资源 kubectl create/patch -f nginx-pod.yaml 声明式对象配置：通过apply命令和配置文件去操作kubernetes资源 kubectl apply -f nginx-pod.yaml 类型 操作对象 适用环境 优点 缺点 命令式对象管理 对象 测试 简单 只能操作活动对象，无法审计、跟踪 命令式对象配置 文件 开发 可以审计、跟踪 项目大时，配置文件多，操作麻烦 声明式对象配置 目录 开发 支持目录操作 意外情况下难以调试 3.3.1 命令式对象管理​ kubectl命令 kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下： kubectl [command] [type] [name] [flags] comand：指定要对资源执行的操作，例如create、get、delete type：指定资源类型，比如deployment、pod、service name：指定资源的名称，名称大小写敏感 flags：指定额外的可选参数 # 查看所有pod kubectl get pod # 查看某个pod kubectl get pod pod_name # 查看某个pod,以yaml格式展示结果 kubectl get pod pod_name -o yaml 资源类型 kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看: kubectl api-resources 经常使用的资源有下面这些： 资源分类 资源名称 缩写 资源作用 集群级别资源 nodes no 集群组成部分 namespaces ns 隔离Pod pod资源 pods po 装载容器 pod资源控制器 replicationcontrollers rc 控制pod资源 replicasets rs 控制pod资源 deployments deploy 控制pod资源 daemonsets ds 控制pod资源 jobs 控制pod资源 cronjobs cj 控制pod资源 horizontalpodautoscalers hpa 控制pod资源 statefulsets sts 控制pod资源 服务发现资源 services svc 统一pod对外接口 ingress ing 统一pod对外接口 存储资源 volumeattachments 存储 persistentvolumes pv 存储 persistentvolumeclaims pvc 存储 配置资源 configmaps cm 配置 secrets 配置 操作 kubernetes允许对资源进行多种操作，可以通过--help查看详细的操作命令 kubectl --help 经常使用的操作有下面这些： 命令分类 命令 翻译 命令作用 基本命令 create 创建 创建一个资源 edit 编辑 编辑一个资源 get 获取 获取一个资源 patch 更新 更新一个资源 delete 删除 删除一个资源 explain 解释 展示资源文档 运行和调试 run 运行 在集群中运行一个指定的镜像 expose 暴露 暴露资源为Service describe 描述 显示资源内部信息 logs 日志输出容器在 pod 中的日志 输出容器在 pod 中的日志 attach 缠绕进入运行中的容器 进入运行中的容器 exec 执行容器中的一个命令 执行容器中的一个命令 cp 复制 在Pod内外复制文件 rollout 首次展示 管理资源的发布 scale 规模 扩(缩)容Pod的数量 autoscale 自动调整 自动调整Pod的数量 高级命令 apply rc 通过文件对资源进行配置 label 标签 更新资源上的标签 其他命令 cluster-info 集群信息 显示集群信息 version 版本 显示当前Server和Client的版本 下面以一个namespace / pod的创建和删除简单演示下命令的使用： # 创建一个namespace [root@master ~]# kubectl create namespace dev namespace/dev created # 获取namespace [root@master ~]# kubectl get ns NAME STATUS AGE default Active 21h dev Active 21s kube-node-lease Active 21h kube-public Active 21h kube-system Active 21h # 在此namespace下创建并运行一个nginx的Pod [root@master ~]# kubectl run pod --image=nginx:latest -n dev kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead. deployment.apps/pod created # 查看新创建的pod [root@master ~]# kubectl get pod -n dev NAME READY STATUS RESTARTS AGE pod 1/1 Running 0 21s # 删除指定的pod [root@master ~]# kubectl delete pod pod-864f9875b9-pcw7x pod \"pod\" deleted # 删除指定的namespace [root@master ~]# kubectl delete ns dev namespace \"dev\" deleted 3.3.2 命令式对象配置​ 命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。 1） 创建一个nginxpod.yaml，内容如下： apiVersion: v1 kind: Namespace metadata: name: dev --- apiVersion: v1 kind: Pod metadata: name: nginxpod namespace: dev spec: containers: - name: nginx-containers image: nginx:latest 2）执行create命令，创建资源： [root@master ~]# kubectl create -f nginxpod.yaml namespace/dev created pod/nginxpod created 此时发现创建了两个资源对象，分别是namespace和pod 3）执行get命令，查看资源： [root@master ~]# kubectl get -f nginxpod.yaml NAME STATUS AGE namespace/dev Active 18s NAME READY STATUS RESTARTS AGE pod/nginxpod 1/1 Running 0 17s 这样就显示了两个资源对象的信息 4）执行delete命令，删除资源： [root@master ~]# kubectl delete -f nginxpod.yaml namespace \"dev\" deleted pod \"nginxpod\" deleted 此时发现两个资源对象被删除了 总结: 命令式对象配置的方式操作资源，可以简单的认为：命令 + yaml配置文件（里面是命令需要的各种参数） 3.3.3 声明式对象配置​ 声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply。 # 首先执行一次kubectl apply -f yaml文件，发现创建了资源 [root@master ~]# kubectl apply -f nginxpod.yaml namespace/dev created pod/nginxpod created # 再次执行一次kubectl apply -f yaml文件，发现说资源没有变动 [root@master ~]# kubectl apply -f nginxpod.yaml namespace/dev unchanged pod/nginxpod unchanged 总结: 其实声明式对象配置就是使用apply描述一个资源最终的状态（在yaml中定义状态） 使用apply操作资源： 如果资源不存在，就创建，相当于 kubectl create 如果资源已存在，就更新，相当于 kubectl patch 扩展：kubectl可以在node节点上运行吗 ? kubectl的运行是需要进行配置的，它的配置文件是$HOME/.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作： scp -r HOME/.kube node1: HOME/ 使用推荐: 三种方式应该怎么用 ? 创建/更新资源 使用声明式对象配置 kubectl apply -f XXX.yaml 删除资源 使用命令式对象配置 kubectl delete -f XXX.yaml 查询资源 使用命令式对象管理 kubectl get(describe) 资源名称 4. 实战入门​ 本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问。 4.1 Namespace​ Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现多套环境的资源隔离或者多租户的资源隔离。 默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的\"组\"，以方便不同的组的资源进行隔离使用和管理。 可以通过kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如CPU使用量、内存使用量等等，来实现租户可用资源的管理。 kubernetes在集群启动之后，会默认创建几个namespace [root@master ~]# kubectl get namespace NAME STATUS AGE default Active 45h # 所有未指定Namespace的对象都会被分配在default命名空间 kube-node-lease Active 45h # 集群节点之间的心跳维护，v1.13开始引入 kube-public Active 45h # 此命名空间下的资源可以被所有人访问（包括未认证用户） kube-system Active 45h # 所有由Kubernetes系统创建的资源都处于这个命名空间 下面来看namespace资源的具体操作： 4.1.1 查看​ # 1 查看所有的ns 命令：kubectl get ns [root@master ~]# kubectl get ns NAME STATUS AGE default Active 45h kube-node-lease Active 45h kube-public Active 45h kube-system Active 45h # 2 查看指定的ns 命令：kubectl get ns ns名称 [root@master ~]# kubectl get ns default NAME STATUS AGE default Active 45h # 3 指定输出格式 命令：kubectl get ns ns名称 -o 格式参数 # kubernetes支持的格式有很多，比较常见的是wide、json、yaml [root@master ~]# kubectl get ns default -o yaml apiVersion: v1 kind: Namespace metadata: creationTimestamp: \"2021-05-08T04:44:16Z\" name: default resourceVersion: \"151\" selfLink: /api/v1/namespaces/default uid: 7405f73a-e486-43d4-9db6-145f1409f090 spec: finalizers: - kubernetes status: phase: Active # 4 查看ns详情 命令：kubectl describe ns ns名称 [root@master ~]# kubectl describe ns default Name: default Labels: <none Annotations: <none Status: Active # Active 命名空间正在使用中 Terminating 正在删除命名空间 # ResourceQuota 针对namespace做的资源限制 # LimitRange针对namespace中的每个组件做的资源限制 No resource quota. No LimitRange resource. 4.1.2 创建​ # 创建namespace [root@master ~]# kubectl create ns dev namespace/dev created 4.1.3 删除​ # 删除namespace [root@master ~]# kubectl delete ns dev namespace \"dev\" deleted 4.1.4 配置方式​ 首先准备一个yaml文件：ns-dev.yaml apiVersion: v1 kind: Namespace metadata: name: dev 然后就可以执行对应的创建和删除命令了： 创建：kubectl create -f ns-dev.yaml 删除：kubectl delete -f ns-dev.yaml 4.2 Pod​ Pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于Pod中。 Pod可以认为是容器的封装，一个Pod中可以存在一个或者多个容器。 kubernetes在集群启动之后，集群中的各个组件也都是以Pod方式运行的。可以通过下面命令查看： [root@master ~]# kubectl get pod -n kube-system NAMESPACE NAME READY STATUS RESTARTS AGE kube-system coredns-6955765f44-68g6v 1/1 Running 0 2d1h kube-system coredns-6955765f44-cs5r8 1/1 Running 0 2d1h kube-system etcd-master 1/1 Running 0 2d1h kube-system kube-apiserver-master 1/1 Running 0 2d1h kube-system kube-controller-manager-master 1/1 Running 0 2d1h kube-system kube-flannel-ds-amd64-47r25 1/1 Running 0 2d1h kube-system kube-flannel-ds-amd64-ls5lh 1/1 Running 0 2d1h kube-system kube-proxy-685tk 1/1 Running 0 2d1h kube-system kube-proxy-87spt 1/1 Running 0 2d1h kube-system kube-scheduler-master 1/1 Running 0 2d1h 4.2.1 创建并运行​ kubernetes没有提供单独运行Pod的命令，都是通过Pod控制器来实现的 # 命令格式： kubectl run (pod控制器名称) [参数] # --image 指定Pod的镜像 # --port 指定端口 # --namespace 指定namespace [root@master ~]# kubectl run nginx --image=nginx:latest --port=80 --namespace dev deployment.apps/nginx created 4.2.2 查看pod信息​ # 查看Pod基本信息 [root@master ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE nginx 1/1 Running 0 43s # 查看Pod的详细信息 [root@master ~]# kubectl describe pod nginx -n dev Name: nginx Namespace: dev Priority: 0 Node: node1/192.168.5.4 Start Time: Wed, 08 May 2021 09:29:24 +0800 Labels: pod-template-hash=5ff7956ff6 run=nginx Annotations: <none Status: Running IP: 10.244.1.23 IPs: IP: 10.244.1.23 Controlled By: ReplicaSet/nginx Containers: nginx: Container ID: docker://4c62b8c0648d2512380f4ffa5da2c99d16e05634979973449c98e9b829f6253c Image: nginx:latest Image ID: docker-pullable://nginx@sha256:485b610fefec7ff6c463ced9623314a04ed67e3945b9c08d7e53a47f6d108dc7 Port: 80/TCP Host Port: 0/TCP State: Running Started: Wed, 08 May 2021 09:30:01 +0800 Ready: True Restart Count: 0 Environment: <none Mounts: /var/run/secrets/kubernetes.io/serviceaccount from default-token-hwvvw (ro) Conditions: Type Status Initialized True Ready True ContainersReady True PodScheduled True Volumes: default-token-hwvvw: Type: Secret (a volume populated by a Secret) SecretName: default-token-hwvvw Optional: false QoS Class: BestEffort Node-Selectors: <none Tolerations: node.kubernetes.io/not-ready:NoExecute for 300s node.kubernetes.io/unreachable:NoExecute for 300s Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled <unknown default-scheduler Successfully assigned dev/nginx-5ff7956ff6-fg2db to node1 Normal Pulling 4m11s kubelet, node1 Pulling image \"nginx:latest\" Normal Pulled 3m36s kubelet, node1 Successfully pulled image \"nginx:latest\" Normal Created 3m36s kubelet, node1 Created container nginx Normal Started 3m36s kubelet, node1 Started container nginx 4.2.3 访问Pod​ # 获取podIP [root@master ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ... nginx 1/1 Running 0 190s 10.244.1.23 node1 ... #访问POD [root@master ~]# curl http://10.244.1.23:80 <!DOCTYPE html <html <head <titleWelcome to nginx!</title </head <body <p<emThank you for using nginx.</em</p </body </html 4.2.4 删除指定Pod​ # 删除指定Pod [root@master ~]# kubectl delete pod nginx -n dev pod \"nginx\" deleted # 此时，显示删除Pod成功，但是再查询，发现又新产生了一个 [root@master ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE nginx 1/1 Running 0 21s # 这是因为当前Pod是由Pod控制器创建的，控制器会监控Pod状况，一旦发现Pod死亡，会立即重建 # 此时要想删除Pod，必须删除Pod控制器 # 先来查询一下当前namespace下的Pod控制器 [root@master ~]# kubectl get deploy -n dev NAME READY UP-TO-DATE AVAILABLE AGE nginx 1/1 1 1 9m7s # 接下来，删除此PodPod控制器 [root@master ~]# kubectl delete deploy nginx -n dev deployment.apps \"nginx\" deleted # 稍等片刻，再查询Pod，发现Pod被删除了 [root@master ~]# kubectl get pods -n dev No resources found in dev namespace. 4.2.5 配置操作​ 创建一个pod-nginx.yaml，内容如下： apiVersion: v1 kind: Pod metadata: name: nginx namespace: dev spec: containers: - image: nginx:latest name: pod ports: - name: nginx-port containerPort: 80 protocol: TCP 然后就可以执行对应的创建和删除命令了： 创建：kubectl create -f pod-nginx.yaml 删除：kubectl delete -f pod-nginx.yaml 4.3 Label​ Label是kubernetes系统中的一个重要概念。它的作用就是在资源上添加标识，用来对它们进行区分和选择。 Label的特点： 一个Label会以key/value键值对的形式附加到各种对象上，如Node、Pod、Service等等 一个资源对象可以定义任意数量的Label ，同一个Label也可以被添加到任意数量的资源对象上去 Label通常在资源对象定义时确定，当然也可以在对象创建后动态添加或者删除 可以通过Label实现资源的多维度分组，以便灵活、方便地进行资源分配、调度、配置、部署等管理工作。 一些常用的Label 示例如下： 版本标签：\"version\":\"release\", \"version\":\"stable\"...... 环境标签：\"environment\":\"dev\"，\"environment\":\"test\"，\"environment\":\"pro\" 架构标签：\"tier\":\"frontend\"，\"tier\":\"backend\" 标签定义完毕之后，还要考虑到标签的选择，这就要使用到Label Selector，即： Label用于给某个资源对象定义标识 Label Selector用于查询和筛选拥有某些标签的资源对象 当前有两种Label Selector： 基于等式的Label Selector name = slave: 选择所有包含Label中key=\"name\"且value=\"slave\"的对象 env != production: 选择所有包括Label中的key=\"env\"且value不等于\"production\"的对象 基于集合的Label Selector name in (master, slave): 选择所有包含Label中的key=\"name\"且value=\"master\"或\"slave\"的对象 name not in (frontend): 选择所有包含Label中的key=\"name\"且value不等于\"frontend\"的对象 标签的选择条件可以使用多个，此时将多个Label Selector进行组合，使用逗号\",\"进行分隔即可。例如： name=slave，env!=production name not in (frontend)，env!=production 4.3.1 命令方式​ # 为pod资源打标签 [root@master ~]# kubectl label pod nginx-pod version=1.0 -n dev pod/nginx-pod labeled # 为pod资源更新标签 [root@master ~]# kubectl label pod nginx-pod version=2.0 -n dev --overwrite pod/nginx-pod labeled # 查看标签 [root@master ~]# kubectl get pod nginx-pod -n dev --show-labels NAME READY STATUS RESTARTS AGE LABELS nginx-pod 1/1 Running 0 10m version=2.0 # 筛选标签 [root@master ~]# kubectl get pod -n dev -l version=2.0 --show-labels NAME READY STATUS RESTARTS AGE LABELS nginx-pod 1/1 Running 0 17m version=2.0 [root@master ~]# kubectl get pod -n dev -l version!=2.0 --show-labels No resources found in dev namespace. #删除标签 [root@master ~]# kubectl label pod nginx-pod version- -n dev pod/nginx-pod labeled 4.3.2 配置方式​ apiVersion: v1 kind: Pod metadata: name: nginx namespace: dev labels: version: \"3.0\" env: \"test\" spec: containers: - image: nginx:latest name: pod ports: - name: nginx-port containerPort: 80 protocol: TCP 然后就可以执行对应的更新命令了：kubectl apply -f pod-nginx.yaml 4.4 Deployment​ 在kubernetes中，Pod是最小的控制单元，但是kubernetes很少直接控制Pod，一般都是通过Pod控制器来完成的。Pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障时，会尝试进行重启或重建pod。 在kubernetes中Pod控制器的种类有很多，本章节只介绍一种：Deployment。 4.4.1 命令操作​ # 命令格式: kubectl create deployment 名称 [参数] # --image 指定pod的镜像 # --port 指定端口 # --replicas 指定创建pod数量 # --namespace 指定namespace [root@master ~]# kubectl run nginx --image=nginx:latest --port=80 --replicas=3 -n dev deployment.apps/nginx created # 查看创建的Pod [root@master ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE nginx-5ff7956ff6-6k8cb 1/1 Running 0 19s nginx-5ff7956ff6-jxfjt 1/1 Running 0 19s nginx-5ff7956ff6-v6jqw 1/1 Running 0 19s # 查看deployment的信息 [root@master ~]# kubectl get deploy -n dev NAME READY UP-TO-DATE AVAILABLE AGE nginx 3/3 3 3 2m42s # UP-TO-DATE：成功升级的副本数量 # AVAILABLE：可用副本的数量 [root@master ~]# kubectl get deploy -n dev -o wide NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR nginx 3/3 3 3 2m51s nginx nginx:latest run=nginx # 查看deployment的详细信息 [root@master ~]# kubectl describe deploy nginx -n dev Name: nginx Namespace: dev CreationTimestamp: Wed, 08 May 2021 11:14:14 +0800 Labels: run=nginx Annotations: deployment.kubernetes.io/revision: 1 Selector: run=nginx Replicas: 3 desired | 3 updated | 3 total | 3 available | 0 unavailable StrategyType: RollingUpdate MinReadySeconds: 0 RollingUpdateStrategy: 25% max unavailable, 25% max surge Pod Template: Labels: run=nginx Containers: nginx: Image: nginx:latest Port: 80/TCP Host Port: 0/TCP Environment: <none Mounts: <none Volumes: <none Conditions: Type Status Reason ---- ------ ------ Available True MinimumReplicasAvailable Progressing True NewReplicaSetAvailable OldReplicaSets: <none NewReplicaSet: nginx-5ff7956ff6 (3/3 replicas created) Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal ScalingReplicaSet 5m43s deployment-controller Scaled up replicaset nginx-5ff7956ff6 to 3 # 删除 [root@master ~]# kubectl delete deploy nginx -n dev deployment.apps \"nginx\" deleted 4.4.2 配置操作​ 创建一个deploy-nginx.yaml，内容如下： apiVersion: apps/v1 kind: Deployment metadata: name: nginx namespace: dev spec: replicas: 3 selector: matchLabels: run: nginx template: metadata: labels: run: nginx spec: containers: - image: nginx:latest name: nginx ports: - containerPort: 80 protocol: TCP 然后就可以执行对应的创建和删除命令了： 创建：kubectl create -f deploy-nginx.yaml 删除：kubectl delete -f deploy-nginx.yaml 4.5 Service​ 通过上节课的学习，已经能够利用Deployment来创建一组Pod来提供具有高可用性的服务。 虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两问题： Pod IP 会随着Pod的重建产生变化 Pod IP 仅仅是集群内可见的虚拟IP，外部无法访问 这样对于访问这个服务带来了难度。因此，kubernetes设计了Service来解决这个问题。 Service可以看作是一组同类Pod对外的访问接口。借助Service，应用可以方便地实现服务发现和负载均衡。 4.5.1 创建集群内部可访问的Service​ # 暴露Service [root@master ~]# kubectl expose deploy nginx --name=svc-nginx1 --type=ClusterIP --port=80 --target-port=80 -n dev service/svc-nginx1 exposed # 查看service [root@master ~]# kubectl get svc svc-nginx1 -n dev -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR svc-nginx1 ClusterIP 10.109.179.231 <none 80/TCP 3m51s run=nginx # 这里产生了一个CLUSTER-IP，这就是service的IP，在Service的生命周期中，这个地址是不会变动的 # 可以通过这个IP访问当前service对应的POD [root@master ~]# curl 10.109.179.231:80 <!DOCTYPE html <html <head <titleWelcome to nginx!</title </head <body <h1Welcome to nginx!</h1 ....... </body </html 4.5.2 创建集群外部也可访问的Service​ # 上面创建的Service的type类型为ClusterIP，这个ip地址只用集群内部可访问 # 如果需要创建外部也可以访问的Service，需要修改type为NodePort [root@master ~]# kubectl expose deploy nginx --name=svc-nginx2 --type=NodePort --port=80 --target-port=80 -n dev service/svc-nginx2 exposed # 此时查看，会发现出现了NodePort类型的Service，而且有一对Port（80:31928/TC） [root@master ~]# kubectl get svc svc-nginx2 -n dev -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR svc-nginx2 NodePort 10.100.94.0 <none 80:31928/TCP 9s run=nginx # 接下来就可以通过集群外的主机访问 节点IP:31928访问服务了 # 例如在的电脑主机上通过浏览器访问下面的地址 http://192.168.90.100:31928/ 4.5.3 删除Service​ [root@master ~]# kubectl delete svc svc-nginx-1 -n dev service \"svc-nginx-1\" deleted 4.5.4 配置方式​ 创建一个svc-nginx.yaml，内容如下： apiVersion: v1 kind: Service metadata: name: svc-nginx namespace: dev spec: clusterIP: 10.109.179.231 #固定svc的内网ip ports: - port: 80 protocol: TCP targetPort: 80 selector: run: nginx type: ClusterIP 然后就可以执行对应的创建和删除命令了： 创建：kubectl create -f svc-nginx.yaml 删除：kubectl delete -f svc-nginx.yaml 小结 至此，已经掌握了Namespace、Pod、Deployment、Service资源的基本操作，有了这些操作，就可以在kubernetes集群中实现一个服务的简单部署和访问了，但是如果想要更好的使用kubernetes，就需要深入学习这几种资源的细节和原理。 5. Pod详解​ 5.1 Pod介绍​ 5.1.1 Pod结构​ 每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类： 用户程序所在的容器，数量可多可少 Pause容器，这是每个Pod都会有的一个根容器，它的作用有两个： 可以以它为依据，评估整个Pod的健康状态 可以在根容器上设置Ip地址，其它容器都此Ip（Pod IP），以实现Pod内部的网路通信 这里是Pod内部的通讯，Pod的之间的通讯采用虚拟二层网络技术来实现，我们当前环境用的是Flannel 5.1.2 Pod定义​ 下面是Pod的资源清单： apiVersion: v1 #必选，版本号，例如v1 kind: Pod #必选，资源类型，例如 Pod metadata: #必选，元数据 name: string #必选，Pod名称 namespace: string #Pod所属的命名空间,默认为\"default\" labels: #自定义标签列表 - name: string spec: #必选，Pod中容器的详细定义 containers: #必选，Pod中容器列表 - name: string #必选，容器名称 image: string #必选，容器的镜像名称 imagePullPolicy: [ Always|Never|IfNotPresent ] #获取镜像的策略 command: [string] #容器的启动命令列表，如不指定，使用打包时使用的启动命令 args: [string] #容器的启动命令参数列表 workingDir: string #容器的工作目录 volumeMounts: #挂载到容器内部的存储卷配置 - name: string #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名 mountPath: string #存储卷在容器内mount的绝对路径，应少于512字符 readOnly: boolean #是否为只读模式 ports: #需要暴露的端口库号列表 - name: string #端口的名称 containerPort: int #容器需要监听的端口号 hostPort: int #容器所在主机需要监听的端口号，默认与Container相同 protocol: string #端口协议，支持TCP和UDP，默认TCP env: #容器运行前需设置的环境变量列表 - name: string #环境变量名称 value: string #环境变量的值 resources: #资源限制和请求的设置 limits: #资源限制的设置 cpu: string #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数 memory: string #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数 requests: #资源请求的设置 cpu: string #Cpu请求，容器启动的初始可用数量 memory: string #内存请求,容器启动的初始可用数量 lifecycle: #生命周期钩子 postStart: #容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启 preStop: #容器终止前执行此钩子,无论结果如何,容器都会终止 livenessProbe: #对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器 exec: #对Pod容器内检查方式设置为exec方式 command: [string] #exec方式需要制定的命令或脚本 httpGet: #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port path: string port: number host: string scheme: string HttpHeaders: - name: string value: string tcpSocket: #对Pod内个容器健康检查方式设置为tcpSocket方式 port: number initialDelaySeconds: 0 #容器启动完成后首次探测的时间，单位为秒 timeoutSeconds: 0 #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒 periodSeconds: 0 #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次 successThreshold: 0 failureThreshold: 0 securityContext: privileged: false restartPolicy: [Always | Never | OnFailure] #Pod的重启策略 nodeName: <string #设置NodeName表示将该Pod调度到指定到名称的node节点上 nodeSelector: obeject #设置NodeSelector表示将该Pod调度到包含这个label的node上 imagePullSecrets: #Pull镜像时使用的secret名称，以key：secretkey格式指定 - name: string hostNetwork: false #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络 volumes: #在该pod上定义共享存储卷列表 - name: string #共享存储卷名称 （volumes类型有很多种） emptyDir: {} #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值 hostPath: string #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录 path: string #Pod所在宿主机的目录，将被用于同期中mount的目录 secret: #类型为secret的存储卷，挂载集群与定义的secret对象到容器内部 scretname: string items: - key: string path: string configMap: #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部 name: string items: - key: string path: string #小提示： # 在这里，可通过一个命令来查看每种资源的可配置项 # kubectl explain 资源类型 查看某种资源可以配置的一级属性 # kubectl explain 资源类型.属性 查看属性的子属性 [root@k8s-master01 ~]# kubectl explain pod KIND: Pod VERSION: v1 FIELDS: apiVersion <string kind <string metadata <Object spec <Object status <Object [root@k8s-master01 ~]# kubectl explain pod.metadata KIND: Pod VERSION: v1 RESOURCE: metadata <Object FIELDS: annotations <map[string]string clusterName <string creationTimestamp <string deletionGracePeriodSeconds <integer deletionTimestamp <string finalizers <[]string generateName <string generation <integer labels <map[string]string managedFields <[]Object name <string namespace <string ownerReferences <[]Object resourceVersion <string selfLink <string uid <string 在kubernetes中基本所有资源的一级属性都是一样的，主要包含5部分： apiVersion 版本，由kubernetes内部定义，版本号必须可以用 kubectl api-versions 查询到 kind 类型，由kubernetes内部定义，版本号必须可以用 kubectl api-resources 查询到 metadata 元数据，主要是资源标识和说明，常用的有name、namespace、labels等 spec 描述，这是配置中最重要的一部分，里面是对各种资源配置的详细描述 status 状态信息，里面的内容不需要定义，由kubernetes自动生成 在上面的属性中，spec是接下来研究的重点，继续看下它的常见子属性: containers <[]Object 容器列表，用于定义容器的详细信息 nodeName 根据nodeName的值将pod调度到指定的Node节点上 nodeSelector <map[] 根据NodeSelector中定义的信息选择将该Pod调度到包含这些label的Node 上 hostNetwork 是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络 volumes <[]Object 存储卷，用于定义Pod上面挂在的存储信息 restartPolicy 重启策略，表示Pod在遇到故障的时候的处理策略 5.2 Pod配置​ 本小节主要来研究pod.spec.containers属性，这也是pod配置中最为关键的一项配置。 [root@k8s-master01 ~]# kubectl explain pod.spec.containers KIND: Pod VERSION: v1 RESOURCE: containers <[]Object # 数组，代表可以有多个容器 FIELDS: name <string # 容器名称 image <string # 容器需要的镜像地址 imagePullPolicy <string # 镜像拉取策略 command <[]string # 容器的启动命令列表，如不指定，使用打包时使用的启动命令 args <[]string # 容器的启动命令需要的参数列表 env <[]Object # 容器环境变量的配置 ports <[]Object # 容器需要暴露的端口号列表 resources <Object # 资源限制和资源请求的设置 5.2.1 基本配置​ 创建pod-base.yaml文件，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-base namespace: dev labels: user: heima spec: containers: - name: nginx image: nginx:1.17.1 - name: busybox image: busybox:1.30 上面定义了一个比较简单Pod的配置，里面有两个容器： nginx：用1.17.1版本的nginx镜像创建，（nginx是一个轻量级web容器） busybox：用1.30版本的busybox镜像创建，（busybox是一个小巧的linux命令集合） # 创建Pod [root@k8s-master01 pod]# kubectl apply -f pod-base.yaml pod/pod-base created # 查看Pod状况 # READY 1/2 : 表示当前Pod中有2个容器，其中1个准备就绪，1个未就绪 # RESTARTS : 重启次数，因为有1个容器故障了，Pod一直在重启试图恢复它 [root@k8s-master01 pod]# kubectl get pod -n dev NAME READY STATUS RESTARTS AGE pod-base 1/2 Running 4 95s # 可以通过describe查看内部的详情 # 此时已经运行起来了一个基本的Pod，虽然它暂时有问题 [root@k8s-master01 pod]# kubectl describe pod pod-base -n dev 5.2.2 镜像拉取​ 创建pod-imagepullpolicy.yaml文件，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-imagepullpolicy namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 imagePullPolicy: Never # 用于设置镜像拉取策略 - name: busybox image: busybox:1.30 imagePullPolicy，用于设置镜像拉取策略，kubernetes支持配置三种拉取策略： Always：总是从远程仓库拉取镜像（一直远程下载） IfNotPresent：本地有则使用本地镜像，本地没有则从远程仓库拉取镜像（本地有就本地 本地没远程下载） Never：只使用本地镜像，从不去远程仓库拉取，本地没有就报错 （一直使用本地） 默认值说明： 如果镜像tag为具体版本号， 默认策略是：IfNotPresent 如果镜像tag为：latest（最终版本） ，默认策略是always # 创建Pod [root@k8s-master01 pod]# kubectl create -f pod-imagepullpolicy.yaml pod/pod-imagepullpolicy created # 查看Pod详情 # 此时明显可以看到nginx镜像有一步Pulling image \"nginx:1.17.1\"的过程 [root@k8s-master01 pod]# kubectl describe pod pod-imagepullpolicy -n dev ...... Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled <unknown default-scheduler Successfully assigned dev/pod-imagePullPolicy to node1 Normal Pulling 32s kubelet, node1 Pulling image \"nginx:1.17.1\" Normal Pulled 26s kubelet, node1 Successfully pulled image \"nginx:1.17.1\" Normal Created 26s kubelet, node1 Created container nginx Normal Started 25s kubelet, node1 Started container nginx Normal Pulled 7s (x3 over 25s) kubelet, node1 Container image \"busybox:1.30\" already present on machine Normal Created 7s (x3 over 25s) kubelet, node1 Created container busybox Normal Started 7s (x3 over 25s) kubelet, node1 Started container busybox 5.2.3 启动命令​ 在前面的案例中，一直有一个问题没有解决，就是的busybox容器一直没有成功运行，那么到底是什么原因导致这个容器的故障呢？ 原来busybox并不是一个程序，而是类似于一个工具类的集合，kubernetes集群启动管理后，它会自动关闭。解决方法就是让其一直在运行，这就用到了command配置。 创建pod-command.yaml文件，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-command namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 - name: busybox image: busybox:1.30 command: [\"/bin/sh\",\"-c\",\"touch /tmp/hello.txt;while true;do /bin/echo $(date +%T) /tmp/hello.txt; sleep 3; done;\"] command，用于在pod中的容器初始化完毕之后运行一个命令。 稍微解释下上面命令的意思： \"/bin/sh\",\"-c\", 使用sh执行命令 touch /tmp/hello.txt; 创建一个/tmp/hello.txt 文件 while true;do /bin/echo $(date +%T) /tmp/hello.txt; sleep 3; done; 每隔3秒向文件中写入当前时间 # 创建Pod [root@k8s-master01 pod]# kubectl create -f pod-command.yaml pod/pod-command created # 查看Pod状态 # 此时发现两个pod都正常运行了 [root@k8s-master01 pod]# kubectl get pods pod-command -n dev NAME READY STATUS RESTARTS AGE pod-command 2/2 Runing 0 2s # 进入pod中的busybox容器，查看文件内容 # 补充一个命令: kubectl exec pod名称 -n 命名空间 -it -c 容器名称 /bin/sh 在容器内部执行命令 # 使用这个命令就可以进入某个容器的内部，然后进行相关操作了 # 比如，可以查看txt文件的内容 [root@k8s-master01 pod]# kubectl exec pod-command -n dev -it -c busybox /bin/sh / # tail -f /tmp/hello.txt 14:44:19 14:44:22 14:44:25 特别说明： 通过上面发现command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。 1 如果command和args均没有写，那么用Dockerfile的配置。 2 如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command 3 如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数 4 如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数 5.2.4 环境变量​ 创建pod-env.yaml文件，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-env namespace: dev spec: containers: - name: busybox image: busybox:1.30 command: [\"/bin/sh\",\"-c\",\"while true;do /bin/echo $(date +%T);sleep 60; done;\"] env: # 设置环境变量列表 - name: \"username\" value: \"admin\" - name: \"password\" value: \"123456\" env，环境变量，用于在pod中的容器设置环境变量。 # 创建Pod [root@k8s-master01 ~]# kubectl create -f pod-env.yaml pod/pod-env created # 进入容器，输出环境变量 [root@k8s-master01 ~]# kubectl exec pod-env -n dev -c busybox -it /bin/sh / # echo $username admin / # echo $password 123456 这种方式不是很推荐，推荐将这些配置单独存储在配置文件中，这种方式将在后面介绍。 5.2.5 端口设置​ 本小节来介绍容器的端口设置，也就是containers的ports选项。 首先看下ports支持的子选项： [root@k8s-master01 ~]# kubectl explain pod.spec.containers.ports KIND: Pod VERSION: v1 RESOURCE: ports <[]Object FIELDS: name <string # 端口名称，如果指定，必须保证name在pod中是唯一的 containerPort<integer # 容器要监听的端口(0<x<65536) hostPort <integer # 容器要在主机上公开的端口，如果设置，主机上只能运行容器的一个副本(一般省略) hostIP <string # 要将外部端口绑定到的主机IP(一般省略) protocol <string # 端口协议。必须是UDP、TCP或SCTP。默认为“TCP”。 接下来，编写一个测试案例，创建pod-ports.yaml apiVersion: v1 kind: Pod metadata: name: pod-ports namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: # 设置容器暴露的端口列表 - name: nginx-port containerPort: 80 protocol: TCP # 创建Pod [root@k8s-master01 ~]# kubectl create -f pod-ports.yaml pod/pod-ports created # 查看pod # 在下面可以明显看到配置信息 [root@k8s-master01 ~]# kubectl get pod pod-ports -n dev -o yaml ...... spec: containers: - image: nginx:1.17.1 imagePullPolicy: IfNotPresent name: nginx ports: - containerPort: 80 name: nginx-port protocol: TCP ...... 访问容器中的程序需要使用的是Podip:containerPort 5.2.6 资源配额​ 容器中的程序要运行，肯定是要占用一定资源的，比如cpu和内存等，如果不对某个容器的资源做限制，那么它就可能吃掉大量资源，导致其它容器无法运行。针对这种情况，kubernetes提供了对内存和cpu的资源进行配额的机制，这种机制主要通过resources选项实现，他有两个子选项： limits：用于限制运行时容器的最大占用资源，当容器占用资源超过limits时会被终止，并进行重启 requests ：用于设置容器需要的最小资源，如果环境资源不够，容器将无法启动 可以通过上面两个选项设置资源的上下限。 接下来，编写一个测试案例，创建pod-resources.yaml apiVersion: v1 kind: Pod metadata: name: pod-resources namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 resources: # 资源配额 limits: # 限制资源（上限） cpu: \"2\" # CPU限制，单位是core数 memory: \"10Gi\" # 内存限制 requests: # 请求资源（下限） cpu: \"1\" # CPU限制，单位是core数 memory: \"10Mi\" # 内存限制 在这对cpu和memory的单位做一个说明： cpu：core数，可以为整数或小数 memory： 内存大小，可以使用Gi、Mi、G、M等形式 # 运行Pod [root@k8s-master01 ~]# kubectl create -f pod-resources.yaml pod/pod-resources created # 查看发现pod运行正常 [root@k8s-master01 ~]# kubectl get pod pod-resources -n dev NAME READY STATUS RESTARTS AGE pod-resources 1/1 Running 0 39s # 接下来，停止Pod [root@k8s-master01 ~]# kubectl delete -f pod-resources.yaml pod \"pod-resources\" deleted # 编辑pod，修改resources.requests.memory的值为10Gi [root@k8s-master01 ~]# vim pod-resources.yaml # 再次启动pod [root@k8s-master01 ~]# kubectl create -f pod-resources.yaml pod/pod-resources created # 查看Pod状态，发现Pod启动失败 [root@k8s-master01 ~]# kubectl get pod pod-resources -n dev -o wide NAME READY STATUS RESTARTS AGE pod-resources 0/1 Pending 0 20s # 查看pod详情会发现，如下提示 [root@k8s-master01 ~]# kubectl describe pod pod-resources -n dev ...... Warning FailedScheduling 35s default-scheduler 0/3 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn't tolerate, 2 Insufficient memory.(内存不足) 5.3 Pod生命周期​ 我们一般将pod对象从创建至终的这段时间范围称为pod的生命周期，它主要包含下面的过程： pod创建过程 运行初始化容器（init container）过程 运行主容器（main container） 容器启动后钩子（post start）、容器终止前钩子（pre stop） 容器的存活性探测（liveness probe）、就绪性探测（readiness probe） pod终止过程 在整个生命周期中，Pod会出现5种状态（相位），分别如下： 挂起（Pending）：apiserver已经创建了pod资源对象，但它尚未被调度完成或者仍处于下载镜像的过程中 运行中（Running）：pod已经被调度至某节点，并且所有容器都已经被kubelet创建完成 成功（Succeeded）：pod中的所有容器都已经成功终止并且不会被重启 失败（Failed）：所有容器都已经终止，但至少有一个容器终止失败，即容器返回了非0值的退出状态 未知（Unknown）：apiserver无法正常获取到pod对象的状态信息，通常由网络通信失败所导致 5.3.1 创建和终止​ pod的创建过程 用户通过kubectl或其他api客户端提交需要创建的pod信息给apiServer apiServer开始生成pod对象的信息，并将信息存入etcd，然后返回确认信息至客户端 apiServer开始反映etcd中的pod对象的变化，其它组件使用watch机制来跟踪检查apiServer上的变动 scheduler发现有新的pod对象要创建，开始为Pod分配主机并将结果信息更新至apiServer node节点上的kubelet发现有pod调度过来，尝试调用docker启动容器，并将结果回送至apiServer apiServer将接收到的pod状态信息存入etcd中 pod的终止过程 用户向apiServer发送删除pod对象的命令 apiServcer中的pod对象信息会随着时间的推移而更新，在宽限期内（默认30s），pod被视为dead 将pod标记为terminating状态 kubelet在监控到pod对象转为terminating状态的同时启动pod关闭过程 端点控制器监控到pod对象的关闭行为时将其从所有匹配到此端点的service资源的端点列表中移除 如果当前pod对象定义了preStop钩子处理器，则在其标记为terminating后即会以同步的方式启动执行 pod对象中的容器进程收到停止信号 宽限期结束后，若pod中还存在仍在运行的进程，那么pod对象会收到立即终止的信号 kubelet请求apiServer将此pod资源的宽限期设置为0从而完成删除操作，此时pod对于用户已不可见 5.3.2 初始化容器​ 初始化容器是在pod的主容器启动之前要运行的容器，主要是做一些主容器的前置工作，它具有两大特征： 初始化容器必须运行完成直至结束，若某初始化容器运行失败，那么kubernetes需要重启它直到成功完成 初始化容器必须按照定义的顺序执行，当且仅当前一个成功之后，后面的一个才能运行 初始化容器有很多的应用场景，下面列出的是最常见的几个： 提供主容器镜像中不具备的工具程序或自定义代码 初始化容器要先于应用容器串行启动并运行完成，因此可用于延后应用容器的启动直至其依赖的条件得到满足 接下来做一个案例，模拟下面这个需求： 假设要以主容器来运行nginx，但是要求在运行nginx之前先要能够连接上mysql和redis所在服务器 为了简化测试，事先规定好mysql(192.168.90.14)和redis(192.168.90.15)服务器的地址 创建pod-initcontainer.yaml，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-initcontainer namespace: dev spec: containers: - name: main-container image: nginx:1.17.1 ports: - name: nginx-port containerPort: 80 initContainers: - name: test-mysql image: busybox:1.30 command: ['sh', '-c', 'until ping 192.168.90.14 -c 1 ; do echo waiting for mysql...; sleep 2; done;'] - name: test-redis image: busybox:1.30 command: ['sh', '-c', 'until ping 192.168.90.15 -c 1 ; do echo waiting for reids...; sleep 2; done;'] # 创建pod [root@k8s-master01 ~]# kubectl create -f pod-initcontainer.yaml pod/pod-initcontainer created # 查看pod状态 # 发现pod卡在启动第一个初始化容器过程中，后面的容器不会运行 root@k8s-master01 ~]# kubectl describe pod pod-initcontainer -n dev ........ Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled 49s default-scheduler Successfully assigned dev/pod-initcontainer to node1 Normal Pulled 48s kubelet, node1 Container image \"busybox:1.30\" already present on machine Normal Created 48s kubelet, node1 Created container test-mysql Normal Started 48s kubelet, node1 Started container test-mysql # 动态查看pod [root@k8s-master01 ~]# kubectl get pods pod-initcontainer -n dev -w NAME READY STATUS RESTARTS AGE pod-initcontainer 0/1 Init:0/2 0 15s pod-initcontainer 0/1 Init:1/2 0 52s pod-initcontainer 0/1 Init:1/2 0 53s pod-initcontainer 0/1 PodInitializing 0 89s pod-initcontainer 1/1 Running 0 90s # 接下来新开一个shell，为当前服务器新增两个ip，观察pod的变化 [root@k8s-master01 ~]# ifconfig ens33:1 192.168.90.14 netmask 255.255.255.0 up [root@k8s-master01 ~]# ifconfig ens33:2 192.168.90.15 netmask 255.255.255.0 up 5.3.3 钩子函数​ 钩子函数能够感知自身生命周期中的事件，并在相应的时刻到来时运行用户指定的程序代码。 kubernetes在主容器的启动之后和停止之前提供了两个钩子函数： post start：容器创建之后执行，如果失败了会重启容器 pre stop ：容器终止之前执行，执行完成之后容器将成功终止，在其完成之前会阻塞删除容器的操作 钩子处理器支持使用下面三种方式定义动作： Exec命令：在容器内执行一次命令 …… lifecycle: postStart: exec: command: - cat - /tmp/healthy …… TCPSocket：在当前容器尝试访问指定的socket …… lifecycle: postStart: tcpSocket: port: 8080 …… HTTPGet：在当前容器中向某url发起http请求 …… lifecycle: postStart: httpGet: path: / #URI地址 port: 80 #端口号 host: 192.168.5.3 #主机地址 scheme: HTTP #支持的协议，http或者https …… 接下来，以exec方式为例，演示下钩子函数的使用，创建pod-hook-exec.yaml文件，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-hook-exec namespace: dev spec: containers: - name: main-container image: nginx:1.17.1 ports: - name: nginx-port containerPort: 80 lifecycle: postStart: exec: # 在容器启动的时候执行一个命令，修改掉nginx的默认首页内容 command: [\"/bin/sh\", \"-c\", \"echo postStart... /usr/share/nginx/html/index.html\"] preStop: exec: # 在容器停止之前停止nginx服务 command: [\"/usr/sbin/nginx\",\"-s\",\"quit\"] # 创建pod [root@k8s-master01 ~]# kubectl create -f pod-hook-exec.yaml pod/pod-hook-exec created # 查看pod [root@k8s-master01 ~]# kubectl get pods pod-hook-exec -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE pod-hook-exec 1/1 Running 0 29s 10.244.2.48 node2 # 访问pod [root@k8s-master01 ~]# curl 10.244.2.48 postStart... 5.3.4 容器探测​ 容器探测用于检测容器中的应用实例是否正常工作，是保障业务可用性的一种传统机制。如果经过探测，实例的状态不符合预期，那么kubernetes就会把该问题实例\" 摘除 \"，不承担业务流量。kubernetes提供了两种探针来实现容器探测，分别是： liveness probes：存活性探针，用于检测应用实例当前是否处于正常运行状态，如果不是，k8s会重启容器 readiness probes：就绪性探针，用于检测应用实例当前是否可以接收请求，如果不能，k8s不会转发流量 livenessProbe 决定是否重启容器，readinessProbe 决定是否将请求转发给容器。 上面两种探针目前均支持三种探测方式： Exec命令：在容器内执行一次命令，如果命令执行的退出码为0，则认为程序正常，否则不正常 …… livenessProbe: exec: command: - cat - /tmp/healthy …… TCPSocket：将会尝试访问一个用户容器的端口，如果能够建立这条连接，则认为程序正常，否则不正常 …… livenessProbe: tcpSocket: port: 8080 …… HTTPGet：调用容器内Web应用的URL，如果返回的状态码在200和399之间，则认为程序正常，否则不正常 …… livenessProbe: httpGet: path: / #URI地址 port: 80 #端口号 host: 127.0.0.1 #主机地址 scheme: HTTP #支持的协议，http或者https …… 下面以liveness probes为例，做几个演示： 方式一：Exec 创建pod-liveness-exec.yaml apiVersion: v1 kind: Pod metadata: name: pod-liveness-exec namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - name: nginx-port containerPort: 80 livenessProbe: exec: command: [\"/bin/cat\",\"/tmp/hello.txt\"] # 执行一个查看文件的命令 创建pod，观察效果 # 创建Pod [root@k8s-master01 ~]# kubectl create -f pod-liveness-exec.yaml pod/pod-liveness-exec created # 查看Pod详情 [root@k8s-master01 ~]# kubectl describe pods pod-liveness-exec -n dev ...... Normal Created 20s (x2 over 50s) kubelet, node1 Created container nginx Normal Started 20s (x2 over 50s) kubelet, node1 Started container nginx Normal Killing 20s kubelet, node1 Container nginx failed liveness probe, will be restarted Warning Unhealthy 0s (x5 over 40s) kubelet, node1 Liveness probe failed: cat: can't open '/tmp/hello11.txt': No such file or directory # 观察上面的信息就会发现nginx容器启动之后就进行了健康检查 # 检查失败之后，容器被kill掉，然后尝试进行重启（这是重启策略的作用，后面讲解） # 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长 [root@k8s-master01 ~]# kubectl get pods pod-liveness-exec -n dev NAME READY STATUS RESTARTS AGE pod-liveness-exec 0/1 CrashLoopBackOff 2 3m19s # 当然接下来，可以修改成一个存在的文件，比如/tmp/hello.txt，再试，结果就正常了...... 方式二：TCPSocket 创建pod-liveness-tcpsocket.yaml apiVersion: v1 kind: Pod metadata: name: pod-liveness-tcpsocket namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - name: nginx-port containerPort: 80 livenessProbe: tcpSocket: port: 8080 # 尝试访问8080端口 创建pod，观察效果 # 创建Pod [root@k8s-master01 ~]# kubectl create -f pod-liveness-tcpsocket.yaml pod/pod-liveness-tcpsocket created # 查看Pod详情 [root@k8s-master01 ~]# kubectl describe pods pod-liveness-tcpsocket -n dev ...... Normal Scheduled 31s default-scheduler Successfully assigned dev/pod-liveness-tcpsocket to node2 Normal Pulled <invalid kubelet, node2 Container image \"nginx:1.17.1\" already present on machine Normal Created <invalid kubelet, node2 Created container nginx Normal Started <invalid kubelet, node2 Started container nginx Warning Unhealthy <invalid (x2 over <invalid) kubelet, node2 Liveness probe failed: dial tcp 10.244.2.44:8080: connect: connection refused # 观察上面的信息，发现尝试访问8080端口,但是失败了 # 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长 [root@k8s-master01 ~]# kubectl get pods pod-liveness-tcpsocket -n dev NAME READY STATUS RESTARTS AGE pod-liveness-tcpsocket 0/1 CrashLoopBackOff 2 3m19s # 当然接下来，可以修改成一个可以访问的端口，比如80，再试，结果就正常了...... 方式三：HTTPGet 创建pod-liveness-httpget.yaml apiVersion: v1 kind: Pod metadata: name: pod-liveness-httpget namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - name: nginx-port containerPort: 80 livenessProbe: httpGet: # 其实就是访问http://127.0.0.1:80/hello scheme: HTTP #支持的协议，http或者https port: 80 #端口号 path: /hello #URI地址 创建pod，观察效果 # 创建Pod [root@k8s-master01 ~]# kubectl create -f pod-liveness-httpget.yaml pod/pod-liveness-httpget created # 查看Pod详情 [root@k8s-master01 ~]# kubectl describe pod pod-liveness-httpget -n dev ....... Normal Pulled 6s (x3 over 64s) kubelet, node1 Container image \"nginx:1.17.1\" already present on machine Normal Created 6s (x3 over 64s) kubelet, node1 Created container nginx Normal Started 6s (x3 over 63s) kubelet, node1 Started container nginx Warning Unhealthy 6s (x6 over 56s) kubelet, node1 Liveness probe failed: HTTP probe failed with statuscode: 404 Normal Killing 6s (x2 over 36s) kubelet, node1 Container nginx failed liveness probe, will be restarted # 观察上面信息，尝试访问路径，但是未找到,出现404错误 # 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长 [root@k8s-master01 ~]# kubectl get pod pod-liveness-httpget -n dev NAME READY STATUS RESTARTS AGE pod-liveness-httpget 1/1 Running 5 3m17s # 当然接下来，可以修改成一个可以访问的路径path，比如/，再试，结果就正常了...... 至此，已经使用liveness Probe演示了三种探测方式，但是查看livenessProbe的子属性，会发现除了这三种方式，还有一些其他的配置，在这里一并解释下： [root@k8s-master01 ~]# kubectl explain pod.spec.containers.livenessProbe FIELDS: exec <Object tcpSocket <Object httpGet <Object initialDelaySeconds <integer # 容器启动后等待多少秒执行第一次探测 timeoutSeconds <integer # 探测超时时间。默认1秒，最小1秒 periodSeconds <integer # 执行探测的频率。默认是10秒，最小1秒 failureThreshold <integer # 连续探测失败多少次才被认定为失败。默认是3。最小值是1 successThreshold <integer # 连续探测成功多少次才被认定为成功。默认是1 下面稍微配置两个，演示下效果即可： [root@k8s-master01 ~]# more pod-liveness-httpget.yaml apiVersion: v1 kind: Pod metadata: name: pod-liveness-httpget namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - name: nginx-port containerPort: 80 livenessProbe: httpGet: scheme: HTTP port: 80 path: / initialDelaySeconds: 30 # 容器启动后30s开始探测 timeoutSeconds: 5 # 探测超时时间为5s 5.3.5 重启策略​ 在上一节中，一旦容器探测出现了问题，kubernetes就会对容器所在的Pod进行重启，其实这是由pod的重启策略决定的，pod的重启策略有 3 种，分别如下： Always ：容器失效时，自动重启该容器，这也是默认值。 OnFailure ： 容器终止运行且退出码不为0时重启 Never ： 不论状态为何，都不重启该容器 重启策略适用于pod对象中的所有容器，首次需要重启的容器，将在其需要时立即进行重启，随后再次需要重启的操作将由kubelet延迟一段时间后进行，且反复的重启操作的延迟时长以此为10s、20s、40s、80s、160s和300s，300s是最大延迟时长。 创建pod-restartpolicy.yaml： apiVersion: v1 kind: Pod metadata: name: pod-restartpolicy namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - name: nginx-port containerPort: 80 livenessProbe: httpGet: scheme: HTTP port: 80 path: /hello restartPolicy: Never # 设置重启策略为Never 运行Pod测试 # 创建Pod [root@k8s-master01 ~]# kubectl create -f pod-restartpolicy.yaml pod/pod-restartpolicy created # 查看Pod详情，发现nginx容器失败 [root@k8s-master01 ~]# kubectl describe pods pod-restartpolicy -n dev ...... Warning Unhealthy 15s (x3 over 35s) kubelet, node1 Liveness probe failed: HTTP probe failed with statuscode: 404 Normal Killing 15s kubelet, node1 Container nginx failed liveness probe # 多等一会，再观察pod的重启次数，发现一直是0，并未重启 [root@k8s-master01 ~]# kubectl get pods pod-restartpolicy -n dev NAME READY STATUS RESTARTS AGE pod-restartpolicy 0/1 Running 0 5min42s 5.4 Pod调度​ 在默认情况下，一个Pod在哪个Node节点上运行，是由Scheduler组件采用相应的算法计算出来的，这个过程是不受人工控制的。但是在实际使用中，这并不满足的需求，因为很多情况下，我们想控制某些Pod到达某些节点上，那么应该怎么做呢？这就要求了解kubernetes对Pod的调度规则，kubernetes提供了四大类调度方式： 自动调度：运行在哪个节点上完全由Scheduler经过一系列的算法计算得出 定向调度：NodeName、NodeSelector 亲和性调度：NodeAffinity、PodAffinity、PodAntiAffinity 污点（容忍）调度：Taints、Toleration 5.4.1 定向调度​ 定向调度，指的是利用在pod上声明nodeName或者nodeSelector，以此将Pod调度到期望的node节点上。注意，这里的调度是强制的，这就意味着即使要调度的目标Node不存在，也会向上面进行调度，只不过pod运行失败而已。 NodeName NodeName用于强制约束将Pod调度到指定的Name的Node节点上。这种方式，其实是直接跳过Scheduler的调度逻辑，直接将Pod调度到指定名称的节点。 接下来，实验一下：创建一个pod-nodename.yaml文件 apiVersion: v1 kind: Pod metadata: name: pod-nodename namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 nodeName: node1 # 指定调度到node1节点上 #创建Pod [root@k8s-master01 ~]# kubectl create -f pod-nodename.yaml pod/pod-nodename created #查看Pod调度到NODE属性，确实是调度到了node1节点上 [root@k8s-master01 ~]# kubectl get pods pod-nodename -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-nodename 1/1 Running 0 56s 10.244.1.87 node1 ...... # 接下来，删除pod，修改nodeName的值为node3（并没有node3节点） [root@k8s-master01 ~]# kubectl delete -f pod-nodename.yaml pod \"pod-nodename\" deleted [root@k8s-master01 ~]# vim pod-nodename.yaml [root@k8s-master01 ~]# kubectl create -f pod-nodename.yaml pod/pod-nodename created #再次查看，发现已经向Node3节点调度，但是由于不存在node3节点，所以pod无法正常运行 [root@k8s-master01 ~]# kubectl get pods pod-nodename -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-nodename 0/1 Pending 0 6s <none node3 ...... NodeSelector NodeSelector用于将pod调度到添加了指定标签的node节点上。它是通过kubernetes的label-selector机制实现的，也就是说，在pod创建之前，会由scheduler使用MatchNodeSelector调度策略进行label匹配，找出目标node，然后将pod调度到目标节点，该匹配规则是强制约束。 接下来，实验一下： 1 首先分别为node节点添加标签 [root@k8s-master01 ~]# kubectl label nodes node1 nodeenv=pro node/node2 labeled [root@k8s-master01 ~]# kubectl label nodes node2 nodeenv=test node/node2 labeled 2 创建一个pod-nodeselector.yaml文件，并使用它创建Pod apiVersion: v1 kind: Pod metadata: name: pod-nodeselector namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 nodeSelector: nodeenv: pro # 指定调度到具有nodeenv=pro标签的节点上 #创建Pod [root@k8s-master01 ~]# kubectl create -f pod-nodeselector.yaml pod/pod-nodeselector created #查看Pod调度到NODE属性，确实是调度到了node1节点上 [root@k8s-master01 ~]# kubectl get pods pod-nodeselector -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-nodeselector 1/1 Running 0 47s 10.244.1.87 node1 ...... # 接下来，删除pod，修改nodeSelector的值为nodeenv: xxxx（不存在打有此标签的节点） [root@k8s-master01 ~]# kubectl delete -f pod-nodeselector.yaml pod \"pod-nodeselector\" deleted [root@k8s-master01 ~]# vim pod-nodeselector.yaml [root@k8s-master01 ~]# kubectl create -f pod-nodeselector.yaml pod/pod-nodeselector created #再次查看，发现pod无法正常运行,Node的值为none [root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE pod-nodeselector 0/1 Pending 0 2m20s <none <none # 查看详情,发现node selector匹配失败的提示 [root@k8s-master01 ~]# kubectl describe pods pod-nodeselector -n dev ....... Events: Type Reason Age From Message ---- ------ ---- ---- ------- Warning FailedScheduling <unknown default-scheduler 0/3 nodes are available: 3 node(s) didn't match node selector. 5.4.2 亲和性调度​ 上一节，介绍了两种定向调度的方式，使用起来非常方便，但是也有一定的问题，那就是如果没有满足条件的Node，那么Pod将不会被运行，即使在集群中还有可用Node列表也不行，这就限制了它的使用场景。 基于上面的问题，kubernetes还提供了一种亲和性调度（Affinity）。它在NodeSelector的基础之上的进行了扩展，可以通过配置的形式，实现优先选择满足条件的Node进行调度，如果没有，也可以调度到不满足条件的节点上，使调度更加灵活。 Affinity主要分为三类： nodeAffinity(node亲和性）: 以node为目标，解决pod可以调度到哪些node的问题 podAffinity(pod亲和性) : 以pod为目标，解决pod可以和哪些已存在的pod部署在同一个拓扑域中的问题 podAntiAffinity(pod反亲和性) : 以pod为目标，解决pod不能和哪些已存在pod部署在同一个拓扑域中的问题 关于亲和性(反亲和性)使用场景的说明： 亲和性：如果两个应用频繁交互，那就有必要利用亲和性让两个应用的尽可能的靠近，这样可以减少因网络通信而带来的性能损耗。 反亲和性：当应用的采用多副本部署时，有必要采用反亲和性让各个应用实例打散分布在各个node上，这样可以提高服务的高可用性。 NodeAffinity 首先来看一下NodeAffinity的可配置项： pod.spec.affinity.nodeAffinity requiredDuringSchedulingIgnoredDuringExecution Node节点必须满足指定的所有规则才可以，相当于硬限制 nodeSelectorTerms 节点选择列表 matchFields 按节点字段列出的节点选择器要求列表 matchExpressions 按节点标签列出的节点选择器要求列表(推荐) key 键 values 值 operat or 关系符 支持Exists, DoesNotExist, In, NotIn, Gt, Lt preferredDuringSchedulingIgnoredDuringExecution 优先调度到满足指定的规则的Node，相当于软限制 (倾向) preference 一个节点选择器项，与相应的权重相关联 matchFields 按节点字段列出的节点选择器要求列表 matchExpressions 按节点标签列出的节点选择器要求列表(推荐) key 键 values 值 operator 关系符 支持In, NotIn, Exists, DoesNotExist, Gt, Lt weight 倾向权重，在范围1-100。 关系符的使用说明: matchExpressions: key: nodeenv # 匹配存在标签的key为nodeenv的节点 operator: Exists key: nodeenv # 匹配标签的key为nodeenv,且value是\"xxx\"或\"yyy\"的节点 operator: In values: [\"xxx\",\"yyy\"] key: nodeenv # 匹配标签的key为nodeenv,且value大于\"xxx\"的节点 operator: Gt values: \"xxx\" 接下来首先演示一下`requiredDuringSchedulingIgnoredDuringExecution` , 创建pod-nodeaffinity-required.yaml apiVersion: v1 kind: Pod metadata: name: pod-nodeaffinity-required namespace: dev spec: containers: name: nginx image: nginx:1.17.1 affinity: #亲和性设置 nodeAffinity: #设置node亲和性 requiredDuringSchedulingIgnoredDuringExecution: # 硬限制 nodeSelectorTerms: - matchExpressions: # 匹配env的值在[\"xxx\",\"yyy\"]中的标签 - key: nodeenv operator: In values: [\"xxx\",\"yyy\"] 创建pod [root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-required.yaml pod/pod-nodeaffinity-required created 查看pod状态 （运行失败） [root@k8s-master01 ~]# kubectl get pods pod-nodeaffinity-required -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-nodeaffinity-required 0/1 Pending 0 16s <none <none ...... 查看Pod的详情 发现调度失败，提示node选择失败 [root@k8s-master01 ~]# kubectl describe pod pod-nodeaffinity-required -n dev ...... Warning FailedScheduling <unknown default-scheduler 0/3 nodes are available: 3 node(s) didn't match node selector. Warning FailedScheduling <unknown default-scheduler 0/3 nodes are available: 3 node(s) didn't match node selector. #接下来，停止pod [root@k8s-master01 ~]# kubectl delete -f pod-nodeaffinity-required.yaml pod \"pod-nodeaffinity-required\" deleted 修改文件，将values: [\"xxx\",\"yyy\"]------ [\"pro\",\"yyy\"] [root@k8s-master01 ~]# vim pod-nodeaffinity-required.yaml 再次启动 [root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-required.yaml pod/pod-nodeaffinity-required created 此时查看，发现调度成功，已经将pod调度到了node1上 [root@k8s-master01 ~]# kubectl get pods pod-nodeaffinity-required -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-nodeaffinity-required 1/1 Running 0 11s 10.244.1.89 node1 ...... 接下来再演示一下`requiredDuringSchedulingIgnoredDuringExecution` , 创建pod-nodeaffinity-preferred.yaml apiVersion: v1 kind: Pod metadata: name: pod-nodeaffinity-preferred namespace: dev spec: containers: name: nginx image: nginx:1.17.1 affinity: #亲和性设置 nodeAffinity: #设置node亲和性 preferredDuringSchedulingIgnoredDuringExecution: # 软限制 - weight: 1 preference: matchExpressions: # 匹配env的值在[\"xxx\",\"yyy\"]中的标签(当前环境没有) - key: nodeenv operator: In values: [\"xxx\",\"yyy\"] 创建pod [root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-preferred.yaml pod/pod-nodeaffinity-preferred created 查看pod状态 （运行成功） [root@k8s-master01 ~]# kubectl get pod pod-nodeaffinity-preferred -n dev NAME READY STATUS RESTARTS AGE pod-nodeaffinity-preferred 1/1 Running 0 40s NodeAffinity规则设置的注意事项： 1 如果同时定义了nodeSelector和nodeAffinity，那么必须两个条件都得到满足，Pod才能运行在指定的Node上 2 如果nodeAffinity指定了多个nodeSelectorTerms，那么只需要其中一个能够匹配成功即可 3 如果一个nodeSelectorTerms中有多个matchExpressions ，则一个节点必须满足所有的才能匹配成功 4 如果一个pod所在的Node在Pod运行期间其标签发生了改变，不再符合该Pod的节点亲和性需求，则系统将忽略此变化 **PodAffinity** PodAffinity主要实现以运行的Pod为参照，实现让新创建的Pod跟参照pod在一个区域的功能。 首先来看一下`PodAffinity`的可配置项： pod.spec.affinity.podAffinity requiredDuringSchedulingIgnoredDuringExecution 硬限制 namespaces 指定参照pod的namespace topologyKey 指定调度作用域 labelSelector 标签选择器 matchExpressions 按节点标签列出的节点选择器要求列表(推荐) key 键 values 值 operator 关系符 支持In, NotIn, Exists, DoesNotExist. matchLabels 指多个matchExpressions映射的内容 preferredDuringSchedulingIgnoredDuringExecution 软限制 podAffinityTerm 选项 namespaces topologyKey labelSelector matchExpressions key 键 values 值 operator matchLabels weight 倾向权重，在范围1-100 topologyKey用于指定调度时作用域,例如: 如果指定为kubernetes.io/hostname，那就是以Node节点为区分范围 如果指定为beta.kubernetes.io/os,则以Node节点的操作系统类型来区分 接下来，演示下`requiredDuringSchedulingIgnoredDuringExecution`, 1）首先创建一个参照Pod，pod-podaffinity-target.yaml： apiVersion: v1 kind: Pod metadata: name: pod-podaffinity-target namespace: dev labels: podenv: pro #设置标签 spec: containers: name: nginx image: nginx:1.17.1 nodeName: node1 # 将目标pod名确指定到node1上 启动目标pod [root@k8s-master01 ~]# kubectl create -f pod-podaffinity-target.yaml pod/pod-podaffinity-target created 查看pod状况 [root@k8s-master01 ~]# kubectl get pods pod-podaffinity-target -n dev NAME READY STATUS RESTARTS AGE pod-podaffinity-target 1/1 Running 0 4s 2）创建pod-podaffinity-required.yaml，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-podaffinity-required namespace: dev spec: containers: name: nginx image: nginx:1.17.1 affinity: #亲和性设置 podAffinity: #设置pod亲和性 requiredDuringSchedulingIgnoredDuringExecution: # 硬限制 - labelSelector: matchExpressions: # 匹配env的值在[\"xxx\",\"yyy\"]中的标签 - key: podenv operator: In values: [\"xxx\",\"yyy\"] topologyKey: kubernetes.io/hostname 上面配置表达的意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上，显然现在没有这样pod，接下来，运行测试一下。 启动pod [root@k8s-master01 ~]# kubectl create -f pod-podaffinity-required.yaml pod/pod-podaffinity-required created 查看pod状态，发现未运行 [root@k8s-master01 ~]# kubectl get pods pod-podaffinity-required -n dev NAME READY STATUS RESTARTS AGE pod-podaffinity-required 0/1 Pending 0 9s 查看详细信息 [root@k8s-master01 ~]# kubectl describe pods pod-podaffinity-required -n dev ...... Events: Type Reason Age From Message Warning FailedScheduling <unknown default-scheduler 0/3 nodes are available: 2 node(s) didn't match pod affinity rules, 1 node(s) had taints that the pod didn't tolerate. 接下来修改 values: [\"xxx\",\"yyy\"]-----values:[\"pro\",\"yyy\"] 意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上 [root@k8s-master01 ~]# vim pod-podaffinity-required.yaml 然后重新创建pod，查看效果 [root@k8s-master01 ~]# kubectl delete -f pod-podaffinity-required.yaml pod \"pod-podaffinity-required\" de leted [root@k8s-master01 ~]# kubectl create -f pod-podaffinity-required.yaml pod/pod-podaffinity-required created 发现此时Pod运行正常 [root@k8s-master01 ~]# kubectl get pods pod-podaffinity-required -n dev NAME READY STATUS RESTARTS AGE LABELS pod-podaffinity-required 1/1 Running 0 6s <none 关于`PodAffinity`的 `preferredDuringSchedulingIgnoredDuringExecution`，这里不再演示。 **PodAntiAffinity** PodAntiAffinity主要实现以运行的Pod为参照，让新创建的Pod跟参照pod不在一个区域中的功能。 它的配置方式和选项跟PodAffinty是一样的，这里不再做详细解释，直接做一个测试案例。 1）继续使用上个案例中目标pod [root@k8s-master01 ~]# kubectl get pods -n dev -o wide --show-labels NAME READY STATUS RESTARTS AGE IP NODE LABELS pod-podaffinity-required 1/1 Running 0 3m29s 10.244.1.38 node1 <none pod-podaffinity-target 1/1 Running 0 9m25s 10.244.1.37 node1 podenv=pro 2）创建pod-podantiaffinity-required.yaml，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-podantiaffinity-required namespace: dev spec: containers: name: nginx image: nginx:1.17.1 affinity: #亲和性设置 podAntiAffinity: #设置pod亲和性 requiredDuringSchedulingIgnoredDuringExecution: # 硬限制 - labelSelector: matchExpressions: # 匹配podenv的值在[\"pro\"]中的标签 - key: podenv operator: In values: [\"pro\"] topologyKey: kubernetes.io/hostname 上面配置表达的意思是：新Pod必须要与拥有标签nodeenv=pro的pod不在同一Node上，运行测试一下。 创建pod [root@k8s-master01 ~]# kubectl create -f pod-podantiaffinity-required.yaml pod/pod-podantiaffinity-required created 查看pod 发现调度到了node2上 [root@k8s-master01 ~]# kubectl get pods pod-podantiaffinity-required -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE .. pod-podantiaffinity-required 1/1 Running 0 30s 10.244.1.96 node2 .. ##### 5.4.3 污点和容忍 **污点（Taints）** 前面的调度方式都是站在Pod的角度上，通过在Pod上添加属性，来确定Pod是否要调度到指定的Node上，其实我们也可以站在Node的角度上，通过在Node上添加**污点**属性，来决定是否允许Pod调度过来。 Node被设置上污点之后就和Pod之间存在了一种相斥的关系，进而拒绝Pod调度进来，甚至可以将已经存在的Pod驱逐出去。 污点的格式为：`key=value:effect`, key和value是污点的标签，effect描述污点的作用，支持如下三个选项： PreferNoSchedule：kubernetes将尽量避免把Pod调度到具有该污点的Node上，除非没有其他节点可调度 NoSchedule：kubernetes将不会把Pod调度到具有该污点的Node上，但不会影响当前Node上已存在的Pod NoExecute：kubernetes将不会把Pod调度到具有该污点的Node上，同时也会将Node上已存在的Pod驱离 使用kubectl设置和去除污点的命令示例如下： # 设置污点 kubectl taint nodes node1 key=value:effect # 去除污点 kubectl taint nodes node1 key:effect- # 去除所有污点 kubectl taint nodes node1 key- 接下来，演示下污点的效果： 准备节点node1（为了演示效果更加明显，暂时停止node2节点） 为node1节点设置一个污点: tag=heima:PreferNoSchedule；然后创建pod1( pod1 可以 ) 修改为node1节点设置一个污点: tag=heima:NoSchedule；然后创建pod2( pod1 正常 pod2 失败 ) 修改为node1节点设置一个污点: tag=heima:NoExecute；然后创建pod3 ( 3个pod都失败 ) # 为node1设置污点(PreferNoSchedule) [root@k8s-master01 ~]# kubectl taint nodes node1 tag=heima:PreferNoSchedule # 创建pod1 [root@k8s-master01 ~]# kubectl run taint1 --image=nginx:1.17.1 -n dev [root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE taint1-7665f7fd85-574h4 1/1 Running 0 2m24s 10.244.1.59 node1 # 为node1设置污点(取消PreferNoSchedule，设置NoSchedule) [root@k8s-master01 ~]# kubectl taint nodes node1 tag:PreferNoSchedule- [root@k8s-master01 ~]# kubectl taint nodes node1 tag=heima:NoSchedule # 创建pod2 [root@k8s-master01 ~]# kubectl run taint2 --image=nginx:1.17.1 -n dev [root@k8s-master01 ~]# kubectl get pods taint2 -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE taint1-7665f7fd85-574h4 1/1 Running 0 2m24s 10.244.1.59 node1 taint2-544694789-6zmlf 0/1 Pending 0 21s <none <none # 为node1设置污点(取消NoSchedule，设置NoExecute) [root@k8s-master01 ~]# kubectl taint nodes node1 tag:NoSchedule- [root@k8s-master01 ~]# kubectl taint nodes node1 tag=heima:NoExecute # 创建pod3 [root@k8s-master01 ~]# kubectl run taint3 --image=nginx:1.17.1 -n dev [root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED taint1-7665f7fd85-htkmp 0/1 Pending 0 35s <none <none <none taint2-544694789-bn7wb 0/1 Pending 0 35s <none <none <none taint3-6d78dbd749-tktkq 0/1 Pending 0 6s <none <none <none 小提示： 使用kubeadm搭建的集群，默认就会给master节点添加一个污点标记,所以pod就不会调度到master节点上. 容忍（Toleration） 上面介绍了污点的作用，我们可以在node上添加污点用于拒绝pod调度上来，但是如果就是想将一个pod调度到一个有污点的node上去，这时候应该怎么做呢？这就要使用到容忍。 污点就是拒绝，容忍就是忽略，Node通过污点拒绝pod调度上去，Pod通过容忍忽略拒绝 下面先通过一个案例看下效果： 上一小节，已经在node1节点上打上了NoExecute的污点，此时pod是调度不上去的 本小节，可以通过给pod添加容忍，然后将其调度上去 创建pod-toleration.yaml,内容如下 apiVersion: v1 kind: Pod metadata: name: pod-toleration namespace: dev spec: containers: name: nginx image: nginx:1.17.1 tolerations: # 添加容忍 key: \"tag\" # 要容忍的污点的key operator: \"Equal\" # 操作符 value: \"heima\" # 容忍的污点的value effect: \"NoExecute\" # 添加容忍的规则，这里必须和标记的污点规则相同 添加容忍之前的pod [root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED pod-toleration 0/1 Pending 0 3s <none <none <none 添加容忍之后的pod [root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED pod-toleration 1/1 Running 0 3s 10.244.1.62 node1 <none 下面看一下容忍的详细配置: [root@k8s-master01 ~]# kubectl explain pod.spec.tolerations ...... FIELDS: key # 对应着要容忍的污点的键，空意味着匹配所有的键 value # 对应着要容忍的污点的值 operator # key-value的运算符，支持Equal和Exists（默认） effect # 对应污点的effect，空意味着匹配所有影响 tolerationSeconds # 容忍时间, 当effect为NoExecute时生效，表示pod在Node上的停留时间 ### 6. Pod控制器详解 #### 6.1 Pod控制器介绍 Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类： 自主式pod：kubernetes直接创建出来的Pod，这种pod删除后就没有了，也不会重建 控制器创建的pod：kubernetes通过控制器创建的pod，这种pod删除了之后还会自动重建 什么是Pod控制器 Pod控制器是管理pod的中间层，使用Pod控制器之后，只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它会创建出满足条件的Pod并确保每一个Pod资源处于用户期望的目标状态。如果Pod资源在运行中出现故障，它会基于指定策略重新编排Pod。 在kubernetes中，有很多类型的pod控制器，每种都有自己的适合的场景，常见的有下面这些： ReplicationController：比较原始的pod控制器，已经被废弃，由ReplicaSet替代 ReplicaSet：保证副本数量一直维持在期望值，并支持pod数量扩缩容，镜像版本升级 Deployment：通过控制ReplicaSet来控制Pod，并支持滚动升级、回退版本 Horizontal Pod Autoscaler：可以根据集群负载自动水平调整Pod的数量，实现削峰填谷 DaemonSet：在集群中的指定Node上运行且仅运行一个副本，一般用于守护进程类的任务 Job：它创建出来的pod只要完成任务就立即退出，不需要重启或重建，用于执行一次性任务 Cronjob：它创建的Pod负责周期性任务控制，不需要持续后台运行 StatefulSet：管理有状态应用 6.2 ReplicaSet(RS)​ ReplicaSet的主要作用是保证一定数量的pod正常运行，它会持续监听这些Pod的运行状态，一旦Pod发生故障，就会重启或重建。同时它还支持对pod数量的扩缩容和镜像版本的升降级。 ReplicaSet的资源清单文件： apiVersion: apps/v1 # 版本号 kind: ReplicaSet # 类型 metadata: # 元数据 name: # rs名称 namespace: # 所属命名空间 labels: #标签 controller: rs spec: # 详情描述 replicas: 3 # 副本数量 selector: # 选择器，通过它指定该控制器管理哪些pod matchLabels: # Labels匹配规则 app: nginx-pod matchExpressions: # Expressions匹配规则 - {key: app, operator: In, values: [nginx-pod]} template: # 模板，当副本数量不足时，会根据下面的模板创建pod副本 metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 在这里面，需要新了解的配置项就是spec下面几个选项： replicas：指定副本数量，其实就是当前rs创建出来的pod的数量，默认为1 selector：选择器，它的作用是建立pod控制器和pod之间的关联关系，采用的Label Selector机制 在pod模板上定义label，在控制器上定义选择器，就可以表明当前控制器能管理哪些pod了 template：模板，就是当前控制器创建pod所使用的模板板，里面其实就是前一章学过的pod的定义 创建ReplicaSet 创建pc-replicaset.yaml文件，内容如下： apiVersion: apps/v1 kind: ReplicaSet metadata: name: pc-replicaset namespace: dev spec: replicas: 3 selector: matchLabels: app: nginx-pod template: metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 # 创建rs [root@k8s-master01 ~]# kubectl create -f pc-replicaset.yaml replicaset.apps/pc-replicaset created # 查看rs # DESIRED:期望副本数量 # CURRENT:当前副本数量 # READY:已经准备好提供服务的副本数量 [root@k8s-master01 ~]# kubectl get rs pc-replicaset -n dev -o wide NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES SELECTOR pc-replicaset 3 3 3 22s nginx nginx:1.17.1 app=nginx-pod # 查看当前控制器创建出来的pod # 这里发现控制器创建出来的pod的名称是在控制器名称后面拼接了-xxxxx随机码 [root@k8s-master01 ~]# kubectl get pod -n dev NAME READY STATUS RESTARTS AGE pc-replicaset-6vmvt 1/1 Running 0 54s pc-replicaset-fmb8f 1/1 Running 0 54s pc-replicaset-snrk2 1/1 Running 0 54s 扩缩容 # 编辑rs的副本数量，修改spec:replicas: 6即可 [root@k8s-master01 ~]# kubectl edit rs pc-replicaset -n dev replicaset.apps/pc-replicaset edited # 查看pod [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-replicaset-6vmvt 1/1 Running 0 114m pc-replicaset-cftnp 1/1 Running 0 10s pc-replicaset-fjlm6 1/1 Running 0 10s pc-replicaset-fmb8f 1/1 Running 0 114m pc-replicaset-s2whj 1/1 Running 0 10s pc-replicaset-snrk2 1/1 Running 0 114m # 当然也可以直接使用命令实现 # 使用scale命令实现扩缩容， 后面--replicas=n直接指定目标数量即可 [root@k8s-master01 ~]# kubectl scale rs pc-replicaset --replicas=2 -n dev replicaset.apps/pc-replicaset scaled # 命令运行完毕，立即查看，发现已经有4个开始准备退出了 [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-replicaset-6vmvt 0/1 Terminating 0 118m pc-replicaset-cftnp 0/1 Terminating 0 4m17s pc-replicaset-fjlm6 0/1 Terminating 0 4m17s pc-replicaset-fmb8f 1/1 Running 0 118m pc-replicaset-s2whj 0/1 Terminating 0 4m17s pc-replicaset-snrk2 1/1 Running 0 118m #稍等片刻，就只剩下2个了 [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-replicaset-fmb8f 1/1 Running 0 119m pc-replicaset-snrk2 1/1 Running 0 119m 镜像升级 # 编辑rs的容器镜像 - image: nginx:1.17.2 [root@k8s-master01 ~]# kubectl edit rs pc-replicaset -n dev replicaset.apps/pc-replicaset edited # 再次查看，发现镜像版本已经变更了 [root@k8s-master01 ~]# kubectl get rs -n dev -o wide NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES ... pc-replicaset 2 2 2 140m nginx nginx:1.17.2 ... # 同样的道理，也可以使用命令完成这个工作 # kubectl set image rs rs名称 容器=镜像版本 -n namespace [root@k8s-master01 ~]# kubectl set image rs pc-replicaset nginx=nginx:1.17.1 -n dev replicaset.apps/pc-replicaset image updated # 再次查看，发现镜像版本已经变更了 [root@k8s-master01 ~]# kubectl get rs -n dev -o wide NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES ... pc-replicaset 2 2 2 145m nginx nginx:1.17.1 ... 删除ReplicaSet # 使用kubectl delete命令会删除此RS以及它管理的Pod # 在kubernetes删除RS前，会将RS的replicasclear调整为0，等待所有的Pod被删除后，在执行RS对象的删除 [root@k8s-master01 ~]# kubectl delete rs pc-replicaset -n dev replicaset.apps \"pc-replicaset\" deleted [root@k8s-master01 ~]# kubectl get pod -n dev -o wide No resources found in dev namespace. # 如果希望仅仅删除RS对象（保留Pod），可以使用kubectl delete命令时添加--cascade=false选项（不推荐）。 [root@k8s-master01 ~]# kubectl delete rs pc-replicaset -n dev --cascade=false replicaset.apps \"pc-replicaset\" deleted [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-replicaset-cl82j 1/1 Running 0 75s pc-replicaset-dslhb 1/1 Running 0 75s # 也可以使用yaml直接删除(推荐) [root@k8s-master01 ~]# kubectl delete -f pc-replicaset.yaml replicaset.apps \"pc-replicaset\" deleted 6.3 Deployment(Deploy)​ 为了更好的解决服务编排的问题，kubernetes在V1.2版本开始，引入了Deployment控制器。值得一提的是，这种控制器并不直接管理pod，而是通过管理ReplicaSet来简介管理Pod，即：Deployment管理ReplicaSet，ReplicaSet管理Pod。所以Deployment比ReplicaSet功能更加强大。 Deployment主要功能有下面几个： 支持ReplicaSet的所有功能 支持发布的停止、继续 支持滚动升级和回滚版本 Deployment的资源清单文件： apiVersion: apps/v1 # 版本号 kind: Deployment # 类型 metadata: # 元数据 name: # rs名称 namespace: # 所属命名空间 labels: #标签 controller: deploy spec: # 详情描述 replicas: 3 # 副本数量 revisionHistoryLimit: 3 # 保留历史版本 paused: false # 暂停部署，默认是false progressDeadlineSeconds: 600 # 部署超时时间（s），默认是600 strategy: # 策略 type: RollingUpdate # 滚动更新策略 rollingUpdate: # 滚动更新 maxSurge: 30% # 最大额外可以存在的副本数，可以为百分比，也可以为整数 maxUnavailable: 30% # 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数 selector: # 选择器，通过它指定该控制器管理哪些pod matchLabels: # Labels匹配规则 app: nginx-pod matchExpressions: # Expressions匹配规则 - {key: app, operator: In, values: [nginx-pod]} template: # 模板，当副本数量不足时，会根据下面的模板创建pod副本 metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 6.3.1 创建deployment​ 创建pc-deployment.yaml，内容如下： apiVersion: apps/v1 kind: Deployment metadata: name: pc-deployment namespace: dev spec: replicas: 3 selector: matchLabels: app: nginx-pod template: metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 # 创建deployment [root@k8s-master01 ~]# kubectl create -f pc-deployment.yaml --record=true deployment.apps/pc-deployment created # 查看deployment # UP-TO-DATE 最新版本的pod的数量 # AVAILABLE 当前可用的pod的数量 [root@k8s-master01 ~]# kubectl get deploy pc-deployment -n dev NAME READY UP-TO-DATE AVAILABLE AGE pc-deployment 3/3 3 3 15s # 查看rs # 发现rs的名称是在原来deployment的名字后面添加了一个10位数的随机串 [root@k8s-master01 ~]# kubectl get rs -n dev NAME DESIRED CURRENT READY AGE pc-deployment-6696798b78 3 3 3 23s # 查看pod [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-deployment-6696798b78-d2c8n 1/1 Running 0 107s pc-deployment-6696798b78-smpvp 1/1 Running 0 107s pc-deployment-6696798b78-wvjd8 1/1 Running 0 107s 6.3.2 扩缩容​ # 变更副本数量为5个 [root@k8s-master01 ~]# kubectl scale deploy pc-deployment --replicas=5 -n dev deployment.apps/pc-deployment scaled # 查看deployment [root@k8s-master01 ~]# kubectl get deploy pc-deployment -n dev NAME READY UP-TO-DATE AVAILABLE AGE pc-deployment 5/5 5 5 2m # 查看pod [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-deployment-6696798b78-d2c8n 1/1 Running 0 4m19s pc-deployment-6696798b78-jxmdq 1/1 Running 0 94s pc-deployment-6696798b78-mktqv 1/1 Running 0 93s pc-deployment-6696798b78-smpvp 1/1 Running 0 4m19s pc-deployment-6696798b78-wvjd8 1/1 Running 0 4m19s # 编辑deployment的副本数量，修改spec:replicas: 4即可 [root@k8s-master01 ~]# kubectl edit deploy pc-deployment -n dev deployment.apps/pc-deployment edited # 查看pod [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-deployment-6696798b78-d2c8n 1/1 Running 0 5m23s pc-deployment-6696798b78-jxmdq 1/1 Running 0 2m38s pc-deployment-6696798b78-smpvp 1/1 Running 0 5m23s pc-deployment-6696798b78-wvjd8 1/1 Running 0 5m23s 镜像更新 deployment支持两种更新策略:重建更新和滚动更新,可以通过strategy指定策略类型,支持两个属性: strategy：指定新的Pod替换旧的Pod的策略， 支持两个属性： type：指定策略类型，支持两种策略 Recreate：在创建出新的Pod之前会先杀掉所有已存在的Pod RollingUpdate：滚动更新，就是杀死一部分，就启动一部分，在更新过程中，存在两个版本Pod rollingUpdate：当type为RollingUpdate时生效，用于为RollingUpdate设置参数，支持两个属性： maxUnavailable：用来指定在升级过程中不可用Pod的最大数量，默认为25%。 maxSurge： 用来指定在升级过程中可以超过期望的Pod的最大数量，默认为25%。 重建更新 编辑pc-deployment.yaml,在spec节点下添加更新策略 spec: strategy: # 策略 type: Recreate # 重建更新 创建deploy进行验证 # 变更镜像 [root@k8s-master01 ~]# kubectl set image deployment pc-deployment nginx=nginx:1.17.2 -n dev deployment.apps/pc-deployment image updated # 观察升级过程 [root@k8s-master01 ~]# kubectl get pods -n dev -w NAME READY STATUS RESTARTS AGE pc-deployment-5d89bdfbf9-65qcw 1/1 Running 0 31s pc-deployment-5d89bdfbf9-w5nzv 1/1 Running 0 31s pc-deployment-5d89bdfbf9-xpt7w 1/1 Running 0 31s pc-deployment-5d89bdfbf9-xpt7w 1/1 Terminating 0 41s pc-deployment-5d89bdfbf9-65qcw 1/1 Terminating 0 41s pc-deployment-5d89bdfbf9-w5nzv 1/1 Terminating 0 41s pc-deployment-675d469f8b-grn8z 0/1 Pending 0 0s pc-deployment-675d469f8b-hbl4v 0/1 Pending 0 0s pc-deployment-675d469f8b-67nz2 0/1 Pending 0 0s pc-deployment-675d469f8b-grn8z 0/1 ContainerCreating 0 0s pc-deployment-675d469f8b-hbl4v 0/1 ContainerCreating 0 0s pc-deployment-675d469f8b-67nz2 0/1 ContainerCreating 0 0s pc-deployment-675d469f8b-grn8z 1/1 Running 0 1s pc-deployment-675d469f8b-67nz2 1/1 Running 0 1s pc-deployment-675d469f8b-hbl4v 1/1 Running 0 2s 滚动更新 编辑pc-deployment.yaml,在spec节点下添加更新策略 spec: strategy: # 策略 type: RollingUpdate # 滚动更新策略 rollingUpdate: maxSurge: 25% maxUnavailable: 25% 创建deploy进行验证 # 变更镜像 [root@k8s-master01 ~]# kubectl set image deployment pc-deployment nginx=nginx:1.17.3 -n dev deployment.apps/pc-deployment image updated # 观察升级过程 [root@k8s-master01 ~]# kubectl get pods -n dev -w NAME READY STATUS RESTARTS AGE pc-deployment-c848d767-8rbzt 1/1 Running 0 31m pc-deployment-c848d767-h4p68 1/1 Running 0 31m pc-deployment-c848d767-hlmz4 1/1 Running 0 31m pc-deployment-c848d767-rrqcn 1/1 Running 0 31m pc-deployment-966bf7f44-226rx 0/1 Pending 0 0s pc-deployment-966bf7f44-226rx 0/1 ContainerCreating 0 0s pc-deployment-966bf7f44-226rx 1/1 Running 0 1s pc-deployment-c848d767-h4p68 0/1 Terminating 0 34m pc-deployment-966bf7f44-cnd44 0/1 Pending 0 0s pc-deployment-966bf7f44-cnd44 0/1 ContainerCreating 0 0s pc-deployment-966bf7f44-cnd44 1/1 Running 0 2s pc-deployment-c848d767-hlmz4 0/1 Terminating 0 34m pc-deployment-966bf7f44-px48p 0/1 Pending 0 0s pc-deployment-966bf7f44-px48p 0/1 ContainerCreating 0 0s pc-deployment-966bf7f44-px48p 1/1 Running 0 0s pc-deployment-c848d767-8rbzt 0/1 Terminating 0 34m pc-deployment-966bf7f44-dkmqp 0/1 Pending 0 0s pc-deployment-966bf7f44-dkmqp 0/1 ContainerCreating 0 0s pc-deployment-966bf7f44-dkmqp 1/1 Running 0 2s pc-deployment-c848d767-rrqcn 0/1 Terminating 0 34m # 至此，新版本的pod创建完毕，就版本的pod销毁完毕 # 中间过程是滚动进行的，也就是边销毁边创建 滚动更新的过程： 镜像更新中rs的变化 # 查看rs,发现原来的rs的依旧存在，只是pod数量变为了0，而后又新产生了一个rs，pod数量为4 # 其实这就是deployment能够进行版本回退的奥妙所在，后面会详细解释 [root@k8s-master01 ~]# kubectl get rs -n dev NAME DESIRED CURRENT READY AGE pc-deployment-6696798b78 0 0 0 7m37s pc-deployment-6696798b11 0 0 0 5m37s pc-deployment-c848d76789 4 4 4 72s 6.3.3 版本回退​ deployment支持版本升级过程中的暂停、继续功能以及版本回退等诸多功能，下面具体来看. kubectl rollout： 版本升级相关功能，支持下面的选项： status 显示当前升级状态 history 显示 升级历史记录 pause 暂停版本升级过程 resume 继续已经暂停的版本升级过程 restart 重启版本升级过程 undo 回滚到上一级版本（可以使用--to-revision回滚到指定版本） # 查看当前升级版本的状态 [root@k8s-master01 ~]# kubectl rollout status deploy pc-deployment -n dev deployment \"pc-deployment\" successfully rolled out # 查看升级历史记录 [root@k8s-master01 ~]# kubectl rollout history deploy pc-deployment -n dev deployment.apps/pc-deployment REVISION CHANGE-CAUSE 1 kubectl create --filename=pc-deployment.yaml --record=true 2 kubectl create --filename=pc-deployment.yaml --record=true 3 kubectl create --filename=pc-deployment.yaml --record=true # 可以发现有三次版本记录，说明完成过两次升级 # 版本回滚 # 这里直接使用--to-revision=1回滚到了1版本， 如果省略这个选项，就是回退到上个版本，就是2版本 [root@k8s-master01 ~]# kubectl rollout undo deployment pc-deployment --to-revision=1 -n dev deployment.apps/pc-deployment rolled back # 查看发现，通过nginx镜像版本可以发现到了第一版 [root@k8s-master01 ~]# kubectl get deploy -n dev -o wide NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES pc-deployment 4/4 4 4 74m nginx nginx:1.17.1 # 查看rs，发现第一个rs中有4个pod运行，后面两个版本的rs中pod为运行 # 其实deployment之所以可是实现版本的回滚，就是通过记录下历史rs来实现的， # 一旦想回滚到哪个版本，只需要将当前版本pod数量降为0，然后将回滚版本的pod提升为目标数量就可以了 [root@k8s-master01 ~]# kubectl get rs -n dev NAME DESIRED CURRENT READY AGE pc-deployment-6696798b78 4 4 4 78m pc-deployment-966bf7f44 0 0 0 37m pc-deployment-c848d767 0 0 0 71m 6.3.4 金丝雀发布​ Deployment控制器支持控制更新过程中的控制，如“暂停(pause)”或“继续(resume)”更新操作。 比如有一批新的Pod资源创建完成后立即暂停更新过程，此时，仅存在一部分新版本的应用，主体部分还是旧的版本。然后，再筛选一小部分的用户请求路由到新版本的Pod应用，继续观察能否稳定地按期望的方式运行。确定没问题之后再继续完成余下的Pod资源滚动更新，否则立即回滚更新操作。这就是所谓的金丝雀发布。 # 更新deployment的版本，并配置暂停deployment [root@k8s-master01 ~]# kubectl set image deploy pc-deployment nginx=nginx:1.17.4 -n dev && kubectl rollout pause deployment pc-deployment -n dev deployment.apps/pc-deployment image updated deployment.apps/pc-deployment paused #观察更新状态 [root@k8s-master01 ~]# kubectl rollout status deploy pc-deployment -n dev Waiting for deployment \"pc-deployment\" rollout to finish: 2 out of 4 new replicas have been updated... # 监控更新的过程，可以看到已经新增了一个资源，但是并未按照预期的状态去删除一个旧的资源，就是因为使用了pause暂停命令 [root@k8s-master01 ~]# kubectl get rs -n dev -o wide NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES pc-deployment-5d89bdfbf9 3 3 3 19m nginx nginx:1.17.1 pc-deployment-675d469f8b 0 0 0 14m nginx nginx:1.17.2 pc-deployment-6c9f56fcfb 2 2 2 3m16s nginx nginx:1.17.4 [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-deployment-5d89bdfbf9-rj8sq 1/1 Running 0 7m33s pc-deployment-5d89bdfbf9-ttwgg 1/1 Running 0 7m35s pc-deployment-5d89bdfbf9-v4wvc 1/1 Running 0 7m34s pc-deployment-6c9f56fcfb-996rt 1/1 Running 0 3m31s pc-deployment-6c9f56fcfb-j2gtj 1/1 Running 0 3m31s # 确保更新的pod没问题了，继续更新 [root@k8s-master01 ~]# kubectl rollout resume deploy pc-deployment -n dev deployment.apps/pc-deployment resumed # 查看最后的更新情况 [root@k8s-master01 ~]# kubectl get rs -n dev -o wide NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES pc-deployment-5d89bdfbf9 0 0 0 21m nginx nginx:1.17.1 pc-deployment-675d469f8b 0 0 0 16m nginx nginx:1.17.2 pc-deployment-6c9f56fcfb 4 4 4 5m11s nginx nginx:1.17.4 [root@k8s-master01 ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE pc-deployment-6c9f56fcfb-7bfwh 1/1 Running 0 37s pc-deployment-6c9f56fcfb-996rt 1/1 Running 0 5m27s pc-deployment-6c9f56fcfb-j2gtj 1/1 Running 0 5m27s pc-deployment-6c9f56fcfb-rf84v 1/1 Running 0 37s 删除Deployment # 删除deployment，其下的rs和pod也将被删除 [root@k8s-master01 ~]# kubectl delete -f pc-deployment.yaml deployment.apps \"pc-deployment\" deleted 6.4 Horizontal Pod Autoscaler(HPA)​ 在前面的课程中，我们已经可以实现通过手工执行kubectl scale命令实现Pod扩容或缩容，但是这显然不符合Kubernetes的定位目标--自动化、智能化。 Kubernetes期望可以实现通过监测Pod的使用情况，实现pod数量的自动调整，于是就产生了Horizontal Pod Autoscaler（HPA）这种控制器。 HPA可以获取每个Pod利用率，然后和HPA中定义的指标进行对比，同时计算出需要伸缩的具体值，最后实现Pod的数量的调整。其实HPA与之前的Deployment一样，也属于一种Kubernetes资源对象，它通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否需要针对性地调整目标Pod的副本数，这是HPA的实现原理。 接下来，我们来做一个实验 6.4.1 安装metrics-server​ metrics-server可以用来收集集群中的资源使用情况 # 安装git [root@k8s-master01 ~]# yum install git -y # 获取metrics-server, 注意使用的版本 [root@k8s-master01 ~]# git clone -b v0.3.6 https://github.com/kubernetes-incubator/metrics-server # 修改deployment, 注意修改的是镜像和初始化参数 [root@k8s-master01 ~]# cd /root/metrics-server/deploy/1.8+/ [root@k8s-master01 1.8+]# vim metrics-server-deployment.yaml 按图中添加下面选项 hostNetwork: true image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6 args: --kubelet-insecure-tls --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP ![image-20200608163326496](Kubernetes.assets/image-20200608163326496.png) 安装metrics-server [root@k8s-master01 1.8+]# kubectl apply -f ./ 查看pod运行情况 [root@k8s-master01 1.8+]# kubectl get pod -n kube-system metrics-server-6b976979db-2xwbj 1/1 Running 0 90s 使用kubectl top node 查看资源使用情况 [root@k8s-master01 1.8+]# kubectl top node NAME CPU(cores) CPU% MEMORY(bytes) MEMORY% k8s-master01 289m 14% 1582Mi 54% k8s-node01 81m 4% 1195Mi 40% k8s-node02 72m 3% 1211Mi 41% [root@k8s-master01 1.8+]# kubectl top pod -n kube-system NAME CPU(cores) MEMORY(bytes) coredns-6955765f44-7ptsb 3m 9Mi coredns-6955765f44-vcwr5 3m 8Mi etcd-master 14m 145Mi ... 至此,metrics-server安装完成 ##### 6.4.2 准备deployment和servie 创建pc-hpa-pod.yaml文件，内容如下： apiVersion: apps/v1 kind: Deployment metadata: name: nginx namespace: dev spec: strategy: # 策略 type: RollingUpdate # 滚动更新策略 replicas: 1 selector: matchLabels: app: nginx-pod template: metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 resources: # 资源配额 limits: # 限制资源（上限） cpu: \"1\" # CPU限制，单位是core数 requests: # 请求资源（下限） cpu: \"100m\" # CPU限制，单位是core数 创建deployment [root@k8s-master01 1.8+]# kubectl run nginx --image=nginx:1.17.1 --requests=cpu=100m -n dev 创建service [root@k8s-master01 1.8+]# kubectl expose deployment nginx --type=NodePort --port=80 -n dev 查看 [root@k8s-master01 1.8+]# kubectl get deployment,pod,svc -n dev NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx 1/1 1 1 47s NAME READY STATUS RESTARTS AGE pod/nginx-7df9756ccc-bh8dr 1/1 Running 0 47s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx NodePort 10.101.18.29 <none 80:31830/TCP 35s ##### 6.4.3 部署HPA 创建pc-hpa.yaml文件，内容如下： apiVersion: autoscaling/v1 kind: HorizontalPodAutoscaler metadata: name: pc-hpa namespace: dev spec: minReplicas: 1 #最小pod数量 maxReplicas: 10 #最大pod数量 targetCPUUtilizationPercentage: 3 # CPU使用率指标 scaleTargetRef: # 指定要控制的nginx信息 apiVersion: /v1 kind: Deployment name: nginx 创建hpa [root@k8s-master01 1.8+]# kubectl create -f pc-hpa.yaml horizontalpodautoscaler.autoscaling/pc-hpa created 查看hpa [root@k8s-master01 1.8+]# kubectl get hpa -n dev NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE pc-hpa Deployment/nginx 0%/3% 1 10 1 62s ##### 6.4.4 测试 使用压测工具对service地址`192.168.5.4:31830`进行压测，然后通过控制台查看hpa和pod的变化 hpa变化 [root@k8s-master01 ~]# kubectl get hpa -n dev -w NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE pc-hpa Deployment/nginx 0%/3% 1 10 1 4m11s pc-hpa Deployment/nginx 0%/3% 1 10 1 5m19s pc-hpa Deployment/nginx 22%/3% 1 10 1 6m50s pc-hpa Deployment/nginx 22%/3% 1 10 4 7m5s pc-hpa Deployment/nginx 22%/3% 1 10 8 7m21s pc-hpa Deployment/nginx 6%/3% 1 10 8 7m51s pc-hpa Deployment/nginx 0%/3% 1 10 8 9m6s pc-hpa Deployment/nginx 0%/3% 1 10 8 13m pc-hpa Deployment/nginx 0%/3% 1 10 1 14m deployment变化 [root@k8s-master01 ~]# kubectl get deployment -n dev -w NAME READY UP-TO-DATE AVAILABLE AGE nginx 1/1 1 1 11m nginx 1/4 1 1 13m nginx 1/4 1 1 13m nginx 1/4 1 1 13m nginx 1/4 4 1 13m nginx 1/8 4 1 14m nginx 1/8 4 1 14m nginx 1/8 4 1 14m nginx 1/8 8 1 14m nginx 2/8 8 2 14m nginx 3/8 8 3 14m nginx 4/8 8 4 14m nginx 5/8 8 5 14m nginx 6/8 8 6 14m nginx 7/8 8 7 14m nginx 8/8 8 8 15m nginx 8/1 8 8 20m nginx 8/1 8 8 20m nginx 1/1 1 1 20m pod变化 [root@k8s-master01 ~]# kubectl get pods -n dev -w NAME READY STATUS RESTARTS AGE nginx-7df9756ccc-bh8dr 1/1 Running 0 11m nginx-7df9756ccc-cpgrv 0/1 Pending 0 0s nginx-7df9756ccc-8zhwk 0/1 Pending 0 0s nginx-7df9756ccc-rr9bn 0/1 Pending 0 0s nginx-7df9756ccc-cpgrv 0/1 ContainerCreating 0 0s nginx-7df9756ccc-8zhwk 0/1 ContainerCreating 0 0s nginx-7df9756ccc-rr9bn 0/1 ContainerCreating 0 0s nginx-7df9756ccc-m9gsj 0/1 Pending 0 0s nginx-7df9756ccc-g56qb 0/1 Pending 0 0s nginx-7df9756ccc-sl9c6 0/1 Pending 0 0s nginx-7df9756ccc-fgst7 0/1 Pending 0 0s nginx-7df9756ccc-g56qb 0/1 ContainerCreating 0 0s nginx-7df9756ccc-m9gsj 0/1 ContainerCreating 0 0s nginx-7df9756ccc-sl9c6 0/1 ContainerCreating 0 0s nginx-7df9756ccc-fgst7 0/1 ContainerCreating 0 0s nginx-7df9756ccc-8zhwk 1/1 Running 0 19s nginx-7df9756ccc-rr9bn 1/1 Running 0 30s nginx-7df9756ccc-m9gsj 1/1 Running 0 21s nginx-7df9756ccc-cpgrv 1/1 Running 0 47s nginx-7df9756ccc-sl9c6 1/1 Running 0 33s nginx-7df9756ccc-g56qb 1/1 Running 0 48s nginx-7df9756ccc-fgst7 1/1 Running 0 66s nginx-7df9756ccc-fgst7 1/1 Terminating 0 6m50s nginx-7df9756ccc-8zhwk 1/1 Terminating 0 7m5s nginx-7df9756ccc-cpgrv 1/1 Terminating 0 7m5s nginx-7df9756ccc-g56qb 1/1 Terminating 0 6m50s nginx-7df9756ccc-rr9bn 1/1 Terminating 0 7m5s nginx-7df9756ccc-m9gsj 1/1 Terminating 0 6m50s nginx-7df9756ccc-sl9c6 1/1 Terminating 0 6m50s #### 6.5 DaemonSet(DS) DaemonSet类型的控制器可以保证在集群中的每一台（或指定）节点上都运行一个副本。一般适用于日志收集、节点监控等场景。也就是说，如果一个Pod提供的功能是节点级别的（每个节点都需要且只需要一个），那么这类Pod就适合使用DaemonSet类型的控制器创建。 ![img](Kubernetes.assets/image-20200612010223537.png) DaemonSet控制器的特点： 每当向集群中添加一个节点时，指定的 Pod 副本也将添加到该节点上 当节点从集群中移除时，Pod 也就被垃圾回收了 下面先来看下DaemonSet的资源清单文件 apiVersion: apps/v1 # 版本号 kind: DaemonSet # 类型 metadata: # 元数据 name: # rs名称 namespace: # 所属命名空间 labels: #标签 controller: daemonset spec: # 详情描述 revisionHistoryLimit: 3 # 保留历史版本 updateStrategy: # 更新策略 type: RollingUpdate # 滚动更新策略 rollingUpdate: # 滚动更新 maxUnavailable: 1 # 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数 selector: # 选择器，通过它指定该控制器管理哪些pod matchLabels: # Labels匹配规则 app: nginx-pod matchExpressions: # Expressions匹配规则 - {key: app, operator: In, values: [nginx-pod]} template: # 模板，当副本数量不足时，会根据下面的模板创建pod副本 metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 创建pc-daemonset.yaml，内容如下： apiVersion: apps/v1 kind: DaemonSet metadata: name: pc-daemonset namespace: dev spec: selector: matchLabels: app: nginx-pod template: metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 # 创建daemonset [root@k8s-master01 ~]# kubectl create -f pc-daemonset.yaml daemonset.apps/pc-daemonset created # 查看daemonset [root@k8s-master01 ~]# kubectl get ds -n dev -o wide NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES pc-daemonset 2 2 2 2 2 24s nginx nginx:1.17.1 # 查看pod,发现在每个Node上都运行一个pod [root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE pc-daemonset-9bck8 1/1 Running 0 37s 10.244.1.43 node1 pc-daemonset-k224w 1/1 Running 0 37s 10.244.2.74 node2 # 删除daemonset [root@k8s-master01 ~]# kubectl delete -f pc-daemonset.yaml daemonset.apps \"pc-daemonset\" deleted 6.6 Job​ Job，主要用于负责批量处理(一次要处理指定数量任务)短暂的一次性(每个任务仅运行一次就结束)任务。Job特点如下： 当Job创建的pod执行成功结束时，Job将记录成功结束的pod数量 当成功结束的pod达到指定的数量时，Job将完成执行 Job的资源清单文件： apiVersion: batch/v1 # 版本号 kind: Job # 类型 metadata: # 元数据 name: # rs名称 namespace: # 所属命名空间 labels: #标签 controller: job spec: # 详情描述 completions: 1 # 指定job需要成功运行Pods的次数。默认值: 1 parallelism: 1 # 指定job在任一时刻应该并发运行Pods的数量。默认值: 1 activeDeadlineSeconds: 30 # 指定job可运行的时间期限，超过时间还未结束，系统将会尝试进行终止。 backoffLimit: 6 # 指定job失败后进行重试的次数。默认是6 manualSelector: true # 是否可以使用selector选择器选择pod，默认是false selector: # 选择器，通过它指定该控制器管理哪些pod matchLabels: # Labels匹配规则 app: counter-pod matchExpressions: # Expressions匹配规则 - {key: app, operator: In, values: [counter-pod]} template: # 模板，当副本数量不足时，会根据下面的模板创建pod副本 metadata: labels: app: counter-pod spec: restartPolicy: Never # 重启策略只能设置为Never或者OnFailure containers: - name: counter image: busybox:1.30 command: [\"bin/sh\",\"-c\",\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 2;done\"] 关于重启策略设置的说明： 如果指定为OnFailure，则job会在pod出现故障时重启容器，而不是创建pod，failed次数不变 如果指定为Never，则job会在pod出现故障时创建新的pod，并且故障pod不会消失，也不会重启，failed次数加1 如果指定为Always的话，就意味着一直重启，意味着job任务会重复去执行了，当然不对，所以不能设置为Always 创建pc-job.yaml，内容如下： apiVersion: batch/v1 kind: Job metadata: name: pc-job namespace: dev spec: manualSelector: true selector: matchLabels: app: counter-pod template: metadata: labels: app: counter-pod spec: restartPolicy: Never containers: - name: counter image: busybox:1.30 command: [\"bin/sh\",\"-c\",\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done\"] # 创建job [root@k8s-master01 ~]# kubectl create -f pc-job.yaml job.batch/pc-job created # 查看job [root@k8s-master01 ~]# kubectl get job -n dev -o wide -w NAME COMPLETIONS DURATION AGE CONTAINERS IMAGES SELECTOR pc-job 0/1 21s 21s counter busybox:1.30 app=counter-pod pc-job 1/1 31s 79s counter busybox:1.30 app=counter-pod # 通过观察pod状态可以看到，pod在运行完毕任务后，就会变成Completed状态 [root@k8s-master01 ~]# kubectl get pods -n dev -w NAME READY STATUS RESTARTS AGE pc-job-rxg96 1/1 Running 0 29s pc-job-rxg96 0/1 Completed 0 33s # 接下来，调整下pod运行的总数量和并行数量 即：在spec下设置下面两个选项 # completions: 6 # 指定job需要成功运行Pods的次数为6 # parallelism: 3 # 指定job并发运行Pods的数量为3 # 然后重新运行job，观察效果，此时会发现，job会每次运行3个pod，总共执行了6个pod [root@k8s-master01 ~]# kubectl get pods -n dev -w NAME READY STATUS RESTARTS AGE pc-job-684ft 1/1 Running 0 5s pc-job-jhj49 1/1 Running 0 5s pc-job-pfcvh 1/1 Running 0 5s pc-job-684ft 0/1 Completed 0 11s pc-job-v7rhr 0/1 Pending 0 0s pc-job-v7rhr 0/1 Pending 0 0s pc-job-v7rhr 0/1 ContainerCreating 0 0s pc-job-jhj49 0/1 Completed 0 11s pc-job-fhwf7 0/1 Pending 0 0s pc-job-fhwf7 0/1 Pending 0 0s pc-job-pfcvh 0/1 Completed 0 11s pc-job-5vg2j 0/1 Pending 0 0s pc-job-fhwf7 0/1 ContainerCreating 0 0s pc-job-5vg2j 0/1 Pending 0 0s pc-job-5vg2j 0/1 ContainerCreating 0 0s pc-job-fhwf7 1/1 Running 0 2s pc-job-v7rhr 1/1 Running 0 2s pc-job-5vg2j 1/1 Running 0 3s pc-job-fhwf7 0/1 Completed 0 12s pc-job-v7rhr 0/1 Completed 0 12s pc-job-5vg2j 0/1 Completed 0 12s # 删除job [root@k8s-master01 ~]# kubectl delete -f pc-job.yaml job.batch \"pc-job\" deleted 6.7 CronJob(CJ)​ CronJob控制器以 Job控制器资源为其管控对象，并借助它管理pod资源对象，Job控制器定义的作业任务在其控制器资源创建之后便会立即执行，但CronJob可以以类似于Linux操作系统的周期性任务作业计划的方式控制其运行时间点及重复运行的方式。也就是说，CronJob可以在特定的时间点(反复的)去运行job任务。 CronJob的资源清单文件： apiVersion: batch/v1beta1 # 版本号 kind: CronJob # 类型 metadata: # 元数据 name: # rs名称 namespace: # 所属命名空间 labels: #标签 controller: cronjob spec: # 详情描述 schedule: # cron格式的作业调度运行时间点,用于控制任务在什么时间执行 concurrencyPolicy: # 并发执行策略，用于定义前一次作业运行尚未完成时是否以及如何运行后一次的作业 failedJobHistoryLimit: # 为失败的任务执行保留的历史记录数，默认为1 successfulJobHistoryLimit: # 为成功的任务执行保留的历史记录数，默认为3 startingDeadlineSeconds: # 启动作业错误的超时时长 jobTemplate: # job控制器模板，用于为cronjob控制器生成job对象;下面其实就是job的定义 metadata: spec: completions: 1 parallelism: 1 activeDeadlineSeconds: 30 backoffLimit: 6 manualSelector: true selector: matchLabels: app: counter-pod matchExpressions: 规则 - {key: app, operator: In, values: [counter-pod]} template: metadata: labels: app: counter-pod spec: restartPolicy: Never containers: - name: counter image: busybox:1.30 command: [\"bin/sh\",\"-c\",\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 20;done\"] 需要重点解释的几个选项： schedule: cron表达式，用于指定任务的执行时间 */1 * * * * <分钟 <小时 <日 <月份 <星期 分钟 值从 0 到 59. 小时 值从 0 到 23. 日 值从 1 到 31. 月 值从 1 到 12. 星期 值从 0 到 6, 0 代表星期日 多个时间可以用逗号隔开； 范围可以用连字符给出；*可以作为通配符； /表示每... concurrencyPolicy: Allow: 允许Jobs并发运行(默认) Forbid: 禁止并发运行，如果上一次运行尚未完成，则跳过下一次运行 Replace: 替换，取消当前正在运行的作业并用新作业替换它 创建pc-cronjob.yaml，内容如下： apiVersion: batch/v1beta1 kind: CronJob metadata: name: pc-cronjob namespace: dev labels: controller: cronjob spec: schedule: \"*/1 * * * *\" jobTemplate: metadata: spec: template: spec: restartPolicy: Never containers: - name: counter image: busybox:1.30 command: [\"bin/sh\",\"-c\",\"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done\"] # 创建cronjob [root@k8s-master01 ~]# kubectl create -f pc-cronjob.yaml cronjob.batch/pc-cronjob created # 查看cronjob [root@k8s-master01 ~]# kubectl get cronjobs -n dev NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE pc-cronjob */1 * * * * False 0 <none 6s # 查看job [root@k8s-master01 ~]# kubectl get jobs -n dev NAME COMPLETIONS DURATION AGE pc-cronjob-1592587800 1/1 28s 3m26s pc-cronjob-1592587860 1/1 28s 2m26s pc-cronjob-1592587920 1/1 28s 86s # 查看pod [root@k8s-master01 ~]# kubectl get pods -n dev pc-cronjob-1592587800-x4tsm 0/1 Completed 0 2m24s pc-cronjob-1592587860-r5gv4 0/1 Completed 0 84s pc-cronjob-1592587920-9dxxq 1/1 Running 0 24s # 删除cronjob [root@k8s-master01 ~]# kubectl delete -f pc-cronjob.yaml cronjob.batch \"pc-cronjob\" deleted 7. Service详解​ 7.1 Service介绍​ 在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味着不方便直接采用pod的ip对服务进行访问。 为了解决这个问题，kubernetes提供了Service资源，Service会对提供同一个服务的多个pod进行聚合，并且提供一个统一的入口地址。通过访问Service的入口地址就能访问到后面的pod服务。 Service在很多情况下只是一个概念，真正起作用的其实是kube-proxy服务进程，每个Node节点上都运行着一个kube-proxy服务进程。当创建Service的时候会通过api-server向etcd写入创建的service的信息，而kube-proxy会基于监听的机制发现这种Service的变动，然后它会将最新的Service信息转换成对应的访问规则。 # 10.97.97.97:80 是service提供的访问入口 # 当访问这个入口的时候，可以发现后面有三个pod的服务在等待调用， # kube-proxy会基于rr（轮询）的策略，将请求分发到其中一个pod上去 # 这个规则会同时在集群内的所有节点上都生成，所以在任何一个节点上访问都可以。 [root@node1 ~]# ipvsadm -Ln IP Virtual Server version 1.2.1 (size=4096) Prot LocalAddress:Port Scheduler Flags - RemoteAddress:Port Forward Weight ActiveConn InActConn TCP 10.97.97.97:80 rr - 10.244.1.39:80 Masq 1 0 0 - 10.244.1.40:80 Masq 1 0 0 - 10.244.2.33:80 Masq 1 0 0 kube-proxy目前支持三种工作模式: 7.1.1 userspace 模式​ userspace模式下，kube-proxy会为每一个Service创建一个监听端口，发向Cluster IP的请求被Iptables规则重定向到kube-proxy监听的端口上，kube-proxy根据LB算法选择一个提供服务的Pod并和其建立链接，以将请求转发到Pod上。 该模式下，kube-proxy充当了一个四层负责均衡器的角色。由于kube-proxy运行在userspace中，在进行转发处理时会增加内核和用户空间之间的数据拷贝，虽然比较稳定，但是效率比较低。 7.1.2 iptables 模式​ iptables模式下，kube-proxy为service后端的每个Pod创建对应的iptables规则，直接将发向Cluster IP的请求重定向到一个Pod IP。 该模式下kube-proxy不承担四层负责均衡器的角色，只负责创建iptables规则。该模式的优点是较userspace模式效率更高，但不能提供灵活的LB策略，当后端Pod不可用时也无法进行重试。 7.1.3 ipvs 模式​ ipvs模式和iptables类似，kube-proxy监控Pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高。除此以外，ipvs支持更多的LB算法。 # 此模式必须安装ipvs内核模块，否则会降级为iptables # 开启ipvs [root@k8s-master01 ~]# kubectl edit cm kube-proxy -n kube-system # 修改mode: \"ipvs\" [root@k8s-master01 ~]# kubectl delete pod -l k8s-app=kube-proxy -n kube-system [root@node1 ~]# ipvsadm -Ln IP Virtual Server version 1.2.1 (size=4096) Prot LocalAddress:Port Scheduler Flags - RemoteAddress:Port Forward Weight ActiveConn InActConn TCP 10.97.97.97:80 rr - 10.244.1.39:80 Masq 1 0 0 - 10.244.1.40:80 Masq 1 0 0 - 10.244.2.33:80 Masq 1 0 0 7.2 Service类型​ Service的资源清单文件： kind: Service # 资源类型 apiVersion: v1 # 资源版本 metadata: # 元数据 name: service # 资源名称 namespace: dev # 命名空间 spec: # 描述 selector: # 标签选择器，用于确定当前service代理哪些pod app: nginx type: # Service类型，指定service的访问方式 clusterIP: # 虚拟服务的ip地址 sessionAffinity: # session亲和性，支持ClientIP、None两个选项 ports: # 端口信息 - protocol: TCP port: 3017 # service端口 targetPort: 5003 # pod端口 nodePort: 31122 # 主机端口 ClusterIP：默认值，它是Kubernetes系统自动分配的虚拟IP，只能在集群内部访问 NodePort：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务 LoadBalancer：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境支持 ExternalName： 把集群外部的服务引入集群内部，直接使用 7.3 Service使用​ 7.3.1 实验环境准备​ 在使用service之前，首先利用Deployment创建出3个pod，注意要为pod设置app=nginx-pod的标签 创建deployment.yaml，内容如下： apiVersion: apps/v1 kind: Deployment metadata: name: pc-deployment namespace: dev spec: replicas: 3 selector: matchLabels: app: nginx-pod template: metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 [root@k8s-master01 ~]# kubectl create -f deployment.yaml deployment.apps/pc-deployment created # 查看pod详情 [root@k8s-master01 ~]# kubectl get pods -n dev -o wide --show-labels NAME READY STATUS IP NODE LABELS pc-deployment-66cb59b984-8p84h 1/1 Running 10.244.1.39 node1 app=nginx-pod pc-deployment-66cb59b984-vx8vx 1/1 Running 10.244.2.33 node2 app=nginx-pod pc-deployment-66cb59b984-wnncx 1/1 Running 10.244.1.40 node1 app=nginx-pod # 为了方便后面的测试，修改下三台nginx的index.html页面（三台修改的IP地址不一致） # kubectl exec -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh # echo \"10.244.1.39\" /usr/share/nginx/html/index.html #修改完毕之后，访问测试 [root@k8s-master01 ~]# curl 10.244.1.39 10.244.1.39 [root@k8s-master01 ~]# curl 10.244.2.33 10.244.2.33 [root@k8s-master01 ~]# curl 10.244.1.40 10.244.1.40 7.3.2 ClusterIP类型的Service​ 创建service-clusterip.yaml文件 apiVersion: v1 kind: Service metadata: name: service-clusterip namespace: dev spec: selector: app: nginx-pod clusterIP: 10.97.97.97 # service的ip地址，如果不写，默认会生成一个 type: ClusterIP ports: - port: 80 # Service端口 targetPort: 80 # pod端口 # 创建service [root@k8s-master01 ~]# kubectl create -f service-clusterip.yaml service/service-clusterip created # 查看service [root@k8s-master01 ~]# kubectl get svc -n dev -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service-clusterip ClusterIP 10.97.97.97 <none 80/TCP 13s app=nginx-pod # 查看service的详细信息 # 在这里有一个Endpoints列表，里面就是当前service可以负载到的服务入口 [root@k8s-master01 ~]# kubectl describe svc service-clusterip -n dev Name: service-clusterip Namespace: dev Labels: <none Annotations: <none Selector: app=nginx-pod Type: ClusterIP IP: 10.97.97.97 Port: <unset 80/TCP TargetPort: 80/TCP Endpoints: 10.244.1.39:80,10.244.1.40:80,10.244.2.33:80 Session Affinity: None Events: <none # 查看ipvs的映射规则 [root@k8s-master01 ~]# ipvsadm -Ln TCP 10.97.97.97:80 rr - 10.244.1.39:80 Masq 1 0 0 - 10.244.1.40:80 Masq 1 0 0 - 10.244.2.33:80 Masq 1 0 0 # 访问10.97.97.97:80观察效果 [root@k8s-master01 ~]# curl 10.97.97.97:80 10.244.2.33 7.3.3 Endpoint​ Endpoint是kubernetes中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址，它是根据service配置文件中selector描述产生的。 一个Service由一组Pod组成，这些Pod通过Endpoints暴露出来，Endpoints是实现实际服务的端点集合。换句话说，service和pod之间的联系是通过endpoints实现的。 负载分发策略 对Service的访问被分发到了后端的Pod上去，目前kubernetes提供了两种负载分发策略： 如果不定义，默认使用kube-proxy的策略，比如随机、轮询 基于客户端地址的会话保持模式，即来自同一个客户端发起的所有请求都会转发到固定的一个Pod上 此模式可以使在spec中添加sessionAffinity:ClientIP选项 # 查看ipvs的映射规则【rr 轮询】 [root@k8s-master01 ~]# ipvsadm -Ln TCP 10.97.97.97:80 rr - 10.244.1.39:80 Masq 1 0 0 - 10.244.1.40:80 Masq 1 0 0 - 10.244.2.33:80 Masq 1 0 0 # 循环访问测试 [root@k8s-master01 ~]# while true;do curl 10.97.97.97:80; sleep 5; done; 10.244.1.40 10.244.1.39 10.244.2.33 10.244.1.40 10.244.1.39 10.244.2.33 # 修改分发策略----sessionAffinity:ClientIP # 查看ipvs规则【persistent 代表持久】 [root@k8s-master01 ~]# ipvsadm -Ln TCP 10.97.97.97:80 rr persistent 10800 - 10.244.1.39:80 Masq 1 0 0 - 10.244.1.40:80 Masq 1 0 0 - 10.244.2.33:80 Masq 1 0 0 # 循环访问测试 [root@k8s-master01 ~]# while true;do curl 10.97.97.97; sleep 5; done; 10.244.2.33 10.244.2.33 10.244.2.33 # 删除service [root@k8s-master01 ~]# kubectl delete -f service-clusterip.yaml service \"service-clusterip\" deleted 7.3.4 HeadLiness类型的Service​ 在某些场景中，开发人员可能不想使用Service提供的负载均衡功能，而希望自己来控制负载均衡策略，针对这种情况，kubernetes提供了HeadLiness Service，这类Service不会分配Cluster IP，如果想要访问service，只能通过service的域名进行查询。 创建service-headliness.yaml apiVersion: v1 kind: Service metadata: name: service-headliness namespace: dev spec: selector: app: nginx-pod clusterIP: None # 将clusterIP设置为None，即可创建headliness Service type: ClusterIP ports: - port: 80 targetPort: 80 # 创建service [root@k8s-master01 ~]# kubectl create -f service-headliness.yaml service/service-headliness created # 获取service， 发现CLUSTER-IP未分配 [root@k8s-master01 ~]# kubectl get svc service-headliness -n dev -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service-headliness ClusterIP None <none 80/TCP 11s app=nginx-pod # 查看service详情 [root@k8s-master01 ~]# kubectl describe svc service-headliness -n dev Name: service-headliness Namespace: dev Labels: <none Annotations: <none Selector: app=nginx-pod Type: ClusterIP IP: None Port: <unset 80/TCP TargetPort: 80/TCP Endpoints: 10.244.1.39:80,10.244.1.40:80,10.244.2.33:80 Session Affinity: None Events: <none # 查看域名的解析情况 [root@k8s-master01 ~]# kubectl exec -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh / # cat /etc/resolv.conf nameserver 10.96.0.10 search dev.svc.cluster.local svc.cluster.local cluster.local [root@k8s-master01 ~]# dig @10.96.0.10 service-headliness.dev.svc.cluster.local service-headliness.dev.svc.cluster.local. 30 IN A 10.244.1.40 service-headliness.dev.svc.cluster.local. 30 IN A 10.244.1.39 service-headliness.dev.svc.cluster.local. 30 IN A 10.244.2.33 7.3.5 NodePort类型的Service​ 在之前的样例中，创建的Service的ip地址只有集群内部才可以访问，如果希望将Service暴露给集群外部使用，那么就要使用到另外一种类型的Service，称为NodePort类型。NodePort的工作原理其实就是将service的端口映射到Node的一个端口上，然后就可以通过NodeIp:NodePort来访问service了。 创建service-nodeport.yaml apiVersion: v1 kind: Service metadata: name: service-nodeport namespace: dev spec: selector: app: nginx-pod type: NodePort # service类型 ports: - port: 80 nodePort: 30002 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配 targetPort: 80 # 创建service [root@k8s-master01 ~]# kubectl create -f service-nodeport.yaml service/service-nodeport created # 查看service [root@k8s-master01 ~]# kubectl get svc -n dev -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) SELECTOR service-nodeport NodePort 10.105.64.191 <none 80:30002/TCP app=nginx-pod # 接下来可以通过电脑主机的浏览器去访问集群中任意一个nodeip的30002端口，即可访问到pod 7.3.6 LoadBalancer类型的Service​ LoadBalancer和NodePort很相似，目的都是向外部暴露一个端口，区别在于LoadBalancer会在集群的外部再来做一个负载均衡设备，而这个设备需要外部环境支持的，外部服务发送到这个设备上的请求，会被设备负载之后转发到集群中。 7.3.7 ExternalName类型的Service​ ExternalName类型的Service用于引入集群外部的服务，它通过externalName属性指定外部一个服务的地址，然后在集群内部访问此service就可以访问到外部的服务了。 apiVersion: v1 kind: Service metadata: name: service-externalname namespace: dev spec: type: ExternalName # service类型 externalName: www.baidu.com #改成ip地址也可以 # 创建service [root@k8s-master01 ~]# kubectl create -f service-externalname.yaml service/service-externalname created # 域名解析 [root@k8s-master01 ~]# dig @10.96.0.10 service-externalname.dev.svc.cluster.local service-externalname.dev.svc.cluster.local. 30 IN CNAME www.baidu.com. www.baidu.com. 30 IN CNAME www.a.shifen.com. www.a.shifen.com. 30 IN A 39.156.66.18 www.a.shifen.com. 30 IN A 39.156.66.14 7.4 Ingress介绍​ 在前面课程中已经提到，Service对集群之外暴露服务的主要方式有两种：NotePort和LoadBalancer，但是这两种方式，都有一定的缺点： NodePort方式的缺点是会占用很多集群机器的端口，那么当集群服务变多的时候，这个缺点就愈发明显 LB方式的缺点是每个service需要一个LB，浪费、麻烦，并且需要kubernetes之外设备的支持 基于这种现状，kubernetes提供了Ingress资源对象，Ingress只需要一个NodePort或者一个LB就可以满足暴露多个Service的需求。工作机制大致如下图表示： 实际上，Ingress相当于一个7层的负载均衡器，是kubernetes对反向代理的一个抽象，它的工作原理类似于Nginx，可以理解成在Ingress里建立诸多映射规则，Ingress Controller通过监听这些配置规则并转化成Nginx的反向代理配置 , 然后对外部提供服务。在这里有两个核心概念： ingress：kubernetes中的一个对象，作用是定义请求如何转发到service的规则 ingress controller：具体实现反向代理及负载均衡的程序，对ingress定义的规则进行解析，根据配置的规则来实现请求转发，实现方式有很多，比如Nginx, Contour, Haproxy等等 Ingress（以Nginx为例）的工作原理如下： 用户编写Ingress规则，说明哪个域名对应kubernetes集群中的哪个Service Ingress控制器动态感知Ingress服务规则的变化，然后生成一段对应的Nginx反向代理配置 Ingress控制器会将生成的Nginx配置写入到一个运行着的Nginx服务中，并动态更新 到此为止，其实真正在工作的就是一个Nginx了，内部配置了用户定义的请求转发规则 7.5 Ingress使用​ 7.5.1 环境准备 搭建ingress环境​ # 创建文件夹 [root@k8s-master01 ~]# mkdir ingress-controller [root@k8s-master01 ~]# cd ingress-controller/ # 获取ingress-nginx，本次案例使用的是0.30版本 [root@k8s-master01 ingress-controller]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml [root@k8s-master01 ingress-controller]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml # 修改mandatory.yaml文件中的仓库 # 修改quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0 # 为quay-mirror.qiniu.com/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0 # 创建ingress-nginx [root@k8s-master01 ingress-controller]# kubectl apply -f ./ # 查看ingress-nginx [root@k8s-master01 ingress-controller]# kubectl get pod -n ingress-nginx NAME READY STATUS RESTARTS AGE pod/nginx-ingress-controller-fbf967dd5-4qpbp 1/1 Running 0 12h # 查看service [root@k8s-master01 ingress-controller]# kubectl get svc -n ingress-nginx NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE ingress-nginx NodePort 10.98.75.163 <none 80:32240/TCP,443:31335/TCP 11h 7.5.2 准备service和pod​ 为了后面的实验比较方便，创建如下图所示的模型 创建tomcat-nginx.yaml apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment namespace: dev spec: replicas: 3 selector: matchLabels: app: nginx-pod template: metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 --- apiVersion: apps/v1 kind: Deployment metadata: name: tomcat-deployment namespace: dev spec: replicas: 3 selector: matchLabels: app: tomcat-pod template: metadata: labels: app: tomcat-pod spec: containers: - name: tomcat image: tomcat:8.5-jre10-slim ports: - containerPort: 8080 --- apiVersion: v1 kind: Service metadata: name: nginx-service namespace: dev spec: selector: app: nginx-pod clusterIP: None type: ClusterIP ports: port: 80 targetPort: 80 apiVersion: v1 kind: Service metadata: name: tomcat-service namespace: dev spec: selector: app: tomcat-pod clusterIP: None type: ClusterIP ports: port: 8080 targetPort: 8080 创建 [root@k8s-master01 ~]# kubectl create -f tomcat-nginx.yaml 查看 [root@k8s-master01 ~]# kubectl get svc -n dev NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nginx-service ClusterIP None <none 80/TCP 48s tomcat-service ClusterIP None <none 8080/TCP 48s ##### 7.5.3 Http代理 创建ingress-http.yaml apiVersion: extensions/v1beta1 kind: Ingress metadata: name: ingress-http namespace: dev spec: rules: host: nginx.itheima.com http: paths: path: / backend: serviceName: nginx-service servicePort: 80 host: tomcat.itheima.com http: paths: - path: / backend: serviceName: tomcat-service servicePort: 8080 创建 [root@k8s-master01 ~]# kubectl create -f ingress-http.yaml ingress.extensions/ingress-http created 查看 [root@k8s-master01 ~]# kubectl get ing ingress-http -n dev NAME HOSTS ADDRESS PORTS AGE ingress-http nginx.itheima.com,tomcat.itheima.com 80 22s 查看详情 [root@k8s-master01 ~]# kubectl describe ing ingress-http -n dev ... Rules: Host Path Backends nginx.itheima.com / nginx-service:80 (10.244.1.96:80,10.244.1.97:80,10.244.2.112:80) tomcat.itheima.com / tomcat-service:8080(10.244.1.94:8080,10.244.1.95:8080,10.244.2.111:8080) ... 接下来,在本地电脑上配置host文件,解析上面的两个域名到192.168.109.100(master)上 然后,就可以分别访问tomcat.itheima.com:32240 和 nginx.itheima.com:32240 查看效果了 ##### 7.5.4 Https代理 创建证书 生成证书 openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \"/C=CN/ST=BJ/L=BJ/O=nginx/CN=itheima.com\" 创建密钥 kubectl create secret tls tls-secret --key tls.key --cert tls.crt 创建ingress-https.yaml apiVersion: extensions/v1beta1 kind: Ingress metadata: name: ingress-https namespace: dev spec: tls: - hosts: - nginx.itheima.com - tomcat.itheima.com secretName: tls-secret # 指定秘钥 rules: host: nginx.itheima.com http: paths: path: / backend: serviceName: nginx-service servicePort: 80 host: tomcat.itheima.com http: paths: - path: / backend: serviceName: tomcat-service servicePort: 8080 创建 [root@k8s-master01 ~]# kubectl create -f ingress-https.yaml ingress.extensions/ingress-https created 查看 [root@k8s-master01 ~]# kubectl get ing ingress-https -n dev NAME HOSTS ADDRESS PORTS AGE ingress-https nginx.itheima.com,tomcat.itheima.com 10.104.184.38 80, 443 2m42s 查看详情 [root@k8s-master01 ~]# kubectl describe ing ingress-https -n dev ... TLS: tls-secret terminates nginx.itheima.com,tomcat.itheima.com Rules: Host Path Backends nginx.itheima.com / nginx-service:80 (10.244.1.97:80,10.244.1.98:80,10.244.2.119:80) tomcat.itheima.com / tomcat-service:8080(10.244.1.99:8080,10.244.2.117:8080,10.244.2.120:8080) ... 下面可以通过浏览器访问https://nginx.itheima.com:31335 和 https://tomcat.itheima.com:31335来查看了 ### 8. 数据存储 在前面已经提到，容器的生命周期可能很短，会被频繁地创建和销毁。那么容器在销毁时，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器的数据，kubernetes引入了Volume的概念。 Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命容器不与Pod中单个容器的生命周期相关，当容器终止或者重启时，Volume中的数据也不会丢失。 kubernetes的Volume支持多种类型，比较常见的有下面几个： 简单存储：EmptyDir、HostPath、NFS 高级存储：PV、PVC 配置存储：ConfigMap、Secret 8.1 基本存储​ 8.1.1 EmptyDir​ EmptyDir是最基础的Volume类型，一个EmptyDir就是Host上的一个空目录。 EmptyDir是在Pod被分配到Node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当Pod销毁时， EmptyDir中的数据也会被永久删除。 EmptyDir用途如下： 临时空间，例如用于某些应用程序运行时所需的临时目录，且无须永久保留 一个容器需要从另一个容器中获取数据的目录（多容器共享目录） 接下来，通过一个容器之间文件共享的案例来使用一下EmptyDir。 在一个Pod中准备两个容器nginx和busybox，然后声明一个Volume分别挂在到两个容器的目录中，然后nginx容器负责向Volume中写日志，busybox中通过命令将日志内容读到控制台。 创建一个volume-emptydir.yaml apiVersion: v1 kind: Pod metadata: name: volume-emptydir namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 volumeMounts: # 将logs-volume挂在到nginx容器中，对应的目录为 /var/log/nginx - name: logs-volume mountPath: /var/log/nginx - name: busybox image: busybox:1.30 command: [\"/bin/sh\",\"-c\",\"tail -f /logs/access.log\"] # 初始命令，动态读取指定文件中内容 volumeMounts: # 将logs-volume 挂在到busybox容器中，对应的目录为 /logs - name: logs-volume mountPath: /logs volumes: # 声明volume， name为logs-volume，类型为emptyDir - name: logs-volume emptyDir: {} # 创建Pod [root@k8s-master01 ~]# kubectl create -f volume-emptydir.yaml pod/volume-emptydir created # 查看pod [root@k8s-master01 ~]# kubectl get pods volume-emptydir -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... volume-emptydir 2/2 Running 0 97s 10.42.2.9 node1 ...... # 通过podIp访问nginx [root@k8s-master01 ~]# curl 10.42.2.9 ...... # 通过kubectl logs命令查看指定容器的标准输出 [root@k8s-master01 ~]# kubectl logs -f volume-emptydir -n dev -c busybox 10.42.1.0 - - [27/Jun/2021:15:08:54 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.29.0\" \"-\" 8.1.2 HostPath​ 上节课提到，EmptyDir中数据不会被持久化，它会随着Pod的结束而销毁，如果想简单的将数据持久化到主机中，可以选择HostPath。 HostPath就是将Node主机中一个实际目录挂在到Pod中，以供容器使用，这样的设计就可以保证Pod销毁了，但是数据依据可以存在于Node主机上。 创建一个volume-hostpath.yaml： apiVersion: v1 kind: Pod metadata: name: volume-hostpath namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 volumeMounts: - name: logs-volume mountPath: /var/log/nginx - name: busybox image: busybox:1.30 command: [\"/bin/sh\",\"-c\",\"tail -f /logs/access.log\"] volumeMounts: - name: logs-volume mountPath: /logs volumes: - name: logs-volume hostPath: path: /root/logs type: DirectoryOrCreate # 目录存在就使用，不存在就先创建后使用 关于type的值的一点说明： DirectoryOrCreate 目录存在就使用，不存在就先创建后使用 Directory 目录必须存在 FileOrCreate 文件存在就使用，不存在就先创建后使用 File 文件必须存在 Socket unix套接字必须存在 CharDevice 字符设备必须存在 BlockDevice 块设备必须存在 # 创建Pod [root@k8s-master01 ~]# kubectl create -f volume-hostpath.yaml pod/volume-hostpath created # 查看Pod [root@k8s-master01 ~]# kubectl get pods volume-hostpath -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-volume-hostpath 2/2 Running 0 16s 10.42.2.10 node1 ...... #访问nginx [root@k8s-master01 ~]# curl 10.42.2.10 [root@k8s-master01 ~]# kubectl logs -f volume-emptydir -n dev -c busybox # 接下来就可以去host的/root/logs目录下查看存储的文件了 ### 注意: 下面的操作需要到Pod所在的节点运行（案例中是node1） [root@node1 ~]# ls /root/logs/ access.log error.log # 同样的道理，如果在此目录下创建一个文件，到容器中也是可以看到的 8.1.3 NFS​ HostPath可以解决数据持久化的问题，但是一旦Node节点故障了，Pod如果转移到了别的节点，又会出现问题了，此时需要准备单独的网络存储系统，比较常用的用NFS、CIFS。 NFS是一个网络文件存储系统，可以搭建一台NFS服务器，然后将Pod中的存储直接连接到NFS系统上，这样的话，无论Pod在节点上怎么转移，只要Node跟NFS的对接没问题，数据就可以成功访问。 1）首先要准备nfs的服务器，这里为了简单，直接是master节点做nfs服务器 # 在nfs上安装nfs服务 [root@nfs ~]# yum install nfs-utils -y # 准备一个共享目录 [root@nfs ~]# mkdir /root/data/nfs -pv # 将共享目录以读写权限暴露给192.168.5.0/24网段中的所有主机 [root@nfs ~]# vim /etc/exports [root@nfs ~]# more /etc/exports /root/data/nfs 192.168.5.0/24(rw,no_root_squash) # 启动nfs服务 [root@nfs ~]# systemctl restart nfs 2）接下来，要在的每个node节点上都安装下nfs，这样的目的是为了node节点可以驱动nfs设备 # 在node上安装nfs服务，注意不需要启动 [root@k8s-master01 ~]# yum install nfs-utils -y 3）接下来，就可以编写pod的配置文件了，创建volume-nfs.yaml apiVersion: v1 kind: Pod metadata: name: volume-nfs namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 ports: - containerPort: 80 volumeMounts: - name: logs-volume mountPath: /var/log/nginx - name: busybox image: busybox:1.30 command: [\"/bin/sh\",\"-c\",\"tail -f /logs/access.log\"] volumeMounts: - name: logs-volume mountPath: /logs volumes: - name: logs-volume nfs: server: 192.168.5.6 #nfs服务器地址 path: /root/data/nfs #共享文件路径 4）最后，运行下pod，观察结果 # 创建pod [root@k8s-master01 ~]# kubectl create -f volume-nfs.yaml pod/volume-nfs created # 查看pod [root@k8s-master01 ~]# kubectl get pods volume-nfs -n dev NAME READY STATUS RESTARTS AGE volume-nfs 2/2 Running 0 2m9s # 查看nfs服务器上的共享目录，发现已经有文件了 [root@k8s-master01 ~]# ls /root/data/ access.log error.log 8.2 高级存储​ 前面已经学习了使用NFS提供存储，此时就要求用户会搭建NFS系统，并且会在yaml配置nfs。由于kubernetes支持的存储系统有很多，要求客户全都掌握，显然不现实。为了能够屏蔽底层存储实现的细节，方便用户使用， kubernetes引入PV和PVC两种资源对象。 PV（Persistent Volume）是持久化卷的意思，是对底层的共享存储的一种抽象。一般情况下PV由kubernetes管理员进行创建和配置，它与底层具体的共享存储技术有关，并通过插件完成与共享存储的对接。 PVC（Persistent Volume Claim）是持久卷声明的意思，是用户对于存储需求的一种声明。换句话说，PVC其实就是用户向kubernetes系统发出的一种资源需求申请。 使用了PV和PVC之后，工作可以得到进一步的细分： 存储：存储工程师维护 PV： kubernetes管理员维护 PVC：kubernetes用户维护 8.2.1 PV​ PV是存储资源的抽象，下面是资源清单文件: apiVersion: v1 kind: PersistentVolume metadata: name: pv2 spec: nfs: # 存储类型，与底层真正存储对应 capacity: # 存储能力，目前只支持存储空间的设置 storage: 2Gi accessModes: # 访问模式 storageClassName: # 存储类别 persistentVolumeReclaimPolicy: # 回收策略 PV 的关键配置参数说明： 存储类型 底层实际存储的类型，kubernetes支持多种存储类型，每种存储类型的配置都有所差异 存储能力（capacity） 目前只支持存储空间的设置( storage=1Gi )，不过未来可能会加入IOPS、吞吐量等指标的配置 访问模式（accessModes） 用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式： ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载 ReadOnlyMany（ROX）： 只读权限，可以被多个节点挂载 ReadWriteMany（RWX）：读写权限，可以被多个节点挂载 需要注意的是，底层不同的存储类型可能支持的访问模式不同 回收策略（persistentVolumeReclaimPolicy） 当PV不再被使用了之后，对其的处理方式。目前支持三种策略： Retain （保留） 保留数据，需要管理员手工清理数据 Recycle（回收） 清除 PV 中的数据，效果相当于执行 rm -rf /thevolume/* Delete （删除） 与 PV 相连的后端存储完成 volume 的删除操作，当然这常见于云服务商的存储服务 需要注意的是，底层不同的存储类型可能支持的回收策略不同 存储类别 PV可以通过storageClassName参数指定一个存储类别 具有特定类别的PV只能与请求了该类别的PVC进行绑定 未设定类别的PV则只能与不请求任何类别的PVC进行绑定 状态（status） 一个 PV 的生命周期中，可能会处于4中不同的阶段： Available（可用）： 表示可用状态，还未被任何 PVC 绑定 Bound（已绑定）： 表示 PV 已经被 PVC 绑定 Released（已释放）： 表示 PVC 被删除，但是资源还未被集群重新声明 Failed（失败）： 表示该 PV 的自动回收失败 实验 使用NFS作为存储，来演示PV的使用，创建3个PV，对应NFS中的3个暴露的路径。 准备NFS环境 # 创建目录 [root@nfs ~]# mkdir /root/data/{pv1,pv2,pv3} -pv # 暴露服务 [root@nfs ~]# more /etc/exports /root/data/pv1 192.168.5.0/24(rw,no_root_squash) /root/data/pv2 192.168.5.0/24(rw,no_root_squash) /root/data/pv3 192.168.5.0/24(rw,no_root_squash) # 重启服务 [root@nfs ~]# systemctl restart nfs 创建pv.yaml apiVersion: v1 kind: PersistentVolume metadata: name: pv1 spec: capacity: storage: 1Gi accessModes: ReadWriteMany persistentVolumeReclaimPolicy: Retain nfs: path: /root/data/pv1 server: 192.168.5.6 apiVersion: v1 kind: PersistentVolume metadata: name: pv2 spec: capacity: storage: 2Gi accessModes: ReadWriteMany persistentVolumeReclaimPolicy: Retain nfs: path: /root/data/pv2 server: 192.168.5.6 apiVersion: v1 kind: PersistentVolume metadata: name: pv3 spec: capacity: storage: 3Gi accessModes: ReadWriteMany persistentVolumeReclaimPolicy: Retain nfs: path: /root/data/pv3 server: 192.168.5.6 创建 pv [root@k8s-master01 ~]# kubectl create -f pv.yaml persistentvolume/pv1 created persistentvolume/pv2 created persistentvolume/pv3 created 查看pv [root@k8s-master01 ~]# kubectl get pv -o wide NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS AGE VOLUMEMODE pv1 1Gi RWX Retain Available 10s Filesystem pv2 2Gi RWX Retain Available 10s Filesystem pv3 3Gi RWX Retain Available 9s Filesystem ##### 8.2.2 PVC PVC是资源的申请，用来声明对存储空间、访问模式、存储类别需求信息。下面是资源清单文件: apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc namespace: dev spec: accessModes: # 访问模式 selector: # 采用标签对PV选择 storageClassName: # 存储类别 resources: # 请求空间 requests: storage: 5Gi PVC 的关键配置参数说明： 访问模式（accessModes） 用于描述用户应用对存储资源的访问权限 选择条件（selector） 通过Label Selector的设置，可使PVC对于系统中己存在的PV进行筛选 存储类别（storageClassName） PVC在定义时可以设定需要的后端存储的类别，只有设置了该class的pv才能被系统选出 资源请求（Resources ） 描述对存储资源的请求 实验 创建pvc.yaml，申请pv apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc1 namespace: dev spec: accessModes: ReadWriteMany resources: requests: storage: 1Gi apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc2 namespace: dev spec: accessModes: ReadWriteMany resources: requests: storage: 1Gi apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc3 namespace: dev spec: accessModes: ReadWriteMany resources: requests: storage: 1Gi 创建pvc [root@k8s-master01 ~]# kubectl create -f pvc.yaml persistentvolumeclaim/pvc1 created persistentvolumeclaim/pvc2 created persistentvolumeclaim/pvc3 created 查看pvc [root@k8s-master01 ~]# kubectl get pvc -n dev -o wide NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE pvc1 Bound pv1 1Gi RWX 15s Filesystem pvc2 Bound pv2 2Gi RWX 15s Filesystem pvc3 Bound pv3 3Gi RWX 15s Filesystem 查看pv [root@k8s-master01 ~]# kubectl get pv -o wide NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM AGE VOLUMEMODE pv1 1Gi RWx Retain Bound dev/pvc1 3h37m Filesystem pv2 2Gi RWX Retain Bound dev/pvc2 3h37m Filesystem pv3 3Gi RWX Retain Bound dev/pvc3 3h37m Filesystem 创建pods.yaml, 使用pv apiVersion: v1 kind: Pod metadata: name: pod1 namespace: dev spec: containers: name: busybox image: busybox:1.30 command: [\"/bin/sh\",\"-c\",\"while true;do echo pod1 /root/out.txt; sleep 10; done;\"] volumeMounts: - name: volume mountPath: /root/ volumes: - name: volume persistentVolumeClaim: claimName: pvc1 readOnly: false apiVersion: v1 kind: Pod metadata: name: pod2 namespace: dev spec: containers: name: busybox image: busybox:1.30 command: [\"/bin/sh\",\"-c\",\"while true;do echo pod2 /root/out.txt; sleep 10; done;\"] volumeMounts: - name: volume mountPath: /root/ volumes: - name: volume persistentVolumeClaim: claimName: pvc2 readOnly: false 创建pod [root@k8s-master01 ~]# kubectl create -f pods.yaml pod/pod1 created pod/pod2 created 查看pod [root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE pod1 1/1 Running 0 14s 10.244.1.69 node1 pod2 1/1 Running 0 14s 10.244.1.70 node1 查看pvc [root@k8s-master01 ~]# kubectl get pvc -n dev -o wide NAME STATUS VOLUME CAPACITY ACCESS MODES AGE VOLUMEMODE pvc1 Bound pv1 1Gi RWX 94m Filesystem pvc2 Bound pv2 2Gi RWX 94m Filesystem pvc3 Bound pv3 3Gi RWX 94m Filesystem 查看pv [root@k8s-master01 ~]# kubectl get pv -n dev -o wide NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM AGE VOLUMEMODE pv1 1Gi RWX Retain Bound dev/pvc1 5h11m Filesystem pv2 2Gi RWX Retain Bound dev/pvc2 5h11m Filesystem pv3 3Gi RWX Retain Bound dev/pvc3 5h11m Filesystem 查看nfs中的文件存储 [root@nfs ~]# more /root/data/pv1/out.txt node1 node1 [root@nfs ~]# more /root/data/pv2/out.txt node2 node2 ##### 8.2.3 生命周期 PVC和PV是一一对应的，PV和PVC之间的相互作用遵循以下生命周期： 资源供应：管理员手动创建底层存储和PV 资源绑定：用户创建PVC，kubernetes负责根据PVC的声明去寻找PV，并绑定 在用户定义好PVC之后，系统将根据PVC对存储资源的请求在已存在的PV中选择一个满足条件的 一旦找到，就将该PV与用户定义的PVC进行绑定，用户的应用就可以使用这个PVC了 如果找不到，PVC则会无限期处于Pending状态，直到等到系统管理员创建了一个符合其要求的PV PV一旦绑定到某个PVC上，就会被这个PVC独占，不能再与其他PVC进行绑定了 资源使用：用户可在pod中像volume一样使用pvc Pod使用Volume的定义，将PVC挂载到容器内的某个路径进行使用。 资源释放：用户删除pvc来释放pv 当存储资源使用完毕后，用户可以删除PVC，与该PVC绑定的PV将会被标记为“已释放”，但还不能立刻与其他PVC进行绑定。通过之前PVC写入的数据可能还被留在存储设备上，只有在清除之后该PV才能再次使用。 资源回收：kubernetes根据pv设置的回收策略进行资源的回收 对于PV，管理员可以设定回收策略，用于设置与之绑定的PVC释放资源之后如何处理遗留数据的问题。只有PV的存储空间完成回收，才能供新的PVC绑定和使用 8.3 配置存储​ 8.3.1 ConfigMap​ ConfigMap是一种比较特殊的存储卷，它的主要作用是用来存储配置信息的。 创建configmap.yaml，内容如下： apiVersion: v1 kind: ConfigMap metadata: name: configmap namespace: dev data: info: | username:admin password:123456 接下来，使用此配置文件创建configmap # 创建configmap [root@k8s-master01 ~]# kubectl create -f configmap.yaml configmap/configmap created # 查看configmap详情 [root@k8s-master01 ~]# kubectl describe cm configmap -n dev Name: configmap Namespace: dev Labels: <none Annotations: <none Data ==== info: ---- username:admin password:123456 Events: <none 接下来创建一个pod-configmap.yaml，将上面创建的configmap挂载进去 apiVersion: v1 kind: Pod metadata: name: pod-configmap namespace: dev spec: containers: - name: nginx image: nginx:1.17.1 volumeMounts: # 将configmap挂载到目录 - name: config mountPath: /configmap/config volumes: # 引用configmap - name: config configMap: name: configmap # 创建pod [root@k8s-master01 ~]# kubectl create -f pod-configmap.yaml pod/pod-configmap created # 查看pod [root@k8s-master01 ~]# kubectl get pod pod-configmap -n dev NAME READY STATUS RESTARTS AGE pod-configmap 1/1 Running 0 6s #进入容器 [root@k8s-master01 ~]# kubectl exec -it pod-configmap -n dev /bin/sh # cd /configmap/config/ # ls info # more info username:admin password:123456 # 可以看到映射已经成功，每个configmap都映射成了一个目录 # key---文件 value----文件中的内容 # 此时如果更新configmap的内容, 容器中的值也会动态更新 8.3.2 Secret​ 在kubernetes中，还存在一种和ConfigMap非常类似的对象，称为Secret对象。它主要用于存储敏感信息，例如密码、秘钥、证书等等。 首先使用base64对数据进行编码 [root@k8s-master01 ~]# echo -n 'admin' | base64 #准备username YWRtaW4= [root@k8s-master01 ~]# echo -n '123456' | base64 #准备password MTIzNDU2 接下来编写secret.yaml，并创建Secret apiVersion: v1 kind: Secret metadata: name: secret namespace: dev type: Opaque data: username: YWRtaW4= password: MTIzNDU2 # 创建secret [root@k8s-master01 ~]# kubectl create -f secret.yaml secret/secret created # 查看secret详情 [root@k8s-master01 ~]# kubectl describe secret secret -n dev Name: secret Namespace: dev Labels: <none Annotations: <none Type: Opaque Data ==== password: 6 bytes username: 5 bytes 创建pod-secret.yaml，将上面创建的secret挂载进去： apiVersion: v1 kind: Pod metadata: name: pod-secret namespace: dev spec: containers: name: nginx image: nginx:1.17.1 volumeMounts: # 将secret挂载到目录 name: config mountPath: /secret/config volumes: name: config secret: secretName: secret 创建pod [root@k8s-master01 ~]# kubectl create -f pod-secret.yaml pod/pod-secret created 查看pod [root@k8s-master01 ~]# kubectl get pod pod-secret -n dev NAME READY STATUS RESTARTS AGE pod-secret 1/1 Running 0 2m28s 进入容器，查看secret信息，发现已经自动解码了 [root@k8s-master01 ~]# kubectl exec -it pod-secret /bin/sh -n dev / # ls /secret/config/ password username / # more /secret/config/username admin / # more /secret/config/password 123456 至此，已经实现了利用secret实现了信息的编码。 ### 9. 安全认证 #### 9.1 访问控制概述 Kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对Kubernetes的各种**客户端**进行**认证和鉴权**操作。 **客户端** 在Kubernetes集群中，客户端通常有两类： User Account：一般是独立于kubernetes之外的其他服务管理的用户账号。 Service Account：kubernetes管理的账号，用于为Pod中的服务进程在访问Kubernetes时提供身份标识。 认证、授权与准入控制 ApiServer是访问及管理资源对象的唯一入口。任何一个请求访问ApiServer，都要经过下面三个流程： Authentication（认证）：身份鉴别，只有正确的账号才能够通过认证 Authorization（授权）： 判断用户是否有权限对访问的资源执行特定的动作 Admission Control（准入控制）：用于补充授权机制以实现更加精细的访问控制功能。 9.2 认证管理​ Kubernetes集群安全的最关键点在于如何识别并认证客户端身份，它提供了3种客户端身份认证方式： HTTP Base认证：通过用户名+密码的方式认证 这种认证方式是把“用户名:密码”用BASE64算法进行编码后的字符串放在HTTP请求中的Header Authorization域里发送给服务端。服务端收到后进行解码，获取用户名及密码，然后进行用户身份认证的过程。 HTTP Token认证：通过一个Token来识别合法用户 这种认证方式是用一个很长的难以被模仿的字符串--Token来表明客户身份的一种方式。每个Token对应一个用户名，当客户端发起API调用请求时，需要在HTTP Header里放入Token，API Server接到Token后会跟服务器中保存的token进行比对，然后进行用户身份认证的过程。 HTTPS证书认证：基于CA根证书签名的双向数字证书认证方式 这种认证方式是安全性最高的一种方式，但是同时也是操作起来最麻烦的一种方式。 HTTPS认证大体分为3个过程： 证书申请和下发 HTTPS通信双方的服务器向CA机构申请证书，CA机构下发根证书、服务端证书及私钥给申请者 客户端和服务端的双向认证 1 客户端向服务器端发起请求，服务端下发自己的证书给客户端， 客户端接收到证书后，通过私钥解密证书，在证书中获得服务端的公钥， 客户端利用服务器端的公钥认证证书中的信息，如果一致，则认可这个服务器 2 客户端发送自己的证书给服务器端，服务端接收到证书后，通过私钥解密证书， 在证书中获得客户端的公钥，并用该公钥认证证书信息，确认客户端是否合法 服务器端和客户端进行通信 服务器端和客户端协商好加密方案后，客户端会产生一个随机的秘钥并加密，然后发送到服务器端。 服务器端接收这个秘钥后，双方接下来通信的所有内容都通过该随机秘钥加密 注意: Kubernetes允许同时配置多种认证方式，只要其中任意一个方式认证通过即可 9.3 授权管理​ 授权发生在认证成功之后，通过认证就可以知道请求用户是谁， 然后Kubernetes会根据事先定义的授权策略来决定用户是否有权限访问，这个过程就称为授权。 每个发送到ApiServer的请求都带上了用户和资源的信息：比如发送请求的用户、请求的路径、请求的动作等，授权就是根据这些信息和授权策略进行比较，如果符合策略，则认为授权通过，否则会返回错误。 API Server目前支持以下几种授权策略： AlwaysDeny：表示拒绝所有请求，一般用于测试 AlwaysAllow：允许接收所有请求，相当于集群不需要授权流程（Kubernetes默认的策略） ABAC：基于属性的访问控制，表示使用用户配置的授权规则对用户请求进行匹配和控制 Webhook：通过调用外部REST服务对用户进行授权 Node：是一种专用模式，用于对kubelet发出的请求进行访问控制 RBAC：基于角色的访问控制（kubeadm安装方式下的默认选项） RBAC(Role-Based Access Control) 基于角色的访问控制，主要是在描述一件事情：给哪些对象授予了哪些权限 其中涉及到了下面几个概念： 对象：User、Groups、ServiceAccount 角色：代表着一组定义在资源上的可操作动作(权限)的集合 绑定：将定义好的角色跟用户绑定在一起 RBAC引入了4个顶级资源对象： Role、ClusterRole：角色，用于指定一组权限 RoleBinding、ClusterRoleBinding：角色绑定，用于将角色（权限）赋予给对象 Role、ClusterRole 一个角色就是一组权限的集合，这里的权限都是许可形式的（白名单）。 # Role只能对命名空间内的资源进行授权，需要指定nameapce kind: Role apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: namespace: dev name: authorization-role rules: apiGroups: [\"\"] # 支持的API组列表,\"\" 空字符串，表示核心API群 resources: [\"pods\"] # 支持的资源对象列表 verbs: [\"get\", \"watch\", \"list\"] # 允许的对资源对象的操作方法列表 ClusterRole可以对集群范围内资源、跨namespaces的范围资源、非资源类型进行授权 kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-clusterrole rules: apiGroups: [\"\"] resources: [\"pods\"] verbs: [\"get\", \"watch\", \"list\"] 需要详细说明的是，rules中的参数： apiGroups: 支持的API组列表 \"\",\"apps\", \"autoscaling\", \"batch\" resources：支持的资源对象列表 \"services\", \"endpoints\", \"pods\",\"secrets\",\"configmaps\",\"crontabs\",\"deployments\",\"jobs\", \"nodes\",\"rolebindings\",\"clusterroles\",\"daemonsets\",\"replicasets\",\"statefulsets\", \"horizontalpodautoscalers\",\"replicationcontrollers\",\"cronjobs\" verbs：对资源对象的操作方法列表 \"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\", \"exec\" RoleBinding、ClusterRoleBinding 角色绑定用来把一个角色绑定到一个目标对象上，绑定目标可以是User、Group或者ServiceAccount。 # RoleBinding可以将同一namespace中的subject绑定到某个Role下，则此subject即具有该Role定义的权限 kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-role-binding namespace: dev subjects: kind: User name: heima apiGroup: rbac.authorization.k8s.io roleRef: kind: Role name: authorization-role apiGroup: rbac.authorization.k8s.io ClusterRoleBinding在整个集群级别和所有namespaces将特定的subject与ClusterRole绑定，授予权限 kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-clusterrole-binding subjects: kind: User name: heima apiGroup: rbac.authorization.k8s.io roleRef: kind: ClusterRole name: authorization-clusterrole apiGroup: rbac.authorization.k8s.io **RoleBinding引用ClusterRole进行授权** RoleBinding可以引用ClusterRole，对属于同一命名空间内ClusterRole定义的资源主体进行授权。 一种很常用的做法就是，集群管理员为集群范围预定义好一组角色（ClusterRole），然后在多个命名空间中重复使用这些ClusterRole。这样可以大幅提高授权管理工作效率，也使得各个命名空间下的基础性授权规则与使用体验保持一致。 虽然authorization-clusterrole是一个集群角色，但是因为使用了RoleBinding 所以heima只能读取dev命名空间中的资源 kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-role-binding-ns namespace: dev subjects: kind: User name: heima apiGroup: rbac.authorization.k8s.io roleRef: kind: ClusterRole name: authorization-clusterrole apiGroup: rbac.authorization.k8s.io **实战：创建一个只能管理dev空间下Pods资源的账号** 创建账号 # 1) 创建证书 [root@k8s-master01 pki]# cd /etc/kubernetes/pki/ [root@k8s-master01 pki]# (umask 077;openssl genrsa -out devman.key 2048) # 2) 用apiserver的证书去签署 # 2-1) 签名申请，申请的用户是devman,组是devgroup [root@k8s-master01 pki]# openssl req -new -key devman.key -out devman.csr -subj \"/CN=devman/O=devgroup\" # 2-2) 签署证书 [root@k8s-master01 pki]# openssl x509 -req -in devman.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out devman.crt -days 3650 # 3) 设置集群、用户、上下文信息 [root@k8s-master01 pki]# kubectl config set-cluster kubernetes --embed-certs=true --certificate-authority=/etc/kubernetes/pki/ca.crt --server=https://192.168.109.100:6443 [root@k8s-master01 pki]# kubectl config set-credentials devman --embed-certs=true --client-certificate=/etc/kubernetes/pki/devman.crt --client-key=/etc/kubernetes/pki/devman.key [root@k8s-master01 pki]# kubectl config set-context devman@kubernetes --cluster=kubernetes --user=devman # 切换账户到devman [root@k8s-master01 pki]# kubectl config use-context devman@kubernetes Switched to context \"devman@kubernetes\". # 查看dev下pod，发现没有权限 [root@k8s-master01 pki]# kubectl get pods -n dev Error from server (Forbidden): pods is forbidden: User \"devman\" cannot list resource \"pods\" in API group \"\" in the namespace \"dev\" # 切换到admin账户 [root@k8s-master01 pki]# kubectl config use-context kubernetes-admin@kubernetes Switched to context \"kubernetes-admin@kubernetes\". 2） 创建Role和RoleBinding，为devman用户授权 kind: Role apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: namespace: dev name: dev-role rules: apiGroups: [\"\"] resources: [\"pods\"] verbs: [\"get\", \"watch\", \"list\"] kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-role-binding namespace: dev subjects: kind: User name: devman apiGroup: rbac.authorization.k8s.io roleRef: kind: Role name: dev-role apiGroup: rbac.authorization.k8s.io [root@k8s-master01 pki]# kubectl create -f dev-role.yaml role.rbac.authorization.k8s.io/dev-role created rolebinding.rbac.authorization.k8s.io/authorization-role-binding created 切换账户，再次验证 # 切换账户到devman [root@k8s-master01 pki]# kubectl config use-context devman@kubernetes Switched to context \"devman@kubernetes\". # 再次查看 [root@k8s-master01 pki]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE nginx-deployment-66cb59b984-8wp2k 1/1 Running 0 4d1h nginx-deployment-66cb59b984-dc46j 1/1 Running 0 4d1h nginx-deployment-66cb59b984-thfck 1/1 Running 0 4d1h # 为了不影响后面的学习,切回admin账户 [root@k8s-master01 pki]# kubectl config use-context kubernetes-admin@kubernetes Switched to context \"kubernetes-admin@kubernetes\". 9.4 准入控制​ 通过了前面的认证和授权之后，还需要经过准入控制处理通过之后，apiserver才会处理这个请求。 准入控制是一个可配置的控制器列表，可以通过在Api-Server上通过命令行设置选择执行哪些准入控制器： --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel, DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds 只有当所有的准入控制器都检查通过之后，apiserver才执行该请求，否则返回拒绝。 当前可配置的Admission Control准入控制如下： AlwaysAdmit：允许所有请求 AlwaysDeny：禁止所有请求，一般用于测试 AlwaysPullImages：在启动容器之前总去下载镜像 DenyExecOnPrivileged：它会拦截所有想在Privileged Container上执行命令的请求 ImagePolicyWebhook：这个插件将允许后端的一个Webhook程序来完成admission controller的功能。 Service Account：实现ServiceAccount实现了自动化 SecurityContextDeny：这个插件将使用SecurityContext的Pod中的定义全部失效 ResourceQuota：用于资源配额管理目的，观察所有请求，确保在namespace上的配额不会超标 LimitRanger：用于资源限制管理，作用于namespace上，确保对Pod进行资源限制 InitialResources：为未设置资源请求与限制的Pod，根据其镜像的历史资源的使用情况进行设置 NamespaceLifecycle：如果尝试在一个不存在的namespace中创建资源对象，则该创建请求将被拒绝。当删除一个namespace时，系统将会删除该namespace中所有对象。 DefaultStorageClass：为了实现共享存储的动态供应，为未指定StorageClass或PV的PVC尝试匹配默认的StorageClass，尽可能减少用户在申请PVC时所需了解的后端存储细节 DefaultTolerationSeconds：这个插件为那些没有设置forgiveness tolerations并具有notready:NoExecute和unreachable:NoExecute两种taints的Pod设置默认的“容忍”时间，为5min PodSecurityPolicy：这个插件用于在创建或修改Pod时决定是否根据Pod的security context和可用的PodSecurityPolicy对Pod的安全策略进行控制 10. DashBoard​ 之前在kubernetes中完成的所有操作都是通过命令行工具kubectl完成的。其实，为了提供更丰富的用户体验，kubernetes还开发了一个基于web的用户界面（Dashboard）。用户可以使用Dashboard部署容器化的应用，还可以监控应用的状态，执行故障排查以及管理kubernetes中各种资源。 10.1 部署Dashboard​ 下载yaml，并运行Dashboard # 下载yaml [root@k8s-master01 ~]# wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml # 修改kubernetes-dashboard的Service类型 kind: Service apiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboard spec: type: NodePort # 新增 ports: - port: 443 targetPort: 8443 nodePort: 30009 # 新增 selector: k8s-app: kubernetes-dashboard # 部署 [root@k8s-master01 ~]# kubectl create -f recommended.yaml # 查看namespace下的kubernetes-dashboard下的资源 [root@k8s-master01 ~]# kubectl get pod,svc -n kubernetes-dashboard NAME READY STATUS RESTARTS AGE pod/dashboard-metrics-scraper-c79c65bb7-zwfvw 1/1 Running 0 111s pod/kubernetes-dashboard-56484d4c5-z95z5 1/1 Running 0 111s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/dashboard-metrics-scraper ClusterIP 10.96.89.218 <none 8000/TCP 111s service/kubernetes-dashboard NodePort 10.104.178.171 <none 443:30009/TCP 111s 2）创建访问账户，获取token # 创建账号 [root@k8s-master01-1 ~]# kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard # 授权 [root@k8s-master01-1 ~]# kubectl create clusterrolebinding dashboard-admin-rb --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin # 获取账号token [root@k8s-master01 ~]# kubectl get secrets -n kubernetes-dashboard | grep dashboard-admin dashboard-admin-token-xbqhh kubernetes.io/service-account-token 3 2m35s [root@k8s-master01 ~]# kubectl describe secrets dashboard-admin-token-xbqhh -n kubernetes-dashboard Name: dashboard-admin-token-xbqhh Namespace: kubernetes-dashboard Labels: <none Annotations: kubernetes.io/service-account.name: dashboard-admin kubernetes.io/service-account.uid: 95d84d80-be7a-4d10-a2e0-68f90222d039 Type: kubernetes.io/service-account-token Data ==== namespace: 20 bytes token: eyJhbGciOiJSUzI1NiIsImtpZCI6ImJrYkF4bW5XcDhWcmNGUGJtek5NODFuSXl1aWptMmU2M3o4LTY5a2FKS2cifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4teGJxaGgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTVkODRkODAtYmU3YS00ZDEwLWEyZTAtNjhmOTAyMjJkMDM5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.NAl7e8ZfWWdDoPxkqzJzTB46sK9E8iuJYnUI9vnBaY3Jts7T1g1msjsBnbxzQSYgAG--cV0WYxjndzJY_UWCwaGPrQrt_GunxmOK9AUnzURqm55GR2RXIZtjsWVP2EBatsDgHRmuUbQvTFOvdJB4x3nXcYLN2opAaMqg3rnU2rr-A8zCrIuX_eca12wIp_QiuP3SF-tzpdLpsyRfegTJZl6YnSGyaVkC9id-cxZRb307qdCfXPfCHR_2rt5FVfxARgg_C0e3eFHaaYQO7CitxsnIoIXpOFNAR8aUrmopJyODQIPqBWUehb7FhlU1DCduHnIIXVC_UICZ-MKYewBDLw ca.crt: 1025 bytes 3）通过浏览器访问Dashboard的UI 在登录页面上输入上面的token 出现下面的页面代表成功 10.2 使用DashBoard​ 本章节以Deployment为例演示DashBoard的使用 查看 选择指定的命名空间dev，然后点击Deployments，查看dev空间下的所有deployment 扩缩容 在Deployment上点击规模，然后指定目标副本数量，点击确定 编辑 在Deployment上点击编辑，然后修改yaml文件，点击确定 查看Pod 点击Pods, 查看pods列表 操作Pod 选中某个Pod，可以对其执行日志（logs）、进入执行（exec）、编辑、删除操作 Dashboard提供了kubectl的绝大部分功能，这里不再一一演示","s":"1. Kubernetes介绍","u":"/blog/docs/CICD/Kubernetes","h":"#1-kubernetes介绍","p":513},{"i":518,"t":"2.1 前置知识点​ 目前生产部署Kubernetes 集群主要有两种方式： kubeadm Kubeadm 是一个K8s 部署工具，提供kubeadm init 和kubeadm join，用于快速部署Kubernetes 集群。 官方地址：https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/ 二进制包 从github 下载发行版的二进制包，手动部署每个组件，组成Kubernetes 集群。 Kubeadm 降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可控，推荐使用二进制包部署Kubernetes 集群，虽然手动部署麻烦点，期间可以学习很多工作原理，也利于后期维护。 2.2 kubeadm 部署方式介绍​ kubeadm 是官方社区推出的一个用于快速部署kubernetes 集群的工具，这个工具能通过两条指令完成一个kubernetes 集群的部署：","s":"2. kubernetes集群环境搭建","u":"/blog/docs/CICD/Kubernetes","h":"#2-kubernetes集群环境搭建","p":513},{"i":520,"t":"3.1 资源管理介绍​ 在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。 kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。 kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在Pod中，而kubernetes一般也不会直接管理Pod，而是通过Pod控制器来管理Pod的。 Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了Service资源实现这个功能。 当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种存储系统。 学习kubernetes的核心，就是学习如何对集群上的Pod、Pod控制器、Service、存储等各种资源进行操作 3.2 YAML语言介绍​ YAML是一个类似 XML、JSON 的标记性语言。它强调以数据为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称\"一种人性化的数据格式语言\"。 <heima <age15</age <addressBeijing</address </heima heima: age: 15 address: Beijing YAML的语法比较简单，主要有下面几个：","s":"3. 资源管理","u":"/blog/docs/CICD/Kubernetes","h":"#3-资源管理","p":513},{"i":522,"t":"命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。 1） 创建一个nginxpod.yaml，内容如下： apiVersion: v1 kind: Namespace metadata: name: dev --- apiVersion: v1 kind: Pod metadata: name: nginxpod namespace: dev spec: containers: - name: nginx-containers image: nginx:latest 2）执行create命令，创建资源： [root@master ~]# kubectl create -f nginxpod.yaml namespace/dev created pod/nginxpod created 此时发现创建了两个资源对象，分别是namespace和pod 3）执行get命令，查看资源： [root@master ~]# kubectl get -f nginxpod.yaml NAME STATUS AGE namespace/dev Active 18s NAME READY STATUS RESTARTS AGE pod/nginxpod 1/1 Running 0 17s 这样就显示了两个资源对象的信息 4）执行delete命令，删除资源： [root@master ~]# kubectl delete -f nginxpod.yaml namespace \"dev\" deleted pod \"nginxpod\" deleted 此时发现两个资源对象被删除了 总结: 命令式对象配置的方式操作资源，可以简单的认为：命令 + yaml配置文件（里面是命令需要的各种参数）","s":"3.3.2 命令式对象配置","u":"/blog/docs/CICD/Kubernetes","h":"#332-命令式对象配置","p":513},{"i":524,"t":"声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply。 # 首先执行一次kubectl apply -f yaml文件，发现创建了资源 [root@master ~]# kubectl apply -f nginxpod.yaml namespace/dev created pod/nginxpod created # 再次执行一次kubectl apply -f yaml文件，发现说资源没有变动 [root@master ~]# kubectl apply -f nginxpod.yaml namespace/dev unchanged pod/nginxpod unchanged 总结: 其实声明式对象配置就是使用apply描述一个资源最终的状态（在yaml中定义状态） 使用apply操作资源： 如果资源不存在，就创建，相当于 kubectl create 如果资源已存在，就更新，相当于 kubectl patch 扩展：kubectl可以在node节点上运行吗 ? kubectl的运行是需要进行配置的，它的配置文件是$HOME/.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作： scp -r HOME/.kube node1: HOME/ 使用推荐: 三种方式应该怎么用 ? 创建/更新资源 使用声明式对象配置 kubectl apply -f XXX.yaml 删除资源 使用命令式对象配置 kubectl delete -f XXX.yaml 查询资源 使用命令式对象管理 kubectl get(describe) 资源名称","s":"3.3.3 声明式对象配置","u":"/blog/docs/CICD/Kubernetes","h":"#333-声明式对象配置","p":513},{"i":526,"t":"本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问。 4.1 Namespace​ Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现多套环境的资源隔离或者多租户的资源隔离。 默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的\"组\"，以方便不同的组的资源进行隔离使用和管理。 可以通过kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如CPU使用量、内存使用量等等，来实现租户可用资源的管理。 kubernetes在集群启动之后，会默认创建几个namespace [root@master ~]# kubectl get namespace NAME STATUS AGE default Active 45h # 所有未指定Namespace的对象都会被分配在default命名空间 kube-node-lease Active 45h # 集群节点之间的心跳维护，v1.13开始引入 kube-public Active 45h # 此命名空间下的资源可以被所有人访问（包括未认证用户） kube-system Active 45h # 所有由Kubernetes系统创建的资源都处于这个命名空间 下面来看namespace资源的具体操作： 4.1.1 查看​ # 1 查看所有的ns 命令：kubectl get ns [root@master ~]# kubectl get ns NAME STATUS AGE default Active 45h kube-node-lease Active 45h kube-public Active 45h kube-system Active 45h # 2 查看指定的ns 命令：kubectl get ns ns名称 [root@master ~]# kubectl get ns default NAME STATUS AGE default Active 45h # 3 指定输出格式 命令：kubectl get ns ns名称 -o 格式参数 # kubernetes支持的格式有很多，比较常见的是wide、json、yaml [root@master ~]# kubectl get ns default -o yaml apiVersion: v1 kind: Namespace metadata: creationTimestamp: \"2021-05-08T04:44:16Z\" name: default resourceVersion: \"151\" selfLink: /api/v1/namespaces/default uid: 7405f73a-e486-43d4-9db6-145f1409f090 spec: finalizers: - kubernetes status: phase: Active # 4 查看ns详情 命令：kubectl describe ns ns名称 [root@master ~]# kubectl describe ns default Name: default Labels: <none Annotations: <none Status: Active # Active 命名空间正在使用中 Terminating 正在删除命名空间 # ResourceQuota 针对namespace做的资源限制 # LimitRange针对namespace中的每个组件做的资源限制 No resource quota. No LimitRange resource. 4.1.2 创建​ # 创建namespace [root@master ~]# kubectl create ns dev namespace/dev created 4.1.3 删除​ # 删除namespace [root@master ~]# kubectl delete ns dev namespace \"dev\" deleted 4.1.4 配置方式​ 首先准备一个yaml文件：ns-dev.yaml apiVersion: v1 kind: Namespace metadata: name: dev 然后就可以执行对应的创建和删除命令了： 创建：kubectl create -f ns-dev.yaml 删除：kubectl delete -f ns-dev.yaml 4.2 Pod​ Pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于Pod中。 Pod可以认为是容器的封装，一个Pod中可以存在一个或者多个容器。 kubernetes在集群启动之后，集群中的各个组件也都是以Pod方式运行的。可以通过下面命令查看： [root@master ~]# kubectl get pod -n kube-system NAMESPACE NAME READY STATUS RESTARTS AGE kube-system coredns-6955765f44-68g6v 1/1 Running 0 2d1h kube-system coredns-6955765f44-cs5r8 1/1 Running 0 2d1h kube-system etcd-master 1/1 Running 0 2d1h kube-system kube-apiserver-master 1/1 Running 0 2d1h kube-system kube-controller-manager-master 1/1 Running 0 2d1h kube-system kube-flannel-ds-amd64-47r25 1/1 Running 0 2d1h kube-system kube-flannel-ds-amd64-ls5lh 1/1 Running 0 2d1h kube-system kube-proxy-685tk 1/1 Running 0 2d1h kube-system kube-proxy-87spt 1/1 Running 0 2d1h kube-system kube-scheduler-master 1/1 Running 0 2d1h 4.2.1 创建并运行​ kubernetes没有提供单独运行Pod的命令，都是通过Pod控制器来实现的 # 命令格式： kubectl run (pod控制器名称) [参数] # --image 指定Pod的镜像 # --port 指定端口 # --namespace 指定namespace [root@master ~]# kubectl run nginx --image=nginx:latest --port=80 --namespace dev deployment.apps/nginx created 4.2.2 查看pod信息​ # 查看Pod基本信息 [root@master ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE nginx 1/1 Running 0 43s # 查看Pod的详细信息 [root@master ~]# kubectl describe pod nginx -n dev Name: nginx Namespace: dev Priority: 0 Node: node1/192.168.5.4 Start Time: Wed, 08 May 2021 09:29:24 +0800 Labels: pod-template-hash=5ff7956ff6 run=nginx Annotations: <none Status: Running IP: 10.244.1.23 IPs: IP: 10.244.1.23 Controlled By: ReplicaSet/nginx Containers: nginx: Container ID: docker://4c62b8c0648d2512380f4ffa5da2c99d16e05634979973449c98e9b829f6253c Image: nginx:latest Image ID: docker-pullable://nginx@sha256:485b610fefec7ff6c463ced9623314a04ed67e3945b9c08d7e53a47f6d108dc7 Port: 80/TCP Host Port: 0/TCP State: Running Started: Wed, 08 May 2021 09:30:01 +0800 Ready: True Restart Count: 0 Environment: <none Mounts: /var/run/secrets/kubernetes.io/serviceaccount from default-token-hwvvw (ro) Conditions: Type Status Initialized True Ready True ContainersReady True PodScheduled True Volumes: default-token-hwvvw: Type: Secret (a volume populated by a Secret) SecretName: default-token-hwvvw Optional: false QoS Class: BestEffort Node-Selectors: <none Tolerations: node.kubernetes.io/not-ready:NoExecute for 300s node.kubernetes.io/unreachable:NoExecute for 300s Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled <unknown default-scheduler Successfully assigned dev/nginx-5ff7956ff6-fg2db to node1 Normal Pulling 4m11s kubelet, node1 Pulling image \"nginx:latest\" Normal Pulled 3m36s kubelet, node1 Successfully pulled image \"nginx:latest\" Normal Created 3m36s kubelet, node1 Created container nginx Normal Started 3m36s kubelet, node1 Started container nginx 4.2.3 访问Pod​ # 获取podIP [root@master ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ... nginx 1/1 Running 0 190s 10.244.1.23 node1 ... #访问POD [root@master ~]# curl http://10.244.1.23:80 <!DOCTYPE html <html <head <titleWelcome to nginx!</title </head <body <p<emThank you for using nginx.</em</p </body </html 4.2.4 删除指定Pod​ # 删除指定Pod [root@master ~]# kubectl delete pod nginx -n dev pod \"nginx\" deleted # 此时，显示删除Pod成功，但是再查询，发现又新产生了一个 [root@master ~]# kubectl get pods -n dev NAME READY STATUS RESTARTS AGE nginx 1/1 Running 0 21s # 这是因为当前Pod是由Pod控制器创建的，控制器会监控Pod状况，一旦发现Pod死亡，会立即重建 # 此时要想删除Pod，必须删除Pod控制器 # 先来查询一下当前namespace下的Pod控制器 [root@master ~]# kubectl get deploy -n dev NAME READY UP-TO-DATE AVAILABLE AGE nginx 1/1 1 1 9m7s # 接下来，删除此PodPod控制器 [root@master ~]# kubectl delete deploy nginx -n dev deployment.apps \"nginx\" deleted # 稍等片刻，再查询Pod，发现Pod被删除了 [root@master ~]# kubectl get pods -n dev No resources found in dev namespace. 4.2.5 配置操作​ 创建一个pod-nginx.yaml，内容如下： apiVersion: v1 kind: Pod metadata: name: nginx namespace: dev spec: containers: - image: nginx:latest name: pod ports: - name: nginx-port containerPort: 80 protocol: TCP 然后就可以执行对应的创建和删除命令了： 创建：kubectl create -f pod-nginx.yaml 删除：kubectl delete -f pod-nginx.yaml 4.3 Label​ Label是kubernetes系统中的一个重要概念。它的作用就是在资源上添加标识，用来对它们进行区分和选择。 Label的特点：","s":"4. 实战入门","u":"/blog/docs/CICD/Kubernetes","h":"#4-实战入门","p":513},{"i":528,"t":"5.1 Pod介绍​ 5.1.1 Pod结构​ 每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类：","s":"5. Pod详解","u":"/blog/docs/CICD/Kubernetes","h":"#5-pod详解","p":513},{"i":530,"t":"[root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-required.yaml pod/pod-nodeaffinity-required created","s":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":532,"t":"[root@k8s-master01 ~]# kubectl get pods pod-nodeaffinity-required -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-nodeaffinity-required 0/1 Pending 0 16s <none <none ......","s":"查看pod状态 （运行失败）","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":535,"t":"[root@k8s-master01 ~]# kubectl describe pod pod-nodeaffinity-required -n dev ...... Warning FailedScheduling <unknown default-scheduler 0/3 nodes are available: 3 node(s) didn't match node selector. Warning FailedScheduling <unknown default-scheduler 0/3 nodes are available: 3 node(s) didn't match node selector. #接下来，停止pod [root@k8s-master01 ~]# kubectl delete -f pod-nodeaffinity-required.yaml pod \"pod-nodeaffinity-required\" deleted","s":"发现调度失败，提示node选择失败","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":537,"t":"[root@k8s-master01 ~]# vim pod-nodeaffinity-required.yaml","s":"修改文件，将values: [\"xxx\",\"yyy\"]------ [\"pro\",\"yyy\"]","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":539,"t":"[root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-required.yaml pod/pod-nodeaffinity-required created","s":"再次启动","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":541,"t":"[root@k8s-master01 ~]# kubectl get pods pod-nodeaffinity-required -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE ...... pod-nodeaffinity-required 1/1 Running 0 11s 10.244.1.89 node1 ...... 接下来再演示一下`requiredDuringSchedulingIgnoredDuringExecution` , 创建pod-nodeaffinity-preferred.yaml apiVersion: v1 kind: Pod metadata: name: pod-nodeaffinity-preferred namespace: dev spec: containers: name: nginx image: nginx:1.17.1 affinity: #亲和性设置 nodeAffinity: #设置node亲和性 preferredDuringSchedulingIgnoredDuringExecution: # 软限制 - weight: 1 preference: matchExpressions: # 匹配env的值在[\"xxx\",\"yyy\"]中的标签(当前环境没有) - key: nodeenv operator: In values: [\"xxx\",\"yyy\"]","s":"此时查看，发现调度成功，已经将pod调度到了node1上","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":543,"t":"[root@k8s-master01 ~]# kubectl create -f pod-nodeaffinity-preferred.yaml pod/pod-nodeaffinity-preferred created","s":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":545,"t":"[root@k8s-master01 ~]# kubectl get pod pod-nodeaffinity-preferred -n dev NAME READY STATUS RESTARTS AGE pod-nodeaffinity-preferred 1/1 Running 0 40s NodeAffinity规则设置的注意事项： 1 如果同时定义了nodeSelector和nodeAffinity，那么必须两个条件都得到满足，Pod才能运行在指定的Node上 2 如果nodeAffinity指定了多个nodeSelectorTerms，那么只需要其中一个能够匹配成功即可 3 如果一个nodeSelectorTerms中有多个matchExpressions ，则一个节点必须满足所有的才能匹配成功 4 如果一个pod所在的Node在Pod运行期间其标签发生了改变，不再符合该Pod的节点亲和性需求，则系统将忽略此变化 **PodAffinity** PodAffinity主要实现以运行的Pod为参照，实现让新创建的Pod跟参照pod在一个区域的功能。 首先来看一下`PodAffinity`的可配置项： pod.spec.affinity.podAffinity requiredDuringSchedulingIgnoredDuringExecution 硬限制 namespaces 指定参照pod的namespace topologyKey 指定调度作用域 labelSelector 标签选择器 matchExpressions 按节点标签列出的节点选择器要求列表(推荐) key 键 values 值 operator 关系符 支持In, NotIn, Exists, DoesNotExist. matchLabels 指多个matchExpressions映射的内容 preferredDuringSchedulingIgnoredDuringExecution 软限制 podAffinityTerm 选项 namespaces topologyKey labelSelector matchExpressions key 键 values 值 operator matchLabels weight 倾向权重，在范围1-100 topologyKey用于指定调度时作用域,例如: 如果指定为kubernetes.io/hostname，那就是以Node节点为区分范围 如果指定为beta.kubernetes.io/os,则以Node节点的操作系统类型来区分 接下来，演示下`requiredDuringSchedulingIgnoredDuringExecution`, 1）首先创建一个参照Pod，pod-podaffinity-target.yaml： apiVersion: v1 kind: Pod metadata: name: pod-podaffinity-target namespace: dev labels: podenv: pro #设置标签 spec: containers: name: nginx image: nginx:1.17.1 nodeName: node1 # 将目标pod名确指定到node1上","s":"查看pod状态 （运行成功）","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":547,"t":"[root@k8s-master01 ~]# kubectl create -f pod-podaffinity-target.yaml pod/pod-podaffinity-target created","s":"启动目标pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":549,"t":"[root@k8s-master01 ~]# kubectl get pods pod-podaffinity-target -n dev NAME READY STATUS RESTARTS AGE pod-podaffinity-target 1/1 Running 0 4s 2）创建pod-podaffinity-required.yaml，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-podaffinity-required namespace: dev spec: containers: name: nginx image: nginx:1.17.1 affinity: #亲和性设置 podAffinity: #设置pod亲和性 requiredDuringSchedulingIgnoredDuringExecution: # 硬限制 - labelSelector: matchExpressions: # 匹配env的值在[\"xxx\",\"yyy\"]中的标签 - key: podenv operator: In values: [\"xxx\",\"yyy\"] topologyKey: kubernetes.io/hostname 上面配置表达的意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上，显然现在没有这样pod，接下来，运行测试一下。","s":"查看pod状况","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":551,"t":"[root@k8s-master01 ~]# kubectl create -f pod-podaffinity-required.yaml pod/pod-podaffinity-required created","s":"启动pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":553,"t":"[root@k8s-master01 ~]# kubectl get pods pod-podaffinity-required -n dev NAME READY STATUS RESTARTS AGE pod-podaffinity-required 0/1 Pending 0 9s","s":"查看pod状态，发现未运行","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":555,"t":"[root@k8s-master01 ~]# kubectl describe pods pod-podaffinity-required -n dev ...... Events: Type Reason Age From Message Warning FailedScheduling <unknown default-scheduler 0/3 nodes are available: 2 node(s) didn't match pod affinity rules, 1 node(s) had taints that the pod didn't tolerate.","s":"查看详细信息","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":558,"t":"[root@k8s-master01 ~]# vim pod-podaffinity-required.yaml","s":"意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":560,"t":"[root@k8s-master01 ~]# kubectl delete -f pod-podaffinity-required.yaml pod \"pod-podaffinity-required\" de leted [root@k8s-master01 ~]# kubectl create -f pod-podaffinity-required.yaml pod/pod-podaffinity-required created","s":"然后重新创建pod，查看效果","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":562,"t":"[root@k8s-master01 ~]# kubectl get pods pod-podaffinity-required -n dev NAME READY STATUS RESTARTS AGE LABELS pod-podaffinity-required 1/1 Running 0 6s <none 关于`PodAffinity`的 `preferredDuringSchedulingIgnoredDuringExecution`，这里不再演示。 **PodAntiAffinity** PodAntiAffinity主要实现以运行的Pod为参照，让新创建的Pod跟参照pod不在一个区域中的功能。 它的配置方式和选项跟PodAffinty是一样的，这里不再做详细解释，直接做一个测试案例。 1）继续使用上个案例中目标pod [root@k8s-master01 ~]# kubectl get pods -n dev -o wide --show-labels NAME READY STATUS RESTARTS AGE IP NODE LABELS pod-podaffinity-required 1/1 Running 0 3m29s 10.244.1.38 node1 <none pod-podaffinity-target 1/1 Running 0 9m25s 10.244.1.37 node1 podenv=pro 2）创建pod-podantiaffinity-required.yaml，内容如下： apiVersion: v1 kind: Pod metadata: name: pod-podantiaffinity-required namespace: dev spec: containers: name: nginx image: nginx:1.17.1 affinity: #亲和性设置 podAntiAffinity: #设置pod亲和性 requiredDuringSchedulingIgnoredDuringExecution: # 硬限制 - labelSelector: matchExpressions: # 匹配podenv的值在[\"pro\"]中的标签 - key: podenv operator: In values: [\"pro\"] topologyKey: kubernetes.io/hostname 上面配置表达的意思是：新Pod必须要与拥有标签nodeenv=pro的pod不在同一Node上，运行测试一下。","s":"发现此时Pod运行正常","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":564,"t":"[root@k8s-master01 ~]# kubectl create -f pod-podantiaffinity-required.yaml pod/pod-podantiaffinity-required created","s":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":567,"t":"[root@k8s-master01 ~]# kubectl get pods pod-podantiaffinity-required -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE .. pod-podantiaffinity-required 1/1 Running 0 30s 10.244.1.96 node2 .. ##### 5.4.3 污点和容忍 **污点（Taints）** 前面的调度方式都是站在Pod的角度上，通过在Pod上添加属性，来确定Pod是否要调度到指定的Node上，其实我们也可以站在Node的角度上，通过在Node上添加**污点**属性，来决定是否允许Pod调度过来。 Node被设置上污点之后就和Pod之间存在了一种相斥的关系，进而拒绝Pod调度进来，甚至可以将已经存在的Pod驱逐出去。 污点的格式为：`key=value:effect`, key和value是污点的标签，effect描述污点的作用，支持如下三个选项：","s":"发现调度到了node2上","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":569,"t":"[root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED pod-toleration 0/1 Pending 0 3s <none <none <none","s":"添加容忍之前的pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":571,"t":"[root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED pod-toleration 1/1 Running 0 3s 10.244.1.62 node1 <none 下面看一下容忍的详细配置: [root@k8s-master01 ~]# kubectl explain pod.spec.tolerations ...... FIELDS: key # 对应着要容忍的污点的键，空意味着匹配所有的键 value # 对应着要容忍的污点的值 operator # key-value的运算符，支持Equal和Exists（默认） effect # 对应污点的effect，空意味着匹配所有影响 tolerationSeconds # 容忍时间, 当effect为NoExecute时生效，表示pod在Node上的停留时间 ### 6. Pod控制器详解 #### 6.1 Pod控制器介绍 Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类：","s":"添加容忍之后的pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":573,"t":"[root@k8s-master01 1.8+]# kubectl apply -f ./","s":"安装metrics-server","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":575,"t":"[root@k8s-master01 1.8+]# kubectl get pod -n kube-system metrics-server-6b976979db-2xwbj 1/1 Running 0 90s","s":"查看pod运行情况","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":577,"t":"[root@k8s-master01 1.8+]# kubectl top node NAME CPU(cores) CPU% MEMORY(bytes) MEMORY% k8s-master01 289m 14% 1582Mi 54% k8s-node01 81m 4% 1195Mi 40% k8s-node02 72m 3% 1211Mi 41% [root@k8s-master01 1.8+]# kubectl top pod -n kube-system NAME CPU(cores) MEMORY(bytes) coredns-6955765f44-7ptsb 3m 9Mi coredns-6955765f44-vcwr5 3m 8Mi etcd-master 14m 145Mi ...","s":"使用kubectl top node 查看资源使用情况","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":579,"t":"##### 6.4.2 准备deployment和servie 创建pc-hpa-pod.yaml文件，内容如下： apiVersion: apps/v1 kind: Deployment metadata: name: nginx namespace: dev spec: strategy: # 策略 type: RollingUpdate # 滚动更新策略 replicas: 1 selector: matchLabels: app: nginx-pod template: metadata: labels: app: nginx-pod spec: containers: - name: nginx image: nginx:1.17.1 resources: # 资源配额 limits: # 限制资源（上限） cpu: \"1\" # CPU限制，单位是core数 requests: # 请求资源（下限） cpu: \"100m\" # CPU限制，单位是core数","s":"至此,metrics-server安装完成","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":581,"t":"[root@k8s-master01 1.8+]# kubectl run nginx --image=nginx:1.17.1 --requests=cpu=100m -n dev","s":"创建deployment","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":583,"t":"[root@k8s-master01 1.8+]# kubectl expose deployment nginx --type=NodePort --port=80 -n dev","s":"创建service","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":585,"t":"[root@k8s-master01 1.8+]# kubectl get deployment,pod,svc -n dev NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx 1/1 1 1 47s NAME READY STATUS RESTARTS AGE pod/nginx-7df9756ccc-bh8dr 1/1 Running 0 47s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx NodePort 10.101.18.29 <none 80:31830/TCP 35s ##### 6.4.3 部署HPA 创建pc-hpa.yaml文件，内容如下： apiVersion: autoscaling/v1 kind: HorizontalPodAutoscaler metadata: name: pc-hpa namespace: dev spec: minReplicas: 1 #最小pod数量 maxReplicas: 10 #最大pod数量 targetCPUUtilizationPercentage: 3 # CPU使用率指标 scaleTargetRef: # 指定要控制的nginx信息 apiVersion: /v1 kind: Deployment name: nginx","s":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":587,"t":"[root@k8s-master01 1.8+]# kubectl create -f pc-hpa.yaml horizontalpodautoscaler.autoscaling/pc-hpa created","s":"创建hpa","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":589,"t":"[root@k8s-master01 1.8+]# kubectl get hpa -n dev NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE pc-hpa Deployment/nginx 0%/3% 1 10 1 62s ##### 6.4.4 测试 使用压测工具对service地址`192.168.5.4:31830`进行压测，然后通过控制台查看hpa和pod的变化 hpa变化 [root@k8s-master01 ~]# kubectl get hpa -n dev -w NAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE pc-hpa Deployment/nginx 0%/3% 1 10 1 4m11s pc-hpa Deployment/nginx 0%/3% 1 10 1 5m19s pc-hpa Deployment/nginx 22%/3% 1 10 1 6m50s pc-hpa Deployment/nginx 22%/3% 1 10 4 7m5s pc-hpa Deployment/nginx 22%/3% 1 10 8 7m21s pc-hpa Deployment/nginx 6%/3% 1 10 8 7m51s pc-hpa Deployment/nginx 0%/3% 1 10 8 9m6s pc-hpa Deployment/nginx 0%/3% 1 10 8 13m pc-hpa Deployment/nginx 0%/3% 1 10 1 14m deployment变化 [root@k8s-master01 ~]# kubectl get deployment -n dev -w NAME READY UP-TO-DATE AVAILABLE AGE nginx 1/1 1 1 11m nginx 1/4 1 1 13m nginx 1/4 1 1 13m nginx 1/4 1 1 13m nginx 1/4 4 1 13m nginx 1/8 4 1 14m nginx 1/8 4 1 14m nginx 1/8 4 1 14m nginx 1/8 8 1 14m nginx 2/8 8 2 14m nginx 3/8 8 3 14m nginx 4/8 8 4 14m nginx 5/8 8 5 14m nginx 6/8 8 6 14m nginx 7/8 8 7 14m nginx 8/8 8 8 15m nginx 8/1 8 8 20m nginx 8/1 8 8 20m nginx 1/1 1 1 20m pod变化 [root@k8s-master01 ~]# kubectl get pods -n dev -w NAME READY STATUS RESTARTS AGE nginx-7df9756ccc-bh8dr 1/1 Running 0 11m nginx-7df9756ccc-cpgrv 0/1 Pending 0 0s nginx-7df9756ccc-8zhwk 0/1 Pending 0 0s nginx-7df9756ccc-rr9bn 0/1 Pending 0 0s nginx-7df9756ccc-cpgrv 0/1 ContainerCreating 0 0s nginx-7df9756ccc-8zhwk 0/1 ContainerCreating 0 0s nginx-7df9756ccc-rr9bn 0/1 ContainerCreating 0 0s nginx-7df9756ccc-m9gsj 0/1 Pending 0 0s nginx-7df9756ccc-g56qb 0/1 Pending 0 0s nginx-7df9756ccc-sl9c6 0/1 Pending 0 0s nginx-7df9756ccc-fgst7 0/1 Pending 0 0s nginx-7df9756ccc-g56qb 0/1 ContainerCreating 0 0s nginx-7df9756ccc-m9gsj 0/1 ContainerCreating 0 0s nginx-7df9756ccc-sl9c6 0/1 ContainerCreating 0 0s nginx-7df9756ccc-fgst7 0/1 ContainerCreating 0 0s nginx-7df9756ccc-8zhwk 1/1 Running 0 19s nginx-7df9756ccc-rr9bn 1/1 Running 0 30s nginx-7df9756ccc-m9gsj 1/1 Running 0 21s nginx-7df9756ccc-cpgrv 1/1 Running 0 47s nginx-7df9756ccc-sl9c6 1/1 Running 0 33s nginx-7df9756ccc-g56qb 1/1 Running 0 48s nginx-7df9756ccc-fgst7 1/1 Running 0 66s nginx-7df9756ccc-fgst7 1/1 Terminating 0 6m50s nginx-7df9756ccc-8zhwk 1/1 Terminating 0 7m5s nginx-7df9756ccc-cpgrv 1/1 Terminating 0 7m5s nginx-7df9756ccc-g56qb 1/1 Terminating 0 6m50s nginx-7df9756ccc-rr9bn 1/1 Terminating 0 7m5s nginx-7df9756ccc-m9gsj 1/1 Terminating 0 6m50s nginx-7df9756ccc-sl9c6 1/1 Terminating 0 6m50s #### 6.5 DaemonSet(DS) DaemonSet类型的控制器可以保证在集群中的每一台（或指定）节点上都运行一个副本。一般适用于日志收集、节点监控等场景。也就是说，如果一个Pod提供的功能是节点级别的（每个节点都需要且只需要一个），那么这类Pod就适合使用DaemonSet类型的控制器创建。 ![img](Kubernetes.assets/image-20200612010223537.png) DaemonSet控制器的特点：","s":"查看hpa","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":591,"t":"7.1 Service介绍​ 在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味着不方便直接采用pod的ip对服务进行访问。 为了解决这个问题，kubernetes提供了Service资源，Service会对提供同一个服务的多个pod进行聚合，并且提供一个统一的入口地址。通过访问Service的入口地址就能访问到后面的pod服务。 Service在很多情况下只是一个概念，真正起作用的其实是kube-proxy服务进程，每个Node节点上都运行着一个kube-proxy服务进程。当创建Service的时候会通过api-server向etcd写入创建的service的信息，而kube-proxy会基于监听的机制发现这种Service的变动，然后它会将最新的Service信息转换成对应的访问规则。 # 10.97.97.97:80 是service提供的访问入口 # 当访问这个入口的时候，可以发现后面有三个pod的服务在等待调用， # kube-proxy会基于rr（轮询）的策略，将请求分发到其中一个pod上去 # 这个规则会同时在集群内的所有节点上都生成，所以在任何一个节点上访问都可以。 [root@node1 ~]# ipvsadm -Ln IP Virtual Server version 1.2.1 (size=4096) Prot LocalAddress:Port Scheduler Flags - RemoteAddress:Port Forward Weight ActiveConn InActConn TCP 10.97.97.97:80 rr - 10.244.1.39:80 Masq 1 0 0 - 10.244.1.40:80 Masq 1 0 0 - 10.244.2.33:80 Masq 1 0 0 kube-proxy目前支持三种工作模式: 7.1.1 userspace 模式​ userspace模式下，kube-proxy会为每一个Service创建一个监听端口，发向Cluster IP的请求被Iptables规则重定向到kube-proxy监听的端口上，kube-proxy根据LB算法选择一个提供服务的Pod并和其建立链接，以将请求转发到Pod上。 该模式下，kube-proxy充当了一个四层负责均衡器的角色。由于kube-proxy运行在userspace中，在进行转发处理时会增加内核和用户空间之间的数据拷贝，虽然比较稳定，但是效率比较低。 7.1.2 iptables 模式​ iptables模式下，kube-proxy为service后端的每个Pod创建对应的iptables规则，直接将发向Cluster IP的请求重定向到一个Pod IP。 该模式下kube-proxy不承担四层负责均衡器的角色，只负责创建iptables规则。该模式的优点是较userspace模式效率更高，但不能提供灵活的LB策略，当后端Pod不可用时也无法进行重试。 7.1.3 ipvs 模式​ ipvs模式和iptables类似，kube-proxy监控Pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高。除此以外，ipvs支持更多的LB算法。 # 此模式必须安装ipvs内核模块，否则会降级为iptables # 开启ipvs [root@k8s-master01 ~]# kubectl edit cm kube-proxy -n kube-system # 修改mode: \"ipvs\" [root@k8s-master01 ~]# kubectl delete pod -l k8s-app=kube-proxy -n kube-system [root@node1 ~]# ipvsadm -Ln IP Virtual Server version 1.2.1 (size=4096) Prot LocalAddress:Port Scheduler Flags - RemoteAddress:Port Forward Weight ActiveConn InActConn TCP 10.97.97.97:80 rr - 10.244.1.39:80 Masq 1 0 0 - 10.244.1.40:80 Masq 1 0 0 - 10.244.2.33:80 Masq 1 0 0 7.2 Service类型​ Service的资源清单文件： kind: Service # 资源类型 apiVersion: v1 # 资源版本 metadata: # 元数据 name: service # 资源名称 namespace: dev # 命名空间 spec: # 描述 selector: # 标签选择器，用于确定当前service代理哪些pod app: nginx type: # Service类型，指定service的访问方式 clusterIP: # 虚拟服务的ip地址 sessionAffinity: # session亲和性，支持ClientIP、None两个选项 ports: # 端口信息 - protocol: TCP port: 3017 # service端口 targetPort: 5003 # pod端口 nodePort: 31122 # 主机端口","s":"7. Service详解","u":"/blog/docs/CICD/Kubernetes","h":"#7-service详解","p":513},{"i":593,"t":"[root@k8s-master01 ~]# kubectl create -f tomcat-nginx.yaml","s":"创建","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":595,"t":"[root@k8s-master01 ~]# kubectl get svc -n dev NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nginx-service ClusterIP None <none 80/TCP 48s tomcat-service ClusterIP None <none 8080/TCP 48s ##### 7.5.3 Http代理 创建ingress-http.yaml apiVersion: extensions/v1beta1 kind: Ingress metadata: name: ingress-http namespace: dev spec: rules:","s":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":597,"t":"[root@k8s-master01 ~]# kubectl create -f ingress-http.yaml ingress.extensions/ingress-http created","s":"创建","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":599,"t":"[root@k8s-master01 ~]# kubectl get ing ingress-http -n dev NAME HOSTS ADDRESS PORTS AGE ingress-http nginx.itheima.com,tomcat.itheima.com 80 22s","s":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":601,"t":"[root@k8s-master01 ~]# kubectl describe ing ingress-http -n dev ... Rules: Host Path Backends nginx.itheima.com / nginx-service:80 (10.244.1.96:80,10.244.1.97:80,10.244.2.112:80) tomcat.itheima.com / tomcat-service:8080(10.244.1.94:8080,10.244.1.95:8080,10.244.2.111:8080) ...","s":"查看详情","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":604,"t":"##### 7.5.4 Https代理 创建证书","s":"然后,就可以分别访问tomcat.itheima.com:32240  和  nginx.itheima.com:32240 查看效果了","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":606,"t":"openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \"/C=CN/ST=BJ/L=BJ/O=nginx/CN=itheima.com\"","s":"生成证书","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":608,"t":"kubectl create secret tls tls-secret --key tls.key --cert tls.crt 创建ingress-https.yaml apiVersion: extensions/v1beta1 kind: Ingress metadata: name: ingress-https namespace: dev spec: tls: - hosts: - nginx.itheima.com - tomcat.itheima.com secretName: tls-secret # 指定秘钥 rules:","s":"创建密钥","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":610,"t":"[root@k8s-master01 ~]# kubectl create -f ingress-https.yaml ingress.extensions/ingress-https created","s":"创建","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":612,"t":"[root@k8s-master01 ~]# kubectl get ing ingress-https -n dev NAME HOSTS ADDRESS PORTS AGE ingress-https nginx.itheima.com,tomcat.itheima.com 10.104.184.38 80, 443 2m42s","s":"查看","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":614,"t":"[root@k8s-master01 ~]# kubectl describe ing ingress-https -n dev ... TLS: tls-secret terminates nginx.itheima.com,tomcat.itheima.com Rules: Host Path Backends nginx.itheima.com / nginx-service:80 (10.244.1.97:80,10.244.1.98:80,10.244.2.119:80) tomcat.itheima.com / tomcat-service:8080(10.244.1.99:8080,10.244.2.117:8080,10.244.2.120:8080) ...","s":"查看详情","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":616,"t":"### 8. 数据存储 在前面已经提到，容器的生命周期可能很短，会被频繁地创建和销毁。那么容器在销毁时，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器的数据，kubernetes引入了Volume的概念。 Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命容器不与Pod中单个容器的生命周期相关，当容器终止或者重启时，Volume中的数据也不会丢失。 kubernetes的Volume支持多种类型，比较常见的有下面几个：","s":"下面可以通过浏览器访问https://nginx.itheima.com:31335 和 https://tomcat.itheima.com:31335来查看了","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":618,"t":"[root@k8s-master01 ~]# kubectl create -f pv.yaml persistentvolume/pv1 created persistentvolume/pv2 created persistentvolume/pv3 created","s":"创建 pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":620,"t":"[root@k8s-master01 ~]# kubectl get pv -o wide NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS AGE VOLUMEMODE pv1 1Gi RWX Retain Available 10s Filesystem pv2 2Gi RWX Retain Available 10s Filesystem pv3 3Gi RWX Retain Available 9s Filesystem ##### 8.2.2 PVC PVC是资源的申请，用来声明对存储空间、访问模式、存储类别需求信息。下面是资源清单文件: apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc namespace: dev spec: accessModes: # 访问模式 selector: # 采用标签对PV选择 storageClassName: # 存储类别 resources: # 请求空间 requests: storage: 5Gi PVC 的关键配置参数说明：","s":"查看pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":622,"t":"[root@k8s-master01 ~]# kubectl create -f pvc.yaml persistentvolumeclaim/pvc1 created persistentvolumeclaim/pvc2 created persistentvolumeclaim/pvc3 created","s":"创建pvc","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":624,"t":"[root@k8s-master01 ~]# kubectl get pvc -n dev -o wide NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE pvc1 Bound pv1 1Gi RWX 15s Filesystem pvc2 Bound pv2 2Gi RWX 15s Filesystem pvc3 Bound pv3 3Gi RWX 15s Filesystem","s":"查看pvc","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":626,"t":"[root@k8s-master01 ~]# kubectl get pv -o wide NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM AGE VOLUMEMODE pv1 1Gi RWx Retain Bound dev/pvc1 3h37m Filesystem pv2 2Gi RWX Retain Bound dev/pvc2 3h37m Filesystem pv3 3Gi RWX Retain Bound dev/pvc3 3h37m Filesystem","s":"查看pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":628,"t":"[root@k8s-master01 ~]# kubectl create -f pods.yaml pod/pod1 created pod/pod2 created","s":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":630,"t":"[root@k8s-master01 ~]# kubectl get pods -n dev -o wide NAME READY STATUS RESTARTS AGE IP NODE pod1 1/1 Running 0 14s 10.244.1.69 node1 pod2 1/1 Running 0 14s 10.244.1.70 node1","s":"查看pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":632,"t":"[root@k8s-master01 ~]# kubectl get pvc -n dev -o wide NAME STATUS VOLUME CAPACITY ACCESS MODES AGE VOLUMEMODE pvc1 Bound pv1 1Gi RWX 94m Filesystem pvc2 Bound pv2 2Gi RWX 94m Filesystem pvc3 Bound pv3 3Gi RWX 94m Filesystem","s":"查看pvc","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":634,"t":"[root@k8s-master01 ~]# kubectl get pv -n dev -o wide NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM AGE VOLUMEMODE pv1 1Gi RWX Retain Bound dev/pvc1 5h11m Filesystem pv2 2Gi RWX Retain Bound dev/pvc2 5h11m Filesystem pv3 3Gi RWX Retain Bound dev/pvc3 5h11m Filesystem","s":"查看pv","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":636,"t":"[root@nfs ~]# more /root/data/pv1/out.txt node1 node1 [root@nfs ~]# more /root/data/pv2/out.txt node2 node2 ##### 8.2.3 生命周期 PVC和PV是一一对应的，PV和PVC之间的相互作用遵循以下生命周期：","s":"查看nfs中的文件存储","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":638,"t":"[root@k8s-master01 ~]# kubectl create -f pod-secret.yaml pod/pod-secret created","s":"创建pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":640,"t":"[root@k8s-master01 ~]# kubectl get pod pod-secret -n dev NAME READY STATUS RESTARTS AGE pod-secret 1/1 Running 0 2m28s","s":"查看pod","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":642,"t":"[root@k8s-master01 ~]# kubectl exec -it pod-secret /bin/sh -n dev / # ls /secret/config/ password username / # more /secret/config/username admin / # more /secret/config/password 123456 至此，已经实现了利用secret实现了信息的编码。 ### 9. 安全认证 #### 9.1 访问控制概述 Kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对Kubernetes的各种**客户端**进行**认证和鉴权**操作。 **客户端** 在Kubernetes集群中，客户端通常有两类：","s":"进入容器，查看secret信息，发现已经自动解码了","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":644,"t":"kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-clusterrole rules:","s":"ClusterRole可以对集群范围内资源、跨namespaces的范围资源、非资源类型进行授权","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":646,"t":"kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-clusterrole-binding subjects:","s":"ClusterRoleBinding在整个集群级别和所有namespaces将特定的subject与ClusterRole绑定，授予权限","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":649,"t":"kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: authorization-role-binding-ns namespace: dev subjects:","s":"所以heima只能读取dev命名空间中的资源","u":"/blog/docs/CICD/Kubernetes","h":"","p":513},{"i":651,"t":"之前在kubernetes中完成的所有操作都是通过命令行工具kubectl完成的。其实，为了提供更丰富的用户体验，kubernetes还开发了一个基于web的用户界面（Dashboard）。用户可以使用Dashboard部署容器化的应用，还可以监控应用的状态，执行故障排查以及管理kubernetes中各种资源。 10.1 部署Dashboard​","s":"10. DashBoard","u":"/blog/docs/CICD/Kubernetes","h":"#10-dashboard","p":513}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/3",[0,0.199]],["t/5",[0,0.176]],["t/7",[1,8.024]],["t/10",[0,0.213]],["t/12",[2,8.706,3,8.706,4,8.706,5,8.706]],["t/15",[0,0.191,6,5.936,7,8.216,8,8.216,9,6.898,10,7.421,11,5.191,12,6.898,13,4.076,14,7.421,15,6.196,16,8.216]],["t/19",[0,0.221,17,6.225,18,7.336,19,7.061,20,4.257,21,4.869,22,4.31,23,6.434,24,5.658,25,5.082,26,4.686,27,6.087,28,6.087,29,5.658,30,6.087]],["t/21",[0,0.218,17,6.24,31,5.048,32,3.775,33,7.401,34,6.835,35,6.214,36,5.428,37,3.429,38,4.094,39,4.558,40,7.401,41,8.17,42,4.782,43,3.425,44,5.428,45,5.428,46,6.685,47,4.903,48,4.903,49,5.428,50,7.401,51,4.094,52,3.379,53,4.548,54,5.428,55,7.401,56,3.098,57,1.776,58,4.3,59,5.428,60,5.428]],["t/23",[0,0.225,17,6.146,20,4.181,21,3.341,22,2.336,30,4.177,32,3.216,42,4.508,43,2.691,46,5.977,52,2.112,53,5.183,56,2.639,57,1.513,61,4.624,62,4.624,63,5.374,64,5.556,65,3.487,66,4.624,67,6.12,68,3.107,69,2.46,70,3.883,71,4.624,72,4.624,73,9.284,74,3.663,75,6.12,76,4.177,77,5.241,78,4.624,79,2.842,80,4.781,81,4.624,82,4.624]],["t/25",[0,0.216,17,5.638,34,4.574,42,4.339,43,3.826,48,6.15,52,3.109,56,3.886,57,2.228,63,6.543,83,7.211,84,7.095,85,5.25,86,6.808,87,5.393,88,4.919,89,4.574,90,6.15,91,3.378,92,4.077,93,6.808,94,6.15,95,6.808,96,5.717]],["t/27",[0,0.213,34,6.608,37,2.784,43,1.792,52,3.999,79,2.708,84,3.323,87,6.534,91,3.171,97,7.52,98,5.957,99,7.451,100,7.644,101,6.534,102,4.407,103,5.367,104,2.868,105,7.911,106,4.407,107,5.367,108,4.407,109,4.407,110,4.407,111,3.981,112,4.407,113,4.407,114,8.757,115,8.248,116,6.926,117,5.736,118,4.708,119,5.433,120,3.981,121,4.407,122,2.575,123,3.7,124,4.407,125,4.407,126,5.367,127,4.407,128,4.407,129,4.407,130,3.981,131,4.407,132,6.391,133,4.407,134,4.407,135,3.184,136,4.407,137,4.407,138,4.407,139,4.407,140,4.407,141,4.407,142,4.407,143,4.407,144,9.133,145,6.391,146,4.407,147,2.407,148,4.407,149,3.7,150,6.391,151,4.407,152,4.407]],["t/30",[0,0.218,17,5.495,153,6.696,154,6.898,155,4.585]],["t/32",[0,0.224,17,6.304,52,2.586,63,3.938,101,4.485,103,8.064,153,6.878,156,3.391,157,5.6,158,5.115,159,5.662,160,6.033,161,9.604,162,6.218,163,4.754,164,5.662,165,5.662]],["t/34",[0,0.226,17,3.804,18,1.353,29,1.572,52,4.329,53,3.103,56,1.068,65,1.412,75,3.365,77,4.51,89,4.18,91,2.108,92,1.121,98,4.929,99,7.323,100,4.51,101,4.51,103,6.807,104,3.705,105,7.662,107,6.807,111,4.561,117,2.243,118,1.841,119,1.353,153,2.243,154,2.708,160,6.055,166,1.691,167,5.049,168,2.285,169,1.872,170,1.872,171,1.872,172,3.225,173,1.872,174,1.691,175,1.872,176,1.872,177,1.872,178,1.872,179,2.825,180,2.414,181,1.872,182,2.038,183,2.684,184,1.872,185,1.872,186,0.741,187,3.567,188,3.567,189,4.248,190,1.412,191,3.225,192,1.66,193,4.248,194,1.872,195,1.872,196,1.483,197,5.694,198,1.872,199,1.872,200,1.872,201,1.691,202,1.872,203,3.96,204,1.872,205,1.572,206,1.572,207,1.872,208,1.872,209,1.353,210,2.555,211,2.555,212,1.872,213,1.872,214,1.872,215,1.691,216,1.691,217,1.412,218,1.872,219,1.151,220,1.094,221,1.872,222,1.872,223,1.691,224,1.872,225,1.872,226,1.872,227,1.872,228,5.523,229,3.225,230,1.872,231,1.872,232,1.872,233,3.286,234,1.872,235,1.691,236,1.872,237,1.872,238,1.872,239,1.068,240,2.913,241,1.872,242,1.872,243,3.932,244,3.225,245,6.625,246,2.913,247,2.432,248,1.841,249,1.302,250,1.872,251,1.872,252,5.694,253,3.225,254,1.872,255,1.572,256,1.412,257,1.872,258,0.982,259,1.872,260,1.872,261,3.409,262,1.002,263,4.248,264,1.872,265,1.872]],["t/36",[0,0.223,266,8.216]],["t/38",[0,0.223,17,5.681,28,7.861,32,6.052,43,3.539,75,5.507,104,6.804,267,4.037,268,6.953,269,8.702]],["t/40",[0,0.213]],["t/42",[0,0.224,6,3.554,15,3.71,17,5.669,42,3.493,52,3.157,57,1.61,58,5.476,65,3.71,79,4.249,92,2.946,104,6.57,118,2.807,192,3.558,267,3.207,270,8.171,271,3.201,272,4.919,273,8.671,274,5.476,275,4.444,276,6.913,277,4.919,278,3.305,279,4.13,280,4.444,281,4.919,282,6.245,283,4.919,284,4.919,285,4.919,286,4.919,287,9.135,288,4.444,289,4.919,290,4.13,291,4.919,292,4.919,293,4.919,294,4.919,295,4.919,296,4.919,297,4.919]],["t/44",[0,0.208]],["t/46",[0,0.223,17,4.553,47,6.229,52,4.532,79,3.012,104,6.326,105,6.698,107,5.79,153,3.408,160,8.265,196,3.882,203,5.548,233,6.932,246,7.206,282,7.206,298,8.657,299,6.319,300,7.977,301,7.206,302,7.977,303,6.895]],["t/48",[0,0.208,17,5.455,160,7.571,304,8.114,305,8.114,306,8.114,307,8.114,308,8.114,309,8.114,310,8.114]],["t/50",[0,0.173,13,4.32,156,5.213,157,5.665]],["t/52",[0,0.217,13,3.77,157,5.98,209,6.64,311,7.716,312,7.597,313,9.19,314,6.863,315,6.863,316,7.597,317,4.24,318,7.597,319,5.02,320,7.597]],["t/54",[0,0.207,321,8.649,322,8.649]],["t/56",[0,0.198,315,7.865,323,8.706]],["t/58",[0,0.22,38,5.108,233,5.57,271,4.408,324,6.773,325,7.235,326,6.773,327,4.894,328,4.711,329,6.773,330,5.365,331,6.119,332,6.773,333,8.56,334,6.773,335,6.773,336,6.773,337,6.773,338,6.773,339,7.188,340,6.773,341,6.773,342,6.773]],["t/60",[0,0.216,325,5.485,331,7.375,343,8.164,344,8.164,345,8.164,346,8.164,347,9.593]],["t/62",[0,0.197,51,7.146,69,3.804,314,6.248,348,6.916,349,6.916,350,6.916,351,6.916,352,6.916,353,6.916,354,6.916,355,10.233,356,10.441,357,9.475,358,8.673,359,5.807,360,6.916,361,8.673,362,6.916,363,5.807,364,6.916]],["t/64",[156,5.248,157,5.703,365,5.002]],["t/66",[13,4.378,319,4.82]],["t/68",[0,0.175,13,4.378]],["t/71",[0,0.206,366,8.689,367,5.898,368,6.396]],["t/73",[0,0.223,13,4.815,18,6.379,19,3.392,20,4.098,21,4.686,23,6.658,26,3.128,43,1.829,67,3.563,74,3.563,79,3.986,118,2.567,180,1.907,182,4.098,248,2.567,366,3.776,367,3.128,369,4.063,370,2.841,371,4.497,372,6.872,373,3.776,374,4.497,375,4.497,376,7.607,377,4.063,378,4.497,379,4.497,380,4.497,381,4.497,382,6.486,383,4.497,384,4.497,385,4.497,386,4.497,387,4.497,388,4.497,389,5.138,390,2.156,391,4.497,392,3.128,393,7.607,394,1.736,395,4.497,396,2.841,397,4.497,398,4.497,399,4.497,400,4.497,401,4.497,402,4.497,403,4.497,404,3.776,405,4.063,406,3.776,407,4.497,408,4.497,409,3.776,410,4.497,411,4.063,412,4.497,413,4.497,414,4.497,415,4.497,416,4.497,417,4.497,418,4.497,419,4.497,420,4.063,421,4.497,422,4.497,423,2.022,424,3.392,425,3.563]],["t/75",[0,0.215,372,7.661,426,9.808]],["t/78",[0,0.213,118,4.966,369,6.281,427,6.562,428,6.281,429,6.953,430,6.953,431,6.953,432,6.953,433,6.953,434,6.953,435,8.992,436,6.953,437,6.953,438,6.953,439,6.953,440,6.953,441,6.953,442,6.953,443,5.838,444,8.702,445,8.702,446,6.953,447,6.953,448,6.953,449,6.953,450,6.953,451,6.953]],["t/81",[0,0.208,452,8.015,453,8.015,454,8.015,455,7.24,456,7.24,457,7.24,458,7.967,459,8.015,460,4.333,461,7.24,462,8.015]],["t/83",[0,0.215,57,2.774,394,3.784,461,7.658,463,6.67,464,6.67,465,6.67,466,6.67,467,7.824,468,2.868,469,8.477,470,7.118,471,6.67,472,7.118,473,9.318,474,5.601,475,3.433,476,6.67,477,6.67,478,6.67,479,6.67,480,6.67,481,6.025,482,6.67,483,6.67,484,6.67,485,6.67,486,6.67,487,6.67]],["t/85",[0,0.147,42,3.73,327,5.335,455,6.67,456,6.67,457,6.67,458,6.199,460,4.455,474,6.199,475,5.022,488,7.383,489,7.383,490,7.383,491,6.67,492,7.383,493,7.383,494,7.383,495,7.383,496,7.383,497,7.383,498,7.383,499,6.67,500,6.67,501,6.67,502,6.67,503,7.383,504,7.383]],["t/88",[0,0.225,6,3.827,13,5.204,157,3.447,325,4.889,396,3.346,460,3.797,474,4.447,491,4.785,499,4.785,500,4.785,501,4.785,502,6.574,505,5.296,506,4.785,507,5.296,508,5.296,509,5.296,510,5.296,511,5.296,512,5.258,513,5.296,514,5.296,515,7.278,516,7.278,517,5.296,518,7.278,519,5.296,520,2.956,521,5.296,522,3.994,523,5.296,524,5.296,525,5.296,526,5.296,527,5.296,528,5.296,529,5.296,530,5.296,531,5.488,532,5.296]],["t/90",[0,0.225,13,5.448,42,2.698,179,2.649,443,4.484,506,6.611,533,5.34,534,5.34,535,5.34,536,5.34,537,4.823,538,4.823,539,5.34,540,5.34,541,5.34,542,5.34,543,5.34,544,4.823,545,5.34,546,5.34,547,5.34,548,5.34,549,5.34,550,5.34,551,5.34,552,5.34,553,5.34,554,5.34,555,5.34,556,5.34,557,4.823,558,5.34,559,5.34,560,5.34]],["t/92",[0,0.184,561,7.686,562,7.686,563,5.345,564,7.686,565,8.97,566,7.686,567,7.686,568,7.686,569,6.088,570,6.088,571,7.686,572,7.686,573,7.686,574,7.686,575,7.686,576,6.943,577,7.686,578,7.686,579,7.686,580,7.686]],["t/94",[0,0.207,13,5.359,168,2.925,443,6.689,458,6.689,581,7.966,582,7.966,583,7.966,584,6.31,585,6.689]],["t/97",[0,0.213,13,4.742,365,5.799,427,6.119,512,5.863,586,6.813,587,6.813,588,7.33]],["t/99",[0,0.216,13,4.76,427,6.157,512,5.899,586,6.855,587,6.855,589,3.981,590,8.164]],["t/101",[0,0.226,80,3.89,233,3.503,249,3.744,274,4.264,275,6.648,366,6.179,370,3.401,427,4.06,468,2.315,512,6.819,591,5.383,592,7.359,593,6.513,594,5.383,595,7.359,596,6.179,597,5.383,598,5.383,599,5.55,600,5.383,601,4.264,602,5.383,603,5.383,604,6.179,605,3.89,606,5.383,607,5.383,608,5.383]],["t/103",[0,0.223,13,4.559,365,4.746,394,2.498,468,2.783,475,3.331,512,6.639,593,4.677,601,5.127,609,6.514,610,8.316,611,6.982,612,7.512,613,3.103,614,6.472,615,6.472,616,6.472,617,6.472,618,5.435,619,5.847,620,5.847,621,5.127,622,5.847]],["t/105",[0,0.212,365,4.872,587,7.168,623,7.168]],["t/107",[0,0.222,57,2.057,91,4.049,92,3.764,365,4.657,394,3.15,468,2.703,475,3.235,512,4.542,588,5.679,593,4.542,601,4.98,609,4.223,612,5.679,613,3.013,618,5.278,619,5.679,620,5.679,621,4.98,622,7.372,624,6.286,625,6.286,626,5.679,627,6.286,628,6.286,629,8.16,630,4.98,631,6.286,632,6.286,633,6.286,634,4.372,635,3.364,636,4.372,637,6.286,638,4.98,639,6.286,640,6.286]],["t/110",[0,0.224,1,5.623,13,3.655,52,1.941,57,2.653,100,4.931,157,4.793,220,3.637,258,2.23,288,3.839,365,3.552,470,3.568,475,5.016,481,5.623,593,3.071,611,3.568,613,2.037,630,3.366,641,4.25,642,4.25,643,4.25,644,3.568,645,3.839,646,4.25,647,2.322,648,4.25,649,4.25,650,4.25,651,4.25,652,4.25,653,4.25,654,4.25,655,4.25,656,6.224,657,6.224,658,4.25,659,3.071,660,4.25,661,3.839,662,4.25,663,3.839,664,4.25,665,5.226,666,6.224,667,4.25,668,4.25,669,3.839,670,4.25,671,4.25,672,4.25,673,4.25,674,3.839,675,4.25,676,3.839,677,4.25,678,5.623,679,4.25,680,4.25,681,4.25,682,4.25,683,4.25,684,6.224,685,6.224,686,4.25,687,5.623,688,4.25,689,4.329,690,4.25,691,4.25,692,4.25,693,4.25,694,4.25,695,4.25,696,3.839,697,4.25,698,4.25,699,2.956,700,4.25,701,4.25,702,4.25,703,3.839,704,3.568]],["t/112",[0,0.224,13,2.136,52,2.869,147,2.352,153,2.994,157,4.829,182,2.72,394,1.662,475,3.234,537,3.889,538,3.889,613,4.484,630,3.411,644,5.277,647,2.352,659,3.111,663,3.889,674,3.889,699,2.994,703,5.677,705,6.284,706,4.306,707,2.646,708,4.306,709,4.306,710,4.306,711,4.306,712,4.306,713,3.889,714,3.889,715,4.306,716,4.306,717,4.306,718,5.677,719,3.615,720,4.306,721,4.306,722,3.862,723,4.306,724,3.615,725,4.306,726,4.848,727,4.306,728,4.306,729,4.306,730,8.159,731,5.277,732,4.306,733,4.306,734,4.306,735,4.306,736,3.889,737,4.306,738,6.284,739,5.878,740,4.306,741,3.889,742,4.306,743,4.306,744,4.306,745,4.306,746,4.306,747,3.615,748,4.306,749,4.306,750,4.306,751,4.306,752,6.284,753,4.306,754,4.306,755,3.615,756,4.306,757,4.306,758,4.306,759,3.111,760,4.306,761,4.306,762,3.889,763,4.306,764,4.306]],["t/114",[0,0.221,120,6.801,147,3.041,278,5.731,370,4.756,394,2.906,470,4.674,475,2.865,613,3.609,626,5.028,630,4.409,739,6.757,755,4.674,762,5.028,765,5.566,766,5.566,767,5.566,768,5.566,769,5.566,770,5.566,771,5.963,772,5.566,773,5.566,774,5.566,775,5.566,776,5.566,777,5.566,778,5.566,779,5.566,780,9.139,781,5.566,782,7.528,783,5.566,784,5.963,785,5.566,786,5.566,787,5.566,788,5.566,789,5.566,790,5.566,791,5.566,792,5.566,793,5.566,794,5.566,795,7.528,796,5.566,797,5.566,798,3.871,799,5.566,800,5.566,801,5.566]],["t/116",[0,0.223,147,4.631,394,2.574,475,4.796,613,4.063,638,5.283,644,5.601,678,7.658,704,7.118,714,6.025,726,4.536,802,6.67,803,6.67,804,6.67,805,6.67,806,6.67,807,6.67,808,6.67,809,6.67,810,6.67,811,6.67,812,6.67,813,6.67,814,6.67]],["t/118",[0,0.218,394,2.915,475,3.887,584,5.983,613,3.621,659,5.458,699,6.369,815,7.553,816,7.553,817,7.553,818,9.157,819,7.553,820,7.553,821,7.553,822,7.553,823,7.553,824,7.553]],["t/121",[0,0.213,80,7.341,394,3.132,613,3.889,825,9.558,826,8.114,827,8.114,828,8.114]],["t/123",[0,0.176]],["t/126",[13,4.378,829,8.823]],["t/128",[0,0.217,91,3.814,92,4.602,217,5.796,365,5.282,609,5.163,634,5.345,636,5.345,830,7.686,831,6.454,832,7.686,833,7.686,834,7.686,835,7.686,836,7.686,837,7.686]],["t/130",[13,4.154,168,3.075,365,5.556,838,8.373,839,8.373,840,8.373,841,8.373,842,8.373,843,8.373]],["t/132",[0,0.218,91,5.169,92,3.405,123,8.076,217,4.289,325,7.072,365,3.246,420,8.688,609,3.82,623,7.741,634,3.955,636,3.955,831,4.775,844,5.687,845,5.687,846,8.076,847,4.505,848,5.687,849,5.687,850,9.618,851,5.687,852,5.137,853,5.687,854,7.431]],["t/135",[13,5.029,365,5.435,855,8.064,856,8.064,857,8.064,858,8.064,859,8.064,860,8.064,861,8.064,862,8.064,863,8.064,864,8.064,865,8.064]],["t/137",[0,0.222,13,3.165,85,4.597,91,3.165,92,3.819,217,4.81,365,5.207,411,5.762,609,4.285,634,4.436,636,4.436,831,5.355,866,6.378,867,6.378,868,8.237,869,6.46,870,6.378,871,6.378,872,6.378,873,6.378,874,6.378,875,6.378,876,6.378,877,6.378,878,6.378,879,6.917,880,6.378,881,6.378,882,5.762]],["t/139",[0,0.223,56,3.085,57,2.415,180,2.292,220,4.312,636,3.759,722,5.164,726,2.893,883,5.406,884,5.406,885,5.406,886,5.406,887,5.406,888,5.406,889,5.406,890,6.337,891,7.38,892,6.667,893,8.156,894,5.406,895,5.406,896,5.406,897,5.406,898,5.406,899,4.883,900,5.406,901,5.406,902,5.406,903,5.406,904,5.406,905,7.056,906,6.337,907,7.591,908,4.539,909,8.403,910,6.667,911,5.406,912,7.38,913,5.406,914,5.406,915,8.403,916,5.406,917,5.406]],["t/141",[0,0.218,13,3.525,57,2.886,91,3.525,258,3.727,365,4.054,475,3.656,609,4.772,634,4.94,636,4.94,918,7.103,919,5.964,920,7.103,921,7.966,922,6.417,923,7.103,924,4.94,925,7.103,926,7.103,927,7.103,928,8.819,929,7.103,930,7.103,931,7.103,932,5.132]],["t/143",[0,0.211,13,3.663,248,4.214,665,6.199,759,5.335,890,6.811,933,7.383,934,7.383,935,7.383,936,7.383,937,5.877,938,7.383,939,7.383,940,7.383,941,7.383,942,7.383,943,7.383,944,7.383,945,7.383,946,7.383,947,7.383,948,7.383,949,7.383,950,7.383]],["t/147",[951,8.823,952,8.823]],["t/149",[0,0.21,13,3.361,91,3.361,240,6.119,328,5.953,367,4.711,370,5.408,613,3.247,638,5.365,953,8.56,954,6.773,955,6.773,956,6.773,957,6.773,958,6.773,959,6.773,960,6.773,961,6.773,962,6.773,963,6.773,964,7.732,965,6.78,966,6.773,967,8.56,968,8.478,969,6.773,970,8.56,971,6.773,972,6.119,973,6.773,974,6.773,975,4.894]],["t/151",[0,0.22,57,2.077,91,3.149,261,4.917,328,5.711,365,3.622,370,4.01,609,5.516,613,3.043,634,6.331,635,3.397,636,4.414,647,3.467,665,5.33,722,3.901,964,5.734,976,8.212,977,6.347,978,6.347,979,6.347,980,6.347,981,5.734,982,6.347,983,6.347,984,6.347,985,6.347,986,6.347,987,6.347,988,6.347,989,6.347,990,5.028,991,4.787,992,5.734,993,6.347,994,5.028,995,6.347,996,6.347,997,6.347]],["t/153",[210,6.59,968,7.516,998,8.32,999,8.32,1000,8.32,1001,8.32,1002,8.32,1003,8.32,1004,8.32,1005,8.32,1006,8.32]],["t/155",[0,0.213,57,2,153,6.216,168,2.244,180,2.59,186,2.42,220,5.905,258,3.206,325,4.105,609,5.382,676,5.52,747,6.727,846,5.131,852,8.074,919,6.727,922,5.52,932,4.415,1007,6.111,1008,6.111,1009,6.111,1010,6.111,1011,6.111,1012,8.011,1013,6.111,1014,6.111,1015,6.111,1016,6.111,1017,6.111,1018,8.011,1019,6.111,1020,6.111,1021,6.111,1022,6.111,1023,6.111,1024,5.52,1025,6.111,1026,6.111,1027,6.111,1028,6.111,1029,6.111,1030,6.111,1031,6.111,1032,6.111,1033,6.111]],["t/157",[0,0.171,365,4.904,1034,8.592,1035,8.592,1036,3.719]],["t/160",[58,6.896,1037,8.706,1038,8.706,1039,8.706]],["t/162",[118,4.969,1040,6.896,1041,4.105,1042,8.706]],["t/164",[0,0.218,1043,9.061,1044,7.87,1045,7.87,1046,6.609,1047,7.87,1048,7.87,1049,7.87,1050,7.87,1051,7.87,1052,7.87]],["t/166",[0,0.221,394,3.074,1053,6.689,1054,5.351,1055,7.966,1056,7.966,1057,5.54,1058,7.966,1059,7.966]],["t/168",[0,0.161,57,2.655,319,5.221,522,6.119,1060,6.22,1061,8.025,1062,8.114,1063,8.114,1064,6.119,1065,8.114,1066,8.114,1067,8.114]],["t/170",[0,0.22,25,3.795,122,2.94,158,4.546,183,5.113,248,4.618,319,2.749,389,3.986,390,2.412,601,3.986,707,4.973,937,4.571,991,5.297,1041,3.815,1043,6.345,1054,3.381,1060,3.275,1068,5.032,1069,5.032,1070,5.032,1071,5.032,1072,5.032,1073,3.986,1074,7.024,1075,5.032,1076,3.986,1077,7.024,1078,4.546,1079,7.024,1080,4.885,1081,5.564,1082,5.533,1083,5.032,1084,7.31,1085,5.032,1086,5.032,1087,5.032,1088,5.032,1089,5.032,1090,9.212,1091,5.032,1092,5.032,1093,5.032,1094,5.898,1095,4.226,1096,5.032,1097,4.226,1098,7.024,1099,7.024,1100,6.345,1101,7.024,1102,4.546,1103,5.032,1104,5.032,1105,5.032,1106,5.032,1107,5.032,1108,1.918]],["t/173",[0,0.219,42,4.719,57,2.194,243,4.236,247,5.056,468,2.883,613,4.077,726,4.551,921,6.056,1109,6.704,1110,6.704,1111,6.056,1112,6.056,1113,5.629,1114,6.704,1115,6.414,1116,6.056,1117,5.629,1118,6.056,1119,5.629,1120,5.31,1121,5.629,1122,4.014,1123,6.704,1124,7.141,1125,6.704,1126,6.704,1127,6.704,1128,6.704,1129,5.629,1130,6.704]],["t/175",[0,0.223,57,2.999,168,1.635,243,5.236,267,2.065,339,3.738,394,3.393,468,3.564,932,4.652,1041,3.035,1053,3.738,1054,2.991,1111,4.021,1112,4.021,1113,3.738,1115,3.357,1116,4.021,1117,3.738,1118,4.021,1119,3.738,1120,3.526,1121,3.738,1122,2.666,1131,6.438,1132,4.452,1133,4.452,1134,6.438,1135,4.021,1136,4.452,1137,5.907,1138,4.452,1139,4.021,1140,4.452,1141,5.1,1142,3.526,1143,6.353,1144,8.287,1145,8.287,1146,8.287,1147,8.287,1148,8.287,1149,4.452,1150,4.452,1151,4.452,1152,4.452,1153,4.452,1154,5.816,1155,4.452,1156,4.452,1157,4.452,1158,4.021,1159,4.452,1160,4.452,1161,4.452,1162,4.452,1163,4.452,1164,4.452,1165,4.452,1166,4.452,1167,4.452]],["t/177",[0,0.218,11,6.235,42,3.261,53,3.967,228,3.227,261,2.675,317,4.633,339,6.97,394,3.204,468,3.569,613,4.398,726,4.442,847,5.112,975,4.663,1041,2.106,1053,3.751,1054,3.001,1113,3.751,1117,3.751,1119,3.751,1120,3.538,1121,3.751,1122,2.675,1124,7.393,1135,4.035,1137,4.336,1142,3.538,1143,3.227,1168,6.454,1169,4.467,1170,4.467,1171,4.467,1172,4.467,1173,3.369,1174,4.467,1175,4.035,1176,4.467,1177,5.112,1178,4.467,1179,4.467,1180,4.467,1181,4.467,1182,6.454,1183,4.467,1184,4.467,1185,3.751,1186,4.467,1187,7.578,1188,4.467,1189,4.467,1190,4.467,1191,4.467,1192,4.467,1193,4.467,1194,4.467,1195,4.078,1196,4.467,1197,4.467,1198,4.467,1199,4.467,1200,4.467,1201,4.467,1202,4.467,1203,4.467,1204,4.467,1205,4.467,1206,4.467,1207,4.467,1208,4.467,1209,4.467,1210,6.454,1211,4.467,1212,4.467,1213,4.467,1214,4.467,1215,4.467,1216,4.467]],["t/180",[0,0.21,118,4.718,1040,6.549,1046,6.942,1217,7.468,1218,8.267,1219,5.939,1220,8.267]],["t/182",[0,0.215,156,5.079,1041,3.999,1221,6.396]],["t/184",[0,0.219,31,3.054,42,1.807,156,2.142,168,1.314,180,1.517,258,1.877,261,2.142,317,1.997,396,2.26,468,2.353,520,3.054,869,2.26,1041,1.687,1173,5.011,1177,2.834,1222,3.578,1223,3.578,1224,2.834,1225,3.578,1226,4.126,1227,3.578,1228,6.248,1229,4.126,1230,3.578,1231,3.953,1232,4.943,1233,4.334,1234,3.578,1235,3.232,1236,3.004,1237,3.004,1238,2.834,1239,3.004,1240,2.834,1241,3.004,1242,2.834,1243,4.594,1244,3.004,1245,3.578,1246,3.578,1247,4.943,1248,5.472,1249,3.232,1250,3.578,1251,8.456,1252,8.019,1253,3.578,1254,3.232,1255,3.578,1256,3.578,1257,3.578,1258,5.472,1259,3.232,1260,3.578,1261,3.578,1262,3.578,1263,2.488,1264,3.232,1265,3.578,1266,3.232,1267,3.578,1268,2.834,1269,3.578,1270,3.578,1271,5.472,1272,5.472,1273,5.472,1274,5.472,1275,3.578,1276,3.578,1277,3.578,1278,3.578,1279,3.578,1280,3.578,1281,3.578,1282,3.578,1283,3.232,1284,3.232,1285,3.578,1286,6.644,1287,3.232,1288,3.578,1289,3.232,1290,3.578,1291,3.232,1292,3.578,1293,3.578,1294,3.578,1295,3.578,1296,3.232,1297,3.578,1298,6.644,1299,3.232,1300,3.578,1301,3.232,1302,3.578,1303,4.943,1304,3.578,1305,3.578,1306,3.578,1307,3.578,1308,3.578,1309,3.232,1310,3.578,1311,5.472,1312,5.472,1313,3.232,1314,3.578,1315,3.578,1316,3.578,1317,3.578,1318,3.578,1319,3.578,1320,3.578,1321,3.578,1322,3.578,1323,3.578,1324,3.232,1325,3.578,1326,3.578,1327,1.914,1328,3.578,1329,3.578,1330,2.834,1331,3.232,1332,5.472,1333,3.232,1334,3.578,1335,4.621,1336,3.578,1337,3.578,1338,3.578,1339,3.578,1340,3.578,1341,3.578,1342,3.578,1343,3.578,1344,3.578]],["t/186",[0,0.22,31,4.095,42,4.143,69,1.102,85,2.636,122,1.731,168,2.871,179,2.343,180,3.477,233,1.928,261,1.774,319,1.619,368,3.562,394,3.017,468,2.031,589,2.871,635,3.595,975,3.413,1036,1.115,1041,1.397,1060,1.928,1122,1.774,1154,2.677,1173,5.533,1195,1.872,1224,3.741,1226,6.422,1229,6.185,1231,6.152,1233,6.745,1236,2.488,1237,3.966,1238,5.321,1239,4.944,1240,3.741,1241,2.488,1242,2.347,1243,3.966,1244,2.488,1263,2.061,1335,4.672,1345,2.963,1346,5.888,1347,4.266,1348,4.944,1349,4.128,1350,3.741,1351,6.717,1352,6.717,1353,6.717,1354,7.062,1355,6.068,1356,5.321,1357,2.963,1358,2.963,1359,1.928,1360,2.963,1361,3.966,1362,7.337,1363,2.963,1364,2.488,1365,2.963,1366,1.691,1367,2.963,1368,2.963,1369,2.963,1370,1.872,1371,2.963,1372,4.266,1373,2.963,1374,2.963,1375,2.963,1376,7.692,1377,2.963,1378,2.963,1379,2.963,1380,2.963,1381,2.963,1382,6.068,1383,6.068,1384,2.963,1385,6.068,1386,2.963,1387,2.963,1388,4.723,1389,4.723,1390,2.963,1391,2.963,1392,2.963,1393,2.677,1394,2.963,1395,2.963,1396,2.963,1397,4.095,1398,2.963,1399,2.347,1400,2.963,1401,2.677,1402,2.963,1403,2.963,1404,4.723,1405,2.963,1406,2.963]],["t/188",[0,0.222,31,2.251,37,1.541,42,2.038,85,1.362,92,2.415,166,2.204,168,2.436,174,2.204,220,2.356,233,5.334,258,2.705,317,1.362,319,3.272,394,2.757,468,3.072,520,3.342,613,3.624,724,5.998,726,4.046,975,2.914,1041,3.127,1122,1.461,1143,1.763,1173,5.387,1224,4.084,1226,6.532,1229,6.182,1231,4.792,1233,5.253,1236,5.998,1237,3.387,1238,3.195,1239,3.387,1240,3.195,1241,3.387,1242,3.195,1243,5.029,1244,3.387,1268,3.195,1327,1.306,1330,3.195,1335,5.498,1347,2.204,1348,5.029,1349,4.39,1350,1.933,1364,4.329,1407,2.44,1408,2.44,1409,2.44,1410,6.632,1411,2.204,1412,7.144,1413,7.144,1414,5.989,1415,2.44,1416,2.44,1417,2.44,1418,2.44,1419,1.763,1420,2.44,1421,2.204,1422,2.44,1423,2.049,1424,1.933,1425,5.989,1426,4.033,1427,5.989,1428,2.44,1429,2.44,1430,2.44,1431,3.387,1432,2.44,1433,1.933,1434,1.933,1435,2.204,1436,2.44,1437,2.44,1438,2.44,1439,4.033,1440,5.156,1441,4.033,1442,4.033,1443,2.44,1444,2.44,1445,4.033,1446,2.44,1447,2.44,1448,2.44,1449,2.44,1450,2.44,1451,2.44,1452,2.44,1453,2.44,1454,2.44,1455,2.44,1456,2.44,1457,3.643,1458,2.44,1459,3.643,1460,5.989,1461,4.033,1462,5.989,1463,4.033,1464,5.989,1465,4.033,1466,5.989,1467,4.033,1468,2.44,1469,2.44,1470,2.44,1471,4.657,1472,2.44,1473,2.44,1474,2.44,1475,2.049,1476,2.44,1477,2.44,1478,2.44,1479,2.44,1480,2.44,1481,4.033,1482,4.033,1483,2.44,1484,2.44]],["t/190",[0,0.222,31,3.152,42,4.51,168,1.37,180,1.581,258,2.963,261,4.082,319,2.038,394,1.44,468,4.25,589,1.819,981,5.102,1036,2.126,1060,2.427,1137,5.997,1142,6.808,1143,6.21,1173,6.16,1175,3.37,1224,6.47,1226,6.16,1229,6.16,1231,6.21,1233,6.808,1238,4.474,1240,4.474,1242,4.474,1324,6.868,1327,3.023,1335,3.928,1348,3.132,1349,5.282,1366,2.129,1376,5.102,1382,3.37,1383,3.37,1385,3.37,1393,3.37,1485,3.73,1486,3.73,1487,3.73,1488,3.73,1489,8.168,1490,3.73,1491,5.648,1492,5.648,1493,5.648,1494,7.603,1495,7.603,1496,5.648,1497,3.73,1498,3.37,1499,3.73,1500,3.73,1501,3.73,1502,5.648,1503,3.73,1504,3.73,1505,3.73,1506,5.648]],["t/193",[0,0.214,156,5.533,157,2.967,168,1.675,180,1.933,209,3.295,233,2.967,317,3.656,327,3.295,328,3.171,423,2.05,589,2.223,1219,2.803,1221,5.782,1366,2.603,1370,2.881,1433,3.612,1507,4.56,1508,4.56,1509,4.56,1510,4.56,1511,4.56,1512,6.551,1513,4.56,1514,4.56,1515,4.56,1516,4.56,1517,4.56,1518,4.56,1519,4.56,1520,4.56,1521,4.56,1522,4.56,1523,4.56,1524,4.56,1525,4.56,1526,4.56,1527,4.56,1528,4.56,1529,4.56,1530,4.56,1531,4.56,1532,4.56,1533,4.56,1534,4.56,1535,4.56,1536,3.295,1537,4.56,1538,4.56,1539,4.56,1540,4.56,1541,4.56,1542,4.56,1543,4.56,1544,4.56,1545,4.56,1546,4.56,1547,4.56,1548,4.56,1549,4.56,1550,4.56,1551,4.56,1552,4.56,1553,4.56,1554,4.56,1555,4.56,1556,4.56,1557,4.56,1558,4.56,1559,4.56,1560,4.56,1561,4.56,1562,4.56,1563,4.56,1564,4.56,1565,4.56,1566,4.56,1567,4.56,1568,4.56,1569,4.56,1570,4.56,1571,4.56,1572,4.56,1573,4.56,1574,4.56,1575,4.56,1576,4.56,1577,4.56,1578,4.56,1579,4.56,1580,4.56,1581,4.56,1582,4.56,1583,4.56,1584,4.56,1585,4.56,1586,4.56,1587,4.56,1588,4.56,1589,4.56,1590,4.56,1591,4.56,1592,4.56,1593,4.56,1594,4.56,1595,4.56,1596,4.56,1597,4.56,1598,4.56,1599,4.56,1600,4.56,1601,4.56,1602,4.56]],["t/195",[0,0.204,156,6.148,1041,4.573,1221,6.274,1603,8.32,1604,8.32]],["t/197",[0,0.223,156,2.285,168,0.838,190,1.721,228,6.5,233,1.485,243,1.442,258,1.198,267,1.059,317,4.729,325,2.564,327,1.649,363,1.917,394,1.898,468,3.437,520,1.274,589,1.113,613,4.438,635,2.042,699,1.588,724,6.711,726,4.954,975,2.757,1082,1.442,1137,3.86,1177,6.867,1195,4.635,1268,1.808,1335,5.558,1349,3.022,1350,1.808,1359,3.739,1361,4.129,1431,1.917,1433,1.808,1434,1.808,1435,3.447,1457,2.062,1459,2.062,1471,3.447,1536,1.649,1605,2.062,1606,2.283,1607,2.283,1608,2.283,1609,2.283,1610,2.283,1611,2.283,1612,2.283,1613,2.062,1614,2.062,1615,1.808,1616,2.283,1617,1.917,1618,2.283,1619,1.721,1620,1.808,1621,2.062,1622,2.062,1623,2.283,1624,2.283,1625,5.746,1626,6.243,1627,2.283,1628,2.283,1629,2.283,1630,4.295,1631,3.447,1632,2.283,1633,2.283,1634,2.283,1635,2.283,1636,3.447,1637,2.283,1638,1.588,1639,3.816,1640,2.283,1641,2.283,1642,2.283,1643,2.283,1644,2.878,1645,2.283,1646,2.062,1647,2.283,1648,2.283,1649,3.447,1650,5.191,1651,2.283,1652,2.062,1653,2.062,1654,2.062,1655,2.062,1656,2.283,1657,2.283,1658,2.283,1659,2.283,1660,2.283,1661,2.283,1662,2.062,1663,2.283,1664,3.204,1665,2.283,1666,2.283,1667,2.283,1668,2.283,1669,2.062,1670,2.283,1671,2.283,1672,3.816,1673,2.283,1674,2.283,1675,2.283,1676,2.283,1677,2.283,1678,2.283,1679,2.283,1680,2.283,1681,2.283,1682,2.283,1683,2.283,1684,2.283,1685,1.917,1686,2.283,1687,1.917,1688,2.283,1689,2.283,1690,2.283,1691,2.283,1692,2.283,1693,2.062,1694,3.816,1695,2.283,1696,2.283,1697,2.283,1698,2.283,1699,2.283,1700,2.283,1701,2.283,1702,2.283,1703,2.283,1704,2.283,1705,2.283,1706,2.283,1707,2.283,1708,2.283,1709,2.283,1710,1.808,1711,2.283,1712,2.283,1713,2.283,1714,1.533,1715,2.283,1716,2.283,1717,2.283,1718,2.283,1719,2.283,1720,2.283,1721,2.283,1722,2.283,1723,2.283,1724,2.283,1725,2.283,1726,2.283,1727,2.283,1728,2.283,1729,2.283,1730,2.062,1731,2.283,1732,2.283,1733,2.283,1734,2.283,1735,2.283,1736,2.283,1737,2.283,1738,1.485,1739,2.283,1740,2.283,1741,2.283,1742,1.917,1743,2.283,1744,2.283,1745,2.283,1746,2.283,1747,2.283,1748,2.283,1749,2.283]],["t/199",[0,0.221,155,3.222,156,2.299,168,1.41,190,2.895,267,3.218,317,4.306,363,6.478,394,3.354,468,2.983,613,3.965,699,5.365,726,4.824,975,5.574,1041,1.81,1057,4.824,1195,3.647,1219,3.548,1335,5.365,1349,3.548,1350,4.573,1359,4.514,1361,3.224,1622,6.266,1626,6.969,1630,3.878,1631,3.468,1636,5.215,1646,6.266,1649,3.468,1650,3.468,1652,5.215,1662,3.468,1685,3.224,1687,3.224,1693,3.468,1750,5.772,1751,3.839,1752,3.839,1753,7.472,1754,3.839,1755,3.839,1756,3.839,1757,3.839,1758,3.839,1759,3.839,1760,3.839,1761,3.839,1762,3.839,1763,3.839,1764,3.839,1765,3.839,1766,3.839,1767,3.839,1768,3.839,1769,5.772,1770,7.715,1771,5.772,1772,5.772,1773,5.772,1774,8.271,1775,3.839,1776,3.839,1777,3.839,1778,3.839,1779,3.839,1780,3.839,1781,3.839,1782,3.839,1783,3.839,1784,3.839,1785,3.839,1786,3.839,1787,3.839,1788,3.839,1789,3.839,1790,3.224,1791,3.839,1792,3.839,1793,3.839,1794,3.839,1795,3.839,1796,3.839,1797,3.839]],["t/201",[0,0.221,290,5.997,394,3.415,468,3.071,531,5.386,1219,4.389,1615,5.657,1619,5.386,1620,5.657,1798,7.142,1799,7.142,1800,7.142,1801,7.142,1802,5.997,1803,7.43,1804,8.849,1805,5.997,1806,7.142,1807,7.142,1808,7.142,1809,6.452]],["t/203",[0,0.174,1614,7.917,1810,8.764]],["t/205",[0,0.22,394,3.534,468,3.248,1219,4.642,1619,5.696,1620,5.983,1805,6.342,1811,9.157,1812,7.553,1813,7.553,1814,7.254,1815,6.342,1816,6.906]],["t/207",[0,0.206,1816,6.438,1817,8.536,1818,8.536,1819,8.536]],["t/209",[0,0.205,394,3.842,468,3.325,1195,4.885,1349,4.752,1359,5.031,1615,6.124,1630,5.194,1802,6.492,1803,7.798,1814,6.124,1815,6.492,1816,7.004,1820,6.492,1821,6.984,1822,6.492]],["t/211",[0,0.209,317,5.379,468,3.818,520,4.008,613,3.442,726,3.843,1124,8.454,1195,4.537,1349,4.413,1359,4.673,1630,4.824,1638,7.195,1814,5.688,1816,5.416,1823,7.181,1824,7.181,1825,8.879,1826,7.181,1827,7.181,1828,7.181]],["t/213",[0,0.176]],["t/215",[0,0.218,243,4.488,394,3.404,468,3.055,882,6.417,1219,4.366,1617,5.964,1619,5.357,1620,5.627,1805,5.964,1829,7.966,1830,8.664,1831,7.103,1832,7.103,1833,7.103,1834,7.103,1835,6.417,1836,7.103,1837,7.103,1838,5.964,1839,7.103,1840,6.417,1841,7.966]],["t/217",[0,0.222,42,4.31,168,2.475,243,4.257,390,3.23,468,4.026,1219,4.141,1829,6.087,1830,6.087,1835,6.087,1842,6.738,1843,6.738,1844,6.738,1845,6.738,1846,6.738,1847,6.738,1848,6.738,1849,9.363,1850,9.363,1851,6.738,1852,6.738,1853,7.707,1854,6.738,1855,6.738]],["t/219",[0,0.208,394,3.939,468,3.211,1195,4.718,1349,4.589,1359,4.859,1615,5.915,1617,6.27,1630,5.016,1802,6.27,1803,7.636,1814,5.915,1815,6.27,1816,6.858,1820,6.27,1821,6.745,1822,6.27,1840,6.745,1841,8.215]],["t/221",[0,0.221,118,4.098,468,3.088,1040,5.688,1041,4.186,1046,6.03,1185,6.03,1195,4.537,1219,4.413,1226,5.416,1231,5.189,1349,4.413,1359,4.673,1630,4.824,1856,7.181,1857,7.181,1858,7.181,1859,7.181,1860,8.879,1861,6.03,1862,7.181]],["t/223",[0,0.215,42,3.838,156,4.549,468,3.267,1195,4.8,1229,5.729,1231,6.64,1349,4.669,1359,4.944,1630,5.104,1654,6.863,1861,6.379,1863,7.597,1864,7.597,1865,7.597,1866,7.597,1867,7.597,1868,7.597,1869,7.597]],["t/225",[0,0.222,85,2.897,156,3.109,168,1.907,394,2.77,468,4.007,635,3.841,1195,5.198,1219,3.191,1221,3.915,1349,5.056,1359,3.378,1630,5.527,1653,8.018,1664,4.359,1822,4.359,1861,6.027,1870,5.192,1871,5.192,1872,9.636,1873,3.28,1874,5.192,1875,5.192,1876,4.69,1877,8.227,1878,8.227,1879,4.69,1880,5.192,1881,7.178,1882,5.192,1883,5.192,1884,7.178,1885,5.192,1886,7.178,1887,5.192,1888,5.192,1889,5.192,1890,5.192,1891,5.192,1892,5.192,1893,5.192,1894,5.192,1895,5.192,1896,5.192,1897,5.192,1898,7.178,1899,5.192]],["t/227",[0,0.222,37,3.387,156,5.01,163,7.555,394,3.473,423,2.411,613,3.518,635,3.927,726,3.927,1219,5.142,1221,6.31,1433,7.892,1613,4.843,1619,5.535,1638,5.104,1900,8.998,1901,5.361,1902,7.339,1903,5.361,1904,5.361,1905,5.361,1906,5.361,1907,5.361,1908,4.043,1909,7.339,1910,5.361,1911,5.361,1912,5.361,1913,5.361,1914,5.361,1915,5.361,1916,5.361,1917,5.361,1918,5.361,1919,5.361,1920,5.361,1921,5.361,1922,5.361,1923,5.361,1924,5.361,1925,5.361]],["t/230",[0,0.22,51,5.71,118,3.204,319,5.389,390,2.691,394,2.167,468,3.256,576,5.071,759,4.056,1040,4.447,1041,4.515,1054,5.087,1060,6.231,1061,4.714,1102,5.071,1137,3.771,1232,5.071,1908,4.234,1926,5.614,1927,5.614,1928,7.572,1929,7.572,1930,5.614,1931,5.614,1932,5.614,1933,5.614,1934,5.614,1935,5.614,1936,5.071,1937,6.84,1938,5.614,1939,5.071,1940,5.614,1941,7.572,1942,5.071,1943,5.614,1944,5.614,1945,5.071,1946,5.071,1947,4.714,1948,5.614,1949,5.614,1950,5.614,1951,5.614,1952,5.614,1953,5.071,1954,5.071]],["t/232",[0,0.224,155,4.888,319,5.308,1041,4.401,1054,3.94,1060,6.074,1061,4.925,1953,5.298,1955,9.334,1956,8.758,1957,5.298,1958,4.925,1959,5.865,1960,5.865,1961,5.865,1962,5.865,1963,5.865,1964,5.865,1965,4.646,1966,5.865,1967,5.865,1968,5.865,1969,5.865,1970,5.865,1971,5.865,1972,5.88,1973,8.758,1974,5.865]],["t/234",[0,0.216,155,5.354,319,4.46,1041,4.523,1975,8.164,1976,8.164,1977,8.164]],["t/236",[0,0.222,147,3.401,155,5.53,394,3.13,1041,4.505,1057,4.33,1638,4.33,1978,6.227,1979,6.227,1980,4.696,1981,5.625,1982,5.625,1983,6.227,1984,5.228,1985,6.227,1986,5.625,1987,6.227,1988,5.625,1989,6.227,1990,8.11,1991,6.227,1992,6.227,1993,6.227,1994,8.11,1995,8.11,1996,6.227,1997,6.227,1998,7.326,1999,6.227,2000,6.227,2001,6.227]],["t/238",[0,0.223,147,3.798,153,4.835,155,5.301,1036,2.617,1041,3.278,1399,6.893,1998,6.281,2002,7.307,2003,6.953,2004,6.953,2005,6.953,2006,7.976,2007,6.953,2008,6.953,2009,6.953,2010,6.953,2011,6.953]],["t/240",[0,0.224,57,2,147,4.882,155,4.471,319,3.338,394,3.092,906,4.608,1036,2.3,1057,4.25,1366,3.487,1638,4.25,1879,5.52,1980,4.608,1981,5.52,1982,5.52,1984,5.131,1986,5.52,1988,5.52,2012,8.937,2013,6.111,2014,5.131,2015,8.937,2016,8.937,2017,8.011,2018,6.111,2019,6.111,2020,6.111,2021,6.111]],["t/242",[0,0.221,147,4.514,155,4.612,394,3.53,991,7.286,1057,6.36,1638,4.457,1980,6.232,2014,7.679,2022,8.263,2023,6.409,2024,6.409,2025,6.409,2026,6.409,2027,6.409,2028,6.409,2029,8.263,2030,6.409,2031,6.409,2032,6.409,2033,6.409,2034,6.409,2035,6.409,2036,6.409,2037,6.409,2038,6.409,2039,6.409]],["t/244",[0,0.215,147,5.055,319,4.199,394,3.572,589,3.748,593,5.553,621,6.088,1057,5.345,1638,5.345,1980,5.796,1984,6.454,2014,6.454,2040,7.686,2041,7.686,2042,7.686,2043,7.686]],["t/247",[0,0.222,311,6.342,317,4.215,319,5.002,605,5.458,1644,5.696,1965,5.983,1972,7.432,2044,7.553,2045,8.272]],["t/249",[0,0.218,187,6.097,317,4.052,325,6.506,394,2.802,460,4.082,613,3.48,1041,3.423,2046,7.261,2047,7.261,2048,7.261,2049,7.261,2050,7.261,2051,6.097,2052,7.261,2053,7.261,2054,7.261,2055,6.559,2056,7.261,2057,7.261,2058,7.261,2059,6.097]],["t/252",[0,0.216,31,1.933,42,1.75,118,1.977,155,1.933,180,1.469,182,2.189,319,2.916,328,2.409,370,2.189,394,3.05,468,4.046,589,1.689,613,2.559,659,2.503,726,2.857,869,4.993,1041,3.07,1137,3.586,1247,3.129,1249,3.129,1254,3.129,1259,3.129,1264,3.129,1266,4.822,1283,3.129,1284,3.129,1287,3.129,1289,3.129,1291,3.129,1296,3.129,1299,3.129,1301,3.129,1303,3.129,1309,3.129,1313,4.822,1366,1.977,1370,2.189,1498,6.609,1853,5.883,1908,4.026,2006,2.909,2060,3.464,2061,3.464,2062,3.464,2063,3.464,2064,3.464,2065,3.464,2066,3.464,2067,3.464,2068,3.464,2069,3.464,2070,3.464,2071,3.464,2072,3.464,2073,3.464,2074,3.464,2075,3.464,2076,3.464,2077,3.464,2078,3.464,2079,3.464,2080,3.464,2081,3.464,2082,3.464,2083,3.464,2084,3.464,2085,5.338,2086,5.338,2087,3.464,2088,3.464,2089,3.464,2090,3.464,2091,3.464,2092,3.464,2093,3.464,2094,3.464,2095,3.464,2096,3.464,2097,3.464,2098,3.464,2099,3.464,2100,3.464,2101,3.464,2102,3.464,2103,3.464,2104,3.464,2105,3.464,2106,3.464,2107,3.464,2108,3.464,2109,3.464,2110,3.464,2111,3.129,2112,3.464,2113,3.464,2114,3.464,2115,5.338,2116,6.512,2117,3.464,2118,3.464,2119,3.464,2120,3.464,2121,3.464,2122,4.822,2123,3.464,2124,3.464,2125,3.464,2126,3.464,2127,3.464,2128,3.464,2129,3.464,2130,3.464,2131,3.464,2132,3.464,2133,3.464,2134,3.464,2135,3.464,2136,3.464,2137,3.464,2138,3.464,2139,3.464,2140,3.464,2141,3.464,2142,3.464,2143,3.464,2144,3.464,2145,3.464,2146,3.464,2147,3.464,2148,3.464,2149,3.464,2150,3.464,2151,3.464,2152,3.464,2153,3.464,2154,3.464,2155,3.464,2156,3.464,2157,3.464,2158,3.464,2159,3.464,2160,3.464,2161,3.464,2162,3.464,2163,3.464,2164,3.464,2165,3.464,2166,3.464,2167,3.464,2168,3.464,2169,3.464,2170,3.129,2171,3.464,2172,3.464,2173,3.464,2174,3.464,2175,3.464,2176,3.464,2177,5.338,2178,3.464]],["t/254",[0,0.216,168,2.331,180,2.691,258,3.33,396,4.01,605,4.586,731,8.082,1024,5.734,1036,2.389,1041,2.993,1060,4.13,1228,5.33,1268,5.028,1330,5.028,1331,5.734,1333,5.734,1419,4.586,1423,5.33,1434,5.028,2179,6.347,2180,6.347,2181,8.212,2182,6.347,2183,6.347,2184,6.347,2185,5.734,2186,6.347,2187,6.347,2188,6.347,2189,6.347,2190,6.347,2191,6.347,2192,6.347,2193,5.33,2194,6.347,2195,6.347,2196,6.347,2197,6.347,2198,6.347,2199,6.347,2200,6.347,2201,6.347,2202,6.347,2203,6.347,2204,6.347]],["t/256",[0,0.221,57,2.287,243,4.414,394,1.927,468,4.202,869,5.092,1115,3.766,1137,3.355,1235,4.511,1738,3.25,1908,3.766,1947,7.329,2205,4.994,2206,4.994,2207,6.987,2208,4.994,2209,4.994,2210,4.994,2211,6.987,2212,4.994,2213,4.994,2214,4.994,2215,4.994,2216,4.994,2217,4.994,2218,4.994,2219,4.994,2220,4.994,2221,4.994,2222,4.994,2223,4.994,2224,4.994,2225,4.994,2226,4.994,2227,4.994,2228,4.994,2229,4.994,2230,4.994,2231,4.994,2232,4.994,2233,4.994,2234,4.994,2235,4.994,2236,4.994,2237,4.994,2238,4.994,2239,4.994,2240,4.994,2241,8.729,2242,4.994,2243,4.994,2244,4.994,2245,4.994,2246,4.994,2247,4.994,2248,4.994,2249,4.994,2250,4.994,2251,4.994,2252,4.994,2253,4.994,2254,4.994,2255,4.994,2256,4.511,2257,4.994,2258,4.994,2259,4.994,2260,4.994,2261,4.994]],["t/258",[0,0.224,11,1.868,57,1.543,168,2.159,180,1.999,261,2.823,290,3.959,394,2.828,468,4.018,570,2.342,589,2.299,593,2.136,621,5.314,713,2.671,847,2.342,965,2.342,1041,2.223,1120,5.805,1137,4.923,1142,5.805,1158,6.62,1228,5.633,1908,5.527,1939,2.671,1942,6.62,1945,5.311,1946,2.671,1947,3.959,2059,2.483,2185,4.259,2256,2.671,2262,2.957,2263,2.957,2264,4.714,2265,4.714,2266,2.957,2267,2.957,2268,4.714,2269,2.957,2270,2.957,2271,2.957,2272,2.957,2273,2.957,2274,2.957,2275,2.957,2276,2.957,2277,2.957,2278,2.957,2279,2.957,2280,4.714,2281,2.957,2282,2.957,2283,2.957,2284,2.957,2285,2.957,2286,2.957,2287,2.957,2288,6.709,2289,2.957,2290,2.957,2291,5.88,2292,2.342,2293,2.957,2294,2.957,2295,2.957,2296,4.714,2297,2.957,2298,2.957,2299,2.957,2300,2.957,2301,2.957,2302,2.957,2303,2.957,2304,2.957,2305,2.957,2306,5.88,2307,2.957,2308,2.957,2309,2.957,2310,2.957,2311,2.957,2312,2.957,2313,2.957,2314,2.957,2315,2.957,2316,2.957,2317,3.555,2318,2.957,2319,2.957,2320,2.957,2321,2.957,2322,2.957,2323,2.957,2324,2.671,2325,2.957,2326,2.957,2327,2.957,2328,4.847,2329,4.714,2330,4.714,2331,4.714,2332,2.957,2333,2.957,2334,2.957,2335,2.957,2336,7.81,2337,4.714,2338,3.406,2339,2.957,2340,5.88,2341,1.329,2342,2.957,2343,2.957,2344,2.957,2345,4.714,2346,2.957,2347,2.957,2348,2.957,2349,2.957]],["t/260",[0,0.176]],["t/262",[0,0.176]],["t/264",[0,0.225,6,4.641,51,3.346,56,2.532,70,6.948,117,3.086,409,3.725,613,2.127,726,3.437,1685,3.725,1687,5.393,2350,4.437,2351,4.437,2352,4.437,2353,4.437,2354,4.437,2355,4.437,2356,4.437,2357,7.549,2358,4.437,2359,7.549,2360,4.437,2361,9.154,2362,4.437,2363,4.437,2364,4.437,2365,9.154,2366,4.437,2367,4.437,2368,4.437,2369,4.437,2370,4.437,2371,4.437,2372,4.437,2373,4.437,2374,4.437,2375,4.437,2376,4.437,2377,4.437,2378,4.437,2379,4.437,2380,4.437,2381,4.437,2382,4.437,2383,4.437,2384,6.423,2385,4.437,2386,4.437,2387,4.437,2388,4.437,2389,4.437,2390,4.437,2391,4.008,2392,4.437,2393,4.437,2394,4.437,2395,6.423,2396,4.437,2397,4.437,2398,4.437,2399,4.437,2400,4.437,2401,6.423,2402,6.423,2403,4.467,2404,4.437]],["t/267",[0,0.221,396,5.033,1073,6.31,1082,5.033,1714,6.351,2405,7.966,2406,6.008,2407,7.196]],["t/269",[0,0.225,118,2.349,180,1.745,245,5.105,319,2.249,392,2.863,396,5.982,869,3.841,879,3.456,932,2.974,1041,3.409,1060,2.679,1073,3.261,1082,6.301,1714,6.494,1873,2.601,2111,3.719,2406,7.14,2407,3.719,2408,4.116,2409,4.116,2410,4.116,2411,5.727,2412,5.492,2413,3.719,2414,4.116,2415,4.116,2416,4.116,2417,4.116,2418,4.116,2419,7.213,2420,4.116,2421,4.116,2422,4.116,2423,4.116,2424,4.116,2425,4.116,2426,3.719,2427,4.116,2428,7.23,2429,4.116,2430,4.116,2431,4.116,2432,4.116,2433,4.116,2434,4.116,2435,4.116,2436,4.116,2437,4.116,2438,4.116,2439,4.116,2440,4.116,2441,4.116,2442,4.116,2443,4.116,2444,4.116,2445,4.116,2446,4.116,2447,4.116,2448,4.116,2449,3.719,2450,4.116,2451,3.719,2452,4.116]],["t/271",[0,0.225,168,2.135,180,2.464,219,3.572,589,2.834,613,2.786,635,3.111,726,3.111,759,5.6,869,4.897,879,6.508,1036,2.917,1041,3.654,1370,3.673,1714,3.905,2411,6.139,2412,8.402,2413,8.402,2419,5.251,2451,7.001,2453,5.813,2454,7.751,2455,8.72,2456,5.813,2457,5.813,2458,5.813]],["t/273",[0,0.225,53,3.89,57,1.423,155,2.427,394,3.509,468,1.87,613,4.176,634,4.402,726,2.327,905,3.651,1041,3.519,1057,4.402,1370,2.747,1714,4.252,1958,3.651,1965,3.444,1972,3.279,2055,6.742,2459,8.197,2460,7.463,2461,4.348,2462,3.651,2463,4.348,2464,3.024,2465,4.348,2466,4.348,2467,4.348,2468,4.348,2469,6.33,2470,7.463,2471,4.348,2472,4.348,2473,4.348,2474,6.33,2475,6.33,2476,4.348,2477,4.348,2478,3.928,2479,4.348,2480,4.348,2481,4.348,2482,4.348,2483,4.348,2484,4.348,2485,8.197,2486,4.348,2487,4.348,2488,4.348,2489,4.348,2490,6.33,2491,4.348,2492,5.718,2493,4.348,2494,4.348,2495,4.348,2496,7.463,2497,4.348,2498,4.348]],["t/275",[0,0.224,89,6.251,92,3.982,101,3.689,168,3.107,180,3.587,182,2.942,217,5.015,220,4.532,239,5.311,394,2.567,522,5.015,589,4.126,635,2.492,699,3.239,739,3.689,1714,3.129,2499,4.657,2500,6.008,2501,4.657,2502,4.657,2503,4.657,2504,4.657,2505,4.657,2506,4.657,2507,4.657,2508,4.657,2509,4.657,2510,4.657,2511,4.657,2512,4.657,2513,4.657,2514,4.657,2515,4.657,2516,4.657,2517,4.657,2518,6.65,2519,4.657,2520,4.657,2521,4.657,2522,4.657,2523,4.657,2524,4.657,2525,6.65,2526,4.657,2527,4.468,2528,6.65,2529,4.657,2530,4.657,2531,4.657,2532,4.657,2533,4.657,2534,4.657,2535,4.657,2536,4.657,2537,6.65,2538,4.657,2539,4.657,2540,4.657]],["t/277",[0,0.216,18,4.415,37,3.861,147,3.338,182,3.861,209,5.788,394,4.216,460,2.79,991,4.608,1041,4.214,1217,5.52,1219,3.756,1330,4.84,1335,4.25,1621,5.52,1669,5.52,1714,5.382,1820,5.131,1958,5.131,1965,4.84,1980,4.608,2045,5.52,2170,5.52,2500,7.237,2541,6.111,2542,6.111,2543,6.111,2544,6.111,2545,6.111,2546,6.111,2547,6.111,2548,6.111,2549,5.131,2550,8.011,2551,6.111,2552,6.111,2553,6.111]],["t/280",[0,0.212,168,3.155,180,3.642]],["t/282",[2554,8.823,2555,8.823]],["t/284",[162,6.418]],["t/287",[2556,8.706,2557,8.706,2558,8.706,2559,8.706]],["t/289",[0,0.204,162,7.583,394,2.915,1060,4.915,1073,5.983,1936,6.823,1937,6.823,1957,6.823,2560,6.342,2561,7.553,2562,7.553,2563,7.553,2564,7.553,2565,7.553,2566,6.342,2567,9.157,2568,7.553,2569,6.342,2570,7.553]],["t/294",[0,0.216,43,3.791,53,4.78,56,4.439,68,5.225,80,5.619,117,5.409,203,6.941,274,6.16,557,7.025,869,4.914,2571,7.777,2572,7.777]],["t/300",[0,0.206,135,7.688,2573,8.481]],["t/303",[0,0.224,32,2.836,42,3.051,89,4.83,91,3.944,135,5.195,168,3.377,179,3.944,180,2.56,359,6.037,370,5.361,373,3.424,390,1.955,404,5.07,565,3.684,689,2.836,798,2.836,990,3.23,1036,2.273,1399,4.783,1424,3.23,2574,4.078,2575,4.078,2576,4.078,2577,4.078,2578,4.078,2579,4.078,2580,4.078,2581,4.078,2582,3.424,2583,6.968,2584,4.078,2585,4.078,2586,4.078,2587,7.19,2588,4.078,2589,4.078,2590,7.948,2591,7.19,2592,4.078,2593,4.078,2594,4.078,2595,7.19,2596,4.078,2597,5.455,2598,4.783,2599,4.078,2600,5.455,2601,6.038,2602,6.038,2603,4.078,2604,4.078,2605,4.078,2606,4.078,2607,5.455,2608,7.18,2609,7.948,2610,4.078,2611,4.078,2612,3.424,2613,4.078,2614,4.078,2615,4.078]],["t/305",[0,0.213,210,8.405,404,6.199,2583,5.335,2616,7.383,2617,7.383,2618,7.383,2619,10.166,2620,8.536,2621,7.383,2622,7.383,2623,7.383,2624,7.383,2625,7.383]],["t/307",[2626,8.883]],["t/309",[0,0.219,70,7.854,182,6.321,424,5.9,2627,5.441,2628,7.824,2629,7.824,2630,7.824,2631,7.824,2632,7.824]],["t/311",[0,0.225,37,3.972,43,2.557,56,3.588,68,4.223,183,5.156,203,4.372,239,4.657,1129,6.852,2403,4.372,2527,5.482,2627,4.372,2633,6.286,2634,6.286,2635,8.978,2636,6.286,2637,6.286,2638,5.679,2639,5.679,2640,6.286]],["t/313",[0,0.225,27,6.281,43,4.168,56,5.421,63,4.835,65,6.562,1424,5.507,2635,6.281,2641,6.953,2642,6.953,2643,6.953]],["t/315",[0,0.219,53,5.896,117,5.678,192,4.937,2644,8.164]],["t/317",[0,0.225,69,3.477,135,5.653]],["t/320",[0,0.222,569,6.349,869,5.064,2583,5.791,2645,8.015,2646,8.015,2647,8.015]],["t/322",[0,0.215,43,3.3,53,4.987,68,5.451,69,3.016,179,4.742,239,4.631,2403,5.643,2648,8.114]],["t/325",[0,0.225,37,5.156,51,6.154,56,4.657,63,4.372,69,3.695,168,2.309,247,4.741,990,4.98,1036,3.071,1263,4.372,2627,5.675,2649,6.286,2650,7.372,2651,6.286,2652,6.286,2653,6.286,2654,6.286,2655,6.286,2656,6.286,2657,6.286]],["t/328",[0,0.224,6,3.955,37,3.458,58,5.896,69,2.035,92,3.277,239,4.248,328,5.176,475,3.831,635,2.929,659,3.955,704,4.596,906,4.128,924,3.806,1036,3.183,1411,7.64,2627,5.176,2658,7.443,2659,4.128,2660,5.473,2661,4.596,2662,5.473,2663,5.473,2664,5.473,2665,5.473,2666,5.473,2667,5.473,2668,5.473,2669,5.473,2670,8.457,2671,7.443,2672,7.443,2673,5.473,2674,5.473,2675,5.473,2676,6.25,2677,5.473,2678,5.473,2679,5.473,2680,5.473,2681,5.473,2682,5.473]],["t/330",[0,0.168,475,5.048,906,6.396,924,5.898,2661,7.121,2683,8.481,2684,8.481]],["t/333",[0,0.164,475,4.973,771,6.549,906,6.235,924,5.75,1036,3.112,2661,6.942,2685,8.267,2686,9.663,2687,8.267]],["t/335",[0,0.176]],["t/337",[0,0.174,319,4.788,2688,7.917]],["t/340",[0,0.176]],["t/342",[0,0.22,1873,5.095,2464,5.608,2689,6.623,2690,8.064,2691,7.285,2692,6.388]],["t/344",[0,0.208,20,4.13,38,4.93,123,5.489,228,6.67,317,3.648,359,5.489,394,3.563,613,4.425,726,3.498,1177,5.178,2006,5.489,2464,5.82,2688,5.905,2691,5.905,2692,5.178,2693,6.537,2694,6.537,2695,6.537,2696,5.489,2697,6.537,2698,8.369,2699,6.537,2700,6.537,2701,6.537,2702,6.537,2703,6.537,2704,6.537,2705,8.369,2706,6.537,2707,6.537,2708,6.537,2709,8.369,2710,6.537,2711,6.537,2712,6.537,2713,6.537,2714,6.537]],["t/347",[0,0.222,88,5.16,147,5.252,179,3.544,183,4.512,256,5.386,2620,9.052,2715,7.142,2716,7.142,2717,7.142,2718,7.142,2719,7.142,2720,7.142]],["t/350",[0,0.22,91,4.497,155,5.058,179,4.854,220,5.715,2582,7.61,2721,7.425,2722,7.425,2723,7.425,2724,6.235,2725,6.707,2726,7.425,2727,7.425]],["t/352",[0,0.213,11,6.436,91,5.055,2391,7.375,2728,8.164,2729,8.164]],["t/354",[0,0.22]],["t/356",[0,0.211,79,5.179,279,8.205,2730,8.427,2731,8.427]],["t/358",[0,0.206,2732,8.711,2733,8.536]],["t/360",[0,0.211,179,4.208,2639,7.661,2734,8.481,2735,8.481]],["t/362",[0,0.212,6,6.831,179,5.283,373,6.689,623,6.689,890,6.008,2724,8.466]],["t/364",[0,0.193,57,3.186,88,6.05,91,4.154,179,4.154,689,5.823,1790,8.174]],["t/367",[0,0.168,168,3.115,179,4.867,180,3.595,1036,3.192,2736,8.481,2737,8.481]],["t/369",[0,0.226,11,3.577,42,3.847,69,2.831,79,3.48,91,4.567,168,3.711,180,4.284,183,3.577,256,4.27,589,4.683,798,5.296,1036,2.131,2620,6.395,2738,5.662,2739,5.662,2740,5.115]],["t/372",[0,0.216,79,4.837,155,5.598,179,3.905,2741,7.87,2742,7.87,2743,7.87,2744,7.87,2745,7.87,2746,7.87,2747,7.87,2748,7.87]],["t/374",[0,0.224,20,6.466,79,3.421,91,4.535,155,4.202,460,2.542,475,5.486,1036,2.833,1399,4.409,2597,5.028,2749,9.139,2750,5.566,2751,10.234,2752,5.566,2753,5.566,2754,5.566,2755,5.566,2756,5.566,2757,5.566,2758,5.566,2759,5.566]],["t/376",[0,0.172,91,4.291,475,4.451,1366,4.936,2760,8.649]],["t/379",[0,0.196,179,4.263,2761,8.592,2762,8.592,2763,8.592]],["t/381",[0,0.175,2764,7.971]],["t/383",[0,0.213,2765,8.649]],["t/385",[2766,8.883]],["t/387",[0,0.172,2767,9.919,2768,9.919]],["t/389",[0,0.216,179,4.051,2328,5.899,2732,8.554,2764,7.375,2769,9.593]],["t/392",[0,0.227,85,4.238,179,2.797,180,2.39,239,5.998,258,4.505,520,3.147,1036,2.122,1122,3.376,1536,4.074,2527,3.787,2770,9.878,2771,5.638,2772,5.638,2773,5.638]],["t/394",[0,0.225,85,3.475,239,5.904,258,5.564,520,5.034,1122,3.729,2774,6.81,2775,7.326,2776,6.424,2777,5.86,2778,8.11,2779,8.11]],["t/396",[0,0.224,85,3.742,192,4.377,239,5.331,258,5.587,520,5.213,1122,5.593,1873,5.373,2776,6.737,2777,6.145]],["t/398",[0,0.224,85,4.03,179,3.583,239,5.514,258,3.788,520,4.03,1122,4.324,1873,6.373,2776,7.057,2777,6.437]],["t/400",[0,0.225,69,3.121,239,5.281,258,5.564,520,4.686,990,5.204,1036,3.16,2650,7.584,2780,6.57,2781,6.57]],["t/402",[0,0.225,37,4.706,43,2.568,53,3.881,56,3.604,68,2.912,89,4.242,183,3.989,203,4.391,239,3.604,247,4.762,258,5.603,370,6.915,389,3.433,520,5.231,719,3.639,1036,1.631,1129,5.302,1873,2.738,2403,4.391,2627,4.391,2638,5.704,2782,4.334,2783,3.014,2784,4.334,2785,4.334,2786,4.334,2787,4.334]],["t/404",[0,0.17,168,3.135,2788,8.536,2789,8.536,2790,8.536,2791,8.536,2792,8.536]],["t/407",[2793,8.536,2794,7.168,2795,8.536,2796,8.536,2797,7.168,2798,7.168,2799,7.711]],["t/409",[0,0.193,596,6.986,798,5.786,2794,6.986,2797,6.986,2798,6.986,2800,8.32,2801,8.32,2802,8.32,2803,8.32]],["t/411",[0,0.173,798,6.055,854,6.291,2583,6.291]],["t/413",[0,0.219,258,4.104,520,4.366,798,5.441,854,6.758,2583,5.653,2804,9.716]],["t/415",[0,0.223,168,2.413,180,2.785,2794,8.187,2797,8.187,2798,8.187,2805,9.581,2806,10.076,2807,5.935,2808,5.935,2809,6.57]],["t/418",[0,0.215,726,4.263,1753,7.196,2002,6.689,2810,7.196,2811,7.966,2812,7.966,2813,7.966,2814,9.454,2815,7.966,2816,7.966,2817,7.966]],["t/420",[0,0.173,69,3.237,179,4.32,2818,8.706]],["t/422",[0,0.224,11,3.673,79,3.572,85,4.866,91,5.048,168,3.416,180,3.943,367,5.39,368,5.845,589,3.779,1263,5.39,1366,4.423,1370,4.897,1397,5.39,2598,6.139,2740,5.251,2819,7.751,2820,8.72,2821,8.72]],["t/424",[0,0.217,179,4.813,274,6.59,2122,8.762]],["t/427",[0,0.223,56,3.947,89,4.646,168,2.54,179,3.432,180,2.932,239,3.947,1036,2.603,1370,4.37,1397,4.81,2777,4.997,2822,6.916,2823,6.916,2824,6.916,2825,6.916,2826,6.916,2827,6.248,2828,5.478,2829,6.916,2830,6.916,2831,6.248,2832,6.916,2833,6.916,2834,6.248]],["t/429",[0,0.226,91,4.353,92,3.025,168,3.6,179,2.507,180,4.156,192,2.6,689,4.898,1036,3.052,1370,3.192,2582,6.809,2774,4.242,2775,7.924,2777,3.65,2810,4.563,2831,6.362,2834,4.563,2835,5.052,2836,5.052,2837,5.052,2838,5.052,2839,5.052,2840,5.052,2841,8.772,2842,5.052,2843,5.052,2844,5.052]],["t/432",[0,0.22,32,5.22,87,5.945,91,5.231,130,3.968,168,1.613,179,2.179,180,2.703,211,3.479,299,3.479,475,2.26,589,2.142,596,7.903,910,3.968,992,5.759,1366,2.507,1397,4.434,1401,3.968,2403,3.055,2805,3.968,2845,4.392,2846,4.392,2847,4.392,2848,4.392,2849,4.392,2850,4.392,2851,7.506,2852,7.506,2853,4.392,2854,6.376,2855,6.376,2856,4.392,2857,4.392,2858,4.392,2859,4.392,2860,4.392,2861,4.392,2862,4.392,2863,4.392,2864,4.392,2865,4.392,2866,4.392,2867,4.392,2868,4.392,2869,4.392,2870,4.392,2871,4.392,2872,4.392,2873,4.392,2874,4.392,2875,4.392,2876,6.376,2877,4.392,2878,4.392,2879,4.392,2880,4.392,2881,6.376,2882,4.392,2883,6.376,2884,4.392,2885,4.392,2886,4.392,2887,4.392,2888,4.392,2889,4.392,2890,4.392,2891,4.392,2892,9.642,2893,4.392,2894,4.392,2895,4.392,2896,4.392,2897,4.392,2898,4.392,2899,4.392,2900,4.392]],["t/435",[0,0.193,2901,8.373,2902,8.373,2903,8.373,2904,8.373,2905,8.373,2906,8.373,2907,8.373,2908,8.373]],["t/437",[0,0.221,180,3.461,2909,8.164,2910,9.593,2911,8.164]],["t/439",[0,0.199,1108,3.34]],["t/442",[0,0.223,18,5.567,116,7.289,117,4.007,118,3.288,206,4.838,1108,4.109,2912,5.762,2913,5.762,2914,5.762,2915,6.96,2916,5.762,2917,5.762,2918,5.762,2919,5.205,2920,5.762,2921,5.762,2922,9.66,2923,5.762,2924,5.762,2925,5.762,2926,5.762,2927,5.762,2928,5.762,2929,5.762,2930,5.762,2931,5.762,2932,5.762,2933,5.205,2934,5.205,2935,5.762,2936,4.564]],["t/444",[17,4.718,52,3.775,53,5.081,56,4.718,57,2.706,65,7.288,1108,3.683,2937,8.267,2938,8.267,2939,8.267]],["t/446",[0,0.224,20,3.472,21,5.393,22,2.777,23,7.695,25,5.629,37,5.744,63,5.191,67,4.354,74,4.354,405,4.965,406,4.615,423,2.471,424,4.145,425,4.354,1108,4.234,1263,5.191,2940,5.496,2941,4.615,2942,5.496,2943,5.496,2944,4.965]],["t/449",[0,0.225,122,2.483,205,3.568,243,2.685,248,4.627,249,2.956,317,2.372,423,1.911,460,3.702,937,2.765,991,4.694,1076,3.366,1080,2.956,1081,3.366,1082,4.653,1094,3.568,1108,3.55,1419,3.071,1431,3.568,1644,3.205,1809,3.839,2328,3.071,2449,3.839,2689,2.956,2936,3.366,2941,5.226,2945,7.324,2946,3.839,2947,4.25,2948,4.25,2949,3.366,2950,4.25,2951,5.834,2952,4.25,2953,4.25,2954,3.839,2955,3.839,2956,4.25,2957,4.25,2958,4.25,2959,4.25,2960,3.839,2961,3.839,2962,4.25,2963,4.25,2964,4.25,2965,4.25,2966,4.25,2967,4.25,2968,3.839,2969,4.25,2970,4.25,2971,3.839,2972,4.25,2973,4.25,2974,4.25,2975,4.25,2976,4.25,2977,3.366,2978,3.568,2979,4.25,2980,6.224,2981,3.839,2982,4.25,2983,6.224,2984,4.25,2985,4.25,2986,4.25,2987,4.25,2988,4.25,2989,4.25,2990,3.071]],["t/451",[0,0.225,24,5.656,85,2.646,135,4.867,205,3.981,243,4.95,722,2.914,1108,3.67,1115,3.576,1122,2.839,1141,3.756,1366,2.706,1876,4.283,1954,4.283,2462,3.981,2689,5.932,2941,6.578,2946,6.085,2991,4.741,2992,4.741,2993,4.741,2994,4.741,2995,4.741,2996,4.741,2997,7.656,2998,4.741,2999,4.741,3000,6.736,3001,4.283,3002,4.741,3003,4.741,3004,4.741,3005,4.741,3006,6.736,3007,4.741,3008,4.741,3009,4.741,3010,6.736,3011,7.834,3012,7.834,3013,4.741,3014,3.981,3015,6.736,3016,6.736,3017,3.981]],["t/453",[0,0.214,1108,3.577,1419,6.782,2954,8.479,2955,8.479,2997,5.936,3018,9.387,3019,7.87,3020,9.387]],["t/455",[0,0.224,38,2.705,57,1.174,122,3.888,168,1.317,219,3.37,248,5.863,390,3.19,460,3.039,531,2.705,584,6.976,689,2.495,784,2.842,919,4.604,937,4.331,1076,7.856,1078,6.012,1080,4.628,1082,4.205,1873,2.266,2338,2.592,2464,2.495,2527,2.41,2696,3.012,2828,2.842,2968,7.252,2990,2.592,2997,5.019,3021,3.587,3022,3.587,3023,6.012,3024,8.028,3025,8.028,3026,6.655,3027,3.587,3028,3.587,3029,3.587,3030,3.587,3031,3.587,3032,3.587,3033,3.241,3034,3.012,3035,3.241,3036,3.241,3037,3.587,3038,3.587,3039,3.587,3040,3.587,3041,3.587,3042,3.587,3043,6.655,3044,5.588,3045,6.655,3046,6.655,3047,6.655,3048,6.655,3049,6.655,3050,5.588,3051,6.655,3052,3.012]],["t/457",[0,0.227,31,2.62,35,1.165,43,1.008,56,1.415,119,1.791,122,3.306,147,0.758,149,1.165,155,5.01,168,0.509,180,0.588,183,1.566,209,1.002,248,3.818,249,5.419,311,1.165,390,0.665,460,1.534,520,0.774,589,0.676,605,3.392,689,4.839,707,0.853,726,3.418,854,1.791,924,1.724,937,5.177,965,1.099,1036,0.522,1080,4.205,1081,1.099,1082,6.177,1100,4.241,1108,2.549,1644,1.869,1664,1.165,2317,3.082,2328,3.767,2403,1.724,2659,3.082,2724,1.165,2808,3.035,2915,1.253,2936,1.963,2977,4.79,2978,1.165,2990,2.952,3050,6.044,3053,1.387,3054,1.387,3055,1.387,3056,2.479,3057,1.387,3058,7.792,3059,1.387,3060,2.239,3061,1.253,3062,1.387,3063,5.112,3064,6.388,3065,2.479,3066,2.479,3067,2.479,3068,2.479,3069,2.479,3070,3.36,3071,1.387,3072,4.086,3073,1.387,3074,1.387,3075,1.387,3076,1.387,3077,1.387,3078,2.479,3079,2.479,3080,1.387,3081,1.387,3082,1.387,3083,1.387,3084,1.387,3085,1.387,3086,1.387,3087,1.387,3088,1.387,3089,1.387,3090,4.695,3091,2.479,3092,2.239,3093,1.165,3094,2.479,3095,3.035,3096,4.79,3097,1.387,3098,1.387,3099,1.387,3100,1.387,3101,1.387,3102,1.253,3103,2.479,3104,1.387,3105,1.387,3106,1.387,3107,1.387,3108,4.086,3109,1.387,3110,2.479,3111,1.387,3112,1.387,3113,1.387,3114,1.387,3115,1.387,3116,1.387,3117,1.387,3118,1.387,3119,1.387,3120,1.387,3121,1.387,3122,3.36,3123,1.387,3124,1.387,3125,1.387,3126,1.387,3127,1.387,3128,1.387,3129,1.387,3130,1.387,3131,1.387,3132,1.387,3133,1.387,3134,1.387,3135,1.387,3136,1.387,3137,2.479,3138,2.479,3139,4.695,3140,1.387,3141,1.387,3142,2.479,3143,1.387,3144,1.387,3145,2.479,3146,1.387,3147,1.387]],["t/459",[0,0.225,155,4.72,228,5.378,390,4.054,460,4.144,707,5.198,784,4.335,937,3.562,1094,4.596,1097,4.596,1108,3.223,2492,4.944,2960,4.944,2961,4.944,2990,5.378,3044,4.596,3148,5.473,3149,5.473,3150,5.473,3151,5.473,3152,5.473,3153,5.896,3154,5.473,3155,5.473,3156,5.473,3157,5.473,3158,5.473,3159,5.473,3160,5.473,3161,5.473,3162,5.473,3163,5.473,3164,5.473,3165,5.473,3166,5.473]],["t/461",[0,0.199]],["t/463",[0,0.198,248,4.969,3167,8.706]],["t/465",[0,0.219,3168,8.427,3169,8.427]],["t/467",[0,0.217,1108,3.724,1972,6.355]],["t/469",[0,0.224,239,5.3,390,4.452,531,5.831,1108,3.539]],["t/471",[0,0.207,1108,3.78]],["t/473",[0,0.214,3023,8.794,3170,8.794,3171,6.314]],["t/475",[0,0.175,147,4.817,460,3.244,3172,7.966,3173,7.103,3174,7.103,3175,7.103,3176,7.103,3177,7.103,3178,7.103,3179,7.103,3180,7.103,3181,7.103,3182,7.103,3183,7.103,3184,7.103,3185,7.103,3186,7.103,3187,7.103,3188,7.103,3189,7.103,3190,7.103,3191,7.103,3192,7.103,3193,7.103,3194,7.103,3195,7.103,3196,7.103,3197,7.103,3198,7.103,3199,7.103,3200,7.103,3201,7.103,3202,7.103,3203,7.103]],["t/477",[0,0.196,219,5.246,3171,6.438,3204,8.893,3205,8.536]],["t/479",[0,0.193,1536,6.011,2464,5.786,3092,7.516,3171,6.274,3206,8.762,3207,8.32,3208,7.516,3209,8.32]],["t/481",[0,0.168,475,4.365,1036,3.192,3171,6.396,3210,8.86,3211,7.661,3212,7.661]],["t/483",[0,0.17,475,4.393,3171,6.438,3211,7.711,3212,7.711,3213,9.845]],["t/485",[0,0.215,183,5.126,190,6.119,1108,3.092,3214,8.114,3215,8.114,3216,8.114,3217,8.114,3218,8.114,3219,8.114]],["t/487",[0,0.225,122,3.789,182,2.841,248,5.249,249,4.511,423,2.916,604,3.776,937,4.221,965,3.563,1076,3.563,1080,5.791,1082,5.261,1108,2.472,1536,4.686,1714,5.594,2328,4.686,2977,5.138,2990,3.25,3044,6.388,3050,5.446,3063,4.063,3170,5.859,3172,4.063,3204,5.859,3206,5.859,3210,4.063,3220,6.486,3221,4.497,3222,4.497,3223,4.497,3224,4.497,3225,4.497,3226,6.486,3227,4.497,3228,4.497,3229,4.497,3230,4.497,3231,4.497,3232,4.497,3233,4.497,3234,4.497,3235,6.486,3236,6.486,3237,6.486,3238,6.486,3239,6.486,3240,6.486,3241,6.486,3242,6.486,3243,4.497,3244,6.486]],["t/489",[0,0.207,460,4.529]],["t/491",[0,0.224,460,4.724,3095,7.025,3245,8.419]],["t/493",[0,0.223,122,4.666,248,4.558,249,4.23,460,2.777,937,5.197,1080,5.554,1082,3.843,1108,2.318,2328,4.395,2936,4.818,2977,4.818,2978,5.107,3052,5.107,3096,4.818,3246,6.082,3247,6.082,3248,6.706,3249,7.987,3250,6.082,3251,6.082,3252,6.082,3253,6.082,3254,6.082,3255,6.082,3256,6.082,3257,6.082,3258,6.082,3259,6.082,3260,6.082,3261,6.082,3262,6.082,3263,6.082,3264,6.082,3265,6.082,3266,6.082,3267,6.082]],["t/496",[0,0.223,722,6.44,1108,3.478,3034,6.306,3268,9.83,3269,7.51,3270,7.51]],["t/498",[0,0.223,25,6.858,722,6.429,1108,2.846,2944,6.745,2997,7.395,3271,7.467]],["t/500",[0,0.174,1108,3.809]],["t/502",[3272,8.649,3273,8.649,3274,8.649,3275,8.649,3276,8.649]],["t/504",[0,0.222,20,1.655,21,3.09,22,1.324,23,5.881,24,2.2,25,1.976,42,2.16,43,1.066,67,2.075,68,2.873,80,3.915,84,1.976,88,1.893,89,3.64,118,1.495,154,2.2,168,1.99,182,2.702,183,1.655,187,3.591,188,2.2,196,4.292,256,1.976,299,2.075,327,3.09,377,2.367,390,3.738,424,1.976,425,2.075,589,3.049,638,3.387,722,1.61,1036,1.61,1081,3.387,1108,3.206,1122,3.744,1873,1.655,2059,3.591,2292,3.387,2527,2.873,2569,4.55,2607,3.863,2774,3.591,2799,3.863,3033,2.367,3277,2.62,3278,10.269,3279,4.276,3280,2.62,3281,4.276,3282,2.62,3283,7.6,3284,2.62,3285,2.62,3286,4.276,3287,6.253,3288,5.418,3289,4.276,3290,4.276,3291,4.276,3292,4.276,3293,4.276,3294,4.276,3295,4.276,3296,4.276,3297,4.276,3298,6.253,3299,7.392,3300,4.276,3301,3.225,3302,6.253,3303,4.276,3304,4.276,3305,3.591,3306,4.276,3307,4.276,3308,4.276,3309,4.276,3310,4.276,3311,6.253,3312,4.894,3313,4.276,3314,3.863,3315,4.276,3316,4.276,3317,4.276,3318,4.276,3319,4.276,3320,4.276,3321,4.276,3322,3.863,3323,3.863,3324,2.2,3325,2.62,3326,2.62,3327,2.62,3328,2.62,3329,2.62,3330,2.62,3331,2.62,3332,2.62,3333,2.367,3334,2.62,3335,7.392,3336,2.62,3337,2.62,3338,4.276,3339,2.62,3340,2.62,3341,2.62,3342,2.62,3343,2.62,3344,2.62,3345,2.62,3346,2.62,3347,2.62,3348,2.62,3349,2.62,3350,2.62,3351,2.62]],["t/506",[0,0.206,122,4.544,390,3.728,937,5.061,1080,5.409,3283,7.025,3322,7.025,3323,7.025,3352,7.777,3353,7.777,3354,7.777,3355,7.777,3356,7.777,3357,7.777,3358,7.777,3359,7.777,3360,7.777,3361,7.777,3362,7.777]],["t/508",[0,0.194,248,4.214,370,4.665,460,3.371,1082,4.665,1108,3.442,1790,6.199,3096,7.154,3363,7.383,3364,7.383,3365,7.383,3366,7.383,3367,6.199,3368,7.383,3369,7.383,3370,7.383,3371,7.383,3372,7.383,3373,7.383,3374,7.383,3375,7.383,3376,7.383,3377,4.96,3378,7.383,3379,7.383,3380,7.383,3381,7.383]],["t/510",[0,0.208,20,3.934,83,6.81,84,6.116,327,4.499,328,4.33,330,4.932,460,3.703,722,3.827,1108,3.091,1185,6.81,2478,5.625,2997,4.696,3096,6.424,3367,5.228,3377,4.183,3382,6.227,3383,6.227,3384,6.227,3385,6.227,3386,6.227,3387,6.227,3388,6.227,3389,6.227,3390,6.227,3391,6.227,3392,6.227,3393,6.227,3394,6.227,3395,6.227,3396,6.227,3397,8.11,3398,6.227,3399,6.227,3400,6.227,3401,6.227,3402,6.227,3403,6.227,3404,6.227,3405,6.227,3406,8.11,3407,9.019,3408,6.227,3409,6.227,3410,6.227,3411,6.227,3412,6.227]],["t/512",[0,0.196,1108,4.063,3413,8.536]],["t/516",[0,0.216,9,1.004,10,0.492,11,0.657,12,0.31,14,0.085,15,0.345,17,0.853,18,0.135,19,3.523,20,0.944,21,0.393,22,2.217,23,1.072,26,1.039,29,0.157,31,2.839,32,0.256,34,0.752,35,0.079,38,0.141,39,0.939,41,0.085,42,0.141,43,2.007,52,2.864,53,0.115,57,2.727,63,0.13,64,0.079,68,0.187,69,2.528,74,0.292,75,0.292,76,0.085,77,1.768,79,0.115,80,0.135,83,1.315,84,0.071,85,0.991,87,0.075,88,1.182,89,0.646,90,0.569,91,0.593,92,0.112,94,0.085,96,0.234,98,0.499,100,0.566,104,2.135,116,0.529,117,0.379,118,0.311,119,0.517,122,1.676,126,0.807,135,0.393,147,1.079,149,0.739,157,0.573,162,2.073,163,0.67,168,1.933,180,1.327,182,0.452,183,0.06,186,3.069,188,0.384,190,0.475,192,1.637,196,0.362,201,0.333,203,0.066,206,0.079,209,0.068,210,0.221,211,0.075,215,1.284,216,0.252,219,1.254,220,1.154,223,0.085,228,0.201,233,0.298,235,0.085,239,0.054,243,0.398,245,0.079,247,0.071,248,0.853,249,0.13,255,0.157,256,0.071,258,0.587,261,2.649,262,2.77,267,2.946,270,0.157,271,1.902,278,0.591,279,0.234,280,0.085,299,0.075,301,0.085,317,0.399,325,0.126,330,0.292,367,1.235,368,0.345,370,0.118,389,0.075,390,1.795,392,3.077,396,1.078,406,0.234,409,0.079,423,2.146,424,0.21,425,0.148,427,0.21,428,0.085,435,0.085,460,0.902,467,0.234,468,0.041,472,0.234,475,1.858,520,0.399,522,0.071,531,0.141,544,0.085,563,1.328,569,1.406,570,0.075,584,0.148,585,0.079,586,0.079,589,1.783,599,1.866,604,0.079,605,0.393,611,0.157,618,0.079,635,2.183,645,0.169,647,2.093,659,0.973,661,0.085,669,0.085,687,0.252,689,0.318,696,0.085,699,0.497,707,0.735,718,0.085,719,0.079,722,0.873,731,0.234,736,0.795,739,0.148,741,0.169,747,2.499,755,0.079,759,0.752,771,0.075,784,0.148,798,0.612,846,0.31,847,0.075,854,0.135,869,0.06,890,0.141,892,0.085,893,0.085,899,0.333,905,0.234,907,0.169,908,0.079,924,0.256,932,0.393,972,0.252,994,1.008,1036,3.006,1054,0.855,1064,0.411,1084,0.085,1095,0.157,1097,0.457,1108,2.849,1115,0.071,1122,0.274,1139,0.085,1141,0.431,1143,0.393,1263,0.318,1327,0.986,1354,0.169,1355,0.085,1356,0.221,1364,0.31,1366,1.445,1370,0.851,1372,0.169,1397,0.778,1419,0.393,1421,0.085,1423,0.079,1424,0.075,1434,0.362,1475,0.079,1536,0.068,1605,0.085,1644,0.21,1655,0.085,1710,0.947,1730,0.085,1738,2.32,1742,0.234,1838,0.157,1873,0.118,1972,0.071,2002,0.157,2051,0.31,2193,0.6,2292,0.075,2317,0.411,2324,0.333,2338,0.456,2341,2.524,2403,0.13,2406,0.411,2411,0.148,2426,0.085,2462,0.31,2464,0.066,2527,0.855,2549,0.384,2560,0.079,2566,0.079,2569,0.31,2583,1.567,2598,0.499,2600,0.569,2608,0.333,2612,0.234,2627,0.555,2659,0.278,2676,0.31,2689,0.724,2692,0.431,2696,0.079,2725,0.085,2732,0.157,2776,0.221,2777,0.135,2783,0.885,2804,0.169,2807,0.333,2827,0.085,2828,0.148,2919,0.085,2933,0.169,2934,0.333,2945,0.252,2949,0.632,2951,0.632,2971,0.085,2981,0.085,2990,0.201,3001,0.085,3014,0.384,3017,0.079,3034,0.234,3035,0.169,3036,0.085,3052,0.079,3060,0.085,3061,0.085,3093,0.234,3102,0.085,3153,0.886,3208,0.085,3245,0.169,3248,0.157,3301,0.345,3305,0.079,3312,0.252,3314,0.085,3324,0.157,3333,0.646,3367,0.874,3377,0.366,3414,0.094,3415,0.094,3416,0.094,3417,0.094,3418,0.094,3419,2.689,3420,0.094,3421,0.094,3422,0.094,3423,0.569,3424,1.39,3425,0.094,3426,0.094,3427,0.234,3428,2.543,3429,0.094,3430,0.094,3431,0.094,3432,0.094,3433,0.094,3434,0.094,3435,0.094,3436,0.094,3437,0.094,3438,0.094,3439,0.094,3440,0.094,3441,0.094,3442,0.094,3443,0.094,3444,0.094,3445,0.094,3446,0.094,3447,0.094,3448,0.094,3449,0.085,3450,1.349,3451,0.499,3452,0.333,3453,0.085,3454,0.085,3455,0.085,3456,0.085,3457,0.279,3458,0.094,3459,0.094,3460,0.094,3461,0.094,3462,0.094,3463,0.094,3464,0.545,3465,0.094,3466,0.094,3467,1.665,3468,0.094,3469,2.666,3470,0.187,3471,0.279,3472,0.169,3473,0.094,3474,0.169,3475,0.094,3476,0.094,3477,0.094,3478,0.094,3479,3.618,3480,0.094,3481,0.094,3482,0.094,3483,0.094,3484,0.094,3485,2.602,3486,0.094,3487,0.094,3488,0.094,3489,0.279,3490,1.008,3491,0.094,3492,0.094,3493,0.094,3494,0.492,3495,0.279,3496,0.094,3497,0.094,3498,0.094,3499,0.094,3500,0.094,3501,0.094,3502,0.094,3503,0.094,3504,0.094,3505,0.094,3506,0.187,3507,0.094,3508,0.094,3509,0.187,3510,1.706,3511,0.094,3512,0.094,3513,0.094,3514,0.545,3515,0.187,3516,0.187,3517,0.094,3518,0.413,3519,0.094,3520,0.094,3521,0.094,3522,0.094,3523,0.187,3524,0.187,3525,0.094,3526,0.094,3527,0.094,3528,0.187,3529,0.094,3530,0.094,3531,0.094,3532,0.094,3533,0.187,3534,0.094,3535,0.094,3536,0.279,3537,0.094,3538,0.094,3539,0.094,3540,0.187,3541,0.094,3542,0.094,3543,0.094,3544,0.094,3545,0.094,3546,0.094,3547,0.094,3548,0.094,3549,0.094,3550,0.094,3551,0.094,3552,0.094,3553,0.094,3554,0.094,3555,0.094,3556,0.094,3557,0.094,3558,0.094,3559,0.094,3560,0.094,3561,0.187,3562,0.094,3563,0.094,3564,0.279,3565,2.782,3566,0.094,3567,0.094,3568,0.094,3569,0.094,3570,0.094,3571,0.094,3572,0.094,3573,0.187,3574,2.284,3575,0.094,3576,0.094,3577,0.094,3578,0.094,3579,0.094,3580,0.094,3581,0.094,3582,0.094,3583,0.094,3584,0.369,3585,0.279,3586,0.094,3587,0.094,3588,0.094,3589,0.094,3590,0.094,3591,0.094,3592,0.094,3593,3.873,3594,0.094,3595,0.094,3596,0.169,3597,0.094,3598,0.187,3599,0.094,3600,0.094,3601,1.149,3602,0.094,3603,0.094,3604,0.169,3605,0.094,3606,0.279,3607,0.094,3608,0.279,3609,0.094,3610,0.094,3611,0.369,3612,0.094,3613,0.094,3614,0.094,3615,0.413,3616,0.094,3617,0.094,3618,0.094,3619,0.187,3620,0.094,3621,0.094,3622,0.094,3623,0.457,3624,0.187,3625,0.187,3626,0.094,3627,0.187,3628,0.094,3629,0.094,3630,0.094,3631,2.625,3632,0.094,3633,0.094,3634,0.094,3635,4.925,3636,0.094,3637,0.094,3638,0.094,3639,0.739,3640,0.252,3641,0.094,3642,0.187,3643,0.094,3644,0.085,3645,0.085,3646,0.085,3647,0.085,3648,0.085,3649,0.085,3650,0.085,3651,1.016,3652,0.085,3653,0.868,3654,0.085,3655,0.085,3656,0.67,3657,0.252,3658,0.187,3659,0.094,3660,0.094,3661,0.094,3662,0.094,3663,0.094,3664,0.094,3665,0.094,3666,0.094,3667,0.094,3668,0.187,3669,0.187,3670,0.169,3671,0.187,3672,0.094,3673,0.094,3674,0.094,3675,0.094,3676,0.094,3677,0.094,3678,0.094,3679,0.094,3680,0.094,3681,0.094,3682,0.094,3683,0.094,3684,0.413,3685,0.094,3686,0.252,3687,0.094,3688,0.094,3689,0.094,3690,0.094,3691,0.187,3692,0.094,3693,3.145,3694,1.49,3695,0.094,3696,0.094,3697,0.187,3698,3.182,3699,2.169,3700,1.149,3701,0.333,3702,1.706,3703,0.094,3704,0.169,3705,1.234,3706,0.187,3707,0.094,3708,1.541,3709,1.76,3710,0.345,3711,0.094,3712,0.457,3713,1.46,3714,0.569,3715,0.886,3716,1.775,3717,0.252,3718,1.508,3719,0.187,3720,0.721,3721,0.798,3722,0.63,3723,0.094,3724,0.939,3725,0.457,3726,0.094,3727,0.431,3728,1.315,3729,0.369,3730,0.529,3731,0.252,3732,0.094,3733,0.252,3734,0.094,3735,0.094,3736,0.094,3737,0.094,3738,0.094,3739,3.509,3740,0.094,3741,0.094,3742,0.457,3743,2.552,3744,2.42,3745,2.763,3746,0.169,3747,2.937,3748,3.314,3749,0.67,3750,0.085,3751,0.31,3752,0.085,3753,0.085,3754,0.085,3755,0.169,3756,0.085,3757,0.085,3758,0.085,3759,0.085,3760,0.169,3761,0.085,3762,0.085,3763,0.085,3764,0.085,3765,0.085,3766,0.085,3767,0.085,3768,0.721,3769,0.085,3770,0.085,3771,0.085,3772,0.085,3773,0.252,3774,0.085,3775,0.085,3776,0.169,3777,0.085,3778,0.169,3779,0.085,3780,0.169,3781,0.085,3782,0.085,3783,0.085,3784,0.085,3785,0.085,3786,0.169,3787,0.085,3788,0.721,3789,1.296,3790,0.085,3791,0.085,3792,0.085,3793,0.085,3794,0.085,3795,0.085,3796,0.085,3797,0.085,3798,0.252,3799,0.085,3800,0.085,3801,0.085,3802,0.085,3803,0.31,3804,0.31,3805,0.085,3806,0.795,3807,0.085,3808,0.169,3809,0.085,3810,0.085,3811,0.085,3812,0.085,3813,0.085,3814,0.234,3815,0.085,3816,0.085,3817,0.252,3818,0.252,3819,0.085,3820,0.252,3821,1.193,3822,0.085,3823,0.569,3824,0.252,3825,0.085,3826,0.085,3827,0.085,3828,0.739,3829,0.169,3830,0.085,3831,0.085,3832,0.252,3833,0.085,3834,0.085,3835,0.085,3836,0.234,3837,0.085,3838,0.085,3839,2.335,3840,0.539,3841,0.085,3842,0.085,3843,0.085,3844,0.529,3845,0.457,3846,2.072,3847,0.569,3848,0.333,3849,0.085,3850,0.492,3851,0.085,3852,0.157,3853,0.252,3854,0.085,3855,0.085,3856,1.668,3857,0.085,3858,0.085,3859,0.169,3860,0.169,3861,0.169,3862,0.085,3863,0.085,3864,0.085,3865,0.085,3866,0.085,3867,0.085,3868,0.947,3869,1.235,3870,0.085,3871,0.085,3872,0.252,3873,0.085,3874,0.085,3875,0.874,3876,1.604,3877,0.67,3878,0.085,3879,0.085,3880,0.094,3881,0.094,3882,0.094,3883,0.094,3884,0.094,3885,0.094,3886,0.094,3887,0.094,3888,0.094,3889,0.094,3890,0.094,3891,0.094,3892,0.094,3893,0.413,3894,0.369,3895,0.094,3896,0.413,3897,0.094,3898,0.094,3899,0.094,3900,0.094,3901,0.094,3902,0.094,3903,0.094,3904,0.094,3905,1.068,3906,0.094,3907,0.094,3908,0.094,3909,0.094,3910,0.369,3911,0.169,3912,0.094,3913,0.094,3914,0.094,3915,0.961,3916,0.094,3917,0.187,3918,0.094,3919,0.646,3920,0.094,3921,0.094,3922,0.715,3923,0.187,3924,0.094,3925,0.094,3926,0.094,3927,0.094,3928,0.094,3929,0.094,3930,0.094,3931,0.094,3932,0.094,3933,0.868,3934,1.131,3935,0.094,3936,0.094,3937,0.094,3938,0.094,3939,0.094,3940,0.094,3941,0.187,3942,0.369,3943,0.094,3944,0.187,3945,0.67,3946,0.67,3947,1.659,3948,0.187,3949,0.094,3950,0.094,3951,0.094,3952,0.094,3953,0.094,3954,0.094,3955,0.094,3956,0.094,3957,0.094,3958,0.369,3959,0.094,3960,1.004,3961,0.094,3962,0.094,3963,0.234,3964,0.094,3965,0.094,3966,0.094,3967,0.094,3968,0.094,3969,0.795,3970,0.094,3971,0.085,3972,0.085,3973,0.094,3974,0.094,3975,0.094,3976,0.094,3977,0.094,3978,0.094,3979,0.715,3980,0.094,3981,0.094,3982,0.961,3983,0.094,3984,0.961,3985,0.094,3986,0.187,3987,0.094,3988,0.252,3989,0.094,3990,0.646,3991,0.094,3992,0.457,3993,0.63,3994,0.187,3995,0.88,3996,0.094,3997,1.196,3998,0.094,3999,0.094,4000,1.119,4001,0.094,4002,0.279,4003,0.279,4004,0.187,4005,0.187,4006,0.187,4007,0.094,4008,1.04,4009,0.88,4010,0.187,4011,1.011,4012,0.094,4013,1.04,4014,0.094,4015,0.094,4016,0.094,4017,0.094,4018,0.279,4019,0.187,4020,1.04,4021,0.094,4022,0.63,4023,0.094,4024,0.094,4025,0.094,4026,0.094,4027,0.094,4028,2.66,4029,0.094,4030,0.187,4031,0.094,4032,0.094,4033,0.715,4034,0.094,4035,0.094,4036,0.094,4037,0.094,4038,0.094,4039,0.094,4040,0.094,4041,0.094,4042,0.094,4043,0.094,4044,0.094,4045,0.094,4046,0.094,4047,0.187,4048,2.299,4049,1.566,4050,0.094,4051,0.094,4052,1.328,4053,0.187,4054,0.094,4055,0.094,4056,0.094,4057,0.187,4058,0.094,4059,0.279,4060,0.094,4061,0.094,4062,0.279,4063,0.187,4064,0.279,4065,0.63,4066,1.119,4067,0.369,4068,0.369,4069,0.369,4070,0.094,4071,0.094,4072,0.187,4073,0.094,4074,0.094,4075,0.545,4076,0.094,4077,0.369,4078,0.094,4079,0.545,4080,0.094,4081,0.094,4082,0.094,4083,0.094,4084,0.094,4085,0.094,4086,0.094,4087,0.094,4088,0.094,4089,0.094,4090,0.187,4091,0.279,4092,0.094,4093,0.333,4094,0.094,4095,0.094,4096,0.094,4097,0.094,4098,0.094,4099,0.094,4100,0.094,4101,0.094,4102,0.094,4103,0.187,4104,0.094,4105,0.094,4106,0.094,4107,0.094,4108,0.457,4109,0.333,4110,0.094,4111,0.094,4112,0.094,4113,0.094,4114,0.094,4115,0.094,4116,0.094,4117,0.094,4118,3.253,4119,1.729,4120,0.384,4121,0.413,4122,0.384,4123,0.457,4124,0.807,4125,0.094,4126,0.457,4127,0.094,4128,0.094,4129,0.094,4130,0.094,4131,2.59,4132,0.094,4133,0.961,4134,0.094,4135,0.094,4136,0.094,4137,0.094,4138,0.094,4139,0.094,4140,0.094,4141,0.094,4142,0.094,4143,0.094,4144,0.094,4145,0.094,4146,0.094,4147,0.094,4148,0.094,4149,0.094,4150,0.094,4151,0.094,4152,0.094,4153,0.094,4154,0.094,4155,0.094,4156,0.094,4157,0.094,4158,0.187,4159,0.961,4160,0.187,4161,0.187,4162,0.279,4163,0.187,4164,0.094,4165,0.094,4166,0.457,4167,0.094,4168,0.187,4169,0.094,4170,0.094,4171,0.094,4172,0.094,4173,0.094,4174,0.094,4175,0.187,4176,0.187,4177,0.094,4178,0.094,4179,0.094,4180,0.187,4181,0.094,4182,0.094,4183,0.279,4184,0.094,4185,0.545,4186,0.369,4187,0.094,4188,0.187,4189,0.187,4190,0.094,4191,0.094,4192,0.094,4193,0.094,4194,0.094,4195,0.094,4196,0.094,4197,0.369,4198,0.88,4199,0.369,4200,2.543,4201,0.094,4202,0.094,4203,0.094,4204,0.094,4205,0.187,4206,0.279,4207,0.187,4208,0.187,4209,0.187,4210,0.545,4211,0.094,4212,0.094,4213,0.094,4214,0.279,4215,0.094,4216,0.795,4217,0.187,4218,0.094,4219,0.094,4220,0.187,4221,0.187,4222,0.094,4223,0.094,4224,0.094,4225,0.094,4226,0.094,4227,0.094,4228,0.6,4229,0.094,4230,0.094,4231,0.094,4232,0.187,4233,0.094,4234,0.094,4235,0.094,4236,0.094,4237,0.094,4238,0.094,4239,0.094,4240,0.094,4241,0.094,4242,0.094,4243,0.094,4244,0.457,4245,0.187,4246,0.187,4247,0.094,4248,0.094,4249,0.094,4250,0.094,4251,0.094,4252,0.187,4253,0.187,4254,0.094,4255,0.094,4256,0.492,4257,0.234,4258,0.369,4259,0.31,4260,0.094,4261,0.094,4262,0.094,4263,0.094,4264,0.094,4265,0.094,4266,0.539,4267,0.094,4268,0.094,4269,0.094,4270,0.094,4271,0.094,4272,0.094,4273,1.286,4274,0.094,4275,0.539,4276,0.187,4277,0.187,4278,0.959,4279,0.094,4280,0.333,4281,0.252,4282,0.252,4283,0.292,4284,0.499,4285,1.027,4286,0.094,4287,0.094,4288,0.457,4289,0.094,4290,0.639,4291,0.234,4292,0.094,4293,0.094,4294,0.085,4295,0.157,4296,0.085,4297,0.085,4298,0.085,4299,0.085,4300,1.29,4301,0.085,4302,0.085,4303,0.085,4304,0.362,4305,0.292,4306,0.085,4307,0.085,4308,0.085,4309,0.085,4310,0.157,4311,0.221,4312,0.085,4313,0.085,4314,0.157,4315,0.157,4316,0.085,4317,0.555,4318,0.094,4319,0.094,4320,0.085,4321,0.085,4322,0.566,4323,0.085,4324,0.085,4325,0.085,4326,0.085,4327,0.085,4328,0.085,4329,0.085,4330,0.085,4331,0.085,4332,0.085,4333,0.085,4334,0.085,4335,0.085,4336,0.085,4337,0.169,4338,0.085,4339,0.094,4340,0.094,4341,0.094,4342,0.094,4343,0.094,4344,0.094,4345,0.492,4346,0.094,4347,0.413,4348,0.094,4349,0.094,4350,0.094,4351,0.094,4352,0.369,4353,0.279,4354,0.187,4355,0.279,4356,0.187,4357,0.094,4358,0.094,4359,0.094,4360,0.369,4361,0.187,4362,0.094,4363,0.094,4364,0.094,4365,0.094,4366,0.094,4367,0.187,4368,0.234,4369,0.094,4370,0.094,4371,0.094,4372,0.094,4373,0.094,4374,0.094,4375,0.094,4376,0.094,4377,0.094,4378,0.252,4379,0.094,4380,0.234,4381,0.085,4382,0.085,4383,0.085,4384,0.085,4385,0.085,4386,0.085,4387,0.085,4388,0.094,4389,0.094,4390,0.094,4391,0.094,4392,0.094,4393,0.094,4394,0.094,4395,0.187,4396,0.094,4397,0.094,4398,0.094,4399,0.094,4400,0.094,4401,0.094,4402,0.094,4403,0.094,4404,0.094,4405,0.094,4406,0.094,4407,5.444,4408,0.279,4409,0.457,4410,0.798,4411,0.094,4412,0.279,4413,0.333,4414,0.369,4415,0.369,4416,0.094,4417,0.279,4418,0.187,4419,0.187,4420,0.187,4421,0.094,4422,0.094,4423,0.279,4424,0.279,4425,0.187,4426,0.369,4427,0.094,4428,0.094,4429,0.094,4430,0.094,4431,0.094,4432,0.279,4433,0.094,4434,0.187,4435,0.094,4436,0.187,4437,0.094,4438,0.094,4439,0.094,4440,0.094,4441,0.187,4442,0.457,4443,0.094,4444,0.094,4445,0.279,4446,0.279,4447,0.094,4448,0.798,4449,0.369,4450,0.961,4451,0.094,4452,1.272,4453,0.187,4454,0.279,4455,0.279,4456,0.279,4457,0.279,4458,0.094,4459,0.094,4460,0.094,4461,0.279,4462,0.187,4463,0.094,4464,0.094,4465,0.094,4466,0.094,4467,0.279,4468,0.094,4469,0.094,4470,0.094,4471,0.094,4472,0.094,4473,0.094,4474,0.094,4475,0.094,4476,0.187,4477,0.094,4478,0.094,4479,0.961,4480,0.187,4481,0.187,4482,0.187,4483,0.961,4484,0.279,4485,0.279,4486,0.279,4487,1.284,4488,0.094,4489,0.798,4490,0.187,4491,0.369,4492,0.187,4493,0.187,4494,0.187,4495,1.119,4496,0.279,4497,0.369,4498,0.279,4499,0.279,4500,0.279,4501,0.094,4502,0.094,4503,0.094,4504,0.094,4505,0.094,4506,0.094,4507,0.094,4508,0.094,4509,0.279,4510,0.187,4511,0.187,4512,0.187,4513,0.094,4514,0.279,4515,0.094,4516,0.094,4517,0.094,4518,0.094,4519,0.094,4520,0.094,4521,0.094,4522,0.094,4523,0.094,4524,0.094,4525,0.094,4526,0.094,4527,0.094,4528,0.094,4529,0.094,4530,0.094,4531,0.094,4532,0.094,4533,0.939,4534,0.715,4535,0.094,4536,0.187,4537,0.094,4538,0.094,4539,0.094,4540,0.094,4541,0.094,4542,0.094,4543,0.187,4544,0.187,4545,0.187,4546,0.094,4547,0.094,4548,0.094,4549,0.094,4550,0.369,4551,0.187,4552,0.094,4553,0.094,4554,0.094,4555,0.094,4556,0.094,4557,0.094,4558,0.094,4559,0.094,4560,0.094,4561,0.721,4562,0.094,4563,0.094,4564,0.094,4565,0.094,4566,0.094,4567,0.573,4568,0.094,4569,0.094,4570,0.094,4571,0.529,4572,0.094,4573,0.094,4574,0.094,4575,0.085,4576,0.085,4577,0.169,4578,0.169,4579,0.085,4580,0.234,4581,0.085,4582,0.085,4583,0.085,4584,0.085,4585,0.085,4586,0.085,4587,0.169,4588,0.085,4589,0.085,4590,0.085,4591,0.085,4592,0.085,4593,0.085,4594,0.085,4595,0.085,4596,1.926,4597,0.157,4598,0.085,4599,0.085,4600,0.085,4601,0.085,4602,0.157,4603,0.085,4604,0.085,4605,0.085,4606,0.085,4607,0.085,4608,0.085,4609,0.169,4610,0.169,4611,0.169,4612,0.795,4613,0.492,4614,0.085,4615,0.085,4616,0.085,4617,0.085,4618,0.252,4619,0.413,4620,0.333,4621,0.085,4622,0.085,4623,0.085,4624,0.085,4625,0.413,4626,0.169,4627,0.333,4628,0.333,4629,0.085,4630,0.085,4631,0.085,4632,0.085,4633,0.085,4634,0.085,4635,0.085,4636,0.085,4637,0.169,4638,0.252,4639,0.333,4640,0.333,4641,0.333,4642,0.333,4643,0.333,4644,0.333,4645,0.333,4646,0.169,4647,0.085,4648,0.085,4649,0.085,4650,0.085,4651,0.085,4652,0.085,4653,0.094,4654,0.279,4655,0.094,4656,0.094,4657,0.094,4658,0.094,4659,0.094,4660,0.094,4661,0.094,4662,0.094,4663,0.094,4664,0.094,4665,0.094,4666,0.187,4667,1.196,4668,0.094,4669,0.279,4670,0.094,4671,0.187,4672,0.187,4673,0.094,4674,0.279,4675,0.094,4676,1.196,4677,0.094,4678,0.369,4679,0.369,4680,0.094,4681,0.094,4682,0.094,4683,0.279,4684,0.187,4685,0.094,4686,0.187,4687,0.187,4688,0.094,4689,0.094,4690,0.187,4691,0.094,4692,0.094,4693,0.094,4694,0.187,4695,0.187,4696,0.187,4697,0.457,4698,0.457,4699,0.457,4700,0.094,4701,0.094,4702,0.094,4703,0.094,4704,0.187,4705,0.187,4706,0.187,4707,0.094,4708,0.094,4709,0.094,4710,0.187,4711,0.094,4712,0.094,4713,0.094,4714,0.094,4715,0.094,4716,0.279,4717,0.094,4718,0.094,4719,0.187,4720,0.094,4721,0.187,4722,0.094,4723,0.187,4724,0.094,4725,0.094,4726,0.094,4727,0.094,4728,0.094,4729,0.094,4730,0.085,4731,0.085,4732,0.085,4733,0.085,4734,0.085,4735,0.085,4736,0.085,4737,0.085,4738,0.721,4739,0.085,4740,0.252,4741,0.413,4742,0.169,4743,0.169,4744,0.169,4745,0.169,4746,0.169,4747,0.169,4748,0.169,4749,0.169,4750,0.413,4751,0.413,4752,1.149,4753,0.413,4754,0.413,4755,0.085,4756,0.085,4757,0.085,4758,0.085,4759,0.085,4760,0.085,4761,0.085,4762,0.085,4763,0.085,4764,0.085,4765,0.085,4766,0.085,4767,0.085,4768,0.085,4769,0.085,4770,0.085,4771,0.085,4772,0.085,4773,0.379,4774,0.085,4775,0.085,4776,0.085,4777,0.085,4778,0.085,4779,0.085,4780,0.085,4781,0.085,4782,0.085,4783,0.094,4784,0.094,4785,0.094,4786,0.457,4787,0.094,4788,0.094,4789,0.094,4790,0.715,4791,0.279,4792,0.63,4793,0.094,4794,0.88,4795,0.094,4796,0.545,4797,0.094,4798,0.094,4799,0.094,4800,0.279,4801,0.369,4802,0.094,4803,0.369,4804,0.094,4805,0.094,4806,0.369,4807,0.187,4808,0.094,4809,0.094,4810,0.094,4811,0.094,4812,0.094,4813,0.094,4814,0.094,4815,0.094,4816,0.094,4817,0.094,4818,0.094,4819,0.094,4820,0.094,4821,0.094,4822,0.094,4823,0.187,4824,0.545,4825,0.094,4826,0.094,4827,0.094,4828,0.279,4829,0.094,4830,0.094,4831,0.094,4832,0.187,4833,0.369,4834,0.094,4835,0.094,4836,0.094,4837,0.279,4838,0.094,4839,0.094,4840,0.094,4841,0.094,4842,0.094,4843,0.094,4844,0.094,4845,0.094,4846,0.094,4847,0.094,4848,0.094,4849,0.094,4850,0.279,4851,0.094,4852,0.187,4853,0.187,4854,0.279,4855,0.094,4856,0.094,4857,0.094,4858,0.094,4859,0.094,4860,0.094,4861,0.094,4862,0.094,4863,0.094,4864,0.094,4865,0.094,4866,0.094,4867,0.094,4868,0.094,4869,0.094,4870,0.094,4871,0.094,4872,0.094,4873,0.094,4874,0.187,4875,0.187,4876,0.094,4877,0.094,4878,0.094,4879,0.094,4880,0.187,4881,0.187,4882,0.094,4883,0.094,4884,0.094,4885,0.094,4886,0.094,4887,0.094,4888,0.094,4889,0.094,4890,0.094,4891,0.094,4892,0.094,4893,0.094,4894,0.094,4895,0.085,4896,0.085,4897,0.157,4898,0.157,4899,0.362,4900,0.369,4901,0.369,4902,0.362,4903,0.157,4904,0.221,4905,0.157,4906,0.085,4907,0.085,4908,0.094,4909,0.094,4910,0.094,4911,0.085,4912,0.252,4913,0.169,4914,0.085,4915,0.085,4916,0.085,4917,0.085,4918,0.085,4919,0.157,4920,0.157,4921,0.169,4922,0.085,4923,0.157,4924,0.085,4925,0.085,4926,0.085,4927,0.094,4928,0.094,4929,0.085,4930,0.085,4931,0.085,4932,0.094,4933,0.094,4934,0.094,4935,0.094,4936,0.094,4937,0.094,4938,0.094,4939,0.094,4940,0.187,4941,0.094,4942,0.279,4943,0.279,4944,0.094,4945,0.094,4946,0.279,4947,0.094,4948,0.187,4949,0.094,4950,0.094,4951,0.094,4952,0.094,4953,0.094,4954,0.094,4955,0.094,4956,0.094,4957,0.094,4958,0.094,4959,0.187,4960,0.187,4961,0.187,4962,0.094,4963,0.094,4964,0.094,4965,0.187,4966,0.094,4967,0.094,4968,0.187,4969,0.187,4970,0.094,4971,0.094,4972,0.094,4973,0.094,4974,0.094,4975,0.795,4976,0.187,4977,0.279,4978,0.094,4979,0.279,4980,0.369,4981,0.094,4982,0.094,4983,0.094,4984,0.187,4985,0.369,4986,0.094,4987,0.094,4988,0.094,4989,0.094,4990,0.094,4991,0.094,4992,0.094,4993,0.094,4994,0.094,4995,0.094,4996,0.094,4997,0.094,4998,0.094,4999,0.456,5000,0.636,5001,0.646,5002,0.456,5003,0.795,5004,0.252,5005,0.457,5006,0.094,5007,0.094,5008,0.094,5009,0.094,5010,0.094,5011,0.886,5012,0.094,5013,0.094,5014,0.094,5015,0.094,5016,0.094,5017,0.844,5018,0.094,5019,0.094,5020,0.187,5021,0.187,5022,0.187,5023,0.169,5024,0.393,5025,0.577,5026,0.545,5027,0.393,5028,0.393,5029,0.085,5030,0.085,5031,0.085,5032,0.221,5033,0.221,5034,0.33,5035,0.919,5036,0.085,5037,0.085,5038,0.094,5039,0.094,5040,0.094,5041,0.31,5042,0.31,5043,0.234,5044,0.085,5045,0.085,5046,0.085,5047,0.085,5048,0.085,5049,0.157,5050,0.157,5051,0.252,5052,0.157,5053,0.157,5054,0.169,5055,0.187,5056,0.187,5057,0.085,5058,0.085,5059,0.085,5060,0.085,5061,0.252,5062,0.252,5063,0.085,5064,0.085,5065,0.085,5066,0.085,5067,0.094,5068,0.094,5069,0.094,5070,0.094,5071,0.094,5072,0.094,5073,0.094,5074,0.094,5075,0.094,5076,0.094,5077,0.094,5078,0.094,5079,0.094,5080,0.279,5081,0.279,5082,0.279,5083,0.094,5084,0.094,5085,0.187,5086,0.094,5087,0.094,5088,0.187,5089,0.187,5090,0.094,5091,0.187,5092,0.169,5093,0.094,5094,0.369,5095,0.094,5096,0.169,5097,0.085,5098,0.085,5099,0.085,5100,0.085,5101,0.085,5102,0.094,5103,0.094,5104,0.094,5105,0.279,5106,0.094,5107,0.094,5108,0.094,5109,0.094,5110,0.094,5111,0.094,5112,0.094,5113,0.094,5114,0.094,5115,0.094,5116,0.094,5117,0.187,5118,0.094,5119,0.094,5120,0.094,5121,0.094,5122,0.094,5123,0.094,5124,0.094,5125,0.094,5126,0.187,5127,0.187,5128,0.094,5129,0.499,5130,1.04,5131,0.369,5132,0.369,5133,0.094,5134,0.529,5135,0.094,5136,0.094,5137,0.094,5138,0.094,5139,0.094,5140,0.094,5141,0.094,5142,0.252,5143,0.31,5144,0.715,5145,0.369,5146,0.094,5147,0.169,5148,0.094,5149,0.094,5150,0.094,5151,0.094,5152,0.094,5153,0.094,5154,1.196,5155,0.094,5156,0.094,5157,0.094,5158,0.094,5159,0.187,5160,0.094,5161,0.187,5162,0.094,5163,0.187,5164,0.094,5165,0.094,5166,0.094,5167,0.094,5168,0.094,5169,0.187,5170,0.187,5171,0.094,5172,0.094,5173,0.094,5174,0.457,5175,0.187,5176,0.094,5177,0.094,5178,0.457,5179,0.094,5180,0.094,5181,0.094,5182,0.187,5183,0.369,5184,0.094,5185,0.094,5186,0.094,5187,0.094,5188,0.094,5189,0.279,5190,0.094,5191,0.094,5192,0.094,5193,0.094,5194,0.094,5195,0.094,5196,0.094,5197,0.094,5198,0.094,5199,0.094,5200,0.094,5201,0.094,5202,0.094,5203,0.094,5204,0.094,5205,0.094,5206,0.094,5207,0.094,5208,0.094,5209,0.094,5210,0.085,5211,0.085,5212,0.094,5213,0.094,5214,0.094,5215,0.094,5216,0.094,5217,0.094,5218,0.094,5219,0.094,5220,0.187,5221,0.094,5222,0.094,5223,0.369,5224,0.094,5225,0.094,5226,0.094,5227,0.094,5228,0.094,5229,0.094,5230,0.094,5231,0.094,5232,0.094,5233,0.094,5234,0.094,5235,0.094,5236,0.094,5237,0.094,5238,0.094,5239,0.279,5240,0.369,5241,0.187,5242,0.094,5243,0.094,5244,0.094,5245,0.094,5246,0.094,5247,0.094,5248,0.094,5249,0.094,5250,0.094,5251,0.094,5252,0.094,5253,0.094,5254,0.094,5255,0.094,5256,0.094,5257,0.094,5258,0.094,5259,0.094,5260,0.094,5261,0.094,5262,0.094,5263,0.094]],["t/518",[0,0.216,585,6.306,3419,7.902,3449,6.784,3450,9.74,3451,5.949,3452,6.784,3453,6.784,3454,6.784,3455,6.784,3456,6.784]],["t/520",[0,0.154,908,6.492,2338,5.586,2341,3.476,3644,6.984,3645,6.984,3646,6.984,3647,6.984,3648,6.984,3649,6.984,3650,6.984,3651,7.787,3652,6.984,3653,8.993,3654,6.984,3655,6.984,3656,6.492,3657,6.984]],["t/522",[0,0.205,22,2.937,31,3.244,43,3.546,52,2.654,57,3.171,168,2.135,186,3.453,262,4.148,267,4.045,423,3.485,1036,2.188,1108,2.215,1475,4.881,1738,5.674,2341,3.485,3419,4.384,3479,6.907,3565,2.854,3593,3.152,3631,3.175,3651,4.384,3670,5.251,3693,4.976,3727,6.139,3728,4.881,3739,3.317,3742,7.81,3743,4.234,3744,4.897,3745,4.234,3746,7.001,3747,3.396,3748,5.207,3749,4.881,3750,5.251,3751,6.508,3752,5.251,3753,5.251,3754,5.251]],["t/524",[0,0.22,43,4.11,203,4.25,211,4.84,267,4.146,1710,8.158,1738,3.976,1742,5.131,3479,6.346,3485,3.976,3565,3.458,3596,5.52,3651,6.042,3727,6.346,3742,6.727,3751,6.727,3755,7.237,3756,5.52,3757,5.52,3758,5.52,3759,5.52,3760,7.237,3761,5.52]],["t/526",[0,0.209,17,0.877,20,2.781,22,2.539,26,5.372,31,3.098,39,3.696,42,1.371,43,1.79,52,3.83,57,2.646,64,1.29,69,2.499,104,1.766,122,0.898,126,1.29,168,1.339,180,0.651,186,3.265,192,1.877,255,2.279,258,2.637,261,2.636,262,1.951,267,2.783,270,1.29,271,2.373,330,2.15,390,2.11,392,3.495,396,4.748,423,3.273,467,2.279,468,0.661,520,0.858,522,1.159,563,2.536,569,2.15,570,1.217,589,0.749,599,2.75,605,2.634,635,2.69,647,2.746,707,0.944,722,2.705,771,1.217,854,1.11,869,0.971,890,1.159,1036,3.044,1064,1.159,1108,3.142,1366,0.877,1419,1.11,1738,4.155,2051,2.279,2292,1.217,2317,2.047,2341,3.022,2411,2.15,2464,1.069,2560,1.29,2566,1.29,2951,1.217,3093,1.29,3153,1.217,3305,1.29,3419,2.047,3423,1.388,3424,2.75,3427,1.29,3428,3.976,3479,6.748,3485,3.612,3490,1.217,3565,3.038,3574,6.885,3593,3.745,3601,3.294,3615,3.294,3631,3.277,3635,1.961,3639,1.29,3651,1.159,3693,4.705,3694,7.153,3701,2.452,3718,1.888,3727,1.217,3728,6.31,3730,1.29,3731,2.452,3733,1.388,3739,4.517,3743,1.992,3744,2.304,3745,1.992,3747,1.586,3748,3.376,3749,3.696,3762,1.388,3763,1.388,3764,1.388,3765,1.388,3766,1.388,3767,1.388,3768,6.072,3769,1.388,3770,1.388,3771,1.388,3772,1.388,3773,1.388,3774,1.388,3775,1.388,3776,1.388,3777,1.388,3778,1.388,3779,1.388,3780,1.388,3781,1.388,3782,1.388,3783,1.388,3784,1.388,3785,1.388,3786,1.388,3787,1.388,3788,2.452,3789,1.217,3790,1.388,3791,1.388,3792,1.388,3793,1.388,3794,1.388,3795,1.388,3796,1.388,3797,1.388,3798,3.294,3799,1.388,3800,1.388,3801,1.388,3802,1.388,3803,2.279,3804,2.279,3805,1.388,3806,6.34,3807,1.388,3808,2.452,3809,1.388,3810,1.388,3811,1.388,3812,1.388,3813,1.388,3814,1.29,3815,1.388,3816,1.388,3817,2.452,3818,2.452,3819,1.388,3820,2.452,3821,1.29,3822,1.388,3823,1.388,3824,3.294,3825,1.388,3826,1.388,3827,1.388,3828,1.29,3829,1.388,3830,1.388,3831,1.388,3832,3.294,3833,1.388,3834,1.388,3835,1.388,3836,1.29,3837,1.388,3838,1.388,3839,1.11,3840,1.159,3841,1.388,3842,1.388,3843,1.388,3844,1.29,3845,1.29,3846,4.54,3847,2.452,3848,1.388,3849,1.388,3850,1.388,3851,1.388,3852,1.29,3853,3.294,3854,1.388,3855,1.388,3856,0.877,3857,1.388,3858,1.388,3859,1.388,3860,1.388,3861,1.388,3862,1.388,3863,1.388,3864,1.388,3865,1.388,3866,1.388,3867,1.388,3868,1.217,3869,1.069,3870,1.388,3871,1.388,3872,1.388,3873,1.388,3874,1.388,3875,3.062,3876,1.388,3877,1.29,3878,1.388,3879,1.388]],["t/528",[3593,4.242,3971,7.813,3972,7.813]],["t/530",[0,0.163,43,3.341,267,4.466,1327,4.396,3469,2.749,3565,2.689,3593,3.341,4028,2.749,4052,5.346,4273,6.265,4290,5.049]],["t/532",[0,0.194,22,3.751,57,2.43,69,2.76,186,2.941,192,3.821,390,3.559,423,3.338,635,4.85,647,4.056,1036,2.795,1327,4.85,2341,3.338,2828,5.881,3469,2.484,3565,2.43,3593,3.978,3631,4.056,3856,4.238,4028,2.484,4118,5.6,4119,5.6,4273,5.897]],["t/535",[0,0.183,43,2.645,69,2.418,186,2.576,396,5.271,563,4.524,589,4.068,647,5.307,1064,6.291,1327,4.464,1738,5.429,2659,6.291,2949,6.608,3424,6.291,3469,2.791,3565,2.73,3593,4.18,3839,6.028,3869,5.802,4028,2.791,4120,7.005,4122,7.005,4123,7.005,4126,7.005,4273,5.993,4290,3.998]],["t/537",[0,0.17,119,6.168,3469,2.856,3593,3.472,4028,2.856,4273,5.555,4290,5.246]],["t/539",[0,0.163,43,3.341,267,4.466,1327,4.396,3469,2.749,3565,2.689,3593,3.341,4028,2.749,4052,5.346,4273,6.265,4290,5.049]],["t/541",[0,0.207,22,3.059,31,3.379,52,2.765,57,2.912,69,2.251,168,2.223,186,3.153,192,3.116,219,3.721,220,3.537,262,3.24,368,4.566,390,2.902,423,2.722,647,4.35,1036,2.279,1108,2.307,1327,4.261,2341,2.722,3301,4.566,3469,2.026,3485,3.94,3565,1.981,3593,4.1,3631,3.307,3693,3.455,3739,3.455,3743,3.307,3744,3.825,3745,3.307,3747,3.537,3748,4.067,3856,3.455,4028,2.026,4048,4.374,4256,5.469,4266,4.566,4273,6.39,4275,4.566,4278,4.566,4283,4.796,4284,6.307,4285,4.374,4288,5.084,4291,5.084,4294,5.469,4295,5.084]],["t/543",[0,0.163,43,3.341,267,4.466,3469,2.749,3565,2.689,3593,3.341,4028,2.749,4052,5.346,4273,6.265,4284,6.508,4295,6.898]],["t/545",[0,0.213,22,2.623,31,2.897,52,2.371,57,2.693,69,1.93,168,2.636,180,2.201,186,2.843,219,4.412,220,4.194,261,3.109,262,2.778,278,3.488,423,2.334,589,2.531,1036,1.954,1108,1.979,1356,4.112,1366,2.963,1873,3.28,2341,2.334,3301,3.915,3469,1.737,3485,3.378,3565,1.699,3593,3.789,3631,2.836,3693,4.696,3739,2.963,3743,2.836,3744,3.28,3745,2.836,3747,3.033,3748,3.488,3934,6.027,4011,4.69,4028,1.737,4048,3.751,4257,4.359,4273,5.354,4275,5.413,4278,6.205,4280,4.69,4281,4.69,4282,4.69,4283,4.112,4284,5.686,4285,5.186,4296,4.69,4297,4.69,4298,4.69,4299,4.69,4300,5.608,4301,4.69,4302,4.69,4303,4.69,4304,6.517,4305,5.686,4306,4.69,4307,4.69,4308,4.69,4309,4.69,4310,4.359,4311,4.112,4312,4.69]],["t/547",[0,0.163,43,3.341,267,4.466,278,5.519,3469,2.749,3565,2.689,3593,3.341,4028,2.749,4052,5.346,4300,6.083,4310,6.898]],["t/549",[0,0.198,22,3.191,31,3.525,52,2.884,57,2.972,69,2.348,186,3.242,219,3.882,220,3.69,262,3.38,278,5.499,423,2.84,1036,2.377,1108,2.407,1327,3.38,2341,2.84,3469,2.114,3565,2.067,3593,4.148,3631,3.451,3693,3.605,3739,3.605,3743,3.451,3744,3.991,3745,3.451,3747,3.69,3748,4.243,4028,2.114,4048,4.564,4266,4.764,4275,4.764,4278,4.764,4285,4.564,4288,5.304,4290,3.882,4291,5.304,4300,6.288,4304,5.004,4305,5.004,4311,5.004,4313,5.706,4314,5.304,4315,5.304,4316,5.706]],["t/551",[0,0.163,43,3.341,267,4.466,1327,4.396,3469,2.749,3565,2.689,3593,3.341,4028,2.749,4052,5.346,4290,5.049,4300,6.083]],["t/553",[0,0.154,22,3.929,57,2.545,69,2.891,186,3.08,423,3.497,1036,2.927,1327,4.988,2341,3.497,3469,2.602,3565,2.545,3593,4.059,3631,4.248,3963,6.53,4028,2.602,4118,5.865,4119,5.865,4300,5.888]],["t/555",[0,0.175,69,2.641,168,2.609,180,3.011,186,2.813,271,4.622,396,4.488,563,4.94,647,3.88,1064,5.357,1327,3.801,2341,3.194,2659,5.357,2949,5.627,2951,5.627,3424,5.357,3469,2.377,3565,2.325,3593,4.079,3840,5.357,3844,5.964,3845,5.964,3869,4.94,4028,2.377,4120,5.964,4122,5.964,4123,7.405,4124,5.964,4126,7.405,4266,5.357,4300,4.488,4317,4.94]],["t/558",[0,0.17,119,6.168,3469,2.856,3593,3.472,4028,2.856,4290,5.246,4300,5.393]],["t/560",[0,0.181,43,3.711,267,4.233,1327,4.883,1738,4.887,3469,3.054,3565,2.986,3593,4.159,4028,3.054,4052,4.887,4290,5.608,4300,6.46,4320,6.784,4321,6.784]],["t/562",[0,0.191,22,3.607,31,2.875,52,3.741,57,2.895,69,2.654,186,3.245,192,2.651,219,3.166,220,3.009,261,4.906,262,2.756,278,3.46,390,2.469,423,3.21,635,3.82,647,2.814,1036,3.084,1108,1.963,1327,4.734,2341,3.21,3469,2.389,3485,4.646,3565,2.336,3593,4.149,3631,3.9,3693,2.94,3739,4.676,3743,2.814,3744,3.254,3745,2.814,3747,3.009,3748,3.46,3856,2.94,3896,4.653,4028,2.389,4048,3.722,4216,4.653,4257,4.325,4266,3.885,4275,3.885,4278,3.885,4283,4.08,4285,3.722,4290,3.166,4300,5.87,4304,4.08,4305,4.08,4311,4.08,4314,4.325,4315,4.325,4322,7.007,4323,4.653,4324,4.653,4325,4.653,4326,4.653,4327,4.653,4328,4.653,4329,4.653,4330,4.653,4331,4.653,4332,4.653]],["t/564",[0,0.163,43,3.341,267,4.466,1327,4.396,3469,2.749,3565,2.689,3593,3.341,4028,2.749,4052,5.346,4290,5.049,4322,7.626]],["t/567",[0,0.205,22,3.589,52,3.244,57,2.325,69,2.641,186,2.813,192,3.656,390,3.405,423,3.194,647,3.88,994,5.627,1036,2.673,1327,4.719,2341,3.194,2527,4.772,3469,2.377,3565,2.325,3593,3.901,3631,3.88,3739,4.054,3856,4.054,4028,2.377,4124,5.964,4322,6.986,4333,6.417,4334,6.417,4335,6.417,4336,6.417,4337,6.417,4338,6.417]],["t/569",[0,0.151,22,3.838,57,2.486,69,2.824,186,3.009,192,3.91,390,3.642,423,3.416,635,5.287,647,4.15,1036,2.859,2341,3.416,3469,2.542,3565,2.486,3593,3.737,3631,4.15,3840,5.729,3856,4.336,4028,2.542,4118,5.729,4119,5.729,4368,6.379,4380,6.379]],["t/571",[0,0.218,22,3.222,52,2.912,57,2.087,69,2.371,186,2.526,192,3.283,219,5.063,220,3.726,390,3.057,423,2.868,635,3.413,647,3.484,1036,2.4,1143,4.608,1397,4.436,2341,2.868,3469,2.756,3485,4.15,3565,2.696,3593,3.922,3631,3.484,3720,5.762,3739,3.64,3840,4.81,3856,3.64,4028,2.756,4285,4.608,4368,5.355,4378,7.441,4380,5.355,4381,5.762,4382,5.762,4383,5.762,4384,5.762,4385,5.762,4386,5.762,4387,5.762]],["t/573",[0,0.17,43,3.472,1710,6.762,3469,2.856,3565,2.794,4028,2.856,4567,5.555]],["t/575",[26,5.608,52,3.682,69,2.998,248,4.602,1036,3.035,3324,6.771,3469,2.698,3565,2.639,3574,6.081,3593,3.28,3739,4.602,4028,2.698,4561,7.285,4567,5.248,4575,7.285,4576,7.285]],["t/577",[0,0.129,26,4.501,57,2.721,69,2.406,96,6.982,589,3.156,647,3.536,722,3.978,1356,5.127,1366,3.694,2676,5.435,2689,4.501,3427,5.435,3451,7.278,3469,3.074,3472,5.847,3474,5.847,3565,2.721,3574,4.881,3593,2.632,3803,6.982,3804,6.982,3990,5.847,4028,2.783,4413,5.847,4533,5.435,4567,5.411,4577,7.512,4578,7.512,4579,5.847,4580,5.435,4581,5.847,4582,5.847,4583,5.847,4584,5.847,4585,5.847,4586,5.847,4587,7.512,4588,5.847,4589,5.847,4590,5.847,4591,5.847]],["t/579",[0,0.217,12,5.355,31,3.56,57,2.696,162,5.952,168,3.025,186,2.526,261,3.819,262,4.408,271,4.15,317,3.56,599,4.81,1108,3.675,2689,5.729,3017,5.355,3593,3.35,3635,4.608,3686,5.762,3693,3.64,3705,4.81,3743,3.484,3745,3.484,3747,4.813,3748,4.285,3821,5.355,3839,4.608,3905,5.355,3919,5.762,3933,5.762,3934,5.355,3988,5.762,4048,4.608,4109,7.441,4407,4.81,4592,5.762,4593,5.762]],["t/581",[52,3.823,69,3.113,186,3.316,1108,3.191,3469,2.802,3565,2.74,3684,7.564,4028,2.802,4567,5.448,4594,7.564]],["t/583",[69,3.093,98,6.59,186,3.295,1108,3.171,3469,2.784,3565,2.723,3635,6.011,3639,6.986,3640,7.516,4028,2.784,4567,5.414]],["t/585",[0,0.173,22,2.937,52,2.654,57,3.171,69,2.161,85,3.244,168,3.202,186,3.07,262,3.111,271,3.783,390,3.715,423,2.614,589,2.834,635,3.111,1036,2.188,1108,2.954,2341,3.92,2689,4.043,3469,1.945,3490,4.604,3565,1.902,3593,3.152,3631,4.234,3635,4.2,3693,3.317,3704,5.251,3705,5.845,3724,4.881,3739,4.423,3743,4.234,3744,3.673,3745,4.234,3747,3.396,3814,4.881,3868,4.604,3869,4.043,3893,5.251,3945,4.881,3946,4.881,3960,4.881,4028,1.945,4121,5.251,4259,6.508,4407,5.845,4567,3.783,4595,5.251,4596,4.881,4597,4.881,4598,5.251,4599,5.251,4600,5.251,4601,5.251,4602,4.881,4603,5.251,4604,5.251,4605,5.251,4606,5.251,4607,5.251]],["t/587",[43,3.384,267,4.499,3469,2.784,3565,2.723,3705,6.274,4028,2.784,4407,6.274,4567,5.414,4602,6.986,4608,7.516]],["t/589",[0,0.135,22,1.114,52,3.461,57,1.84,69,2.09,85,4.547,168,3.738,180,0.935,186,2.227,278,2.491,367,6.462,423,0.992,589,1.076,1036,3.814,1108,4.069,1366,3.876,1370,1.394,1397,1.534,2341,2.528,2527,1.482,2598,1.747,2627,3.336,3014,1.852,3469,1.882,3490,1.747,3565,1.84,3593,1.508,3631,2.026,3635,2.679,3700,1.993,3705,6.6,3730,1.852,3739,5.303,3789,5.72,3852,1.852,3868,1.747,3869,1.534,3905,3.114,4028,1.882,4118,6.719,4119,5.446,4166,1.852,4200,8.048,4259,1.852,4407,6.144,4487,6.523,4533,7.032,4567,1.435,4596,8.51,4597,1.852,4609,3.35,4610,3.35,4611,3.35,4612,7.36,4613,6.136,4614,1.993,4615,1.993,4616,1.993,4617,1.993,4618,4.334,4619,5.665,4620,5.08,4621,1.993,4622,1.993,4623,1.993,4624,1.993,4625,5.665,4626,3.35,4627,5.08,4628,5.08,4629,1.993,4630,1.993,4631,1.993,4632,1.993,4633,1.993,4634,1.993,4635,1.993,4636,1.993,4637,3.35,4638,4.334,4639,5.08,4640,5.08,4641,5.08,4642,5.08,4643,5.08,4644,5.08,4645,5.08,4646,1.993,4647,1.993,4648,1.993,4649,1.993,4650,1.993,4651,1.993,4652,1.993]],["t/591",[0,0.218,19,6.719,26,3.911,57,1.214,68,2.492,69,2.091,162,2.68,168,3.149,186,1.469,248,3.21,262,1.985,271,2.414,390,3.634,392,3.911,759,4.064,924,3.911,1036,3.715,1095,4.722,1108,1.414,1738,2.414,2193,3.114,2317,5.123,2549,4.722,3153,5.381,3301,4.241,3424,4.241,3451,2.938,3469,1.882,3494,3.351,3518,6.136,3565,1.841,3574,6.719,3593,2.763,3693,2.117,3717,3.351,3743,2.026,3744,2.343,3745,2.026,3747,2.167,3839,2.68,3877,3.114,3947,3.114,3960,3.114,3969,3.351,4028,1.882,4730,3.351,4731,3.351,4732,3.351,4733,3.351,4734,3.351,4735,3.351,4736,3.351,4737,3.351,4738,6.136,4739,3.351,4740,5.08,4741,5.08,4742,5.08,4743,5.08,4744,5.08,4745,5.08,4746,5.08,4747,5.08,4748,5.08,4749,5.08,4750,5.08,4751,5.08,4752,7.747,4753,5.08,4754,5.08,4755,3.351,4756,3.351,4757,3.351,4758,3.351,4759,3.351,4760,3.351,4761,3.351,4762,3.351,4763,3.351,4764,3.351,4765,3.351,4766,3.351,4767,3.351,4768,3.351,4769,3.351,4770,3.351,4771,3.351,4772,3.351,4773,2.58,4774,3.351,4775,3.351,4776,3.351,4777,3.351,4778,3.351,4779,3.351,4780,3.351,4781,3.351,4782,3.351]],["t/593",[0,0.168,34,5.697,43,3.449,267,3.934,3469,2.838,3565,2.776,3875,7.121,4028,2.838]],["t/595",[0,0.171,19,6.477,34,4.574,57,2.81,69,2.531,186,3.401,262,3.643,271,4.43,390,4.117,460,3.921,635,5.287,1108,2.595,2341,3.061,3469,2.278,3565,2.228,3693,3.886,3708,6.15,3709,6.122,3724,5.717,3743,3.719,3745,3.719,3747,3.978,3828,5.717,3945,5.717,3946,5.717,3947,7.211,4028,2.278,4166,7.211,4317,4.735,4895,6.15,4896,6.15,4897,5.717,4898,5.717]],["t/597",[0,0.165,43,3.384,267,4.499,460,3.799,3469,2.784,3565,2.723,3709,5.414,4028,2.784,4897,6.986,4903,6.986]],["t/599",[0,0.157,57,2.591,69,2.944,122,4.626,186,3.136,392,5.507,460,4.302,707,4.866,2338,5.721,2341,3.56,2612,6.649,3469,2.649,3565,2.591,3709,6.13,3710,5.971,4028,2.649,4904,6.272]],["t/601",[0,0.209,34,5.133,69,2.841,147,4.174,186,3.026,460,3.489,563,5.314,707,4.696,1108,2.912,2406,5.763,3469,2.557,3565,2.501,3709,4.972,3710,5.763,4028,2.557,4317,5.314,4899,6.053,4902,6.053,4905,6.416,4906,6.903,4907,6.903]],["t/604",[0,0.198,460,3.975,4911,7.865]],["t/606",[472,6.813,647,4.432,1838,6.813,2692,6.427,4912,7.33,4913,7.33,4914,7.33,4915,7.33,4916,7.33,4917,7.33,4918,7.33,4919,6.813,4920,6.813,4921,7.33,4922,7.33]],["t/608",[0,0.178,57,2.389,186,2.892,219,4.487,262,3.907,267,3.387,460,3.334,707,4.487,3565,2.389,3604,6.595,3693,4.167,3709,6.318,3718,6.752,3743,3.988,3745,3.988,3747,4.266,3836,6.13,4317,5.078,4571,8.503,4898,6.13,4899,5.783,4902,5.783,4919,6.13,4920,6.13,4923,6.13]],["t/610",[0,0.165,43,3.384,267,4.499,460,3.799,3469,2.784,3565,2.723,3709,5.414,4028,2.784,4903,6.986,4923,6.986]],["t/612",[0,0.155,57,2.56,69,2.908,122,4.571,186,3.098,392,5.441,460,4.271,707,4.808,2338,5.653,2341,3.518,3248,6.569,3469,2.618,3565,2.56,3709,6.087,3710,5.9,3911,7.067,4028,2.618,4904,6.197,4924,7.067]],["t/614",[0,0.207,34,4.988,69,2.76,147,4.056,186,2.941,460,3.39,563,5.164,707,4.563,1108,2.83,2406,5.6,3469,2.484,3565,2.43,3709,4.832,3710,5.6,3718,5.164,3789,5.881,4028,2.484,4317,5.164,4571,7.61,4899,5.881,4902,5.881,4904,5.881,4905,6.235,4925,6.707,4926,6.707]],["t/616",[0,0.196,367,5.976,4929,7.762,4930,7.762,4931,7.762]],["t/618",[0,0.163,43,3.341,267,4.886,3469,2.749,3565,2.689,4028,2.749,5023,7.421,5029,7.421,5030,7.421,5031,7.421]],["t/620",[0,0.212,57,2.622,85,4.471,186,2.42,192,3.145,262,3.27,317,3.41,423,2.747,599,4.608,2341,2.747,2783,6.216,3377,4.105,3469,2.045,3565,2,3693,3.487,3713,6.346,3714,5.52,3715,7.514,3743,3.338,3744,3.861,3745,3.338,3747,3.57,3839,4.415,3856,3.487,3869,6.216,3963,5.131,4028,2.045,4773,4.25,4999,4.415,5000,4.415,5001,5.52,5002,4.415,5003,5.52,5004,5.52,5011,7.08,5024,4.415,5025,4.415,5027,4.415,5028,4.415,5032,4.84,5033,4.84,5034,4.415,5035,6.458,5036,5.52,5037,5.52]],["t/622",[0,0.163,43,3.341,267,4.886,3469,2.749,3565,2.689,4028,2.749,5044,7.421,5045,7.421,5046,7.421,5047,7.421]],["t/624",[0,0.14,57,2.312,69,2.626,104,4.597,186,2.798,192,3.636,423,3.177,2341,3.177,2783,6.654,3377,4.746,3469,2.364,3565,2.312,3656,8.034,3715,5.596,3856,4.032,4028,2.364,4773,4.914,4999,5.105,5000,5.105,5002,5.105,5017,7.215,5024,5.105,5025,5.105,5027,5.105,5028,5.105,5034,5.105,5035,6.913,5041,5.932,5042,5.932,5043,5.932,5048,6.382]],["t/626",[0,0.139,57,2.287,192,3.597,423,3.143,2341,3.143,2783,6.622,3377,4.696,3469,2.339,3565,2.287,3713,5.537,3856,3.989,4028,2.339,4773,4.861,4999,5.05,5000,5.05,5002,5.05,5011,7.542,5017,7.181,5024,5.05,5025,5.05,5027,5.05,5028,5.05,5032,5.537,5033,5.537,5034,5.05,5035,6.88,5049,5.869,5050,5.869,5051,8.601,5052,5.869,5053,5.869]],["t/628",[0,0.165,43,3.384,267,4.763,3469,2.784,3565,2.723,4028,2.784,5054,7.516,5057,7.516,5058,7.516]],["t/630",[0,0.147,22,3.751,52,4.138,57,2.43,69,2.76,186,2.941,192,3.821,390,3.559,423,3.338,647,4.056,1036,3.411,2341,3.338,3469,2.484,3485,5.897,3565,2.43,3593,3.02,3631,4.056,3739,5.172,3856,4.238,4028,2.484,4345,6.707,4347,6.707,4580,7.61,5059,6.707,5060,6.707]],["t/632",[0,0.141,57,2.325,69,2.641,104,4.622,186,2.813,192,3.656,423,3.194,2341,3.194,2783,6.67,3377,4.772,3469,2.377,3565,2.325,3715,5.627,3856,4.054,4028,2.377,4773,4.94,4999,5.132,5000,5.132,5002,5.132,5017,7.233,5024,5.132,5025,5.132,5027,5.132,5028,5.132,5034,5.132,5035,6.93,5041,5.964,5042,5.964,5043,5.964,5061,8.664]],["t/634",[0,0.137,57,2.263,69,2.571,186,2.739,192,3.559,423,3.11,2341,3.11,2783,6.59,3377,4.646,3469,2.314,3565,2.263,3713,5.478,3856,3.947,4028,2.314,4773,4.81,4999,4.997,5000,4.997,5002,4.997,5011,7.506,5017,7.146,5024,4.997,5025,4.997,5027,4.997,5028,4.997,5032,5.478,5033,5.478,5034,4.997,5035,6.846,5049,5.807,5050,5.807,5052,5.807,5053,5.807,5062,8.56]],["t/636",[0,0.208,994,7.543,3485,6.197,4228,7.996,4975,8.603,5063,7.285,5064,7.285,5065,7.285,5066,7.285]],["t/638",[0,0.165,43,3.384,267,4.499,3469,2.784,3565,2.723,3593,3.384,3718,5.786,4028,2.784,4052,5.414,5092,7.516]],["t/640",[0,0.156,22,3.976,52,3.594,57,2.576,69,2.926,186,3.117,423,3.539,1036,2.962,2341,3.539,3469,2.634,3565,2.576,3593,4.08,3631,4.299,3718,6.528,3739,4.492,4028,2.634,5097,7.11]],["t/642",[0,0.22,32,4.994,69,2.67,77,5.688,88,5.189,186,2.844,932,5.189,1054,4.824,1141,5.688,1263,4.994,3419,5.416,3469,2.403,3565,2.35,3593,2.921,3718,6.175,4028,2.403,4093,6.487,4228,7.455,5096,6.487,5098,6.487,5099,6.487,5100,6.487,5101,6.487]],["t/644",[11,5.324,57,2.758,262,4.509,3743,4.603,3745,4.603,4317,5.86,5129,6.675,5134,8.205]],["t/646",[11,5.29,15,6.314,57,2.74,262,4.481,3743,4.574,3745,4.574,5129,6.632,5134,7.03,5143,7.03,5147,7.564]],["t/649",[9,6.898,11,5.191,15,6.196,57,2.689,186,3.254,262,4.396,3693,4.689,3694,6.898,3743,4.488,3745,4.488,5129,6.508,5142,7.421,5143,6.898]],["t/651",[3467,7.917,5210,7.917,5211,7.917]]],"invertedIndex":[["",{"_index":0,"t":{"3":{"position":[[0,5],[6,7]]},"5":{"position":[[0,29]]},"10":{"position":[[0,4],[5,85],[91,4],[96,149]]},"15":{"position":[[35,4],[108,6]]},"19":{"position":[[0,1],[37,1],[73,1],[112,1],[114,7],[205,1],[207,24],[247,3],[251,1],[253,28],[297,3],[301,1],[303,4],[308,8],[317,1],[319,5]]},"21":{"position":[[68,1],[106,1],[169,1],[212,10],[223,1],[265,1],[295,1],[340,1],[342,4],[347,1],[367,1],[413,7],[421,10],[513,1],[518,1],[520,4],[525,1],[530,1],[532,4],[537,12]]},"23":{"position":[[0,4],[5,1],[80,4],[85,1],[87,8],[110,1],[141,1],[143,13],[167,1],[169,16],[195,1],[197,6],[213,1],[215,4],[229,1],[231,3],[235,3],[281,3],[297,1],[299,10],[326,2],[339,1],[341,2],[344,1],[346,18],[368,1],[370,9],[383,1],[400,1],[402,12],[418,1],[420,5],[437,4],[442,1],[444,5],[455,1],[457,7],[474,4],[504,7],[542,4],[574,2],[601,4],[630,4],[635,1],[637,9],[669,1],[671,16],[713,14],[758,6],[765,1],[767,5],[797,1],[799,29],[858,6],[865,1],[867,2],[908,12],[951,5],[1022,1]]},"25":{"position":[[38,1],[40,6],[50,1],[52,9],[65,1],[67,9],[84,2],[87,1],[223,1],[270,9]]},"27":{"position":[[5,19],[36,14],[55,13],[76,13],[98,41],[144,16],[241,19],[328,15],[568,1],[793,1],[853,1],[863,1],[884,1],[886,1],[1506,11],[1543,1],[1605,1],[1607,1],[1720,2]]},"30":{"position":[[0,3],[17,14],[32,1],[34,23],[62,3],[79,4],[96,1]]},"32":{"position":[[0,7],[34,6],[76,8],[126,17],[148,1],[157,34],[232,11],[248,14],[270,9],[280,23],[308,27],[348,4],[353,1],[368,27],[403,40],[492,28],[528,5],[541,30],[572,3],[587,5],[619,9],[642,9],[682,6],[720,4],[747,33],[807,2],[863,41],[905,12],[943,1],[945,4],[979,15],[1002,10]]},"34":{"position":[[11,5],[17,3],[26,1],[51,8],[60,6],[72,1],[111,9],[126,12],[139,5],[145,18],[164,6],[171,3],[175,5],[181,24],[209,1],[226,5],[272,6],[279,36],[324,42],[367,13],[386,50],[460,17],[478,48],[537,9],[551,3],[560,14],[580,11],[592,2],[595,5],[601,3],[609,12],[634,2],[649,16],[666,6],[673,2],[676,1],[683,1],[689,29],[724,17],[747,14],[785,17],[813,5],[852,25],[891,26],[929,2],[936,9],[958,9],[1020,2],[1029,6],[1036,1],[1038,12],[1051,1],[1053,8],[1062,11],[1142,1],[1144,2],[1162,1],[1164,2],[1197,1],[1199,2],[1278,1],[1280,2],[1307,1],[1309,2],[1373,1],[1375,2],[1401,1],[1403,2],[1437,1],[1439,2],[1470,1],[1472,2],[1491,1],[1493,2],[1517,1],[1519,2],[1574,7],[1586,6],[1597,10],[1621,4],[1638,9],[1710,5],[1720,8],[1745,1],[1759,24],[1839,51],[1891,13],[1910,16],[1932,13],[1946,11],[1958,4],[1969,15],[1991,14],[2021,14],[2040,1],[2048,1],[2067,1],[2086,4],[2102,4],[2111,9],[2126,3],[2136,3],[2151,4],[2189,13],[2207,10],[2229,3],[2246,4],[2251,4],[2273,25],[2303,9],[2324,17],[2499,9],[2570,1],[2572,9],[2592,7],[2600,6],[2664,31],[2727,1],[2729,8],[2763,1],[2793,5],[2806,13],[2820,5],[2855,44],[2904,12],[2932,11],[2955,2],[2962,30],[3006,2],[3021,9],[3031,4],[3036,5],[3046,9],[3067,14],[3086,11],[3103,13],[3122,4],[3127,1],[3129,2],[3137,3],[3200,1],[3202,3],[3211,11],[3262,1],[3301,6],[3308,4],[3349,4],[3456,63],[3533,3],[3543,22],[3572,34],[3607,22],[3630,1],[3667,11],[3686,9],[3702,8],[3722,13],[3749,5],[3755,3],[3791,56],[3859,70],[3944,9],[3961,4],[3966,2],[3976,7],[3987,13],[4001,5],[4056,33],[4105,7],[4113,3],[4125,9],[4135,2],[4203,8],[4244,4],[4257,22],[4288,3],[4339,6],[4366,7],[4382,13],[4401,3],[4453,10],[4473,2],[4487,8],[4504,36],[4563,2],[4607,1],[4624,1],[4626,3],[4635,47],[4686,2],[4715,15],[4737,1],[4739,2],[4748,6],[4760,10],[4793,2],[4822,1],[4824,2],[4931,1],[4933,2],[4965,1],[4967,2],[4987,1],[4989,2],[5010,1],[5052,1],[5069,8],[5089,7],[5105,22],[5138,54],[5204,23],[5236,16],[5266,9],[5363,3],[5367,25]]},"36":{"position":[[0,3],[4,23],[45,3],[49,12],[62,1],[64,3],[68,8],[77,1],[79,3],[83,10],[94,3],[98,15]]},"38":{"position":[[7,5],[20,10],[38,5],[52,10],[66,8],[81,8],[105,2],[111,11],[138,2],[141,1],[143,5],[177,1],[179,5],[185,3],[189,1],[208,1],[210,4],[215,3],[219,3],[223,1]]},"40":{"position":[[0,51],[52,47],[100,36],[137,38]]},"42":{"position":[[0,6],[20,11],[39,7],[70,28],[105,7],[120,11],[138,10],[154,15],[189,1],[212,17],[244,40],[316,22],[362,1],[381,11],[404,14],[425,6],[432,1],[461,1],[542,2],[559,10],[597,9],[621,22],[657,1],[663,1],[669,11],[686,6],[705,17],[730,6],[749,20],[770,1],[830,4],[847,32],[922,1],[972,1],[999,1],[1044,2],[1068,16],[1085,18],[1119,1],[1136,1],[1217,1]]},"44":{"position":[[0,44],[45,72],[118,66]]},"46":{"position":[[0,1],[13,7],[28,11],[53,3],[70,26],[103,24],[134,51],[196,21],[229,26],[256,24],[292,3],[303,44],[444,4],[460,19],[498,11],[516,8],[547,25],[584,8],[604,3],[613,38],[666,16],[697,17],[715,5],[732,21],[860,12],[873,9],[894,11],[951,2],[1017,4],[1087,27],[1115,12],[1139,15],[1159,3],[1174,9],[1207,3],[1222,19],[1253,16],[1337,2],[1365,2]]},"48":{"position":[[7,2],[10,6],[28,6],[199,4]]},"50":{"position":[[0,2]]},"52":{"position":[[8,8],[28,8],[83,2],[92,2],[95,12],[205,2],[263,10],[283,27]]},"54":{"position":[[0,33],[34,3],[62,7]]},"56":{"position":[[0,2],[33,9]]},"58":{"position":[[0,2],[45,5],[138,5],[208,10],[282,3],[300,10],[339,5],[374,16],[391,6],[450,7],[539,5],[545,5],[594,7],[660,5]]},"60":{"position":[[0,2],[94,4],[99,9],[132,9],[179,12],[272,3]]},"62":{"position":[[0,2],[40,9],[70,4],[158,13]]},"68":{"position":[[8,4]]},"71":{"position":[[0,2],[15,1],[25,9]]},"73":{"position":[[0,5],[6,7],[14,6],[63,6],[70,11],[143,6],[164,2],[181,3],[185,7],[216,3],[291,1],[293,9],[321,1],[323,4],[371,1],[373,9],[410,1],[412,3],[621,1],[642,1],[672,1],[686,6],[711,2],[728,3],[744,1],[789,1],[817,1],[819,2],[822,1],[994,2],[1015,1],[1017,6],[1065,1],[1086,1],[1092,2],[1104,3],[1108,2],[1121,2],[1380,4],[1385,5],[1420,5],[1456,5],[1490,7],[1528,7]]},"75":{"position":[[0,19],[20,6],[27,11],[39,6],[73,2]]},"78":{"position":[[0,4],[56,1],[58,11],[166,4],[428,6],[448,4],[548,4],[575,4]]},"81":{"position":[[187,12],[219,12],[250,12],[395,23]]},"83":{"position":[[192,1],[288,1],[356,1],[358,1],[365,1],[367,5],[373,1],[436,1],[490,1],[492,1]]},"85":{"position":[[640,37]]},"88":{"position":[[30,9],[84,29],[155,10],[183,35],[242,37],[298,2],[308,33],[360,10],[379,5],[392,5],[406,1],[428,5],[474,8],[493,9],[508,13],[526,3],[549,7],[563,11],[580,3],[605,6],[632,2],[644,13],[685,20],[736,11],[763,26],[809,1],[844,49],[914,1],[948,57],[1035,10],[1078,26],[1124,7],[1138,11],[1155,3],[1191,8],[1210,7],[1284,24],[1319,19],[1346,8],[1363,7],[1383,9],[1401,9]]},"90":{"position":[[30,6],[45,35],[101,2],[112,38],[179,40],[240,2],[298,37],[359,2],[370,42],[436,2],[447,42],[519,6],[534,40],[593,6],[608,35],[664,2],[675,31],[737,2],[748,25],[786,2],[818,6],[833,34],[899,2],[910,34],[963,6],[978,47],[1053,40],[1113,2],[1124,35],[1179,6],[1194,36],[1247,6],[1262,1],[1279,10],[1298,11],[1318,9],[1343,17],[1373,41],[1425,41],[1492,12],[1513,17],[1564,6],[1604,7],[1620,17],[1642,16],[1712,13]]},"92":{"position":[[209,5],[621,7]]},"94":{"position":[[98,1],[100,4],[105,1],[115,16]]},"97":{"position":[[0,7],[115,45],[170,15],[308,32],[345,23]]},"99":{"position":[[18,4],[30,6],[41,3],[45,3],[57,10],[76,2]]},"101":{"position":[[21,11],[48,1],[55,1],[77,1],[79,1],[86,1],[88,1],[95,1],[97,1],[111,1],[135,1],[143,1],[145,1],[159,1],[161,6],[172,3],[176,1],[178,1],[189,1],[191,1],[197,15],[213,1],[226,1],[228,5],[234,1],[236,1],[243,1],[245,1],[252,1],[254,1],[266,1],[307,11],[324,26],[356,20],[377,2],[389,10],[407,2],[416,4],[421,3],[437,2],[447,5],[453,7],[461,15],[477,6],[499,4],[508,8],[517,6],[531,3],[535,9],[566,3],[580,11],[608,9],[625,3],[629,13],[643,23]]},"103":{"position":[[0,17],[33,1],[43,17],[78,9],[95,14],[115,26],[167,10],[183,5],[211,2],[250,1],[252,2],[276,1],[278,43],[322,8],[353,15],[376,7],[406,2],[475,1],[495,1],[503,1],[505,5],[528,3],[539,20]]},"105":{"position":[[0,6],[7,1],[9,4],[14,1]]},"107":{"position":[[66,1],[91,1],[93,6],[133,13],[205,1],[225,1],[233,2],[236,1],[247,13],[261,2],[264,2],[296,2],[322,1],[406,1],[437,1],[445,1],[454,1],[489,1],[491,1],[493,1],[495,1]]},"110":{"position":[[134,6],[141,3],[145,3],[149,2],[224,11],[269,7],[312,12],[342,8],[454,4],[459,3],[463,3],[467,2],[587,12],[608,1],[644,8],[653,8],[662,5],[668,2],[682,4],[700,5],[804,4],[809,3],[847,16],[880,30],[945,6],[964,6],[981,6],[988,8],[1035,1],[1050,1],[1080,1],[1082,1],[1132,1],[1172,4],[1307,20],[1395,4],[1400,3],[1404,3],[1408,2],[1426,5],[1451,9],[1545,1],[1598,12],[1651,4],[1711,3],[1715,3],[1719,2],[1737,5],[1815,8],[1856,10],[1896,22],[1938,9]]},"112":{"position":[[10,21],[100,3],[104,3],[108,2],[179,11],[224,7],[285,15],[320,1],[338,1],[340,12],[411,13],[425,2],[428,10],[457,1],[472,2],[490,1],[505,1],[559,1],[609,1],[621,15],[664,4],[669,3],[673,3],[677,2],[697,14],[795,15],[903,2],[906,12],[953,1],[975,1],[1029,1],[1050,1],[1052,2],[1138,2],[1177,2],[1235,1],[1322,1],[1324,1],[1349,1],[1488,2],[1527,1],[1550,2],[1559,1],[1625,2],[1669,1],[1715,1],[1753,1],[1760,1],[1775,1],[1870,1],[1872,1]]},"114":{"position":[[12,2],[15,2],[18,1],[167,1],[197,1],[230,1],[232,2],[235,1],[237,1],[347,2],[396,1],[408,1],[440,1],[442,1],[472,1],[474,1],[543,1],[674,1],[726,1],[737,1],[771,1],[786,1],[896,1],[898,1]]},"116":{"position":[[158,3],[162,1],[164,6],[171,1],[189,4],[194,1],[208,5],[214,1],[224,2],[270,1],[291,1],[380,1],[452,2],[455,7],[472,1],[474,3],[487,1],[513,2],[516,3],[546,1]]},"118":{"position":[[158,1],[190,1],[192,2],[210,1],[243,1],[263,1],[282,1],[290,1],[364,1]]},"121":{"position":[[0,2],[11,11],[27,2],[94,1],[96,1]]},"123":{"position":[[0,4]]},"128":{"position":[[121,1],[140,1],[157,1],[165,1],[186,1],[188,1],[190,1],[192,1]]},"132":{"position":[[457,1],[476,1],[493,1],[501,1],[522,1],[568,1],[610,1],[652,1],[694,1],[696,1],[698,1],[700,1],[753,1],[802,1],[851,1],[900,1],[902,1],[904,1]]},"137":{"position":[[235,1],[284,1],[416,1],[451,1],[552,1],[580,1],[697,1],[722,1],[840,1],[860,1],[871,1],[880,1],[897,1],[905,1],[926,1],[928,1],[930,1],[932,1],[954,15],[1087,1],[1122,1]]},"139":{"position":[[130,1],[163,4],[168,1],[227,1],[249,1],[288,1],[341,1],[372,1],[422,1],[514,1],[527,1],[552,2],[564,1],[566,1],[622,1],[638,1],[784,1],[835,1],[889,1],[913,3],[936,1],[964,1],[1016,1],[1089,1],[1097,1],[1166,1],[1168,1],[1226,1],[1234,1],[1269,1],[1271,1]]},"141":{"position":[[72,1],[95,1],[143,3],[165,1],[174,1],[189,1],[197,1],[231,1],[233,1],[235,1],[237,1]]},"143":{"position":[[234,1],[248,1],[272,1],[306,1],[340,1],[573,9]]},"149":{"position":[[149,1],[163,1],[583,16],[679,1],[767,1],[833,2],[854,1]]},"151":{"position":[[615,1],[635,1],[652,1],[660,1],[677,1],[685,1],[771,1],[773,1],[792,1],[800,1],[816,1],[824,1],[853,1],[891,1],[893,1],[895,1],[897,1]]},"155":{"position":[[331,1],[374,1],[415,1],[417,1],[419,1],[522,1],[749,1],[1253,1],[1262,1],[1274,1],[1276,1]]},"157":{"position":[[111,10]]},"164":{"position":[[11,5],[17,1],[57,1],[59,1],[61,1],[74,5],[254,3],[258,1]]},"166":{"position":[[55,1],[57,6],[87,1],[89,6],[108,1],[110,1],[112,1],[114,4],[151,3],[155,1]]},"168":{"position":[[162,6]]},"170":{"position":[[0,11],[12,5],[200,1],[326,1],[383,1],[394,1],[396,1],[398,8],[414,1],[459,2],[470,1],[862,1],[864,1],[913,1],[954,1],[956,1],[958,1],[960,6],[974,1],[1048,1],[1050,1],[1074,1],[1152,1],[1154,1],[1203,1],[1244,1],[1246,1]]},"173":{"position":[[71,1],[90,1],[105,1],[185,1],[197,1],[211,1],[221,1],[223,5],[243,1],[262,1],[286,1],[314,13],[391,13]]},"175":{"position":[[0,3],[11,7],[21,2],[31,2],[273,3],[363,3],[385,1],[399,1],[483,1],[556,3],[560,4],[592,36],[742,3],[752,1],[769,1],[793,1],[795,8],[862,1],[877,1],[910,1],[992,1],[1002,1],[1004,5],[1024,1],[1045,1],[1056,1],[1076,1],[1078,2],[1081,1],[1147,1],[1149,8],[1168,1],[1170,1],[1172,8],[1234,6],[1297,1],[1308,1],[1328,1],[1330,8],[1353,1],[1355,1],[1357,8],[1407,6],[1470,1],[1486,1]]},"177":{"position":[[218,1],[337,1],[357,1],[371,1],[486,1],[584,1],[651,1],[661,1],[725,1],[727,4],[747,1],[807,1],[837,1],[871,1],[933,1],[1146,1],[1186,1],[1203,1],[1205,1],[1207,5],[1227,1],[1249,1],[1273,1],[1283,1],[1399,1],[1439,1],[1631,2]]},"180":{"position":[[146,1],[148,1],[150,3],[172,1]]},"182":{"position":[[0,8],[9,7],[17,9],[27,5],[55,4]]},"184":{"position":[[6,5],[157,1],[220,1],[266,1],[328,1],[387,1],[459,25],[535,14],[553,1],[615,1],[676,1],[735,1],[800,1],[862,1],[990,6],[997,7],[1005,2],[1008,6],[1401,11],[1424,2],[1613,1],[1660,2],[1713,2],[2074,4],[2095,5],[2742,5],[2748,4],[2753,2],[2767,4],[2783,4],[2800,6],[2823,8],[2842,3],[2856,3],[2860,5],[2866,4],[2871,2],[2980,11],[3038,9],[3063,14],[3268,3],[3400,1]]},"186":{"position":[[57,5],[66,10],[119,1],[151,8],[223,1],[296,1],[318,7],[457,1],[493,1],[550,1],[588,8],[709,8],[830,8],[951,7],[1061,10],[1072,38],[1237,14],[1267,1],[1269,1],[1298,1],[1303,1],[1364,1],[1423,1],[1510,1],[1597,18],[1643,17],[1667,1],[1732,1],[1740,1],[1924,5],[2024,1],[2064,1],[2107,1],[2128,5],[2160,8],[2244,1],[2289,4],[2313,5],[2345,8],[2363,7],[2392,1],[2415,4],[2439,5],[2471,8],[2862,14],[2880,1],[2942,1],[3003,1],[3062,1],[3127,1],[3189,1],[3255,1],[3319,1],[3321,2],[3324,5],[3424,1],[3464,1],[3507,1],[3529,7]]},"188":{"position":[[7,3],[11,46],[265,38],[382,14],[400,1],[462,1],[523,1],[582,1],[647,1],[709,1],[859,1],[891,1],[945,1],[973,1],[1205,1],[1207,2],[1215,1],[1275,1],[1329,1],[1354,1],[1356,2],[1385,1],[1558,1],[1649,33],[1780,14],[1795,3],[1931,2],[1991,1],[2025,1],[2079,1],[2105,1],[2278,14],[2293,3],[2330,1],[2356,1],[2385,1],[2456,2],[2516,1],[2602,1],[2647,1],[2664,1],[2944,14],[2962,1],[3024,1],[3112,1],[3171,1],[3236,1],[3298,1],[3351,3],[3412,1],[3446,1],[3500,1],[3526,1],[3601,3],[3724,14],[3739,3],[3777,8],[3907,1],[3974,1],[4043,1],[4107,1],[4175,36],[4262,14],[4277,3],[4315,8],[4460,1],[4527,1],[4596,1],[4660,1],[4796,1],[4970,1],[4983,7],[5027,1],[5081,1],[5106,1],[5119,5],[5161,1],[5195,1],[5208,6],[5253,1],[5313,1],[5338,1],[5351,4],[5368,1],[5370,5],[5376,5],[5590,1],[5688,1],[5690,10],[5712,1]]},"190":{"position":[[120,14],[168,3],[254,14],[287,1],[305,1],[323,9],[340,13],[413,3],[469,3],[484,1],[507,3],[547,1],[597,1],[646,1],[711,1],[809,1],[904,1],[985,5],[1093,14],[1126,1],[1144,1],[1255,14],[1288,1],[1307,1],[1323,9],[1394,1],[1435,1],[1453,1],[1506,6],[1608,14],[1641,1],[1659,1],[1729,1],[1766,7],[1878,14],[1911,1],[1929,1],[1995,1],[1997,1],[2092,1],[2094,1],[2118,1],[2123,1],[2166,1],[2175,1],[2214,1],[2226,1],[2285,1],[2293,1],[2371,1],[2382,1]]},"193":{"position":[[266,31],[298,5],[390,16],[827,1],[829,1],[859,1],[861,1],[863,7],[912,1],[971,1],[982,1],[984,1],[986,4],[1240,5],[1252,16],[1325,5],[1340,13],[1429,5],[1491,6],[1533,4]]},"195":{"position":[[15,26],[42,8],[109,9]]},"197":{"position":[[7,5],[325,8],[357,11],[388,11],[417,11],[467,12],[480,3],[570,1],[679,1],[715,1],[925,17],[943,3],[964,11],[976,3],[1357,9],[1372,10],[1390,13],[1404,16],[1421,3],[1434,10],[1445,3],[1568,1],[1668,24],[1776,3],[1780,1],[1891,1],[1933,1],[1987,1],[2007,1],[2057,1],[2118,9],[2145,7],[2169,8],[2185,6],[2192,3],[2196,77],[2452,4],[2487,3],[2508,3],[2554,1],[2556,2],[2568,1],[2612,1],[2614,2],[2622,1],[2689,1],[2780,1],[2782,3],[2797,1],[2873,3],[2987,1],[3029,1],[3216,4],[3253,3],[3282,3],[3330,1],[3332,6],[3350,1],[3391,1],[3393,2],[3438,1],[3440,2],[3483,1],[3804,2],[3917,4],[3956,3],[3987,3],[4037,1],[4039,13],[4062,1],[4082,1],[4084,3],[4099,1],[4164,3],[4235,1],[4277,1],[4527,4],[4564,3],[4593,3],[4649,1],[4689,1],[4720,1],[4919,1],[4986,1],[5079,1],[5081,2],[5243,1],[5399,4],[5437,3],[5467,3],[5525,1],[5689,9],[5717,2],[5725,2],[5728,4],[5780,2],[5787,2],[5843,2],[5850,2],[5853,4],[5910,2],[5920,2],[5977,2],[5984,1],[5992,2],[6056,2],[6075,4],[6163,2]]},"199":{"position":[[41,6],[59,6],[75,4],[89,4],[104,4],[154,1],[173,2],[295,1],[331,1],[452,1],[573,1],[634,15],[662,1],[664,1],[798,1],[807,8],[1348,3],[1580,1],[1622,1],[1662,1],[1664,1],[1814,1],[2047,30],[2078,3],[2310,1],[2352,1],[2400,3],[2404,9],[2414,3],[2423,1],[2466,1],[2556,3],[2560,10],[2571,3],[2580,1],[2611,1],[2662,1],[2742,1],[2744,1],[3052,1],[3118,3],[3169,2],[3251,9]]},"201":{"position":[[0,19],[35,1],[37,1],[73,1],[128,1],[130,4],[190,1],[202,1],[204,1],[425,1],[472,3],[476,15],[509,3],[535,5]]},"203":{"position":[[0,30]]},"205":{"position":[[0,20],[36,1],[38,1],[70,1],[118,1],[120,1],[122,15],[168,1],[209,1],[392,1],[413,3]]},"207":{"position":[[9,6],[32,8],[53,6]]},"209":{"position":[[219,1],[261,1],[305,1],[350,1]]},"211":{"position":[[109,9],[181,11],[214,3],[400,1],[442,1],[482,1]]},"213":{"position":[[0,24]]},"215":{"position":[[36,1],[83,1],[85,1],[115,1],[208,2],[237,1],[277,1],[279,1],[304,4],[518,1],[540,3]]},"217":{"position":[[75,5],[117,4],[155,5],[212,3],[263,1],[276,3],[329,1],[342,3],[388,1],[400,3],[419,1],[421,1],[451,1],[501,2],[530,1],[576,1],[578,1]]},"219":{"position":[[274,1],[316,1],[360,1],[405,1],[442,1]]},"221":{"position":[[76,16],[108,1],[110,1],[112,3],[134,1],[136,7],[144,1],[161,1],[163,1],[247,1],[323,1],[365,1],[400,1],[422,1]]},"223":{"position":[[64,5],[273,3],[319,1],[361,1],[398,1],[433,1],[464,1]]},"225":{"position":[[24,22],[62,1],[64,1],[161,1],[163,4],[168,1],[295,1],[324,1],[352,1],[408,1],[450,1],[488,1],[516,24],[558,1],[565,5],[595,9],[646,12],[669,4],[771,12],[923,1],[951,1],[998,1],[1055,1],[1093,1],[1124,1],[1186,9],[1251,12],[1507,1],[1564,1],[1602,1],[1626,1]]},"227":{"position":[[132,1],[180,1],[214,1],[216,13],[284,1],[323,16],[355,1],[357,1],[431,1],[433,17],[466,1],[468,1],[532,1],[534,3],[538,13],[744,1],[808,1],[878,1],[902,1],[924,11],[1030,7],[1049,4],[1075,4],[1097,4],[1119,4],[1133,3],[1154,7],[1176,11],[1198,6],[1221,4]]},"230":{"position":[[33,7],[68,4],[216,1],[261,4],[266,4],[336,16],[356,1],[363,3],[434,4],[439,2],[445,2],[448,104],[624,4],[741,1],[785,1],[863,1],[931,1],[972,1],[1005,3],[1009,6],[1128,4]]},"232":{"position":[[74,1],[76,2],[167,4],[180,12],[240,11],[259,14],[301,4],[316,4],[321,5],[335,14],[357,25],[390,3],[394,3],[447,12],[467,6],[481,12],[494,9],[530,28],[566,2],[569,5],[597,3],[605,16],[629,9],[643,4],[696,4],[706,4],[711,7],[767,4],[777,4],[782,7]]},"234":{"position":[[106,14],[121,2],[124,8],[155,12],[168,6],[182,8]]},"236":{"position":[[160,1],[187,1],[189,1],[429,1],[431,3],[435,2],[442,12],[455,23],[490,23],[514,1],[516,7],[524,15],[544,9],[563,3],[577,1],[579,8],[607,3],[630,5],[685,1],[919,3],[943,5],[1030,1]]},"238":{"position":[[0,19],[26,4],[31,3],[35,32],[74,2],[79,11],[95,1],[104,5],[170,1],[179,8],[193,7],[280,3],[291,14],[306,3],[310,10],[325,6],[336,4],[345,5],[351,13]]},"240":{"position":[[0,19],[24,26],[61,3],[72,1],[74,1],[83,19],[121,3],[142,8],[151,5],[165,19],[228,1],[255,1],[257,1],[529,7],[560,1],[562,20],[583,16],[600,5],[626,9],[650,33],[684,34],[719,4],[731,3],[745,38],[784,12],[797,10],[827,17],[856,1],[858,38],[897,67]]},"242":{"position":[[0,7],[20,3],[68,3],[122,1],[124,1],[126,1],[128,3],[137,3],[232,1],[234,3],[243,3],[247,1],[329,1],[356,1],[358,1],[535,4],[540,1],[568,19]]},"244":{"position":[[9,14],[31,11],[79,26],[140,1],[167,1],[169,1],[282,1]]},"247":{"position":[[0,17],[25,8],[38,7],[50,10],[65,3],[98,55],[161,46],[217,21],[239,8],[260,14],[283,1],[285,14],[313,13],[340,3]]},"249":{"position":[[7,19],[118,15],[164,3],[200,3],[235,1],[242,17],[260,5],[389,1],[456,1],[458,3]]},"252":{"position":[[32,2],[35,2],[93,1],[324,1],[412,13],[694,1],[999,1],[1708,13],[1775,12],[1801,18],[2563,6],[3227,1],[3291,1],[3332,1],[3334,2],[3337,1],[3393,1],[3697,1],[3896,5],[3997,1],[3999,5],[4021,6],[4123,4],[4170,4],[4204,4],[5154,5],[5498,12],[5864,3],[6014,3],[6198,1],[6297,1],[6376,1],[6449,1],[6451,4]]},"254":{"position":[[195,13],[642,82],[732,1],[773,5],[783,5],[793,5],[799,2],[1188,42],[1325,22],[1432,1],[1542,20],[1704,15]]},"256":{"position":[[17,26],[152,19],[224,5],[296,1],[373,1],[375,1],[772,16],[896,16],[913,37],[1112,24],[1171,1],[1173,4],[1178,5],[1305,43],[1457,1],[1523,1],[1566,1],[1622,2],[1625,6],[1668,1],[1702,1],[1704,11],[1722,1],[1782,1],[1844,1],[1934,1],[1950,1],[2310,22],[2353,13],[2564,14]]},"258":{"position":[[0,51],[195,1],[231,1],[233,15],[258,1],[296,1],[305,5],[483,1],[904,40],[1033,1],[1117,1],[1126,1],[1128,5],[1134,10],[1145,3],[1153,1],[1177,3],[1181,1],[1206,3],[1235,3],[1239,1],[1260,3],[1542,1],[1557,1],[1590,1],[1592,2],[1620,1],[1766,28],[1817,41],[1923,1],[1944,1],[1946,3],[1987,1],[2043,1],[2045,3],[2083,1],[2133,1],[2295,3],[2308,1],[2337,3],[2420,3],[2542,3],[2553,1],[2580,3],[2623,3],[2670,21],[2701,11],[2713,56],[2770,36],[2875,1],[2890,1],[2923,1],[2925,2],[2939,1],[2972,1],[2974,2],[2998,1],[3055,54],[3110,20],[3174,1],[3200,10],[3386,1],[3677,24],[3772,1],[3817,1],[3872,1],[3874,1],[3986,1],[4004,27],[4032,97],[4251,3],[4271,1],[4517,1],[4552,18],[4615,2],[4626,5],[4632,2],[4643,3],[4686,9],[4708,32],[4804,1],[4852,1],[4854,1],[4928,1],[4967,55],[5036,1],[5059,1],[5061,4],[5212,1],[5244,1],[5246,4],[5271,1],[5455,13]]},"260":{"position":[[0,3]]},"262":{"position":[[0,4]]},"264":{"position":[[0,4],[5,1],[7,4],[61,2],[76,1],[78,8],[106,1],[163,1],[201,1],[203,8],[232,1],[291,1],[330,1],[332,8],[358,1],[411,1],[447,1],[449,7],[471,1],[506,1],[508,71],[580,1],[612,1],[621,1],[640,1],[648,1],[684,1],[846,1],[848,2],[965,1],[967,2],[970,1],[1040,1],[1107,1],[1223,1],[1225,2],[1228,1],[1230,71],[1305,1],[1324,1],[1331,1],[1397,1],[1421,1],[1423,9],[1433,1],[1478,1],[1664,1],[1666,2],[1669,1],[1726,1],[1728,71],[1800,1],[1858,1],[1909,1],[1911,4],[1927,1],[1988,1],[2050,1],[2163,2]]},"267":{"position":[[49,1],[51,1],[64,1],[178,2],[181,8],[190,1],[192,8],[201,5],[207,1],[209,1]]},"269":{"position":[[0,6],[7,36],[85,1],[87,1],[100,1],[208,1],[210,6],[239,1],[261,1],[263,8],[293,1],[317,1],[319,1],[321,1],[323,5],[336,1],[338,1],[351,1],[465,1],[467,1],[469,10],[542,1],[544,1],[557,1],[651,1],[653,1],[664,20],[692,8],[710,41],[787,13],[951,5],[1262,1],[1264,1],[1277,1],[1376,1],[1378,1],[1458,1],[1460,1],[1473,1],[1581,1],[1583,1],[1650,1],[1652,1],[1665,1],[1766,1],[1768,1],[1835,1],[1837,1],[1850,1],[1930,1],[2001,1],[2003,1],[2005,28],[2046,1],[2102,1],[2104,1],[2106,1],[2221,1],[2223,1],[2236,1],[2333,1],[2460,1],[2494,2],[2529,1],[2531,1]]},"271":{"position":[[0,28],[36,18],[63,24],[96,8],[113,3],[146,13],[160,7],[176,62],[239,15],[273,1],[284,11],[308,20],[333,1],[350,4],[367,17],[387,1],[423,3],[446,25],[490,3],[496,6],[515,20],[545,9],[555,1],[557,14],[582,3],[594,48],[669,24],[694,2],[697,4],[702,7],[726,16],[743,2],[746,4],[751,7],[772,46],[819,2],[822,4],[827,6]]},"273":{"position":[[0,5],[74,1],[107,34],[282,1],[411,1],[413,1],[453,1],[470,1],[533,1],[568,3],[580,1],[596,1],[620,1],[646,1],[648,1],[688,1],[714,1],[716,5],[772,2],[784,1],[786,2],[800,2],[803,2],[827,1],[829,2],[847,2],[850,2],[859,2],[862,2],[874,2],[877,5],[894,1],[896,1],[947,1],[949,7],[957,1],[959,3],[963,5],[1021,1],[1023,7],[1031,1],[1033,3],[1105,5],[1127,13],[1141,35],[1177,21],[1199,38],[1245,31],[1277,21],[1299,2],[1309,11],[1335,6],[1449,1],[1451,3],[1455,1],[1457,5],[1477,20],[1503,10],[1587,1],[1589,3],[1882,3],[1904,14],[2134,1],[2136,3]]},"275":{"position":[[134,1],[161,1],[260,2],[263,2],[324,14],[562,23],[757,6],[783,2],[786,6],[820,7],[828,2],[831,1],[887,19],[1063,6],[1070,9],[1080,3],[1125,3],[1165,3],[1169,1],[1171,2],[1194,3],[1223,3],[1227,1],[1264,3],[1306,3],[1344,1],[1402,3],[1443,3],[1447,1],[1449,9],[1459,3],[1481,3],[1503,3],[1525,3],[1586,3],[1631,3],[1692,3],[1696,1],[1698,4],[1703,3],[1725,3],[1764,3],[1782,3],[1786,1],[1788,4],[1793,3]]},"277":{"position":[[15,1],[25,1],[74,1],[120,1],[131,1],[177,1],[179,5],[220,1],[222,2],[349,1],[408,1],[582,1],[584,4]]},"280":{"position":[[0,57],[66,68],[144,85],[230,53]]},"289":{"position":[[6,10],[97,1],[338,1],[373,2]]},"294":{"position":[[0,2],[28,5],[118,9],[158,32],[193,10],[295,22],[321,2]]},"300":{"position":[[26,4],[41,4],[52,4]]},"303":{"position":[[0,12],[59,86],[146,18],[165,58],[224,58],[283,6],[296,46],[364,10],[418,5],[424,3],[428,2],[431,2],[442,6],[449,2],[461,6],[468,3],[481,8],[490,3],[500,10],[650,15],[672,6],[759,16],[776,25],[810,1],[851,1],[936,2],[976,16],[1006,7],[1086,9],[1098,6],[1187,13],[1371,15],[1422,5],[1433,16],[1459,4],[1666,6],[1673,45],[1719,2],[1722,2],[1739,1],[1746,8],[1763,4],[1782,22],[1809,25],[1857,1],[1865,2],[1876,6],[1891,8],[1941,16],[1971,20],[1992,48],[2048,2],[2081,1],[2162,18],[2185,6],[2219,1],[2230,2]]},"305":{"position":[[0,31],[188,2],[202,1],[380,1],[483,5],[555,1],[571,1]]},"309":{"position":[[3,4],[11,30],[46,7],[58,7],[74,4],[89,5],[110,4],[115,8],[143,11]]},"311":{"position":[[0,2],[3,2],[6,1],[8,2],[11,1],[13,2],[18,5],[24,4],[31,9],[43,5],[55,7],[75,7],[85,2],[93,1],[97,2],[100,6],[109,1],[113,1],[117,1],[121,1],[125,8],[136,2],[143,21],[172,1],[178,10],[196,1],[202,10],[220,1],[226,10],[244,1],[250,10],[261,19],[284,6],[297,1],[305,5]]},"313":{"position":[[0,2],[3,2],[39,8],[48,4],[55,6],[62,1],[64,7],[74,33],[110,10],[126,1],[130,24],[157,5],[165,7],[176,6],[187,2],[192,8],[201,1],[203,8],[215,5],[225,6],[237,12],[250,1],[252,9],[262,1],[267,1]]},"315":{"position":[[0,2],[3,2],[8,2],[14,5],[22,5],[30,5],[38,17],[58,17]]},"317":{"position":[[0,2],[3,2],[6,1],[8,9],[18,1],[20,9],[32,16],[49,4],[54,2],[59,2],[62,3],[66,3],[70,1],[72,26],[99,1],[101,4],[106,1],[108,6]]},"320":{"position":[[0,2],[3,2],[6,1],[16,1],[18,1],[28,1],[30,1],[39,1],[41,1],[49,1],[51,1]]},"322":{"position":[[10,5],[22,5],[63,4],[74,4],[85,4],[96,4]]},"325":{"position":[[0,2],[3,2],[9,11],[24,12],[40,12],[68,8],[80,10],[100,7],[111,7],[122,29],[155,7],[166,11],[181,7],[192,7],[200,1],[202,14],[220,7],[228,1],[230,9],[240,1],[289,5],[315,2],[330,3],[363,1],[378,1],[393,1],[447,2],[452,1],[456,20],[487,1],[489,1],[491,16]]},"328":{"position":[[50,3],[130,3],[134,2],[142,10],[186,7],[194,1],[196,1],[198,1],[205,1],[207,1],[209,13],[273,31],[305,16],[330,1],[383,1],[434,1],[436,6],[460,1],[545,1],[547,2],[573,1],[602,1],[609,1],[640,3],[646,5],[673,1],[683,2],[686,14],[701,4],[706,1],[708,12],[755,2],[758,1],[760,16],[791,3],[795,15],[811,1]]},"330":{"position":[[10,19]]},"333":{"position":[[0,25]]},"335":{"position":[[0,16]]},"337":{"position":[[18,2]]},"340":{"position":[[0,23]]},"342":{"position":[[0,7],[31,5],[37,14],[52,9],[102,21],[124,36],[161,38],[200,46],[317,32]]},"344":{"position":[[0,12],[88,13],[439,1],[480,1],[554,1],[601,2],[604,1]]},"347":{"position":[[0,7],[27,10],[48,5],[54,8],[117,4],[127,7],[143,5],[181,2],[189,12],[207,6],[222,11],[244,14],[259,7],[267,21],[295,9],[339,31]]},"350":{"position":[[0,1],[74,41],[122,14],[152,1],[154,14],[223,10],[258,17],[282,49],[332,36],[369,17],[468,32]]},"352":{"position":[[0,30],[120,10],[131,31],[163,13],[177,13]]},"354":{"position":[[0,17],[18,12],[31,3],[35,5],[41,90],[132,5],[138,82]]},"356":{"position":[[0,2],[12,27],[40,19],[60,5]]},"358":{"position":[[0,2],[9,12],[61,11]]},"360":{"position":[[6,28],[74,12],[87,3],[95,76]]},"362":{"position":[[6,13],[72,9],[162,7],[292,1],[300,36]]},"364":{"position":[[5,28],[40,2]]},"367":{"position":[[130,15]]},"369":{"position":[[0,4],[5,2],[8,2],[11,10],[22,2],[25,20],[70,1],[86,2],[102,2],[121,2],[124,27],[179,1],[186,10],[197,1],[227,2],[271,2],[274,1],[276,2],[279,3],[283,13],[297,30],[337,1],[339,1],[341,1],[343,3],[366,3],[370,3],[408,1],[422,1],[448,1],[452,3],[456,2],[462,1],[473,5],[500,1],[504,3],[508,2],[514,1],[525,5],[547,14],[562,1],[581,1],[602,2],[605,2],[621,2],[624,2]]},"372":{"position":[[0,1],[8,47],[132,8],[159,19],[198,12],[230,7],[277,16]]},"374":{"position":[[0,2],[3,2],[31,1],[40,7],[54,10],[72,4],[94,1],[103,7],[117,13],[158,1],[167,7],[181,10],[199,4],[223,1],[232,7],[246,13],[277,1],[286,8],[301,8],[316,8],[343,1],[352,9],[368,8],[383,8],[409,1],[418,8],[433,8],[448,8],[475,1],[484,9],[500,8],[515,8],[591,4],[635,4],[682,4],[713,4]]},"376":{"position":[[30,3]]},"379":{"position":[[6,29],[62,3]]},"381":{"position":[[0,14]]},"383":{"position":[[0,3],[4,1],[6,1],[8,12]]},"387":{"position":[[0,41]]},"389":{"position":[[0,1],[8,4],[19,18],[88,7],[96,17],[131,10]]},"392":{"position":[[0,18],[21,1],[31,1],[37,3],[41,2],[44,2],[47,1],[49,2],[60,1],[65,3],[75,2],[91,3],[100,1],[102,2],[113,2],[119,3],[128,1],[130,2],[141,1],[146,3],[153,1],[155,2],[166,1],[171,3],[178,1],[180,2],[188,4],[195,4],[203,2],[206,17],[230,1],[235,2],[241,1],[243,2],[253,2],[256,19],[282,1],[287,2],[293,1],[295,2],[304,27],[341,9],[351,1],[356,2],[362,2],[365,3],[369,24],[394,1],[400,1],[408,1],[415,20],[436,3],[440,7],[448,3],[452,1]]},"394":{"position":[[0,29],[30,18],[51,1],[61,1],[67,3],[71,2],[74,2],[81,14],[102,1],[114,1],[116,2],[130,16],[153,1],[165,1],[167,2],[180,21],[208,1],[220,1],[222,2],[236,21],[264,1],[276,1],[278,2],[291,23],[321,1],[333,1],[335,2],[349,23],[379,1],[391,1],[393,2]]},"396":{"position":[[0,18],[21,1],[31,1],[37,3],[41,2],[44,2],[47,1],[49,8],[63,3],[84,1],[86,1],[94,1],[96,2],[108,11],[125,3],[135,1],[161,1],[163,2],[175,11],[192,3],[202,1],[228,1],[230,2]]},"398":{"position":[[0,4],[11,11],[25,1],[35,1],[41,3],[45,2],[48,2],[51,2],[54,3],[62,2],[76,2],[90,2],[93,2],[102,2],[105,3],[112,2],[126,2],[140,2],[143,2]]},"400":{"position":[[0,19],[22,1],[35,1],[44,3],[48,2],[51,2],[54,1],[56,16],[79,1],[84,1],[89,1],[91,2],[101,2],[104,18],[129,1],[134,2],[140,1],[142,2],[177,1],[185,1],[187,2],[200,11],[219,2],[228,1],[238,1],[240,2],[249,1],[251,15],[273,1],[278,1],[280,2]]},"402":{"position":[[0,11],[17,8],[26,2],[34,4],[62,5],[72,21],[94,9],[104,3],[108,2],[111,2],[122,20],[149,1],[160,1],[162,2],[180,21],[208,1],[219,1],[221,2],[239,17],[263,1],[274,1],[276,2],[294,34],[335,1],[346,1],[348,2],[365,9],[380,9],[396,1],[407,1],[409,2],[466,1],[477,1],[479,2],[497,19],[523,1],[534,1],[536,2],[554,9],[569,9],[585,1],[596,1],[598,2],[616,16],[639,1],[650,1],[652,2],[669,16],[692,1],[703,1],[705,2],[722,17],[746,1],[757,1],[759,2],[808,1],[819,1],[821,2],[838,22],[867,1],[878,1],[880,2],[889,6],[900,7],[920,18]]},"404":{"position":[[37,1]]},"409":{"position":[[59,3],[90,3]]},"411":{"position":[[6,35]]},"413":{"position":[[6,14],[26,4],[37,3],[47,13],[61,2],[70,4],[107,7],[121,5],[169,15]]},"415":{"position":[[5,3],[14,14],[36,3],[45,18],[69,15],[85,2],[88,2],[113,3],[138,11],[150,3],[159,29],[194,3],[203,7],[216,1],[244,3],[257,2],[283,3],[296,2],[330,3],[343,2],[346,2],[367,3],[380,2]]},"418":{"position":[[35,4],[40,1],[63,1],[65,3],[103,10],[134,27]]},"420":{"position":[[72,9]]},"422":{"position":[[12,1],[26,1],[68,7],[79,2],[87,7],[98,2],[106,7],[118,2],[126,7],[140,2],[148,8],[163,2],[171,6],[178,2],[181,3],[190,14],[205,2],[208,2],[211,1],[250,5],[256,6],[265,1],[267,6],[276,1],[278,6],[288,1],[290,6],[300,1],[302,7],[313,1],[315,5],[324,2],[327,13],[365,1]]},"424":{"position":[[14,37],[58,12],[71,1],[82,1],[84,17],[102,1]]},"427":{"position":[[7,2],[10,1],[104,1],[199,1],[234,2],[237,2],[240,1],[377,1],[500,1],[502,3],[506,2],[509,2],[512,11],[537,2],[549,1],[551,44],[643,9],[710,9],[725,1],[736,2]]},"429":{"position":[[7,2],[10,1],[189,1],[324,1],[348,12],[363,1],[367,3],[371,1],[423,1],[434,26],[470,2],[473,1],[475,3],[484,19],[504,2],[507,4],[512,53],[566,1],[644,2],[653,10],[664,2],[667,17],[685,1],[687,4],[692,3],[696,13],[710,3],[714,29],[744,12],[757,18],[798,2],[804,2],[809,2],[815,2],[820,3],[824,9],[839,1],[851,2],[854,1],[859,2],[870,1],[887,2],[892,2],[895,1],[933,3],[950,1],[961,1],[966,1],[983,2],[988,1],[993,1],[1005,2],[1008,1],[1013,2],[1018,1],[1023,2],[1029,2],[1034,2],[1040,2],[1045,2]]},"432":{"position":[[203,1],[235,1],[286,1],[336,29],[537,1],[812,1],[921,1],[1100,9],[1110,1],[1112,17],[1130,1],[1132,17],[1150,27],[1343,6],[1551,6],[1797,1],[1812,1],[1833,1],[1858,1],[1879,1],[1901,1],[1925,1],[1950,1],[1968,1],[1988,1],[2478,3],[2512,3],[2552,3],[2591,3],[2631,3],[2672,3],[2710,3],[2756,3]]},"435":{"position":[[15,18],[182,19]]},"437":{"position":[[0,6],[64,11],[76,14],[148,11],[160,13],[174,19],[194,9],[204,16],[221,21]]},"439":{"position":[[0,23],[30,1]]},"442":{"position":[[0,1],[28,1],[30,2],[39,1],[63,1],[65,2],[74,2],[81,2],[100,5],[117,7],[139,4],[150,6],[157,1],[191,1],[199,5],[235,1],[237,7],[284,1],[333,1],[335,10],[371,1],[383,1],[385,4],[586,1],[588,6],[690,1],[719,12],[751,9],[783,25],[832,30]]},"446":{"position":[[10,5],[16,1],[18,4],[46,1],[48,6],[79,1],[81,8],[90,1],[122,1],[161,1],[192,1],[226,1],[261,1],[263,2],[272,4],[300,1],[319,1],[332,1],[356,1],[388,8],[403,6],[426,1],[428,21],[466,1],[468,2],[491,1],[493,4],[512,1],[514,13],[537,1],[539,4],[550,5],[565,1],[567,9]]},"449":{"position":[[0,1],[24,1],[72,1],[80,10],[95,4],[141,1],[149,9],[183,1],[191,6],[202,4],[207,1],[228,1],[241,1],[321,1],[323,11],[335,1],[337,1],[349,1],[351,43],[400,1],[402,1],[404,6],[481,1],[525,1],[616,1],[645,1],[647,8],[671,1],[673,10],[722,1],[724,18],[800,1],[802,11],[853,1],[855,6],[896,1],[898,6],[905,1],[926,1],[939,1],[941,7],[972,1],[974,5],[980,1],[1005,1],[1007,1],[1037,1],[1039,5],[1073,1],[1075,6],[1102,1],[1160,1],[1200,1],[1246,1],[1248,2],[1251,1],[1253,1],[1260,11],[1279,4],[1290,12],[1308,29],[1345,14],[1365,7],[1380,2],[1392,7],[1404,1],[1415,26],[1442,15]]},"451":{"position":[[6,4],[17,1],[25,19],[84,1],[107,4],[125,4],[134,7],[172,1],[233,2],[243,16],[288,1],[335,2],[345,9],[360,12],[397,1],[399,6],[440,1],[442,4],[472,2],[481,3],[492,6],[519,1],[521,9],[554,1],[591,3],[602,7],[614,7],[663,1],[684,3],[695,6],[706,17],[731,7],[743,31],[792,2],[802,4],[812,7],[826,18],[851,1],[874,1],[932,4],[941,1],[947,1],[949,4],[975,21],[1022,2],[1032,14],[1100,53],[1178,1],[1186,53],[1248,2],[1257,27],[1297,1]]},"453":{"position":[[11,11],[35,1],[139,16],[180,1],[213,12],[242,1]]},"455":{"position":[[0,31],[49,1],[51,3],[55,1],[66,3],[123,1],[125,1],[136,8],[152,10],[168,10],[186,4],[201,11],[232,9],[247,4],[270,17],[293,9],[311,2],[317,14],[343,12],[367,13],[388,9],[406,10],[472,4],[518,14],[551,12],[580,12],[600,23],[629,16],[657,4],[669,20],[763,12],[781,5],[877,13],[958,5],[1119,1],[1121,7],[1129,12],[1151,29],[1186,2],[1189,9],[1208,3],[1217,30],[1269,1],[1368,1],[1377,1],[1440,1],[1473,1],[1475,1],[1495,4],[1512,4],[1522,1],[1528,7],[1540,19],[1568,8],[1580,7],[1591,28],[1628,6],[1656,1],[1745,1],[1754,1],[1817,1],[1850,1],[1852,1],[1854,7],[1862,2],[1872,53],[1955,3],[1980,1],[1997,1],[2110,1],[2119,1],[2182,1],[2215,1],[2217,1]]},"457":{"position":[[12,3],[16,9],[56,1],[58,3],[89,10],[100,5],[132,1],[134,5],[164,1],[166,5],[196,1],[198,5],[233,1],[235,10],[246,1],[248,7],[256,1],[258,7],[266,1],[268,7],[288,5],[305,2],[323,1],[331,3],[335,1],[337,9],[564,4],[569,23],[597,33],[672,1],[696,1],[698,3],[709,1],[812,1],[814,1],[834,1],[836,1],[838,1],[840,4],[852,1],[959,1],[961,1],[981,1],[983,1],[985,1],[987,3],[998,1],[1102,1],[1104,1],[1124,1],[1126,1],[1128,1],[1130,4],[1142,1],[1246,1],[1248,1],[1268,1],[1270,1],[1279,3],[1302,27],[1330,3],[1354,11],[1366,3],[1389,11],[1401,3],[1424,11],[1436,3],[1458,11],[1470,3],[1493,12],[1512,16],[1534,1],[1543,1],[1554,5],[1570,3],[1590,1],[1616,1],[1618,5],[1649,13],[1693,4],[1703,7],[1715,3],[1725,8],[1741,19],[1770,2],[1789,1],[1823,1],[1825,5],[1856,13],[1900,4],[1905,2],[1914,7],[1922,1],[1924,8],[1942,2],[1955,5],[1970,1],[1972,1],[1974,1],[1976,1],[1978,1],[1980,2],[1983,1],[1985,2],[1988,1],[1994,1],[1996,3],[2000,1],[2002,5],[2008,1],[2010,5],[2016,1],[2018,11],[2030,2],[2033,12],[2046,2],[2049,9],[2059,6],[2066,1],[2068,1],[2070,2],[2073,1],[2075,1],[2077,1],[2079,2],[2082,1],[2084,7],[2092,3],[2103,1],[2148,1],[2150,5],[2244,1],[2258,1],[2304,1],[2306,1],[2308,3],[2337,6],[2374,6],[2390,1],[2414,1],[2446,1],[2448,1],[2450,3],[2478,5],[2530,2],[2539,1],[2597,1],[2599,1],[2610,5],[2631,1],[2633,3],[2637,1],[2655,1],[2657,3],[2661,1],[2663,2],[2666,1],[2668,3],[2696,2],[2705,5],[2716,8],[2730,4],[2746,5],[2757,3],[2767,6],[2779,3],[2783,1],[2785,1],[2787,3],[2815,2],[2824,5],[2835,8],[2849,4],[2865,15],[2886,3],[2898,21],[2924,3],[2935,4],[2949,12],[3011,3],[3024,1],[3026,1],[3040,1],[3042,7],[3050,1],[3061,1],[3063,1],[3095,1],[3097,5],[3103,1],[3105,4],[3110,1],[3121,1],[3123,1],[3141,1],[3143,1],[3145,5],[3151,1],[3153,5],[3159,1],[3170,1],[3172,1],[3203,1],[3205,1],[3207,7],[3215,1],[3226,16],[3247,1],[3260,5],[3266,6],[3343,1],[3372,7],[3385,4],[3394,10],[3412,4],[3426,6],[3439,8],[3452,7],[3469,4],[3562,1],[3608,1],[3618,6],[3657,1],[3676,1],[3709,1],[3726,1],[3759,1],[3778,1],[3780,1],[3782,1],[3784,12],[3797,3],[3821,12],[3857,3],[3887,7],[3899,1],[3925,3],[3934,1],[3945,5],[3955,1],[3983,3],[3995,1],[4006,3],[4022,5],[4034,5],[4043,3],[4065,5],[4091,3],[4115,1],[4158,1],[4170,5],[4215,3],[4219,1],[4221,1],[4223,2],[4226,6],[4233,1],[4235,5],[4241,1],[4243,1],[4245,6],[4252,2],[4255,12],[4271,1],[4273,1],[4278,11],[4293,1],[4295,1],[4300,11],[4315,1],[4317,1],[4322,20],[4346,1],[4348,1],[4353,14],[4368,3],[4379,1],[4437,1],[4439,1],[4444,1],[4451,1],[4464,2],[4475,4],[4494,1],[4496,1],[4498,1],[4500,3],[4527,5],[4536,6],[4551,3],[4566,5],[4572,1],[4574,28],[4618,5],[4631,1],[4695,1],[4729,1],[4731,2],[4754,1],[4785,1],[4856,1],[4883,1],[4890,1],[4921,1],[4961,1],[4963,1],[4965,3],[4991,7],[5021,17],[5051,10],[5110,3],[5190,4],[5199,3],[5208,1],[5216,3],[5224,8],[5237,4],[5246,13],[5264,1],[5266,14],[5285,3],[5366,11],[5378,1],[5380,3],[5384,1],[5386,16],[5403,2],[5406,1],[5408,3],[5418,6],[5429,17],[5447,1],[5449,1],[5451,3],[5461,5],[5471,7],[5488,2],[5495,3],[5503,4],[5508,2],[5511,1],[5513,4],[5568,1],[5570,3],[5574,4],[5583,1],[5604,4],[5615,1],[5621,1],[5642,12],[5659,1],[5680,1],[5682,1],[5684,4],[5740,1],[5742,3],[5746,4],[5755,1],[5776,4],[5787,1],[5793,1],[5814,12],[5831,1],[5848,6],[5860,4],[5870,1],[5878,12],[5891,3],[5895,11],[5944,5],[5950,4],[5972,1],[6004,1],[6040,16],[6057,1],[6059,1],[6078,1],[6109,1],[6151,4],[6173,1],[6209,1],[6249,16],[6266,1],[6268,1],[6287,1],[6322,1]]},"459":{"position":[[6,33],[46,18],[65,14],[80,3],[84,2],[99,3],[106,2],[121,5],[139,3],[146,2],[161,5],[183,5],[208,9],[221,2],[239,8],[271,9],[329,4],[339,1],[362,4],[382,21],[409,7],[425,7],[445,12],[458,1],[460,6],[480,1],[487,2],[495,6],[507,8],[521,14],[542,4],[559,1],[577,5],[596,10],[616,20],[649,4],[674,10],[691,5],[703,5],[712,6],[736,16],[767,1],[773,1],[786,10],[808,11]]},"461":{"position":[[0,59],[60,25]]},"463":{"position":[[110,50],[161,56]]},"465":{"position":[[123,52],[176,57],[234,8],[243,8],[252,17],[270,13],[284,21]]},"467":{"position":[[0,7],[12,66],[79,23],[109,25],[141,74],[216,52]]},"469":{"position":[[0,74],[75,109],[185,42],[228,112],[347,26],[374,38],[415,2],[420,27],[454,10],[465,86],[552,57],[610,25],[636,3],[643,10],[657,26],[692,5]]},"471":{"position":[[0,36],[43,44],[94,10]]},"473":{"position":[[0,64],[85,1],[91,1],[93,1],[100,8]]},"475":{"position":[[0,12],[381,5]]},"477":{"position":[[0,7],[12,1]]},"479":{"position":[[0,20],[119,1]]},"481":{"position":[[0,34]]},"483":{"position":[[0,22]]},"485":{"position":[[0,34],[41,5],[52,4],[66,4],[78,7],[126,10]]},"487":{"position":[[0,3],[17,17],[64,2],[74,1],[131,1],[133,1],[153,1],[155,1],[164,1],[221,1],[223,1],[243,1],[245,1],[247,1],[263,17],[310,2],[507,1],[516,1],[567,1],[569,1],[595,1],[597,18],[642,1],[695,1],[766,1],[768,19],[820,1],[822,4],[827,1],[829,1],[831,14],[868,13],[882,47],[930,3],[941,1],[983,1],[989,4],[999,1],[1007,7],[1043,1],[1060,1],[1089,1],[1100,1],[1102,1],[1132,1],[1134,31],[1190,1],[1192,6],[1225,1],[1278,1],[1349,1],[1351,19],[1403,1],[1405,4],[1410,1],[1412,1]]},"489":{"position":[[0,7],[14,12],[33,25]]},"491":{"position":[[0,10],[33,5],[39,7],[53,3],[60,3],[64,5],[73,10],[84,35],[120,18],[139,43],[183,34],[218,31],[250,3],[260,36],[328,4]]},"493":{"position":[[0,14],[21,5],[35,1],[45,19],[72,1],[111,1],[117,6],[151,1],[153,19],[228,1],[230,4],[287,1],[289,4],[356,1],[399,1],[401,1],[459,1],[461,1],[463,1],[507,1],[509,1],[536,1],[580,1],[619,6],[647,1],[649,11],[667,6]]},"496":{"position":[[0,5],[12,7],[20,5],[32,18],[66,11],[94,2],[112,23],[136,5],[147,7],[162,20],[190,12],[203,10],[221,6],[233,24],[258,20]]},"498":{"position":[[7,10],[18,1],[27,4],[36,3],[47,4],[59,13],[80,9],[97,14],[119,4],[131,5],[144,5],[155,3],[159,2],[169,22],[192,4],[203,24]]},"500":{"position":[[77,17]]},"504":{"position":[[78,2],[390,2],[590,1],[592,1],[652,1],[669,1],[756,1],[822,1],[824,1],[826,11],[874,1],[876,1],[959,1],[982,1],[984,18],[1017,1],[1019,1],[1069,1],[1071,1],[1124,1],[1167,1],[1213,1],[1250,1],[1252,20],[1286,1],[1334,1],[1398,1],[1430,1],[1432,1],[1475,1],[1477,1],[1516,1],[1536,1],[1538,1],[1577,1],[1579,1],[1639,1],[1641,1],[1701,1],[1718,1],[1805,1],[1871,1],[1873,1],[1875,11],[1923,1],[1925,1],[2008,1],[2031,1],[2033,18],[2066,1],[2068,1],[2118,1],[2120,1],[2173,1],[2216,1],[2262,1],[2299,1],[2301,20],[2334,1],[2382,1],[2446,1],[2478,1],[2480,1],[2523,1],[2525,1],[2564,1],[2584,1],[2586,1],[2625,1],[2627,1],[2905,1],[2987,1],[2996,1],[3020,1],[3049,1],[3133,1],[3162,1],[3187,1],[3214,1],[3236,1],[3319,34],[3448,1],[3475,1],[3477,10],[4149,5],[4192,1],[4194,8],[4240,1],[4289,1],[4330,1]]},"506":{"position":[[201,1],[248,1],[279,1],[281,10]]},"508":{"position":[[570,11],[685,9],[703,9]]},"510":{"position":[[149,2],[152,6],[159,4],[164,2],[384,25],[714,15],[794,17],[1024,18]]},"512":{"position":[[0,14],[21,1]]},"516":{"position":[[4,9],[14,22],[37,26],[64,16],[81,43],[125,37],[163,27],[191,18],[210,22],[233,3],[268,29],[332,31],[364,32],[397,25],[423,46],[795,31],[827,27],[855,32],[888,33],[922,23],[1047,1],[1049,2],[1052,1],[1064,1],[1116,1],[1172,1],[1174,34],[1214,17],[1257,1],[1259,2],[1262,1],[1272,1],[1320,1],[1322,18],[1348,1],[1350,12],[2169,6],[2193,10],[2278,3],[2353,4],[2399,3],[2466,34],[2513,7],[2588,6],[2627,11],[2666,3],[2674,5],[2699,15],[2781,3],[2785,13],[2799,13],[2820,2],[2827,5],[2877,8],[2920,3],[2959,2],[2966,5],[2972,2],[2980,2],[3139,6],[3152,10],[3163,1],[3215,3],[3278,6],[3329,1],[3331,6],[3436,5],[3490,17],[3508,1],[3535,3],[3576,3],[3618,3],[3720,1],[3751,3],[3793,3],[3825,1],[3855,3],[3896,3],[3994,1],[3996,2],[4042,1],[4244,1],[4277,1],[4314,3],[4347,1],[4398,1],[4428,1],[4508,1],[4547,1],[4571,1],[4575,1],[4577,6],[4597,3],[4611,1],[4613,8],[4635,3],[4661,1],[4663,14],[4691,3],[4701,1],[4832,1],[4865,3],[4900,1],[4933,3],[5111,1],[5138,3],[5187,1],[5211,3],[5262,1],[5293,3],[5303,1],[5357,1],[5380,3],[5489,1],[5526,3],[5566,1],[5587,1],[5589,4],[5642,3],[5709,1],[5808,3],[5843,3],[5881,1],[5990,1],[5996,1],[6022,3],[6064,3],[6115,1],[6156,1],[6474,1],[6517,3],[6608,1],[6656,7],[6733,1],[6764,3],[6800,7],[6808,1],[6872,3],[6903,1],[6905,4],[6910,1],[7097,1],[7389,6],[7419,1],[7421,4],[7439,3],[7650,1],[7652,6],[7672,3],[7710,3],[7784,3],[7921,1],[8054,3],[8328,29],[8934,1],[8972,1],[9057,7],[9065,5],[9105,1],[9107,2],[9131,3],[9181,5],[9270,5],[9353,5],[9392,8],[9404,5],[9414,7],[10001,5],[10007,10],[10036,5],[10042,1],[10044,24],[10069,7],[10093,13],[10142,1],[10188,1],[10199,1],[10201,3],[10242,1],[10246,4],[10269,1],[10273,2],[10284,1],[10288,3],[10301,1],[10316,1],[10318,1],[10330,1],[10334,4],[10354,1],[10385,1],[10389,4],[10424,1],[10464,1],[10468,5],[10484,1],[10486,9],[10496,1],[10498,27],[10542,1],[10544,27],[10572,1],[10574,2],[10577,1],[10579,8],[10620,1],[10622,8],[10665,1],[10667,2],[10670,1],[10672,8],[10692,2],[10697,2],[10700,1],[10702,8],[10720,7],[10728,4],[10745,8],[10785,2],[10877,7],[11112,2],[11115,4],[11120,4],[11125,2],[11128,2],[11131,7],[11139,2],[11142,2],[11145,2],[11148,16],[11165,7],[11173,2],[11176,2],[11179,7],[11187,15],[11203,7],[11211,2],[11214,2],[11217,6],[11224,9],[11240,8],[11490,1],[11516,1],[11551,1],[11606,4],[11671,13],[11685,4],[11690,4],[11695,2],[11698,4],[11703,6],[11719,6],[11760,4],[11975,6],[12027,4],[12050,2],[12074,2],[12104,2],[12107,4],[12126,2],[12137,2],[12140,2],[12200,13],[12214,4],[12219,2],[12222,2],[12225,4],[12230,4],[12242,2],[12245,6],[12257,2],[12260,6],[12271,2],[12274,6],[12287,2],[12290,6],[12304,2],[12307,6],[12322,2],[12325,6],[12332,5],[12342,2],[12345,13],[12366,2],[12391,2],[12394,8],[12408,7],[12420,4],[12425,5],[12435,4],[12447,10],[12458,8],[12472,10],[12483,10],[12497,2],[12519,4],[12524,7],[12538,2],[12563,4],[12579,4],[12593,11],[12611,2],[12614,8],[12623,4],[12641,4],[12646,6],[12661,2],[12700,1],[12723,1],[12752,3],[12807,1],[12834,3],[12976,1],[13020,3],[13260,1],[13285,3],[13365,1],[13389,3],[13451,1],[13481,3],[13537,8],[13826,3],[13965,3],[14101,15],[14149,3],[14232,14],[14247,3],[14251,25],[14277,1],[14308,8],[14352,1],[14405,3],[14483,1],[14538,3],[14620,3],[14679,15],[14710,15],[14764,1],[14900,5],[14906,9],[14916,1],[14918,7],[14926,9],[14962,4],[14967,9],[15004,4],[15009,9],[15041,4],[15049,5],[15518,3],[15579,1],[15643,1],[15690,1],[15692,26],[15742,1],[15802,3],[15806,1],[15849,3],[15976,1],[16024,3],[16086,1],[16090,6],[16123,4],[16128,1],[16183,3],[16470,1],[16522,3],[16616,1],[16625,9],[16647,8],[16656,1],[16690,1],[16775,3],[16779,1],[16806,3],[16860,3],[16864,1],[16891,3],[16947,5],[17029,19],[17276,3],[17895,6],[17942,1],[17944,5],[17973,4],[17978,1],[17997,1],[18006,4],[18011,1],[18050,3],[18164,1],[18189,3],[18272,1],[18298,3],[19858,1],[19881,3],[19956,3],[20003,3],[20027,3],[20197,1],[20220,3],[20276,1],[20320,3],[20403,1],[20454,1],[20477,1],[20518,3],[20603,1],[20635,3],[20706,1],[20743,3],[20814,5],[21015,19],[21385,5],[21690,1],[21743,2],[22098,5],[22104,1],[22129,3],[22202,1],[22228,3],[22313,1],[22315,4],[22333,3],[22462,1],[22464,4],[22482,3],[22629,3],[22723,5],[22742,3],[22818,5],[23267,5],[23273,1],[23275,5],[23307,2],[23310,4],[23315,1],[23334,1],[23343,4],[23348,1],[23371,1],[23410,3],[23513,1],[23537,3],[23719,1],[23750,3],[23836,1],[23859,1],[23892,3],[24042,1],[24075,3],[24302,1],[24314,1],[24324,1],[24338,1],[24978,1],[24980,2],[24996,3],[25073,5],[25365,19],[25737,1],[25762,3],[25890,1],[25915,3],[26080,1],[26140,1],[26181,3],[26304,7],[26352,1],[26400,1],[26455,3],[26582,1],[26650,3],[26814,1],[26816,16],[26849,1],[26851,21],[26932,3],[27010,5],[27239,19],[27331,2],[27530,16],[27763,11],[27789,7],[27871,8],[27957,8],[27980,11],[28009,1],[28037,1],[28039,8],[28066,28],[28110,12],[28142,8],[28165,14],[28297,8],[28313,12],[28341,6],[28367,11],[28468,16],[28500,7],[28522,7],[28541,11],[28561,8],[28697,8],[28752,17],[28781,7],[28800,32],[28842,25],[29204,20],[29417,1],[29425,1],[29737,8],[29772,2],[30100,5],[30106,1],[30108,23],[30132,1],[30150,4],[30155,15],[30171,1],[30189,7],[30197,8],[30225,3],[30375,3],[30924,3],[30983,3],[31043,31],[31170,16],[31291,1],[31502,3],[31595,1],[31597,12],[31631,1],[31633,4],[31652,1],[31654,9],[31688,1],[31690,6],[31715,1],[31717,27],[31760,1],[31762,14],[31791,1],[31793,9],[31819,1],[31821,12],[31852,1],[31854,12],[31873,5],[32201,1],[32286,1],[32296,1],[32308,1],[32339,1],[32350,1],[32488,1],[32510,1],[32607,5],[32799,1],[32801,10],[32970,8],[33011,8],[33020,6],[33096,1],[33204,1],[33214,1],[33339,6],[34021,5],[34507,13],[34587,2],[34672,1],[34764,1],[34774,1],[34912,1],[34938,1],[34940,7],[34970,4],[34982,4],[34995,9],[35005,1],[35007,28],[35036,1],[35134,1],[35136,1],[35188,5],[35556,5],[35788,1],[35790,8],[35895,1],[35922,3],[35977,1],[35979,11],[36010,3],[36065,1],[36067,1],[36090,1],[36092,1],[36116,39],[36162,5],[36241,3],[36356,1],[36408,1],[36448,1],[36450,38],[36504,1],[36544,1],[36732,1],[36734,11],[36797,1],[36824,3],[36883,1],[36891,1],[36893,13],[36926,3],[36971,6],[37118,6],[37165,5],[37371,31],[37403,19],[37590,1],[37592,4],[37605,1],[37607,8],[37625,1],[37657,1],[37659,4],[37674,1],[37676,8],[37694,1],[37726,1],[37728,4],[37805,1],[37832,3],[37899,1],[37932,3],[38036,1],[38067,3],[38136,1],[38198,3],[38225,1],[38254,3],[38321,1],[38360,3],[38472,1],[38509,3],[38555,6],[38687,2],[39237,6],[39921,6],[40029,38],[40068,27],[40096,22],[40119,48],[40168,18],[40582,1],[40619,1],[40723,1],[40760,1],[40809,1],[40836,3],[40911,1],[40921,1],[40972,3],[41022,8],[41407,1],[41436,3],[41707,1],[41763,3],[41842,3],[41908,5],[41914,41],[42031,40],[42072,20],[42111,2],[42172,2],[42204,2],[42251,2],[42282,2],[42322,1],[42340,4],[42363,5],[42401,2],[42661,1],[42715,1],[42790,1],[42850,1],[42877,3],[42944,1],[42971,3],[43110,1],[43137,3],[43177,5],[43262,2],[43457,13],[43471,18],[43535,2],[43589,2],[43643,2],[43683,2],[43742,2],[43775,1],[43793,4],[43814,5],[43852,2],[44147,1],[44149,11],[44172,1],[44199,3],[44274,1],[44303,3],[44354,6],[44731,1],[44764,1],[44807,1],[44869,3],[44993,1],[45303,1],[45327,1],[45354,3],[45439,1],[45468,3],[45524,6],[45989,1],[46018,1],[46080,3],[46214,1],[46495,1],[46570,4],[46606,1],[46633,3],[46714,1],[46743,3],[46796,7],[47266,1],[47296,1],[47358,3],[47478,1],[47628,3],[47766,1],[47768,17],[47810,1],[47852,1],[47900,1],[47956,1],[47980,17],[48017,3],[48277,1],[48303,1],[48336,1],[48354,5],[48433,7],[48448,22],[48481,1],[48506,1],[48508,14],[48926,1],[48949,1],[48976,3],[49051,1],[49092,3],[49143,6],[49335,1],[49385,3],[49823,5],[50208,1],[50250,3],[50366,3],[50454,6],[50510,6],[50517,1],[50579,3],[50665,3],[50710,3],[50842,3],[50930,6],[50979,6],[51164,9],[51211,3],[51291,3],[51545,1],[51598,3],[51722,3],[51814,6],[51874,6],[51881,1],[51956,3],[52050,3],[52099,3],[52221,3],[52345,1],[52394,3],[52444,7],[52640,6],[52959,1],[53025,1],[53065,19],[53085,58],[53368,6],[53387,17],[53422,21],[53448,1],[53457,1],[53469,3],[53588,4],[53604,18],[53635,17],[53670,21],[53696,1],[53705,1],[53716,3],[53784,9],[53825,1],[53879,1],[53968,1],[54089,1],[54266,6],[54346,1],[54348,3],[54391,1],[54494,3],[54593,6],[54619,3],[54720,6],[54783,6],[54836,3],[54894,6],[55161,3],[55321,3],[55360,4],[55384,3],[55523,3],[55624,6],[55693,6],[55757,1],[55936,6],[56017,1],[56019,3],[56065,1],[56176,3],[56277,6],[56303,3],[56623,19],[56874,3],[56919,7],[56941,5],[56964,21],[56990,1],[56999,1],[57010,3],[57134,3],[57154,2],[57215,1],[57224,1],[57583,5],[57655,1],[57702,3],[57814,3],[58117,6],[58195,1],[58197,3],[58236,1],[58458,3],[58580,3],[58706,6],[58732,3],[58790,6],[59005,5],[59130,3],[59202,3],[59313,3],[59433,3],[59805,3],[60231,6],[60313,1],[60315,3],[60354,1],[60539,3],[60674,3],[60778,2],[60846,2],[60849,5],[60861,5],[61328,1],[61330,4],[61378,1],[61380,4],[61423,1],[61425,6],[61463,13],[61569,2],[61572,1],[61628,2],[61636,2],[61639,1],[61688,1],[61699,1],[61701,1],[61751,3],[61808,1],[61836,3],[61906,3],[62043,1],[62108,3],[62179,3],[62230,1],[62258,3],[62328,3],[62525,1],[62583,3],[62648,3],[62698,1],[62726,3],[62796,3],[63059,4],[63268,14],[63515,1],[63517,4],[63533,1],[63564,1],[63566,3],[63585,1],[63619,1],[63621,22],[63674,3],[63839,3],[63980,13],[64013,3],[64054,6],[64073,1],[64075,22],[64104,1],[64106,11],[64127,1],[64169,1],[64212,1],[64214,5],[64258,3],[64274,4],[65123,1],[65125,3],[65146,1],[65148,2],[65161,1],[65163,3],[65173,1],[65191,1],[65193,6],[65208,3],[65233,1],[65235,4],[65252,1],[65254,4],[65269,1],[65305,1],[65351,1],[65427,1],[66068,1],[66094,3],[66173,1],[66180,1],[66197,1],[66214,1],[66256,3],[66419,1],[66437,1],[66498,3],[66670,3],[66674,1],[66726,3],[66804,1],[66831,3],[67121,1],[67123,13],[67137,1],[67155,2],[67199,3],[67291,1],[67339,3],[67684,3],[67821,4],[67826,1],[67879,3],[67957,1],[67959,16],[67995,3],[68078,3],[68126,3],[68130,1],[68132,19],[68152,1],[68180,7],[68220,3],[68329,1],[68331,16],[68367,3],[68450,3],[68498,3],[68515,1],[68551,1],[68636,3],[68738,3],[68810,1],[68898,3],[69016,3],[69151,1],[69190,3],[69505,10],[69516,11],[69567,1],[69569,3],[69590,1],[69592,2],[69605,1],[69607,3],[69617,1],[69635,1],[69637,6],[69652,3],[69681,1],[69683,4],[69700,1],[69702,4],[69731,1],[69733,6],[69754,1],[69799,1],[69828,1],[69830,2],[69853,1],[69855,6],[69877,1],[69879,4],[69898,1],[69900,26],[69947,1],[69949,8],[69962,18],[69991,1],[70027,1],[70073,1],[70149,1],[70571,1],[70605,3],[70698,1],[70713,1],[70738,1],[70781,3],[70887,1],[70894,1],[70955,3],[71047,1],[71074,3],[71289,4],[71294,1],[71325,3],[71421,1],[71455,3],[71560,1],[71587,3],[71897,1],[71957,3],[72039,1],[72066,3],[72329,4],[72418,7],[72685,4],[72742,1],[72744,2],[72762,1],[72764,4],[72782,1],[72784,4],[72808,3],[72925,1],[72927,6],[72953,3],[73783,4],[73840,1],[73842,2],[73865,1],[73867,6],[73936,1],[73938,4],[73962,3],[74079,1],[74081,6],[74107,3],[75165,1],[75194,1],[75196,20],[75217,8],[75237,1],[75289,1],[75347,3],[75519,5],[75589,17],[75614,8],[75631,2],[75634,6],[75647,8],[75663,13],[75685,8],[75699,13],[75734,1],[75736,11],[75767,3],[75873,1],[75875,8],[75903,3],[76194,1],[76196,21],[76218,1],[76220,4],[76225,1],[76227,6],[76301,3],[76416,1],[76463,3],[76600,1],[76641,1],[76685,1],[76757,3],[76922,6],[77134,1],[77187,3],[77256,2],[77394,7],[77421,3],[77579,1],[77660,3],[77926,3],[78240,1],[78279,3],[78372,1],[78374,9],[78403,3],[78669,3],[78941,1],[78990,3],[79180,8],[79439,12],[79507,1],[79534,3],[79557,1],[79577,7],[79604,3],[79683,1],[79699,14],[79733,3],[79835,9],[80202,2],[80341,8],[80700,3],[80726,5],[80874,1],[80876,2],[80899,1],[80901,6],[81064,1],[81066,4],[81079,1],[81081,8],[81099,1],[81126,1],[81128,8],[81149,1],[81372,2],[81689,5],[81913,1],[81940,1],[82262,5],[82274,2],[82362,3],[82860,3],[83300,3],[84646,4],[84871,17],[84893,11],[84920,8],[84972,1],[84974,3],[84994,1],[84996,2],[85009,1],[85011,3],[85021,1],[85039,1],[85041,6],[85056,3],[85088,1],[85090,4],[85119,1],[85121,6],[85144,1],[85146,4],[85171,1],[85173,6],[85195,1],[85197,4],[85220,1],[85222,8],[85235,18],[85264,1],[85300,1],[85346,1],[85422,1],[85809,1],[85842,3],[85918,1],[85951,3],[86101,1],[86147,3],[86332,1],[86365,3],[86606,1],[86608,3],[86622,1],[86624,2],[86637,1],[86639,3],[86649,1],[86667,1],[86669,6],[86684,3],[86710,1],[86712,4],[86732,1],[86775,1],[86834,1],[86887,1],[86931,1],[86975,1],[87011,1],[87059,1],[87137,1],[87229,1],[87384,12],[87926,1],[87953,3],[88012,1],[88039,3],[88246,1],[88309,3],[88435,1],[88476,1],[88493,1],[88516,1],[88533,1],[88554,1],[88621,3],[89361,1],[89388,3],[89669,1],[89671,3],[89689,1],[89691,2],[89704,1],[89706,3],[89716,1],[89734,1],[89736,6],[89751,3],[89781,1],[89783,4],[89798,1],[89850,1],[89852,37],[89913,1],[89964,1],[90013,1],[90015,11],[90040,1],[90252,2],[90505,12],[90552,1],[90554,1],[90556,1],[90558,1],[90560,3],[90564,3],[90568,2],[90571,3],[90575,3],[90579,2],[90582,2],[90587,1],[90593,2],[90596,2],[90601,1],[90607,1],[90609,2],[90614,1],[90620,1],[90622,2],[90627,1],[90633,2],[90636,2],[90641,1],[90648,5],[90654,12],[90667,20],[90688,7],[90745,27],[90782,22],[90960,1],[90962,1],[90964,1],[90966,2],[91162,1],[91193,3],[91264,1],[91295,3],[91389,1],[91391,1],[91393,1],[91395,1],[91414,1],[91441,3],[91605,1],[91632,3],[91804,1],[91835,3],[92314,1],[92347,1],[92382,1],[92423,1],[92425,37],[92475,3],[92775,3],[93033,3],[93234,3],[93328,1],[93361,1],[93389,3],[93435,1],[93471,3],[93543,3],[93850,1],[93852,4],[93872,1],[93874,4],[93889,1],[93891,3],[93909,1],[93911,4],[93931,1],[93933,4],[93944,1],[93946,2],[93959,1],[94005,1],[94043,1],[94072,1],[94112,1],[94114,4],[94146,1],[94175,1],[94199,1],[94201,4],[94371,19],[94412,7],[94785,3],[94861,1],[94890,3],[95198,1],[95248,1],[95313,1],[95367,12],[95399,3],[95451,3],[95503,3],[95722,1],[95784,1],[95811,1],[95819,1],[95850,3],[95929,1],[95960,3],[96120,1],[96137,1],[96200,3],[96510,1],[96543,3],[96665,1],[96707,3],[96953,6],[97129,1],[97146,3],[97169,3],[97291,1],[97293,6],[97319,3],[97445,1],[97447,6],[97482,1],[97504,5],[97529,3],[97668,1],[97670,6],[97696,3],[97783,1],[97814,3],[98221,1],[98313,1],[98344,3],[98425,1],[98473,3],[98646,1],[98679,3],[98984,1],[98986,9],[99015,3],[99082,1],[99084,1],[99209,3],[99798,1],[99844,1],[99882,11],[99909,1],[99940,3],[100017,1],[100048,3],[100206,1],[100638,1],[100689,1],[100720,3],[100805,1],[100807,4],[100831,3],[101501,1],[101503,21],[101908,4],[101926,1],[101928,5],[101953,3],[102001,3],[102028,1],[102379,1],[102404,1],[102478,1],[102565,1],[102640,2],[102643,1],[102828,1],[103052,22],[103986,2],[104008,3],[104048,2],[104070,3],[104237,5],[104421,1],[104521,1],[104578,2],[104600,3],[104680,2],[104702,3],[104828,4],[104852,3],[104897,3],[104945,1],[105031,1],[105106,3],[105199,1],[105225,5],[105231,5],[105251,4],[105256,4],[105398,4],[105664,1],[105666,4],[105721,1],[105821,1],[105878,2],[105900,3],[105982,2],[106004,3],[106153,4],[106177,3],[106223,3],[106335,1],[106421,1],[106497,3],[106544,1],[106583,3],[106590,4],[106980,5],[107168,33],[107202,29],[107556,1],[107739,1],[107741,16],[107772,1],[107860,1],[107931,2],[107934,1],[107961,3],[108032,1],[108059,3],[108150,6],[108207,6],[108214,1],[108250,3],[108269,6],[108276,1],[108325,3],[108427,1],[108447,1],[108449,1],[108465,1],[108467,1],[109087,1],[109089,18],[109141,18],[109170,6],[109190,18],[109214,6],[109251,8],[109272,7],[109280,1],[109307,3],[109378,1],[109405,3],[109496,6],[109558,6],[109593,3],[109632,3],[109686,1],[109722,3],[109726,3],[109772,3],[109812,1],[109814,31],[110084,1],[110109,3],[110138,1],[110140,8],[110159,3],[110188,1],[110236,3],[110267,3],[110338,1],[110358,3],[110434,1],[110477,3],[110976,7],[111001,1],[111028,3],[111089,1],[111116,3],[111216,1],[111261,3],[111305,5],[111672,10],[111823,1],[111825,14],[111850,1],[111852,17],[111896,1],[111898,4],[111921,1],[111923,4],[111959,1],[111961,4],[111969,10],[111980,4],[112044,13],[112114,32],[112202,14],[112251,27],[112352,4],[112357,16],[112386,2],[112392,12],[112432,4],[112437,1],[112442,9],[112459,21],[112481,27],[112509,4],[112613,2],[112655,12],[112672,2],[112687,2],[112693,3],[112701,2],[112719,2],[112726,17],[112756,3],[112763,7],[112771,2],[112824,1],[112826,4],[112841,3],[112880,1],[112882,4],[112897,3],[113066,1],[113068,4],[113083,3],[113713,2],[113738,3],[113879,3],[114101,5],[114259,1],[114261,4],[114276,1],[114306,1],[114308,4],[114324,1],[114326,4],[114358,10],[114387,18],[114544,1],[114546,10],[114557,2],[115039,3],[115200,3],[115442,3],[116379,3],[116470,3],[116652,3],[116881,3],[117160,3],[117214,3],[117258,5],[117270,4],[117847,5],[118016,1],[118072,1],[118105,3],[118170,1],[118205,3],[118315,4],[118558,1],[118629,1],[118685,1],[118712,3],[118779,1],[118806,3],[118909,5],[118934,3],[118984,1],[119008,1],[119018,1],[119061,1],[119095,1],[119103,2],[119115,6],[119122,1],[119144,11],[119280,3],[119300,1],[119349,3],[119370,1],[119550,1],[119580,3],[119636,1],[119668,3],[119789,4],[119997,1],[120125,3],[120211,3],[120356,3],[120403,1],[120405,1],[120444,1],[120446,1],[120483,1],[120485,1],[120549,3],[120556,4],[120561,4],[120570,6],[120668,7],[120812,10],[120936,22],[121011,5],[121232,22],[121410,37],[121465,7],[121519,12],[121534,28],[121563,32],[121596,34],[121633,35],[121669,34],[121704,12],[121717,44],[121762,34],[121797,3],[121845,5],[121851,28],[122297,33],[122331,13],[122375,27],[122403,18],[122536,32],[122569,1],[122729,4],[122734,1],[122783,1],[122785,9],[122827,1],[122829,15],[123018,4],[123579,1],[124883,4],[124888,1],[124893,4],[125020,1],[125042,1],[125182,1],[125189,4],[125320,1],[125325,13],[125793,1],[125918,1],[126091,2],[126117,1],[126410,4],[126908,9],[126918,1],[127043,1],[127045,4],[127289,1],[127447,5],[128863,1],[128891,3],[128990,1],[129182,1],[129184,2],[129239,1],[129241,2],[129284,1],[129286,2],[129308,3],[129347,1],[129406,3],[129827,1],[129829,4],[129855,3],[129929,1],[129931,2],[129955,3],[130094,1],[130125,3],[130173,1],[130287,3],[130632,4],[131689,11],[131750,2],[131804,3],[131841,2]]},"518":{"position":[[4,6],[28,10],[113,3],[188,4],[234,3],[301,34],[348,7],[423,6]]},"520":{"position":[[4,7]]},"522":{"position":[[280,3],[419,3],[555,15],[603,3],[686,14],[701,3],[705,25],[731,1]]},"524":{"position":[[35,1],[88,3],[166,1],[221,3],[303,3],[362,15],[393,15],[447,1],[583,5],[589,9],[599,1],[601,7],[609,9],[645,4],[650,9],[687,4],[692,9],[724,4]]},"526":{"position":[[463,3],[524,1],[588,1],[635,1],[637,26],[687,1],[747,3],[751,1],[794,3],[921,1],[969,3],[1031,1],[1035,6],[1068,4],[1073,1],[1128,3],[1415,1],[1467,3],[1561,1],[1570,9],[1592,8],[1601,1],[1635,1],[1720,3],[1724,1],[1751,3],[1805,3],[1809,1],[1836,3],[1892,5],[1974,19],[2221,3],[2840,6],[2887,1],[2889,5],[2918,4],[2923,1],[2942,1],[2951,4],[2956,1],[2995,3],[3109,1],[3134,3],[3217,1],[3243,3],[4803,1],[4826,3],[4901,3],[4948,3],[4972,3],[5142,1],[5165,3],[5221,1],[5265,3],[5348,1],[5399,1],[5422,1],[5463,3],[5548,1],[5580,3],[5651,1],[5688,3],[5759,5],[5960,19]]},"530":{"position":[[19,3]]},"532":{"position":[[19,3],[120,6],[183,6]]},"535":{"position":[[19,3],[77,6],[344,3]]},"537":{"position":[[19,3]]},"539":{"position":[[19,3]]},"541":{"position":[[19,3],[120,6],[189,6],[253,1],[432,6],[513,1],[515,3],[561,1]]},"543":{"position":[[19,3]]},"545":{"position":[[19,3],[339,19],[590,3],[635,7],[657,5],[680,21],[706,1],[715,1],[726,3],[850,3],[870,2],[931,1],[940,1],[1299,5],[1371,1]]},"547":{"position":[[19,3]]},"549":{"position":[[19,3],[322,6],[400,1],[402,3],[441,1]]},"551":{"position":[[19,3]]},"553":{"position":[[19,3]]},"555":{"position":[[19,3],[77,6]]},"558":{"position":[[19,3]]},"560":{"position":[[19,3],[130,3]]},"562":{"position":[[19,3],[391,3],[817,6],[899,1],[901,3],[940,1]]},"564":{"position":[[19,3]]},"567":{"position":[[19,3],[123,2],[191,2],[194,5],[206,5]]},"569":{"position":[[19,3]]},"571":{"position":[[19,3],[160,13],[193,3],[234,6],[253,1],[255,22],[284,1],[286,11],[307,1],[349,1],[392,1],[394,5],[438,3],[454,4]]},"573":{"position":[[43,2]]},"577":{"position":[[350,3]]},"579":{"position":[[0,5],[148,1],[150,2],[173,1],[175,6],[338,1],[340,4],[353,1],[355,8],[373,1],[400,1],[402,8],[423,1]]},"585":{"position":[[314,5],[538,1],[565,1]]},"589":{"position":[[142,5],[154,2],[242,3],[740,3],[1180,3],[2526,4]]},"591":{"position":[[392,1],[425,1],[460,1],[501,1],[503,37],[553,3],[853,3],[1111,3],[1312,3],[1406,1],[1439,1],[1467,3],[1513,1],[1549,3],[1621,3],[1928,1],[1930,4],[1950,1],[1952,4],[1967,1],[1969,3],[1987,1],[1989,4],[2009,1],[2011,4],[2022,1],[2024,2],[2037,1],[2083,1],[2121,1],[2150,1],[2190,1],[2192,4],[2224,1],[2253,1],[2277,1],[2279,4]]},"593":{"position":[[19,3]]},"595":{"position":[[19,3],[186,5]]},"597":{"position":[[19,3]]},"599":{"position":[[19,3]]},"601":{"position":[[19,3],[64,3],[112,1],[198,1],[273,3]]},"604":{"position":[[0,5],[20,4]]},"608":{"position":[[261,1],[263,4]]},"610":{"position":[[19,3]]},"612":{"position":[[19,3]]},"614":{"position":[[19,3],[65,3],[177,1],[263,1],[339,3]]},"616":{"position":[[0,3],[7,4]]},"618":{"position":[[19,3]]},"620":{"position":[[19,3],[241,5],[399,1],[401,4],[416,1],[446,1],[448,4],[464,1],[466,4],[498,10]]},"622":{"position":[[19,3]]},"624":{"position":[[19,3]]},"626":{"position":[[19,3]]},"628":{"position":[[19,3]]},"630":{"position":[[19,3]]},"632":{"position":[[19,3]]},"634":{"position":[[19,3]]},"636":{"position":[[10,3],[64,3],[108,5],[120,4]]},"638":{"position":[[19,3]]},"640":{"position":[[19,3]]},"642":{"position":[[19,3],[66,1],[68,1],[107,1],[109,1],[146,1],[148,1],[212,3],[219,4],[224,4],[233,6],[331,7]]}}}],["0",{"_index":1036,"t":{"157":{"position":[[122,16],[139,15]]},"186":{"position":[[1271,3]]},"190":{"position":[[2022,2],[2070,2]]},"238":{"position":[[77,1]]},"240":{"position":[[845,3]]},"254":{"position":[[769,3]]},"271":{"position":[[144,1],[494,1]]},"303":{"position":[[434,1],[1958,12]]},"325":{"position":[[91,2],[365,12]]},"328":{"position":[[675,3],[721,33],[777,13]]},"333":{"position":[[129,7]]},"367":{"position":[[127,2]]},"369":{"position":[[230,40]]},"374":{"position":[[141,1],[214,1]]},"392":{"position":[[175,2]]},"400":{"position":[[212,4],[217,1]]},"402":{"position":[[776,25]]},"427":{"position":[[668,1]]},"429":{"position":[[329,18],[1063,1],[1098,1]]},"457":{"position":[[4186,22]]},"481":{"position":[[35,15]]},"504":{"position":[[3040,1],[3227,1]]},"516":{"position":[[6569,1],[6586,1],[6603,1],[7081,1],[13359,1],[14095,1],[17401,1],[17457,1],[17500,1],[17553,1],[17615,1],[17674,1],[17733,1],[17781,1],[17829,1],[17882,1],[18266,1],[18373,1],[18940,1],[19978,1],[20397,1],[22444,1],[22598,1],[23631,1],[23672,1],[23713,1],[24340,1],[24399,1],[29202,1],[29241,1],[29287,1],[29337,1],[29357,1],[34907,1],[38030,1],[38466,1],[41547,1],[41584,1],[41621,1],[41665,1],[41701,1],[43086,1],[48483,16],[49492,1],[50486,1],[50962,1],[51850,1],[52325,1],[54765,1],[55669,1],[56427,1],[57931,1],[58701,1],[59561,1],[59938,1],[60005,1],[60822,1],[62017,1],[62446,1],[62507,1],[62917,1],[62976,1],[63036,1],[63786,1],[63951,1],[66588,1],[66626,1],[66664,1],[66922,1],[66961,1],[66999,1],[67037,1],[67076,1],[67114,1],[67434,1],[67477,1],[67521,1],[67561,1],[67604,1],[67644,1],[67775,1],[67814,1],[69107,1],[69145,1],[71176,1],[71226,1],[71276,1],[71689,1],[71740,1],[71789,1],[71838,1],[71889,1],[72168,1],[72219,1],[72270,1],[72321,1],[73058,1],[73107,1],[73156,1],[73209,1],[73262,1],[73315,1],[73364,1],[73412,1],[73460,1],[73518,1],[73576,1],[73634,1],[73682,1],[73730,1],[73778,1],[74210,1],[74257,1],[74304,1],[74351,1],[74399,1],[74456,1],[74503,1],[74553,1],[74601,1],[74658,1],[74705,1],[74755,1],[74803,1],[74860,1],[74907,1],[74957,1],[75005,1],[75062,1],[75109,1],[75159,1],[75429,1],[75431,1],[75433,1],[75466,1],[75468,1],[75470,1],[76873,1],[76875,1],[76877,1],[76906,1],[76908,1],[76910,1],[77822,1],[77824,1],[77826,1],[78028,1],[78079,1],[78130,1],[78181,1],[78232,1],[78511,1],[78513,1],[78515,1],[78565,1],[78567,1],[78569,1],[78771,1],[78820,1],[78871,1],[78922,1],[80316,1],[81579,1],[83397,1],[83438,1],[83478,1],[83518,1],[83568,1],[83618,1],[83668,1],[83708,1],[83748,1],[83788,1],[83828,1],[83878,1],[83928,1],[83978,1],[84028,1],[84068,1],[84109,1],[84150,1],[84191,1],[84232,1],[84273,1],[84314,1],[84359,1],[84406,1],[84452,1],[84498,1],[84545,1],[84591,1],[84638,1],[86253,1],[86308,1],[88396,1],[88429,1],[88708,1],[88738,1],[88768,1],[88800,1],[88831,1],[88861,1],[88901,1],[88933,1],[88964,1],[88994,1],[89026,1],[89057,1],[89097,1],[89127,1],[89167,1],[89197,1],[89227,1],[89257,1],[89289,1],[89322,1],[89355,1],[90585,1],[90599,1],[90639,1],[90646,1],[91403,1],[91702,1],[91752,1],[91798,1],[92677,1],[92679,1],[92705,1],[92707,1],[92733,1],[92735,1],[93745,1],[93747,1],[93773,1],[93775,1],[93801,1],[93803,1],[96605,1],[96607,1],[96633,1],[96635,1],[96661,1],[96663,1],[97231,1],[97233,1],[97259,1],[97261,1],[97287,1],[97289,1],[97608,1],[97610,1],[97636,1],[97638,1],[97664,1],[97666,1],[102822,1],[108185,1],[109535,1],[111209,1],[116562,1],[116603,1],[118904,1],[120303,1],[127176,1],[127229,1],[127282,1],[129543,1],[129603,1]]},"522":{"position":[[549,1]]},"526":{"position":[[2346,1],[2402,1],[2445,1],[2498,1],[2560,1],[2619,1],[2678,1],[2726,1],[2774,1],[2827,1],[3211,1],[3318,1],[3885,1],[4923,1],[5342,1]]},"532":{"position":[[165,1]]},"541":{"position":[[165,1]]},"545":{"position":[[143,1]]},"549":{"position":[[136,1]]},"553":{"position":[[140,1]]},"562":{"position":[[147,1],[524,1],[591,1]]},"567":{"position":[[167,1]]},"569":{"position":[[131,1]]},"571":{"position":[[131,1]]},"575":{"position":[[101,1]]},"585":{"position":[[204,1]]},"589":{"position":[[1277,1],[1318,1],[1358,1],[1398,1],[1448,1],[1498,1],[1548,1],[1588,1],[1628,1],[1668,1],[1708,1],[1758,1],[1808,1],[1858,1],[1908,1],[1948,1],[1989,1],[2030,1],[2071,1],[2112,1],[2153,1],[2194,1],[2239,1],[2286,1],[2332,1],[2378,1],[2425,1],[2471,1],[2518,1]]},"591":{"position":[[755,1],[757,1],[783,1],[785,1],[811,1],[813,1],[1823,1],[1825,1],[1851,1],[1853,1],[1879,1],[1881,1]]},"630":{"position":[[111,1],[152,1]]},"640":{"position":[[111,1]]}}}],["0%/3",{"_index":4613,"t":{"516":{"position":[[82245,5],[82468,5],[82511,5],[82728,5],[82770,5],[82811,5]]},"589":{"position":[[125,5],[348,5],[391,5],[608,5],[650,5],[691,5]]}}}],["0,n",{"_index":362,"t":{"62":{"position":[[418,6]]}}}],["0..4};do",{"_index":2844,"t":{"429":{"position":[[1164,9]]}}}],["0..4}。再如可以直接使用if",{"_index":2833,"t":{"427":{"position":[[682,17]]}}}],["0.30.0/deploy/static/mandatory.yaml",{"_index":4876,"t":{"516":{"position":[[102171,35]]}}}],["0.30.0/deploy/static/provider/baremetal/servic",{"_index":4877,"t":{"516":{"position":[[102317,47]]}}}],["0/1",{"_index":4118,"t":{"516":{"position":[[38454,3],[41534,3],[41571,3],[41608,3],[41645,3],[44964,3],[46185,3],[49480,3],[50950,3],[52313,3],[54753,3],[58689,3],[62495,3],[62905,3],[62964,3],[63024,3],[63774,3],[67418,3],[67461,3],[67505,3],[67588,3],[73352,3],[73400,3],[73448,3],[73496,3],[73554,3],[73612,3],[74387,3],[74434,3],[74537,3],[74589,3],[74636,3],[74739,3],[74791,3],[74838,3],[74941,3],[74993,3],[75040,3],[75143,3],[83426,3],[83466,3],[83506,3],[83546,3],[83596,3],[83646,3],[83696,3],[83736,3],[83776,3],[83816,3],[83856,3],[83906,3],[83956,3],[84006,3],[88141,3],[88415,3],[88786,3],[88819,3],[88849,3],[88879,3],[88919,3],[88952,3],[88982,3],[89012,3],[89045,3],[89075,3],[89115,3],[89145,3],[89275,3],[89308,3],[89341,3],[91688,3],[91738,3]]},"532":{"position":[[153,3]]},"553":{"position":[[128,3]]},"569":{"position":[[119,3]]},"589":{"position":[[1306,3],[1346,3],[1386,3],[1426,3],[1476,3],[1526,3],[1576,3],[1616,3],[1656,3],[1696,3],[1736,3],[1786,3],[1836,3],[1886,3]]}}}],["0/3",{"_index":4122,"t":{"516":{"position":[[38609,3],[52571,3],[54953,3],[55068,3],[58886,3]]},"535":{"position":[[136,3],[251,3]]},"555":{"position":[[173,3]]}}}],["0/tcp",{"_index":3829,"t":{"516":{"position":[[18851,5],[24554,5]]},"526":{"position":[[3796,5]]}}}],["0000",{"_index":4952,"t":{"516":{"position":[[108415,6]]}}}],["0001",{"_index":1954,"t":{"230":{"position":[[1123,4]]},"451":{"position":[[642,4]]}}}],["0010",{"_index":3007,"t":{"451":{"position":[[647,4]]}}}],["01",{"_index":1372,"t":{"186":{"position":[[979,2],[982,5]]},"516":{"position":[[8503,2],[8535,2]]}}}],["0100",{"_index":3008,"t":{"451":{"position":[[652,4]]}}}],["02",{"_index":3669,"t":{"516":{"position":[[10348,2],[10403,2]]}}}],["05",{"_index":3774,"t":{"516":{"position":[[16284,2]]},"526":{"position":[[1229,2]]}}}],["07",{"_index":1353,"t":{"186":{"position":[[345,2],[617,2],[2542,2],[3556,2]]}}}],["075194d3",{"_index":2007,"t":{"238":{"position":[[205,36]]}}}],["077;openssl",{"_index":5157,"t":{"516":{"position":[[124979,11]]}}}],["08",{"_index":3818,"t":{"516":{"position":[[18416,2],[18886,2],[24167,2]]},"526":{"position":[[3361,2],[3831,2]]}}}],["0800",{"_index":3820,"t":{"516":{"position":[[18437,5],[18907,5],[24188,5]]},"526":{"position":[[3382,5],[3852,5]]}}}],["08t04:44:16z",{"_index":3775,"t":{"516":{"position":[[16287,13]]},"526":{"position":[[1232,13]]}}}],["09:29:24",{"_index":3819,"t":{"516":{"position":[[18428,8]]},"526":{"position":[[3373,8]]}}}],["09:30:01",{"_index":3830,"t":{"516":{"position":[[18898,8]]},"526":{"position":[[3843,8]]}}}],["0<x<65536",{"_index":4100,"t":{"516":{"position":[[36410,19]]}}}],["0s",{"_index":4200,"t":{"516":{"position":[[44614,2],[73366,2],[73414,2],[73462,2],[73520,2],[73578,2],[73636,2],[74401,2],[74458,2],[74603,2],[74660,2],[74805,2],[74862,2],[74909,2],[75007,2],[75064,2],[83440,2],[83480,2],[83520,2],[83570,2],[83620,2],[83670,2],[83710,2],[83750,2],[83790,2],[83830,2],[83880,2],[83930,2],[83980,2],[84030,2],[88833,2],[88863,2],[88903,2],[88966,2],[88996,2],[89059,2],[89099,2],[89129,2],[89169,2]]},"589":{"position":[[1320,2],[1360,2],[1400,2],[1450,2],[1500,2],[1550,2],[1590,2],[1630,2],[1670,2],[1710,2],[1760,2],[1810,2],[1860,2],[1910,2]]}}}],["0、1、2",{"_index":2581,"t":{"303":{"position":[[627,22]]}}}],["0个或1",{"_index":2655,"t":{"325":{"position":[[395,27]]}}}],["0到2147483647",{"_index":2098,"t":{"252":{"position":[[2336,17]]}}}],["0到32767",{"_index":2100,"t":{"252":{"position":[[2380,15]]}}}],["0到9223372036854775807",{"_index":2096,"t":{"252":{"position":[[2287,27]]}}}],["0次或者1",{"_index":2682,"t":{"328":{"position":[[813,23]]}}}],["0，为0",{"_index":2781,"t":{"400":{"position":[[154,16]]}}}],["1",{"_index":168,"t":{"34":{"position":[[97,13],[968,6],[1648,6],[1676,7],[3320,9],[3766,5]]},"94":{"position":[[27,3]]},"130":{"position":[[487,13]]},"155":{"position":[[206,3]]},"175":{"position":[[771,1]]},"184":{"position":[[1547,2]]},"186":{"position":[[63,2],[1286,3],[1616,2],[2145,2],[2330,2],[2456,2]]},"188":{"position":[[1260,3],[2567,3],[5010,1],[5012,3],[5382,2]]},"190":{"position":[[991,2]]},"193":{"position":[[1599,6]]},"197":{"position":[[5699,2]]},"199":{"position":[[816,2]]},"217":{"position":[[0,2]]},"225":{"position":[[571,2]]},"254":{"position":[[779,3]]},"258":{"position":[[2369,3],[2454,2],[2667,2]]},"271":{"position":[[385,1]]},"275":{"position":[[1478,2],[1567,2],[1611,2],[1673,2]]},"280":{"position":[[58,7]]},"303":{"position":[[452,1],[822,17],[993,12],[1014,1],[1096,1],[1224,1],[1410,1]]},"325":{"position":[[380,12]]},"367":{"position":[[56,8]]},"369":{"position":[[46,20],[152,21],[347,2],[374,3],[593,1],[612,1],[631,1]]},"404":{"position":[[39,2]]},"415":{"position":[[221,4]]},"422":{"position":[[76,2],[226,1],[263,1],[341,1]]},"427":{"position":[[0,6]]},"429":{"position":[[0,6],[807,1],[848,2],[879,1],[975,1],[1002,2],[1032,1]]},"432":{"position":[[0,6]]},"455":{"position":[[491,9]]},"457":{"position":[[294,6]]},"504":{"position":[[1381,1],[2429,1],[3160,1]]},"516":{"position":[[763,31],[3722,1],[4510,1],[4549,1],[4573,1],[5359,7],[10244,1],[10733,1],[13584,2],[15808,1],[20594,1],[20596,1],[24260,1],[26965,1],[26993,2],[29243,28],[35326,1],[37690,3],[38634,1],[40617,1],[40758,1],[47958,21],[51174,1],[53769,9],[56033,1],[56456,1],[57254,9],[58954,1],[76011,1],[80918,1],[81095,3],[81501,1],[81503,1],[81843,1],[82251,1],[82256,1],[82474,1],[82479,1],[82517,1],[82522,1],[82561,1],[82566,1],[82605,1],[82648,1],[82691,1],[82734,1],[82776,1],[82817,1],[82822,1],[82943,1],[82945,1],[82961,1],[82963,1],[82979,1],[82981,1],[82997,1],[82999,1],[83017,1],[83035,1],[83053,1],[83071,1],[83089,1],[83267,1],[83269,1],[85218,1],[86730,1],[86758,1],[86773,1],[86806,1],[87355,2],[87897,2],[89915,21],[90114,1],[90129,1],[90475,2],[90548,3],[90612,1],[90625,1],[90955,4],[91133,2],[91385,3],[92675,1],[92703,1],[92731,1],[93743,1],[93771,1],[93799,1],[96603,1],[96631,1],[96659,1],[97229,1],[97257,1],[97285,1],[97606,1],[97634,1],[97662,1],[121532,1],[124890,2],[125046,2],[129853,1],[129953,1]]},"522":{"position":[[38,2]]},"526":{"position":[[753,1],[5539,1],[5541,1]]},"541":{"position":[[529,1]]},"545":{"position":[[172,1],[970,9]]},"555":{"position":[[241,1]]},"579":{"position":[[192,1],[369,3]]},"585":{"position":[[126,1],[128,1],[468,1]]},"589":{"position":[[131,1],[136,1],[354,1],[359,1],[397,1],[402,1],[441,1],[446,1],[485,1],[528,1],[571,1],[614,1],[656,1],[697,1],[702,1],[823,1],[825,1],[841,1],[843,1],[859,1],[861,1],[877,1],[879,1],[897,1],[915,1],[933,1],[951,1],[969,1],[1147,1],[1149,1]]},"591":{"position":[[753,1],[781,1],[809,1],[1821,1],[1849,1],[1877,1]]}}}],["1.1",{"_index":3414,"t":{"516":{"position":[[0,3]]}}}],["1.10",{"_index":2930,"t":{"442":{"position":[[581,4]]}}}],["1.16.1",{"_index":2923,"t":{"442":{"position":[[411,6]]}}}],["1.16.1/chang",{"_index":2924,"t":{"442":{"position":[[439,14]]}}}],["1.16.1/readm",{"_index":2925,"t":{"442":{"position":[[475,13]]}}}],["1.16.1/readme.dynam",{"_index":2926,"t":{"442":{"position":[[510,21]]}}}],["1.16.1/upgrad",{"_index":2927,"t":{"442":{"position":[[553,14]]}}}],["1.17.4",{"_index":3564,"t":{"516":{"position":[[6562,6],[6579,6],[6596,6]]}}}],["1.2",{"_index":3418,"t":{"516":{"position":[[561,3]]}}}],["1.2.1",{"_index":4743,"t":{"516":{"position":[[92517,5],[93585,5]]},"591":{"position":[[595,5],[1663,5]]}}}],["1.3",{"_index":3421,"t":{"516":{"position":[[946,3]]}}}],["1.4",{"_index":3441,"t":{"516":{"position":[[1818,3]]}}}],["1.6",{"_index":2929,"t":{"442":{"position":[[574,3]]}}}],["1.6版本之前的django.db.models.model.save()算法保存对象。默认值为fals",{"_index":2327,"t":{"258":{"position":[[3595,73]]}}}],["1.8",{"_index":4567,"t":{"516":{"position":[[79793,6],[80178,6],[80234,6],[80369,6],[80546,6],[81198,6],[81300,6],[81394,6],[82026,6],[82139,6]]},"573":{"position":[[19,6]]},"575":{"position":[[19,6]]},"577":{"position":[[19,6],[196,6]]},"581":{"position":[[19,6]]},"583":{"position":[[19,6]]},"585":{"position":[[19,6]]},"587":{"position":[[19,6]]},"589":{"position":[[19,6]]}}}],["1.filefield",{"_index":2113,"t":{"252":{"position":[[2961,11]]}}}],["1.jpg",{"_index":3116,"t":{"457":{"position":[[4028,5]]}}}],["1.安装ipset和ipvsadm",{"_index":3520,"t":{"516":{"position":[[4834,17]]}}}],["1/1",{"_index":3739,"t":{"516":{"position":[[13347,3],[14083,3],[17389,3],[17445,3],[17488,3],[17541,3],[17603,3],[17662,3],[17721,3],[17769,3],[17817,3],[17870,3],[18254,3],[19966,3],[20385,3],[20590,3],[22432,3],[22586,3],[23619,3],[23660,3],[23701,3],[38018,3],[41689,3],[43074,3],[47458,3],[50474,3],[51838,3],[55657,3],[56415,3],[57919,3],[59549,3],[59926,3],[59993,3],[60810,3],[62005,3],[62434,3],[63939,3],[66576,3],[66614,3],[66652,3],[66910,3],[66949,3],[66987,3],[67025,3],[67064,3],[67102,3],[67549,3],[67632,3],[67763,3],[67802,3],[69095,3],[69133,3],[71164,3],[71214,3],[71264,3],[71677,3],[71728,3],[71777,3],[71826,3],[71877,3],[72156,3],[72207,3],[72258,3],[72309,3],[73046,3],[73095,3],[73144,3],[73193,3],[73246,3],[73299,3],[73670,3],[73718,3],[73766,3],[74198,3],[74245,3],[74292,3],[74339,3],[74491,3],[74693,3],[74895,3],[75097,3],[78016,3],[78067,3],[78118,3],[78169,3],[78220,3],[78759,3],[78808,3],[78859,3],[78910,3],[80304,3],[81497,3],[81567,3],[82939,3],[83263,3],[83385,3],[84056,3],[84097,3],[84138,3],[84179,3],[84220,3],[84261,3],[84302,3],[84343,3],[84390,3],[84436,3],[84482,3],[84529,3],[84575,3],[84622,3],[86241,3],[86296,3],[88197,3],[88384,3],[88696,3],[88726,3],[88756,3],[89185,3],[89215,3],[89245,3],[91521,3],[91557,3],[91593,3],[91786,3],[95004,3],[95079,3],[95154,3],[102810,3],[116550,3],[116591,3],[118892,3],[120291,3],[127164,3],[127217,3],[127270,3],[129531,3],[129591,3]]},"522":{"position":[[537,3]]},"526":{"position":[[2334,3],[2390,3],[2433,3],[2486,3],[2548,3],[2607,3],[2666,3],[2714,3],[2762,3],[2815,3],[3199,3],[4911,3],[5330,3],[5535,3]]},"541":{"position":[[153,3]]},"545":{"position":[[131,3]]},"549":{"position":[[124,3]]},"562":{"position":[[135,3],[512,3],[579,3]]},"567":{"position":[[155,3]]},"571":{"position":[[119,3]]},"575":{"position":[[89,3]]},"585":{"position":[[122,3],[192,3]]},"589":{"position":[[819,3],[1143,3],[1265,3],[1936,3],[1977,3],[2018,3],[2059,3],[2100,3],[2141,3],[2182,3],[2223,3],[2270,3],[2316,3],[2362,3],[2409,3],[2455,3],[2502,3]]},"630":{"position":[[99,3],[140,3]]},"640":{"position":[[99,3]]}}}],["1/2",{"_index":4053,"t":{"516":{"position":[[32304,3],[32470,3]]}}}],["1/4",{"_index":4627,"t":{"516":{"position":[[82957,3],[82975,3],[82993,3],[83011,3]]},"589":{"position":[[837,3],[855,3],[873,3],[891,3]]}}}],["1/8",{"_index":4628,"t":{"516":{"position":[[83029,3],[83047,3],[83065,3],[83083,3]]},"589":{"position":[[909,3],[927,3],[945,3],[963,3]]}}}],["1/x",{"_index":2414,"t":{"269":{"position":[[295,21]]}}}],["10",{"_index":85,"t":{"25":{"position":[[25,2],[225,10],[261,2]]},"137":{"position":[[277,6],[1103,3]]},"186":{"position":[[998,4],[1016,4]]},"188":{"position":[[2580,3]]},"225":{"position":[[953,2]]},"392":{"position":[[23,5],[96,3]]},"394":{"position":[[53,5]]},"396":{"position":[[23,5]]},"398":{"position":[[27,5]]},"422":{"position":[[114,3],[134,5],[285,2]]},"451":{"position":[[870,3]]},"516":{"position":[[8500,2],[8532,2],[29289,29],[66963,3],[67001,3],[67078,3],[81867,2],[82253,2],[82476,2],[82519,2],[82563,2],[82607,2],[82650,2],[82693,2],[82736,2],[82778,2],[82819,2],[113999,3],[114043,3],[115894,3],[116216,3],[128653,3]]},"585":{"position":[[492,2]]},"589":{"position":[[133,2],[356,2],[399,2],[443,2],[487,2],[530,2],[573,2],[616,2],[658,2],[699,2]]},"620":{"position":[[139,3],[183,3]]}}}],["10.1",{"_index":5211,"t":{"516":{"position":[[128825,4]]},"651":{"position":[[157,4]]}}}],["10.100.94.0",{"_index":3961,"t":{"516":{"position":[[26770,11]]}}}],["10.101.18.29",{"_index":4599,"t":{"516":{"position":[[81653,12]]},"585":{"position":[[278,12]]}}}],["10.104.178.171",{"_index":5231,"t":{"516":{"position":[[129770,14]]}}}],["10.104.184.38",{"_index":4924,"t":{"516":{"position":[[106125,13]]},"612":{"position":[[140,13]]}}}],["10.105.64.191",{"_index":4841,"t":{"516":{"position":[[100159,13]]}}}],["10.109.179.231",{"_index":3948,"t":{"516":{"position":[[26036,14],[27128,14]]}}}],["10.109.179.231:80",{"_index":3952,"t":{"516":{"position":[[26190,17]]}}}],["10.2",{"_index":5258,"t":{"516":{"position":[[131701,4]]}}}],["10.23.00.png",{"_index":3617,"t":{"516":{"position":[[8538,15]]}}}],["10.23.00](images/截屏2021",{"_index":3616,"t":{"516":{"position":[[8506,25]]}}}],["10.244.1.23",{"_index":3824,"t":{"516":{"position":[[18529,11],[18550,11],[19985,11]]},"526":{"position":[[3474,11],[3495,11],[4930,11]]}}}],["10.244.1.37",{"_index":4329,"t":{"516":{"position":[[60013,11]]},"562":{"position":[[599,11]]}}}],["10.244.1.38",{"_index":4327,"t":{"516":{"position":[[59946,11]]},"562":{"position":[[532,11]]}}}],["10.244.1.39",{"_index":4792,"t":{"516":{"position":[[95016,11],[95320,13],[95408,11],[95420,11],[97385,11],[97421,11],[99382,11]]}}}],["10.244.1.39:80",{"_index":4751,"t":{"516":{"position":[[92655,14],[93723,14],[96583,14],[97209,14],[97586,14]]},"591":{"position":[[733,14],[1801,14]]}}}],["10.244.1.39:80,10.244.1.40:80,10.244.2.33:80",{"_index":4807,"t":{"516":{"position":[[96428,44],[98902,44]]}}}],["10.244.1.40",{"_index":4796,"t":{"516":{"position":[[95166,11],[95512,11],[95524,11],[97373,11],[97409,11],[99320,11]]}}}],["10.244.1.40:80",{"_index":4753,"t":{"516":{"position":[[92683,14],[93751,14],[96611,14],[97237,14],[97614,14]]},"591":{"position":[[761,14],[1829,14]]}}}],["10.244.1.43",{"_index":4658,"t":{"516":{"position":[[86259,11]]}}}],["10.244.1.59",{"_index":4356,"t":{"516":{"position":[[62025,11],[62454,11]]}}}],["10.244.1.62",{"_index":4381,"t":{"516":{"position":[[63956,11]]},"571":{"position":[[136,11]]}}}],["10.244.1.69",{"_index":5059,"t":{"516":{"position":[[116568,11]]},"630":{"position":[[117,11]]}}}],["10.244.1.70",{"_index":5060,"t":{"516":{"position":[[116609,11]]},"630":{"position":[[158,11]]}}}],["10.244.1.87",{"_index":4246,"t":{"516":{"position":[[50492,11],[51856,11]]}}}],["10.244.1.89",{"_index":4294,"t":{"516":{"position":[[55675,11]]},"541":{"position":[[171,11]]}}}],["10.244.1.96",{"_index":4333,"t":{"516":{"position":[[60828,11]]},"567":{"position":[[173,11]]}}}],["10.244.1.96:80,10.244.1.97:80,10.244.2.112:80",{"_index":4906,"t":{"516":{"position":[[104964,47]]},"601":{"position":[[131,47]]}}}],["10.244.1.97:80,10.244.1.98:80,10.244.2.119:80",{"_index":4925,"t":{"516":{"position":[[106354,47]]},"614":{"position":[[196,47]]}}}],["10.244.2.33",{"_index":4794,"t":{"516":{"position":[[95091,11],[95460,11],[95472,11],[96731,11],[97397,11],[97433,11],[97747,11],[97759,11],[97771,11],[99444,11]]}}}],["10.244.2.33:80",{"_index":4754,"t":{"516":{"position":[[92711,14],[93779,14],[96639,14],[97265,14],[97642,14]]},"591":{"position":[[789,14],[1857,14]]}}}],["10.244.2.44:8080",{"_index":4212,"t":{"516":{"position":[[45943,17]]}}}],["10.244.2.48",{"_index":4189,"t":{"516":{"position":[[43092,11],[43146,11]]}}}],["10.244.2.74",{"_index":4660,"t":{"516":{"position":[[86314,11]]}}}],["10.42.1.0",{"_index":4950,"t":{"516":{"position":[[108379,9]]}}}],["10.42.2.10",{"_index":4965,"t":{"516":{"position":[[109541,10],[109602,10]]}}}],["10.42.2.9",{"_index":4948,"t":{"516":{"position":[[108191,9],[108259,9]]}}}],["10.96.0.10",{"_index":4828,"t":{"516":{"position":[[99118,10],[99217,11],[100839,11]]}}}],["10.96.89.218",{"_index":5228,"t":{"516":{"position":[[129699,12]]}}}],["10.97.97.97",{"_index":4801,"t":{"516":{"position":[[95710,11],[96077,11],[96366,11],[97719,12]]}}}],["10.97.97.97:80",{"_index":4738,"t":{"516":{"position":[[92316,14],[92635,14],[93703,14],[96563,14],[96667,20],[96716,14],[97189,14],[97342,15],[97549,14]]},"591":{"position":[[394,14],[713,14],[1781,14]]}}}],["10.98.75.163",{"_index":4887,"t":{"516":{"position":[[102981,12]]}}}],["100",{"_index":1873,"t":{"225":{"position":[[157,3]]},"269":{"position":[[2434,5]]},"342":{"position":[[270,46]]},"396":{"position":[[157,3],[224,3]]},"398":{"position":[[72,3],[86,3],[122,3],[136,3]]},"402":{"position":[[58,3]]},"455":{"position":[[840,4]]},"504":{"position":[[1282,3]]},"516":{"position":[[53779,4],[57264,3]]},"545":{"position":[[980,3]]}}}],["100/day",{"_index":1834,"t":{"215":{"position":[[247,10]]}}}],["1000",{"_index":1876,"t":{"225":{"position":[[297,4]]},"451":{"position":[[657,5]]}}}],["1000/day",{"_index":1835,"t":{"215":{"position":[[266,10]]},"217":{"position":[[544,11]]}}}],["10000",{"_index":1879,"t":{"225":{"position":[[354,5]]},"240":{"position":[[611,14]]}}}],["100m",{"_index":3017,"t":{"451":{"position":[[1171,6]]},"516":{"position":[[81142,6]]},"579":{"position":[[416,6]]}}}],["100，可以通过max_length",{"_index":2158,"t":{"252":{"position":[[5437,60]]}}}],["1010",{"_index":3221,"t":{"487":{"position":[[83,5]]}}}],["1020",{"_index":3223,"t":{"487":{"position":[[173,5]]}}}],["1024",{"_index":2955,"t":{"449":{"position":[[315,5]]},"453":{"position":[[175,4],[182,16]]}}}],["1025",{"_index":5256,"t":{"516":{"position":[[131639,4]]}}}],["1054",{"_index":1063,"t":{"168":{"position":[[65,11]]}}}],["107",{"_index":4455,"t":{"516":{"position":[[71178,4],[71228,4],[71278,4]]}}}],["10800",{"_index":4817,"t":{"516":{"position":[[97578,5]]}}}],["10=110，110",{"_index":3013,"t":{"451":{"position":[[880,18]]}}}],["10gi",{"_index":4110,"t":{"516":{"position":[[37650,6]]}}}],["10m",{"_index":3052,"t":{"455":{"position":[[1992,4]]},"493":{"position":[[314,4]]},"516":{"position":[[22446,3]]}}}],["10mi",{"_index":4111,"t":{"516":{"position":[[37719,6]]}}}],["10时就要使用花括号来取值，如${10",{"_index":2737,"t":{"367":{"position":[[79,47]]}}}],["10秒，最小1",{"_index":4226,"t":{"516":{"position":[[47854,19]]}}}],["10）content",{"_index":3380,"t":{"508":{"position":[[613,11]]}}}],["11",{"_index":368,"t":{"71":{"position":[[22,2]]},"186":{"position":[[859,2],[862,5]]},"422":{"position":[[157,5],[321,2]]},"516":{"position":[[55671,3],[88802,3],[88935,3],[89028,3],[98628,3]]},"541":{"position":[[167,3]]}}}],["111",{"_index":5223,"t":{"516":{"position":[[129545,4],[129605,4],[129727,4],[129805,4]]}}}],["1111",{"_index":3317,"t":{"504":{"position":[[1425,4],[2473,4]]}}}],["11211，使用了python",{"_index":2427,"t":{"269":{"position":[[1227,15]]}}}],["114m",{"_index":4417,"t":{"516":{"position":[[66924,4],[67039,4],[67116,4]]}}}],["118m",{"_index":4423,"t":{"516":{"position":[[67436,4],[67563,4],[67646,4]]}}}],["1195mi",{"_index":4583,"t":{"516":{"position":[[80487,6]]},"577":{"position":[[137,6]]}}}],["119m",{"_index":4425,"t":{"516":{"position":[[67777,4],[67816,4]]}}}],["11:14:14",{"_index":3913,"t":{"516":{"position":[[24179,8]]}}}],["11h",{"_index":4889,"t":{"516":{"position":[[103027,3]]}}}],["11m",{"_index":4626,"t":{"516":{"position":[[82947,3],[83399,3]]},"589":{"position":[[827,3],[1279,3]]}}}],["11）log",{"_index":3381,"t":{"508":{"position":[[677,7]]}}}],["12",{"_index":1364,"t":{"186":{"position":[[738,2]]},"188":{"position":[[1257,2],[2564,2],[5234,2]]},"516":{"position":[[89291,3],[89324,3],[89357,3],[90629,3]]}}}],["120",{"_index":3012,"t":{"451":{"position":[[876,3],[905,21],[954,15]]}}}],["121",{"_index":3309,"t":{"504":{"position":[[1209,3],[2258,3]]}}}],["121.42.11.34",{"_index":3063,"t":{"457":{"position":[[347,12],[372,12],[404,12],[437,12],[469,12],[501,12],[532,12]]},"487":{"position":[[4,12]]}}}],["121.42.11.34:1010",{"_index":3233,"t":{"487":{"position":[[462,18]]}}}],["121.42.11.34:1020",{"_index":3234,"t":{"487":{"position":[[488,18]]}}}],["121.42.11.34:8020",{"_index":3045,"t":{"455":{"position":[[1297,18],[1674,18],[2039,18]]}}}],["121.42.11.34:8030",{"_index":3046,"t":{"455":{"position":[[1323,18],[1700,18],[2065,18]]}}}],["121.42.11.34:8040",{"_index":3047,"t":{"455":{"position":[[1349,18],[1726,18],[2091,18]]}}}],["121.5.180.193",{"_index":3225,"t":{"487":{"position":[[249,13]]}}}],["1211mi",{"_index":4585,"t":{"516":{"position":[[80516,6]]},"577":{"position":[[166,6]]}}}],["123",{"_index":1411,"t":{"188":{"position":[[875,4]]},"328":{"position":[[339,3],[507,3],[575,3]]}}}],["123456",{"_index":4093,"t":{"516":{"position":[[35859,8],[36109,6],[119361,8],[120516,6]]},"642":{"position":[[179,6]]}}}],["123456789012312313134124512351145145114",{"_index":1278,"t":{"184":{"position":[[1663,41]]}}}],["1238041fb31a",{"_index":1274,"t":{"184":{"position":[[1590,13],[1750,13]]}}}],["127.0.0.1",{"_index":2426,"t":{"269":{"position":[[1210,11]]},"516":{"position":[[43804,9]]}}}],["127.0.0.1/books/?page=1&page_size=2",{"_index":1888,"t":{"225":{"position":[[1126,35]]}}}],["127.0.0.1:11211",{"_index":2429,"t":{"269":{"position":[[1357,18]]}}}],["127.0.0.1:8000/books/?btitl",{"_index":1862,"t":{"221":{"position":[[424,32]]}}}],["127.0.0.1:8000/books/?offset=3&limit=2",{"_index":1899,"t":{"225":{"position":[[1628,38]]}}}],["127.0.0.1:8000/books/?ord",{"_index":1869,"t":{"223":{"position":[[466,31]]}}}],["127.0.0.1:8081",{"_index":3038,"t":{"455":{"position":[[990,14]]}}}],["12h",{"_index":4886,"t":{"516":{"position":[[102824,3]]}}}],["13",{"_index":4804,"t":{"516":{"position":[[96102,3]]}}}],["13m",{"_index":4625,"t":{"516":{"position":[[82783,3],[82965,3],[82983,3],[83001,3],[83019,3]]},"589":{"position":[[663,3],[845,3],[863,3],[881,3],[899,3]]}}}],["14",{"_index":4580,"t":{"516":{"position":[[80454,3],[116564,3],[116605,3]]},"577":{"position":[[104,3]]},"630":{"position":[[113,3],[154,3]]}}}],["140m",{"_index":4427,"t":{"516":{"position":[[68102,4]]}}}],["145f1409f090",{"_index":3785,"t":{"516":{"position":[[16404,12]]},"526":{"position":[[1349,12]]}}}],["145m",{"_index":4429,"t":{"516":{"position":[[68474,4]]}}}],["145mi",{"_index":4591,"t":{"516":{"position":[[80694,5]]},"577":{"position":[[344,5]]}}}],["14:44:19",{"_index":4081,"t":{"516":{"position":[[35161,8]]}}}],["14:44:22",{"_index":4082,"t":{"516":{"position":[[35170,8]]}}}],["14:44:25",{"_index":4083,"t":{"516":{"position":[[35179,8]]}}}],["14m",{"_index":4533,"t":{"516":{"position":[[77828,3],[80690,3],[82824,3],[83037,3],[83055,3],[83073,3],[83091,3],[83109,3],[83127,3],[83145,3],[83163,3],[83181,3],[83199,3]]},"577":{"position":[[340,3]]},"589":{"position":[[704,3],[917,3],[935,3],[953,3],[971,3],[989,3],[1007,3],[1025,3],[1043,3],[1061,3],[1079,3]]}}}],["15",{"_index":3656,"t":{"516":{"position":[[9960,2],[10600,2],[41549,3],[49168,3],[49278,3],[70883,3],[115327,3],[115365,3],[115403,3]]},"520":{"position":[[550,2]]},"624":{"position":[[146,3],[184,3],[222,3]]}}}],["15)(my_view",{"_index":2471,"t":{"273":{"position":[[455,14]]}}}],["15)(myview.as_view",{"_index":2474,"t":{"273":{"position":[[598,21],[690,23]]}}}],["15,address",{"_index":3680,"t":{"516":{"position":[[10644,11]]}}}],["151",{"_index":3777,"t":{"516":{"position":[[16332,5]]},"526":{"position":[[1277,5]]}}}],["1582mi",{"_index":4581,"t":{"516":{"position":[[80458,6]]},"577":{"position":[[108,6]]}}}],["1592587800",{"_index":4719,"t":{"516":{"position":[[91510,10],[91671,10]]}}}],["1592587860",{"_index":4721,"t":{"516":{"position":[[91546,10],[91721,10]]}}}],["1592587920",{"_index":4723,"t":{"516":{"position":[[91582,10],[91769,10]]}}}],["15m",{"_index":4636,"t":{"516":{"position":[[83217,3]]},"589":{"position":[[1097,3]]}}}],["15即900秒。其他选填参数有cache：指定其他的缓存类型；key_prefix",{"_index":2468,"t":{"273":{"position":[[284,48]]}}}],["16",{"_index":2828,"t":{"427":{"position":[[489,10]]},"455":{"position":[[739,3]]},"516":{"position":[[54767,3],[109537,3]]},"532":{"position":[[167,3]]}}}],["16#5f",{"_index":2826,"t":{"427":{"position":[[472,10]]}}}],["16m",{"_index":4547,"t":{"516":{"position":[[78571,3]]}}}],["17",{"_index":3670,"t":{"516":{"position":[[10351,2],[14097,3]]},"522":{"position":[[551,3]]}}}],["172.168.22.11",{"_index":2979,"t":{"449":{"position":[[1087,14]]}}}],["172.168.33.44",{"_index":2982,"t":{"449":{"position":[[1127,15]]}}}],["172.19.26.240:11211",{"_index":2437,"t":{"269":{"position":[[1932,22]]}}}],["172.19.26.240:11211',5",{"_index":2440,"t":{"269":{"position":[[2048,26]]}}}],["172.19.26.242:11211',1",{"_index":2441,"t":{"269":{"position":[[2075,26]]}}}],["172.19.26.242:21423",{"_index":2438,"t":{"269":{"position":[[1955,22]]}}}],["172.19.26.244:11213",{"_index":2439,"t":{"269":{"position":[[1978,22]]}}}],["17m",{"_index":3897,"t":{"516":{"position":[[22600,3]]}}}],["17t15:02:31+08:00",{"_index":3674,"t":{"516":{"position":[[10406,17]]}}}],["18",{"_index":1475,"t":{"188":{"position":[[5237,4]]},"516":{"position":[[14035,3]]},"522":{"position":[[489,3]]}}}],["18.06.3.ce",{"_index":3541,"t":{"516":{"position":[[5689,10]]}}}],["19",{"_index":3014,"t":{"451":{"position":[[943,3]]},"516":{"position":[[8194,3],[23633,3],[23674,3],[23715,3],[84070,3]]},"589":{"position":[[1950,3]]}}}],["190",{"_index":3857,"t":{"516":{"position":[[19980,4]]},"526":{"position":[[4925,4]]}}}],["192.168.0.100:6443",{"_index":3600,"t":{"516":{"position":[[7870,18]]}}}],["192.168.100.33:8081",{"_index":3022,"t":{"455":{"position":[[103,19]]}}}],["192.168.12.111",{"_index":3322,"t":{"504":{"position":[[1562,14],[2610,14]]},"506":{"position":[[232,15]]}}}],["192.168.12.129",{"_index":3296,"t":{"504":{"position":[[807,14],[1235,14]]}}}],["192.168.12.129宕机后，vip自动从主机飘移到了从机192.168.12.130上，而此时客户端的请求就最终会来到130这台机器的nginx",{"_index":3361,"t":{"506":{"position":[[589,89]]}}}],["192.168.12.130",{"_index":3323,"t":{"504":{"position":[[1856,14],[2284,14]]},"506":{"position":[[555,33]]}}}],["192.168.5.0/24",{"_index":4978,"t":{"516":{"position":[[110190,35]]}}}],["192.168.5.0/24(rw,no_root_squash",{"_index":4980,"t":{"516":{"position":[[110304,33],[112934,33],[112983,33],[113032,33]]}}}],["192.168.5.3",{"_index":3470,"t":{"516":{"position":[[2992,11],[42351,11]]}}}],["192.168.5.4",{"_index":3473,"t":{"516":{"position":[[3042,11]]}}}],["192.168.5.5",{"_index":3475,"t":{"516":{"position":[[3092,11]]}}}],["192.168.5.6",{"_index":4985,"t":{"516":{"position":[[110933,11],[113305,11],[113503,11],[113701,11]]}}}],["192.168.90.100",{"_index":3483,"t":{"516":{"position":[[3366,14]]}}}],["192.168.90.106",{"_index":3484,"t":{"516":{"position":[[3388,14]]}}}],["192.168.90.107",{"_index":3486,"t":{"516":{"position":[[3409,14]]}}}],["192.168.90.14",{"_index":4161,"t":{"516":{"position":[[40600,13],[41784,13]]}}}],["192.168.90.15",{"_index":4163,"t":{"516":{"position":[[40741,13],[41863,13]]}}}],["1986",{"_index":1352,"t":{"186":{"position":[[339,5],[611,5],[2536,5],[3550,5]]}}}],["1987",{"_index":1367,"t":{"186":{"position":[[853,5]]}}}],["1988",{"_index":1371,"t":{"186":{"position":[[973,5]]}}}],["1995",{"_index":1363,"t":{"186":{"position":[[732,5]]}}}],["1998",{"_index":1427,"t":{"188":{"position":[[1251,5],[2558,5],[5004,5],[5228,5]]}}}],["19m",{"_index":4532,"t":{"516":{"position":[[77774,3]]}}}],["1:tag",{"_index":44,"t":{"21":{"position":[[322,8]]}}}],["1>file",{"_index":2589,"t":{"303":{"position":[[1068,17]]}}}],["1>log.txt",{"_index":2594,"t":{"303":{"position":[[1412,9]]}}}],["1gi",{"_index":5025,"t":{"516":{"position":[[113202,3],[113974,3],[114718,3],[114864,3],[115010,3],[115319,3],[115543,3],[116758,3],[116989,3]]},"620":{"position":[[114,3]]},"624":{"position":[[138,3]]},"626":{"position":[[120,3]]},"632":{"position":[[125,3]]},"634":{"position":[[127,3]]}}}],["1s",{"_index":3312,"t":{"504":{"position":[[1336,33],[2384,33],[3135,18]]},"516":{"position":[[73684,2],[73732,2],[74505,2]]}}}],["1st",{"_index":2005,"t":{"238":{"position":[[154,3]]}}}],["1xx",{"_index":1547,"t":{"193":{"position":[[1608,4]]}}}],["1、2、3",{"_index":2739,"t":{"369":{"position":[[328,8]]}}}],["1、可以带function",{"_index":2813,"t":{"418":{"position":[[69,13]]}}}],["1、由于kubernet",{"_index":3552,"t":{"516":{"position":[[6117,38]]}}}],["1个容器故障了，pod",{"_index":4055,"t":{"516":{"position":[[32352,29]]}}}],["1和>之间的空格。echo",{"_index":2592,"t":{"303":{"position":[[1235,15]]}}}],["1是前面括号(.*\\.jpg",{"_index":3101,"t":{"457":{"position":[[3345,21]]}}}],["1秒，最小1",{"_index":4225,"t":{"516":{"position":[[47812,16]]}}}],["1表示第一个参数，$2",{"_index":2818,"t":{"420":{"position":[[35,36]]}}}],["1）${a",{"_index":2901,"t":{"435":{"position":[[0,7]]}}}],["1）.data",{"_index":1512,"t":{"193":{"position":[[304,7],[1435,7]]}}}],["1）apiview",{"_index":1606,"t":{"197":{"position":[[13,10]]}}}],["1）listmodelmixin",{"_index":1657,"t":{"197":{"position":[[2347,17]]}}}],["1）post",{"_index":3364,"t":{"508":{"position":[[92,7]]}}}],["1）validate_<field_nam",{"_index":1436,"t":{"188":{"position":[[1683,24]]}}}],["1）单小括号，(cmd1;cmd2;cmd3",{"_index":2909,"t":{"437":{"position":[[7,24]]}}}],["1）安装workspac",{"_index":1030,"t":{"155":{"position":[[1153,14]]}}}],["1）用于序列化时，将模型类对象传入instanc",{"_index":1339,"t":{"184":{"position":[[3272,27]]}}}],["1）继续使用上个案例中目标pod",{"_index":4325,"t":{"516":{"position":[[59769,16]]},"562":{"position":[[355,16]]}}}],["1）首先创建一个参照pod，pod",{"_index":4309,"t":{"516":{"position":[[57441,17]]},"545":{"position":[[1157,17]]}}}],["1）首先要准备nfs的服务器，这里为了简单，直接是master节点做nf",{"_index":4973,"t":{"516":{"position":[[110043,40]]}}}],["1，这就是多余的空格导致的解析错误。也就是说，shell",{"_index":2593,"t":{"303":{"position":[[1342,28]]}}}],["2",{"_index":180,"t":{"34":{"position":[[975,20],[1655,9],[1684,14],[3330,11],[3772,11]]},"73":{"position":[[1101,2]]},"139":{"position":[[391,2]]},"155":{"position":[[261,3]]},"184":{"position":[[1604,2]]},"186":{"position":[[148,2],[305,2],[573,3],[2178,2],[2181,2],[2509,3],[3516,2]]},"190":{"position":[[1176,2]]},"193":{"position":[[1660,4]]},"252":{"position":[[4291,2]]},"254":{"position":[[789,3]]},"258":{"position":[[2373,2],[2457,3]]},"269":{"position":[[290,2]]},"271":{"position":[[427,6]]},"275":{"position":[[1500,2],[1575,2],[1619,2],[1681,2]]},"280":{"position":[[135,8]]},"303":{"position":[[472,1],[1105,8]]},"367":{"position":[[65,13]]},"369":{"position":[[67,2],[174,4],[350,1],[378,3],[595,1],[614,1],[633,1]]},"392":{"position":[[150,2]]},"415":{"position":[[260,4]]},"422":{"position":[[95,2],[228,1],[274,1],[343,1]]},"427":{"position":[[227,6]]},"429":{"position":[[461,8],[818,1],[862,1],[890,1],[986,1],[1016,1],[1043,1]]},"432":{"position":[[465,11],[2244,4]]},"437":{"position":[[91,9]]},"457":{"position":[[631,7]]},"516":{"position":[[2144,2],[3827,1],[4902,17],[10271,1],[10754,1],[15978,1],[35365,1],[37621,3],[38720,1],[40657,2],[40798,2],[44985,1],[46206,1],[51353,1],[56522,1],[58911,1],[67651,13],[68096,1],[68098,1],[68100,1],[68468,1],[68470,1],[68472,1],[76072,1],[76257,24],[77534,1],[77876,1],[77878,1],[77880,1],[83107,1],[86068,1],[86070,1],[86072,1],[86074,1],[86076,1],[87353,1],[87895,1],[90473,1],[91131,1],[121631,1],[125022,2],[125044,1],[125184,1],[125186,2],[126261,2]]},"526":{"position":[[923,1]]},"545":{"position":[[238,1]]},"555":{"position":[[198,1]]},"589":{"position":[[987,1]]}}}],["2.1",{"_index":3449,"t":{"516":{"position":[[2165,3]]},"518":{"position":[[0,3]]}}}],["2.1.1",{"_index":1222,"t":{"184":{"position":[[0,5]]}}}],["2.1.2",{"_index":1246,"t":{"184":{"position":[[983,6]]}}}],["2.1.3",{"_index":1334,"t":{"184":{"position":[[3144,6]]}}}],["2.2",{"_index":3456,"t":{"516":{"position":[[2501,3]]},"518":{"position":[[336,3]]}}}],["2.2.1",{"_index":1345,"t":{"186":{"position":[[51,5]]}}}],["2.2.2",{"_index":1375,"t":{"186":{"position":[[1055,5]]}}}],["2.2.3",{"_index":1402,"t":{"186":{"position":[[2603,5]]}}}],["2.2.4",{"_index":3284,"t":{"504":{"position":[[304,5]]}}}],["2.2.4.tar.gz",{"_index":3281,"t":{"504":{"position":[[171,12],[223,12]]}}}],["2.2.4/keepalived/etc/init.d/keepaliv",{"_index":3341,"t":{"504":{"position":[[3788,38]]}}}],["2.235",{"_index":432,"t":{"78":{"position":[[90,5]]}}}],["2.3",{"_index":3458,"t":{"516":{"position":[[2670,3]]}}}],["2.3.1",{"_index":166,"t":{"34":{"position":[[0,5]]},"188":{"position":[[0,6]]}}}],["2.3.2",{"_index":174,"t":{"34":{"position":[[527,5]]},"188":{"position":[[3594,6]]}}}],["2.3.3",{"_index":178,"t":{"34":{"position":[[803,5]]}}}],["2.3.4",{"_index":207,"t":{"34":{"position":[[1564,5]]}}}],["2.3.5",{"_index":212,"t":{"34":{"position":[[2069,5]]}}}],["2.3.6",{"_index":218,"t":{"34":{"position":[[2582,5]]}}}],["2.3.7",{"_index":227,"t":{"34":{"position":[[2783,5]]}}}],["2.3.8",{"_index":232,"t":{"34":{"position":[[3288,5]]}}}],["2.4",{"_index":3465,"t":{"516":{"position":[[2823,3]]}}}],["2.4.1",{"_index":1488,"t":{"190":{"position":[[161,6]]}}}],["2.4.2",{"_index":1499,"t":{"190":{"position":[[978,6]]}}}],["2.4.3",{"_index":1503,"t":{"190":{"position":[[1759,6]]}}}],["2.5",{"_index":3468,"t":{"516":{"position":[[2962,3]]}}}],["2.6",{"_index":3476,"t":{"516":{"position":[[3135,3]]}}}],["2.6.1",{"_index":3477,"t":{"516":{"position":[[3146,5]]}}}],["2.6.10",{"_index":3551,"t":{"516":{"position":[[6092,6]]}}}],["2.6.11",{"_index":3573,"t":{"516":{"position":[[6793,6],[7382,6]]}}}],["2.6.13",{"_index":3609,"t":{"516":{"position":[[8206,6]]}}}],["2.6.14",{"_index":3618,"t":{"516":{"position":[[8554,6]]}}}],["2.6.15",{"_index":3628,"t":{"516":{"position":[[8909,6]]}}}],["2.6.16",{"_index":3632,"t":{"516":{"position":[[9085,6]]}}}],["2.6.2",{"_index":3482,"t":{"516":{"position":[[3272,5]]}}}],["2.6.3",{"_index":3487,"t":{"516":{"position":[[3430,5]]}}}],["2.6.4",{"_index":3491,"t":{"516":{"position":[[3627,5]]}}}],["2.6.5",{"_index":3496,"t":{"516":{"position":[[3927,5]]}}}],["2.6.6",{"_index":3502,"t":{"516":{"position":[[4081,5]]}}}],["2.6.7",{"_index":3507,"t":{"516":{"position":[[4378,5]]}}}],["2.6.8",{"_index":3517,"t":{"516":{"position":[[4721,5]]}}}],["2.6.9",{"_index":3530,"t":{"516":{"position":[[5341,5]]}}}],["2.7",{"_index":3633,"t":{"516":{"position":[[9177,3]]}}}],["2.7.1",{"_index":3634,"t":{"516":{"position":[[9187,5]]}}}],["2.7.2",{"_index":3638,"t":{"516":{"position":[[9264,5]]}}}],["2.7.3",{"_index":3641,"t":{"516":{"position":[[9347,5]]}}}],["2.7.4",{"_index":3643,"t":{"516":{"position":[[9379,5]]}}}],["2/2",{"_index":4077,"t":{"516":{"position":[[34896,3],[108173,3],[109523,3],[111197,3]]}}}],["2/8",{"_index":4629,"t":{"516":{"position":[[83101,3]]},"589":{"position":[[981,3]]}}}],["20",{"_index":1122,"t":{"173":{"position":[[288,2]]},"175":{"position":[[1488,2]]},"177":{"position":[[1275,2]]},"186":{"position":[[757,4]]},"188":{"position":[[2596,3]]},"392":{"position":[[33,3]]},"394":{"position":[[63,3]]},"396":{"position":[[33,3],[144,2],[211,2]]},"398":{"position":[[37,3]]},"451":{"position":[[938,2]]},"504":{"position":[[1003,2],[1014,2],[2052,2],[2063,2]]},"516":{"position":[[38468,3],[44376,3],[44448,3],[44520,3],[130648,2]]}}}],["20/day",{"_index":1855,"t":{"217":{"position":[[567,8]]}}}],["200",{"_index":1536,"t":{"193":{"position":[[1277,10]]},"197":{"position":[[3896,11]]},"392":{"position":[[123,4]]},"479":{"position":[[106,3]]},"487":{"position":[[634,3],[1217,3]]},"516":{"position":[[108439,3]]}}}],["200和304的缓存文件的缓存时间是2",{"_index":3209,"t":{"479":{"position":[[121,28]]}}}],["200的请求，缓存时长为5",{"_index":3238,"t":{"487":{"position":[[644,20],[1227,20]]}}}],["200，序列化器校验数据失败时，返回400",{"_index":1700,"t":{"197":{"position":[[4498,28]]}}}],["2018",{"_index":3668,"t":{"516":{"position":[[10343,4],[10398,4]]}}}],["20200608163326496.png",{"_index":4574,"t":{"516":{"position":[[80119,22]]}}}],["20200608163326496](kubernetes.assets/imag",{"_index":4573,"t":{"516":{"position":[[80076,42]]}}}],["20200612010223537.png",{"_index":4652,"t":{"516":{"position":[[84831,22]]},"589":{"position":[[2711,22]]}}}],["2021",{"_index":3615,"t":{"516":{"position":[[8491,8],[16278,5],[18423,4],[18893,4],[24174,4]]},"526":{"position":[[1223,5],[3368,4],[3838,4]]}}}],["2048",{"_index":2971,"t":{"449":{"position":[[763,5]]},"516":{"position":[[125014,5]]}}}],["20480",{"_index":2999,"t":{"451":{"position":[[281,6]]}}}],["204，不存在返回404",{"_index":1722,"t":{"197":{"position":[[5381,17]]}}}],["20;done",{"_index":4712,"t":{"516":{"position":[[90495,9]]}}}],["20m",{"_index":4638,"t":{"516":{"position":[[83235,3],[83253,3],[83271,3]]},"589":{"position":[[1115,3],[1133,3],[1151,3]]}}}],["21",{"_index":3730,"t":{"516":{"position":[[12899,3],[13361,3],[20399,3],[62509,3],[84152,3],[88145,3],[88149,3]]},"526":{"position":[[5344,3]]},"589":{"position":[[2032,3]]}}}],["2147483648",{"_index":1496,"t":{"190":{"position":[[772,11],[870,11]]}}}],["2147483648到2147483647。在html中表现为numberinput或者textinput",{"_index":2088,"t":{"252":{"position":[[1820,56]]}}}],["21h",{"_index":3729,"t":{"516":{"position":[[12884,3],[12926,3],[12949,3],[12972,3]]}}}],["21m",{"_index":4546,"t":{"516":{"position":[[78517,3]]}}}],["22",{"_index":2612,"t":{"303":{"position":[[2156,2]]},"516":{"position":[[8161,3],[66382,3],[104824,3]]},"599":{"position":[[141,3]]}}}],["22%/3",{"_index":4618,"t":{"516":{"position":[[82554,6],[82598,6],[82641,6]]},"589":{"position":[[434,6],[478,6],[521,6]]}}}],["226rx",{"_index":4496,"t":{"516":{"position":[[74381,5],[74428,5],[74485,5]]}}}],["23",{"_index":4453,"t":{"516":{"position":[[71043,3],[90603,3]]}}}],["234",{"_index":3663,"t":{"516":{"position":[[10280,3]]}}}],["24",{"_index":1354,"t":{"186":{"position":[[348,4],[620,5],[741,5],[896,4],[2545,5],[3559,4]]},"516":{"position":[[86078,3],[91800,3]]}}}],["25",{"_index":3922,"t":{"516":{"position":[[24424,3],[24445,3],[33722,3],[33791,4],[33896,4],[33969,4],[73899,3],[73919,3]]}}}],["255",{"_index":2817,"t":{"418":{"position":[[176,3]]}}}],["255.255.255.0",{"_index":4176,"t":{"516":{"position":[[41806,13],[41885,13]]}}}],["26",{"_index":4063,"t":{"516":{"position":[[33589,3],[33664,3]]}}}],["27/jun/2021:15:08:54",{"_index":4951,"t":{"516":{"position":[[108393,21]]}}}],["28",{"_index":687,"t":{"110":{"position":[[1485,15],[1566,3]]},"516":{"position":[[91525,3],[91561,3],[91597,3]]}}}],["289m",{"_index":4579,"t":{"516":{"position":[[80449,4]]},"577":{"position":[[99,4]]}}}],["29",{"_index":4188,"t":{"516":{"position":[[43088,3],[88398,3]]}}}],["2:tag",{"_index":45,"t":{"21":{"position":[[331,8]]}}}],["2;done",{"_index":94,"t":{"25":{"position":[[215,7]]},"516":{"position":[[87375,8]]}}}],["2>&1",{"_index":404,"t":{"73":{"position":[[1010,4]]},"303":{"position":[[817,4],[873,4]]},"305":{"position":[[566,4]]}}}],["2d1h",{"_index":3806,"t":{"516":{"position":[[17403,4],[17459,4],[17502,4],[17555,4],[17617,4],[17676,4],[17735,4],[17783,4],[17831,4],[17884,4]]},"526":{"position":[[2348,4],[2404,4],[2447,4],[2500,4],[2562,4],[2621,4],[2680,4],[2728,4],[2776,4],[2829,4]]}}}],["2gb",{"_index":3461,"t":{"516":{"position":[[2744,8]]}}}],["2gi",{"_index":5002,"t":{"516":{"position":[[111879,3],[113400,3],[114018,3],[115357,3],[115594,3],[116796,3],[117040,3]]},"620":{"position":[[158,3]]},"624":{"position":[[176,3]]},"626":{"position":[[171,3]]},"632":{"position":[[163,3]]},"634":{"position":[[178,3]]}}}],["2m",{"_index":3208,"t":{"479":{"position":[[114,4]]},"516":{"position":[[71557,2]]}}}],["2m20",{"_index":4262,"t":{"516":{"position":[[52327,5]]}}}],["2m24",{"_index":4355,"t":{"516":{"position":[[62019,5],[62448,5],[91704,5]]}}}],["2m26",{"_index":4722,"t":{"516":{"position":[[91565,5]]}}}],["2m28",{"_index":5097,"t":{"516":{"position":[[120305,5]]},"640":{"position":[[113,5]]}}}],["2m35",{"_index":5242,"t":{"516":{"position":[[130262,5]]}}}],["2m38",{"_index":4468,"t":{"516":{"position":[[72221,5]]}}}],["2m42",{"_index":3911,"t":{"516":{"position":[[23830,5],[106147,5]]},"612":{"position":[[162,5]]}}}],["2m51",{"_index":3912,"t":{"516":{"position":[[24007,5]]}}}],["2m9",{"_index":4987,"t":{"516":{"position":[[111211,4]]}}}],["2s",{"_index":4079,"t":{"516":{"position":[[34909,2],[73780,2],[74707,2],[75111,2],[89199,2],[89229,2]]}}}],["2xwbj",{"_index":4576,"t":{"516":{"position":[[80298,5]]},"575":{"position":[[83,5]]}}}],["2xx",{"_index":1550,"t":{"193":{"position":[[1667,4]]}}}],["2}、${var:1",{"_index":2887,"t":{"432":{"position":[[2222,10]]}}}],["2、参数返回，可以显示加：return",{"_index":2815,"t":{"418":{"position":[[114,19]]}}}],["2、查看当前镜像源中支持的docker",{"_index":3535,"t":{"516":{"position":[[5491,21]]}}}],["2、编辑/etc/yum.repos.d/kubernetes.repo",{"_index":3553,"t":{"516":{"position":[[6158,44]]}}}],["2所示。此选项是为了禁止pipelin",{"_index":873,"t":{"137":{"position":[[513,30]]}}}],["2）$(cmd",{"_index":2902,"t":{"435":{"position":[[34,9]]}}}],["2）.query_param",{"_index":1518,"t":{"193":{"position":[[486,15]]}}}],["2）.status_cod",{"_index":1542,"t":{"193":{"position":[[1476,14]]}}}],["2）createmodelmixin",{"_index":1674,"t":{"197":{"position":[[3100,19]]}}}],["2）genericapiview",{"_index":1627,"t":{"197":{"position":[[787,17]]}}}],["2）genericviewset",{"_index":1766,"t":{"199":{"position":[[1003,16]]}}}],["2）limitoffsetpagin",{"_index":1889,"t":{"225":{"position":[[1162,23]]}}}],["2）listapiview",{"_index":1733,"t":{"197":{"position":[[5765,14]]}}}],["2）server",{"_index":3365,"t":{"508":{"position":[[139,9]]}}}],["2）userratethrottl",{"_index":1844,"t":{"217":{"position":[[81,18]]}}}],["2）valid",{"_index":1443,"t":{"188":{"position":[[2173,11]]}}}],["2）创建pod",{"_index":4314,"t":{"516":{"position":[[57936,7],[60042,7]]},"549":{"position":[[141,7]]},"562":{"position":[[628,7]]}}}],["2）创建访问账户，获取token",{"_index":5233,"t":{"516":{"position":[[129810,16]]}}}],["2）在pipeline的post",{"_index":1032,"t":{"155":{"position":[[1221,26]]}}}],["2）执行creat",{"_index":3750,"t":{"516":{"position":[[13794,18]]},"522":{"position":[[248,18]]}}}],["2）接下来，要在的每个node节点上都安装下nfs，这样的目的是为了node节点可以驱动nf",{"_index":4981,"t":{"516":{"position":[[110384,49]]}}}],["2）用于反序列化时，将要被反序列化的数据传入data",{"_index":1340,"t":{"184":{"position":[[3300,28]]}}}],["2）默认序列化器必须传递所有required为true的字段，否则会抛出验证异常。但是我们可以使用parti",{"_index":1480,"t":{"188":{"position":[[5494,84]]}}}],["3",{"_index":589,"t":{"99":{"position":[[0,17]]},"186":{"position":[[250,9],[694,3],[2371,14]]},"190":{"position":[[1320,2]]},"193":{"position":[[1848,5]]},"197":{"position":[[3807,2]]},"244":{"position":[[277,4]]},"252":{"position":[[4706,2]]},"258":{"position":[[2376,2],[2620,2]]},"271":{"position":[[472,2]]},"275":{"position":[[1522,2],[1583,2],[1627,3],[1689,2]]},"369":{"position":[[352,13],[382,13],[597,1],[616,1],[635,1]]},"422":{"position":[[230,1],[345,1]]},"432":{"position":[[1087,12]]},"457":{"position":[[1272,6]]},"504":{"position":[[961,9],[980,1],[2010,9],[2029,1]]},"516":{"position":[[5113,11],[9401,2],[10286,1],[10788,1],[16088,1],[23826,1],[23828,1],[24003,1],[24005,1],[24292,1],[24304,1],[24316,1],[24326,1],[24976,1],[25197,1],[34463,2],[34648,2],[34657,14],[35423,1],[48431,1],[52596,1],[54978,1],[55093,1],[56579,1],[65250,1],[65933,1],[66376,1],[66378,1],[66380,1],[69698,1],[69729,1],[70436,1],[70879,1],[70881,1],[71037,1],[71039,1],[71041,1],[76133,1],[77768,1],[77770,1],[77772,1],[80513,2],[81911,1],[83125,1],[85117,1],[87351,1],[87893,1],[88531,1],[89966,21],[90471,1],[91129,1],[94604,1],[103196,1],[103464,1],[125322,2],[130260,1]]},"526":{"position":[[1033,1]]},"535":{"position":[[161,1],[276,1]]},"545":{"position":[[295,1]]},"577":{"position":[[163,2]]},"585":{"position":[[536,1]]},"589":{"position":[[1005,1]]}}}],["3.0",{"_index":3900,"t":{"516":{"position":[[22903,5]]}}}],["3.1",{"_index":908,"t":{"139":{"position":[[808,5]]},"516":{"position":[[9410,3]]},"520":{"position":[[0,3]]}}}],["3.1.1",{"_index":1507,"t":{"193":{"position":[[0,6]]}}}],["3.1.2",{"_index":1520,"t":{"193":{"position":[[561,6]]}}}],["3.1.3",{"_index":1545,"t":{"193":{"position":[[1526,6]]}}}],["3.14",{"_index":3665,"t":{"516":{"position":[[10296,4]]}}}],["3.2",{"_index":3650,"t":{"516":{"position":[[9800,3]]},"520":{"position":[[390,3]]}}}],["3.3",{"_index":3683,"t":{"516":{"position":[[10873,3]]}}}],["3.3.1",{"_index":1605,"t":{"197":{"position":[[0,6]]},"516":{"position":[[11234,5]]}}}],["3.3.10",{"_index":238,"t":{"34":{"position":[[4090,6]]}}}],["3.3.11",{"_index":242,"t":{"34":{"position":[[4354,6]]}}}],["3.3.12",{"_index":259,"t":{"34":{"position":[[5054,6]]}}}],["3.3.13",{"_index":260,"t":{"34":{"position":[[5253,6]]}}}],["3.3.2",{"_index":1655,"t":{"197":{"position":[[2178,6]]},"516":{"position":[[13531,5]]}}}],["3.3.3",{"_index":1730,"t":{"197":{"position":[[5682,6]]},"516":{"position":[[14302,5]]}}}],["3.3.9",{"_index":237,"t":{"34":{"position":[[3736,5]]}}}],["3.4.1",{"_index":1762,"t":{"199":{"position":[[800,6]]}}}],["3.4.2",{"_index":1779,"t":{"199":{"position":[[2022,6]]}}}],["3.4.3",{"_index":1791,"t":{"199":{"position":[[3054,6]]}}}],["3.4.4",{"_index":1796,"t":{"199":{"position":[[3244,6]]}}}],["3.8",{"_index":2551,"t":{"277":{"position":[[738,3]]}}}],["3.8/libpython3.8.a",{"_index":2553,"t":{"277":{"position":[[856,18]]}}}],["3.el7",{"_index":3542,"t":{"516":{"position":[[5700,5]]}}}],["3/3",{"_index":3910,"t":{"516":{"position":[[23822,3],[23999,3],[24792,4],[70875,3]]}}}],["3/8",{"_index":4630,"t":{"516":{"position":[[83119,3]]},"589":{"position":[[999,3]]}}}],["30",{"_index":2527,"t":{"275":{"position":[[1121,3],[1174,2]]},"311":{"position":[[281,2],[299,5]]},"392":{"position":[[69,3]]},"455":{"position":[[1114,4]]},"504":{"position":[[753,2],[1802,2]]},"516":{"position":[[48300,2],[48305,12],[60824,3],[69894,3],[69943,3],[84111,3],[86831,2],[90154,2],[99312,2],[99374,2],[99436,2],[100938,2],[100980,2],[101028,2],[101067,2]]},"567":{"position":[[169,3]]},"589":{"position":[[1991,3]]}}}],["300",{"_index":2411,"t":{"269":{"position":[[201,6],[217,10],[256,4]]},"271":{"position":[[88,3],[329,3]]},"516":{"position":[[19360,4],[19410,4]]},"526":{"position":[[4305,4],[4355,4]]}}}],["30002",{"_index":4838,"t":{"516":{"position":[[99838,5]]}}}],["30009",{"_index":5216,"t":{"516":{"position":[[129233,5]]}}}],["301",{"_index":3105,"t":{"457":{"position":[[3505,11]]}}}],["3017",{"_index":4780,"t":{"516":{"position":[[94141,4]]},"591":{"position":[[2219,4]]}}}],["302",{"_index":3094,"t":{"457":{"position":[[3132,3],[3483,11]]}}}],["304",{"_index":3207,"t":{"479":{"position":[[110,3]]}}}],["30j",{"_index":2640,"t":{"311":{"position":[[291,5]]}}}],["31",{"_index":4210,"t":{"516":{"position":[[45548,3],[73060,3],[73109,3],[73158,3],[88201,3],[90616,3]]}}}],["31122",{"_index":4782,"t":{"516":{"position":[[94193,5]]},"591":{"position":[[2271,5]]}}}],["31m",{"_index":4491,"t":{"516":{"position":[[74212,3],[74259,3],[74306,3],[74353,3]]}}}],["32",{"_index":2696,"t":{"344":{"position":[[47,40]]},"455":{"position":[[1069,3]]},"516":{"position":[[33527,3]]}}}],["32767",{"_index":4840,"t":{"516":{"position":[[99874,7]]}}}],["32768到32767",{"_index":2105,"t":{"252":{"position":[[2570,12]]}}}],["33",{"_index":4646,"t":{"516":{"position":[[84234,3],[88431,3]]},"589":{"position":[[2114,3]]}}}],["34",{"_index":2820,"t":{"422":{"position":[[244,2],[297,2],[359,2]]}}}],["34m",{"_index":4497,"t":{"516":{"position":[[74555,3],[74757,3],[74959,3],[75161,3]]}}}],["35",{"_index":4121,"t":{"516":{"position":[[38587,3],[49181,4],[62919,3],[62978,3],[81685,3]]},"585":{"position":[[310,3]]}}}],["36",{"_index":1355,"t":{"186":{"position":[[362,3],[636,4],[2561,4],[3573,3]]},"516":{"position":[[47189,4]]}}}],["3600",{"_index":2487,"t":{"273":{"position":[[1498,4]]}}}],["365",{"_index":4915,"t":{"516":{"position":[[105300,3]]},"606":{"position":[[39,3]]}}}],["3650",{"_index":5168,"t":{"516":{"position":[[125315,4]]}}}],["37",{"_index":4550,"t":{"516":{"position":[[78773,3],[78924,3],[86255,3],[86310,3]]}}}],["37m",{"_index":4524,"t":{"516":{"position":[[76879,3]]}}}],["39",{"_index":4115,"t":{"516":{"position":[[38032,3]]}}}],["39.156.66.14",{"_index":4856,"t":{"516":{"position":[[101075,12]]}}}],["39.156.66.18",{"_index":4855,"t":{"516":{"position":[[101036,12]]}}}],["3;done",{"_index":4684,"t":{"516":{"position":[[87917,8],[91153,8]]}}}],["3],ex4}.sh",{"_index":2857,"t":{"432":{"position":[[297,10]]}}}],["3gi",{"_index":5028,"t":{"516":{"position":[[113598,3],[114062,3],[115395,3],[115645,3],[116834,3],[117091,3]]},"620":{"position":[[202,3]]},"624":{"position":[[214,3]]},"626":{"position":[[222,3]]},"632":{"position":[[201,3]]},"634":{"position":[[229,3]]}}}],["3h37m",{"_index":5051,"t":{"516":{"position":[[115573,5],[115624,5],[115675,5]]},"626":{"position":[[150,5],[201,5],[252,5]]}}}],["3m",{"_index":4587,"t":{"516":{"position":[[80639,2],[80671,2]]},"577":{"position":[[289,2],[321,2]]}}}],["3m16",{"_index":4535,"t":{"516":{"position":[[77882,5]]}}}],["3m17",{"_index":4222,"t":{"516":{"position":[[47472,5]]}}}],["3m19",{"_index":4208,"t":{"516":{"position":[[44987,5],[46208,5]]}}}],["3m26",{"_index":4720,"t":{"516":{"position":[[91529,5]]}}}],["3m29",{"_index":4326,"t":{"516":{"position":[[59940,5]]},"562":{"position":[[526,5]]}}}],["3m31",{"_index":4544,"t":{"516":{"position":[[78183,5],[78234,5]]}}}],["3m36",{"_index":3853,"t":{"516":{"position":[[19663,5],[19740,5],[19800,5]]},"526":{"position":[[4608,5],[4685,5],[4745,5]]}}}],["3m51",{"_index":3949,"t":{"516":{"position":[[26064,5]]}}}],["3s",{"_index":4380,"t":{"516":{"position":[[63788,2],[63953,2],[89259,2]]},"569":{"position":[[133,2]]},"571":{"position":[[133,2]]}}}],["3xx",{"_index":1559,"t":{"193":{"position":[[1856,4]]}}}],["3|模式4|模式5",{"_index":2809,"t":{"415":{"position":[[299,12]]}}}],["3}或${var",{"_index":2888,"t":{"432":{"position":[[2233,10]]}}}],["3、安装kubeadm、kubelet和kubectl",{"_index":3563,"t":{"516":{"position":[[6476,27]]}}}],["3、安装特定版本的docker",{"_index":3538,"t":{"516":{"position":[[5568,15]]}}}],["3。最小值是1",{"_index":4227,"t":{"516":{"position":[[47902,27]]}}}],["3个pod",{"_index":4349,"t":{"516":{"position":[[61690,8]]}}}],["3）$((express",{"_index":2905,"t":{"435":{"position":[[106,18]]}}}],["3）'int",{"_index":1277,"t":{"184":{"position":[[1650,7]]}}}],["3）.content",{"_index":1543,"t":{"193":{"position":[[1498,10]]}}}],["3）find",{"_index":3366,"t":{"508":{"position":[[173,7]]}}}],["3）modelviewset",{"_index":1775,"t":{"199":{"position":[[1816,14]]}}}],["3）retrieveapiview",{"_index":1735,"t":{"197":{"position":[[5824,18]]}}}],["3）scopedratethrottl",{"_index":1846,"t":{"217":{"position":[[161,20]]}}}],["3）valid",{"_index":1453,"t":{"188":{"position":[[2737,13]]}}}],["3）执行get",{"_index":3753,"t":{"516":{"position":[[13936,15]]},"522":{"position":[[390,15]]}}}],["3）接下来，就可以编写pod的配置文件了，创建volum",{"_index":4983,"t":{"516":{"position":[[110506,29]]}}}],["3）通过浏览器访问dashboard的ui",{"_index":5257,"t":{"516":{"position":[[131650,21]]}}}],["3）除了instance和data参数外，在构造serializer对象时，还可通过context",{"_index":1341,"t":{"184":{"position":[[3329,59]]}}}],["4",{"_index":1366,"t":{"186":{"position":[[815,3]]},"190":{"position":[[1503,2]]},"193":{"position":[[2035,7]]},"240":{"position":[[641,8]]},"252":{"position":[[5296,2]]},"376":{"position":[[34,1]]},"422":{"position":[[232,1],[347,1]]},"432":{"position":[[2013,10]]},"451":{"position":[[516,2]]},"516":{"position":[[5189,8],[5711,10],[10303,1],[15046,2],[16472,1],[32482,1],[35491,1],[56643,1],[67293,26],[71934,3],[75503,1],[75505,1],[75507,1],[76573,1],[76575,1],[76839,1],[76841,1],[76843,1],[77543,1],[78619,1],[78621,1],[78623,1],[80484,2],[82610,1],[83015,1],[83033,1],[83051,1],[83069,1],[83143,1],[87349,1],[87891,1],[90469,1],[91127,1],[112619,20]]},"526":{"position":[[1417,1]]},"545":{"position":[[359,1]]},"577":{"position":[[134,2]]},"589":{"position":[[490,1],[895,1],[913,1],[931,1],[949,1],[1023,1]]}}}],["4);do",{"_index":2840,"t":{"429":{"position":[[1065,5]]}}}],["4.1",{"_index":3763,"t":{"516":{"position":[[15101,3]]},"526":{"position":[[46,3]]}}}],["4.1.1",{"_index":3771,"t":{"516":{"position":[[15796,5]]},"526":{"position":[[741,5]]}}}],["4.1.2",{"_index":3794,"t":{"516":{"position":[[16769,5]]},"526":{"position":[[1714,5]]}}}],["4.1.3",{"_index":3795,"t":{"516":{"position":[[16854,5]]},"526":{"position":[[1799,5]]}}}],["4.1.4",{"_index":3796,"t":{"516":{"position":[[16941,5]]},"526":{"position":[[1886,5]]}}}],["4.2",{"_index":3799,"t":{"516":{"position":[[17115,3]]},"526":{"position":[[2060,3]]}}}],["4.2.1",{"_index":2560,"t":{"289":{"position":[[0,5]]},"516":{"position":[[17889,5]]},"526":{"position":[[2834,5]]}}}],["4.2.2",{"_index":2566,"t":{"289":{"position":[[257,5]]},"516":{"position":[[18149,5]]},"526":{"position":[[3094,5]]}}}],["4.2.3",{"_index":3854,"t":{"516":{"position":[[19845,5]]},"526":{"position":[[4790,5]]}}}],["4.2.4",{"_index":3864,"t":{"516":{"position":[[20182,5]]},"526":{"position":[[5127,5]]}}}],["4.2.5",{"_index":3874,"t":{"516":{"position":[[20808,5]]},"526":{"position":[[5753,5]]}}}],["4.3",{"_index":3878,"t":{"516":{"position":[[21107,3]]},"526":{"position":[[6052,3]]}}}],["4.3.1",{"_index":3892,"t":{"516":{"position":[[22092,5]]}}}],["4.3.2",{"_index":3899,"t":{"516":{"position":[[22812,5]]}}}],["4.4",{"_index":3901,"t":{"516":{"position":[[23077,3]]}}}],["4.4.1",{"_index":3904,"t":{"516":{"position":[[23261,5]]}}}],["4.4.2",{"_index":3932,"t":{"516":{"position":[[25067,5]]}}}],["4.5",{"_index":3935,"t":{"516":{"position":[[25463,3]]}}}],["4.5.1",{"_index":3940,"t":{"516":{"position":[[25712,5]]}}}],["4.5.2",{"_index":3955,"t":{"516":{"position":[[26326,5]]}}}],["4.5.3",{"_index":3966,"t":{"516":{"position":[[26902,5]]}}}],["4.5.4",{"_index":3967,"t":{"516":{"position":[[27004,5]]}}}],["4/4",{"_index":4518,"t":{"516":{"position":[[76569,3]]}}}],["4/8",{"_index":4631,"t":{"516":{"position":[[83137,3]]},"589":{"position":[[1017,3]]}}}],["40",{"_index":1356,"t":{"186":{"position":[[378,3],[654,4],[2579,4],[3589,3]]},"516":{"position":[[44626,4],[56429,3],[80494,3]]},"545":{"position":[[145,3]]},"577":{"position":[[144,3]]}}}],["400",{"_index":1431,"t":{"188":{"position":[[1539,3],[1569,3]]},"197":{"position":[[3188,27]]},"449":{"position":[[1226,3]]}}}],["401",{"_index":1806,"t":{"201":{"position":[[492,3]]}}}],["403",{"_index":1808,"t":{"201":{"position":[[513,3]]}}}],["404",{"_index":1644,"t":{"197":{"position":[[1693,22],[3908,8]]},"247":{"position":[[74,19]]},"449":{"position":[[1230,3]]},"457":{"position":[[3035,4],[3072,3]]},"516":{"position":[[47158,3],[47268,27],[49259,3]]}}}],["405",{"_index":514,"t":{"88":{"position":[[522,3]]}}}],["41",{"_index":2676,"t":{"328":{"position":[[489,4],[679,3]]},"516":{"position":[[73211,3],[73264,3],[73317,3],[80523,3]]},"577":{"position":[[173,3]]}}}],["417e",{"_index":2009,"t":{"238":{"position":[[247,4]]}}}],["43",{"_index":3815,"t":{"516":{"position":[[18268,3]]},"526":{"position":[[3213,3]]}}}],["43d4",{"_index":3783,"t":{"516":{"position":[[16394,4]]},"526":{"position":[[1339,4]]}}}],["443",{"_index":3248,"t":{"493":{"position":[[81,3],[124,3]]},"516":{"position":[[106143,3],[129202,3]]},"612":{"position":[[158,3]]}}}],["443:30009/tcp",{"_index":5232,"t":{"516":{"position":[[129791,13]]}}}],["4567",{"_index":2670,"t":{"328":{"position":[[343,4],[511,4],[604,4]]}}}],["45h",{"_index":3768,"t":{"516":{"position":[[15575,3],[15639,3],[15686,3],[15738,3],[15899,3],[15926,3],[15949,3],[15972,3],[16082,3]]},"526":{"position":[[520,3],[584,3],[631,3],[683,3],[844,3],[871,3],[894,3],[917,3],[1027,3]]}}}],["47",{"_index":4259,"t":{"516":{"position":[[51852,3],[81505,3],[81581,3],[84193,3]]},"585":{"position":[[130,3],[206,3]]},"589":{"position":[[2073,3]]}}}],["47r25",{"_index":3809,"t":{"516":{"position":[[17656,5]]},"526":{"position":[[2601,5]]}}}],["48",{"_index":4166,"t":{"516":{"position":[[41204,3],[41296,3],[41359,3],[84275,3],[104184,3],[104233,3]]},"589":{"position":[[2155,3]]},"595":{"position":[[133,3],[182,3]]}}}],["49",{"_index":4165,"t":{"516":{"position":[[41115,3]]}}}],["4`;do",{"_index":2842,"t":{"429":{"position":[[1100,5]]}}}],["4d10",{"_index":5247,"t":{"516":{"position":[[130562,4]]}}}],["4d1h",{"_index":5189,"t":{"516":{"position":[[127178,4],[127231,4],[127284,4]]}}}],["4m11",{"_index":3852,"t":{"516":{"position":[[19599,5],[82481,5]]},"526":{"position":[[4544,5]]},"589":{"position":[[361,5]]}}}],["4m17",{"_index":4424,"t":{"516":{"position":[[67479,5],[67523,5],[67606,5]]}}}],["4m19",{"_index":4461,"t":{"516":{"position":[[71691,5],[71840,5],[71891,5]]}}}],["4qpbp",{"_index":4885,"t":{"516":{"position":[[102804,5]]}}}],["4s",{"_index":4313,"t":{"516":{"position":[[57933,2]]},"549":{"position":[[138,2]]}}}],["4xx",{"_index":1568,"t":{"193":{"position":[[2045,4]]}}}],["4、配置kubelet的cgroup",{"_index":3566,"t":{"516":{"position":[[6610,18]]}}}],["4个物理核心，4个worker",{"_index":3009,"t":{"451":{"position":[[665,18]]}}}],["4或者for",{"_index":2832,"t":{"427":{"position":[[670,6]]}}}],["4）'urn",{"_index":1279,"t":{"184":{"position":[[1705,7]]}}}],["4）destoryapiview",{"_index":1737,"t":{"197":{"position":[[5892,17]]}}}],["4）readonlymodelviewset",{"_index":1777,"t":{"199":{"position":[[1941,22]]}}}],["4）rewrit",{"_index":3368,"t":{"508":{"position":[[224,10]]}}}],["4）updatemodelmixin",{"_index":1697,"t":{"197":{"position":[[4356,19]]}}}],["4）如果要被序列化的是包含多条数据的查询集queryset，可以通过添加many=tru",{"_index":1357,"t":{"186":{"position":[[397,51]]}}}],["4）执行delet",{"_index":3754,"t":{"516":{"position":[[14117,18]]},"522":{"position":[[571,18]]}}}],["4）最后，运行下pod",{"_index":4986,"t":{"516":{"position":[[110984,16]]}}}],["5",{"_index":1370,"t":{"186":{"position":[[936,3]]},"193":{"position":[[2735,7]]},"252":{"position":[[6239,2]]},"271":{"position":[[92,3]]},"273":{"position":[[838,1]]},"422":{"position":[[234,1],[349,1]]},"427":{"position":[[734,1]]},"429":{"position":[[959,1]]},"516":{"position":[[5264,15],[10332,1],[27464,2],[47470,1],[48334,1],[71296,9],[71553,1],[71555,1],[83161,1],[87347,1],[87889,1],[90467,1],[91125,1],[97364,2],[97738,2],[119822,1]]},"589":{"position":[[1041,1]]}}}],["5.0.3.tar.gz",{"_index":195,"t":{"34":{"position":[[1264,13]]}}}],["5.1",{"_index":3971,"t":{"516":{"position":[[27474,3]]},"528":{"position":[[0,3]]}}}],["5.1.1",{"_index":3972,"t":{"516":{"position":[[27485,5]]},"528":{"position":[[11,5]]}}}],["5.1.2",{"_index":3977,"t":{"516":{"position":[[27699,5]]}}}],["5.2",{"_index":4043,"t":{"516":{"position":[[31422,3]]}}}],["5.2.1",{"_index":4046,"t":{"516":{"position":[[31867,5]]}}}],["5.2.2",{"_index":4056,"t":{"516":{"position":[[32601,5]]}}}],["5.2.3",{"_index":4070,"t":{"516":{"position":[[34015,5]]}}}],["5.2.4",{"_index":4089,"t":{"516":{"position":[[35550,5]]}}}],["5.2.5",{"_index":4095,"t":{"516":{"position":[[36156,5]]}}}],["5.2.6",{"_index":4105,"t":{"516":{"position":[[37159,5]]}}}],["5.3",{"_index":4128,"t":{"516":{"position":[[38749,3]]}}}],["5.3.1",{"_index":4140,"t":{"516":{"position":[[39231,5]]}}}],["5.3.2",{"_index":4155,"t":{"516":{"position":[[39915,5]]}}}],["5.3.3",{"_index":4178,"t":{"516":{"position":[[41902,5]]}}}],["5.3.4",{"_index":4190,"t":{"516":{"position":[[43171,5]]}}}],["5.3.5",{"_index":4229,"t":{"516":{"position":[[48348,5]]}}}],["5.4",{"_index":4236,"t":{"516":{"position":[[49502,3]]}}}],["5.4.1",{"_index":4241,"t":{"516":{"position":[[49817,5]]}}}],["5.4.2",{"_index":4263,"t":{"516":{"position":[[52634,5]]}}}],["5.4.3",{"_index":4334,"t":{"516":{"position":[[60855,5]]},"567":{"position":[[200,5]]}}}],["5/5",{"_index":4460,"t":{"516":{"position":[[71549,3]]}}}],["5/8",{"_index":4632,"t":{"516":{"position":[[83155,3]]},"589":{"position":[[1035,3]]}}}],["50",{"_index":38,"t":{"21":{"position":[[141,2]]},"58":{"position":[[398,5]]},"344":{"position":[[606,2]]},"455":{"position":[[1092,3]]},"516":{"position":[[44389,4],[44461,4]]}}}],["500",{"_index":2449,"t":{"269":{"position":[[2455,4]]},"449":{"position":[[1173,3]]}}}],["5003",{"_index":4781,"t":{"516":{"position":[[94170,4]]},"591":{"position":[[2248,4]]}}}],["500m",{"_index":1104,"t":{"170":{"position":[[1033,5]]}}}],["502",{"_index":2984,"t":{"449":{"position":[[1177,3]]}}}],["503",{"_index":2985,"t":{"449":{"position":[[1181,3]]}}}],["504",{"_index":2986,"t":{"449":{"position":[[1185,3]]}}}],["50m",{"_index":3002,"t":{"451":{"position":[[392,4]]}}}],["50x",{"_index":2988,"t":{"449":{"position":[[1202,12]]}}}],["50x.html",{"_index":2987,"t":{"449":{"position":[[1189,10]]}}}],["50个请求，发现有一些请求会响应504",{"_index":2702,"t":{"344":{"position":[[314,23]]}}}],["52",{"_index":4169,"t":{"516":{"position":[[41586,3]]}}}],["53",{"_index":4170,"t":{"516":{"position":[[41623,3]]}}}],["54",{"_index":4413,"t":{"516":{"position":[[66590,3],[66628,3],[66666,3],[80465,3]]},"577":{"position":[[115,3]]}}}],["544694789",{"_index":4361,"t":{"516":{"position":[[62479,9],[62948,9]]}}}],["56",{"_index":4220,"t":{"516":{"position":[[47080,4],[50488,3]]}}}],["56484d4c5",{"_index":5225,"t":{"516":{"position":[[129575,9]]}}}],["574h4",{"_index":4354,"t":{"516":{"position":[[61999,5],[62428,5]]}}}],["58",{"_index":1368,"t":{"186":{"position":[[878,4]]}}}],["59",{"_index":4713,"t":{"516":{"position":[[90589,3]]}}}],["5ce0e9a5",{"_index":1270,"t":{"184":{"position":[[1564,10]]}}}],["5ce0e9a55ffa654bcee01238041fb31a",{"_index":1276,"t":{"184":{"position":[[1615,34]]}}}],["5d89bdfbf9",{"_index":4479,"t":{"516":{"position":[[73029,10],[73078,10],[73127,10],[73176,10],[73229,10],[73282,10],[77757,10],[77999,10],[78050,10],[78101,10],[78500,10]]}}}],["5ff7956ff6",{"_index":3850,"t":{"516":{"position":[[19558,10],[23602,10],[23643,10],[23684,10],[24781,10],[24962,10]]},"526":{"position":[[4503,10]]}}}],["5ffa",{"_index":1271,"t":{"184":{"position":[[1575,4],[1735,4]]}}}],["5gi",{"_index":5037,"t":{"516":{"position":[[114350,3]]},"620":{"position":[[490,3]]}}}],["5h11m",{"_index":5062,"t":{"516":{"position":[[117019,5],[117070,5],[117121,5]]},"634":{"position":[[157,5],[208,5],[259,5]]}}}],["5m",{"_index":3237,"t":{"487":{"position":[[638,3],[1221,3]]}}}],["5m11",{"_index":4548,"t":{"516":{"position":[[78625,5]]}}}],["5m19",{"_index":4617,"t":{"516":{"position":[[82524,5]]},"589":{"position":[[404,5]]}}}],["5m23",{"_index":4467,"t":{"516":{"position":[[72170,5],[72272,5],[72323,5]]}}}],["5m27",{"_index":4551,"t":{"516":{"position":[[78822,5],[78873,5]]}}}],["5m37",{"_index":4505,"t":{"516":{"position":[[75472,5]]}}}],["5m43",{"_index":3931,"t":{"516":{"position":[[24907,5]]}}}],["5min42",{"_index":4235,"t":{"516":{"position":[[49494,7]]}}}],["5s",{"_index":2462,"t":{"273":{"position":[[76,5]]},"451":{"position":[[1071,3]]},"516":{"position":[[48338,9],[88710,2],[88740,2],[88770,2]]}}}],["5vg2j",{"_index":4699,"t":{"516":{"position":[[89039,5],[89109,5],[89139,5],[89239,5],[89335,5]]}}}],["5xx",{"_index":1594,"t":{"193":{"position":[[2745,4]]}}}],["5、启动dokcer",{"_index":3550,"t":{"516":{"position":[[5998,10]]}}}],["5、设置kubelet",{"_index":3572,"t":{"516":{"position":[[6735,15]]}}}],["5表示5s钟，name是唯一key",{"_index":2479,"t":{"273":{"position":[[807,18]]}}}],["5）destroymodelmixin",{"_index":1720,"t":{"197":{"position":[[5295,20]]}}}],["5）post",{"_index":3370,"t":{"508":{"position":[[290,7]]}}}],["5）updateapiview",{"_index":1740,"t":{"197":{"position":[[5960,16]]}}}],["6",{"_index":1397,"t":{"186":{"position":[[2116,2],[2301,2],[2427,2]]},"422":{"position":[[236,1],[351,1]]},"427":{"position":[[543,5]]},"432":{"position":[[2608,2],[2648,3]]},"516":{"position":[[10387,1],[64262,2],[66703,3],[83179,1],[86885,1],[87345,1],[87887,1],[88491,1],[90171,1],[90465,1],[90643,2],[91123,1],[119804,1]]},"571":{"position":[[442,2]]},"589":{"position":[[1059,1]]}}}],["6%/3",{"_index":4622,"t":{"516":{"position":[[82685,5]]},"589":{"position":[[565,5]]}}}],["6,8",{"_index":1406,"t":{"186":{"position":[[3624,5]]}}}],["6.1",{"_index":4386,"t":{"516":{"position":[[64279,3]]},"571":{"position":[[459,3]]}}}],["6.2",{"_index":4400,"t":{"516":{"position":[[64971,3]]}}}],["6.3",{"_index":4438,"t":{"516":{"position":[[69271,3]]}}}],["6.3.1",{"_index":4447,"t":{"516":{"position":[[70291,5]]}}}],["6.3.2",{"_index":4458,"t":{"516":{"position":[[71283,5]]}}}],["6.3.3",{"_index":4508,"t":{"516":{"position":[[75513,5]]}}}],["6.3.4",{"_index":4526,"t":{"516":{"position":[[76916,5]]}}}],["6.4",{"_index":4554,"t":{"516":{"position":[[79071,3]]}}}],["6.4.1",{"_index":4560,"t":{"516":{"position":[[79452,5]]}}}],["6.4.2",{"_index":4592,"t":{"516":{"position":[[80732,5]]},"579":{"position":[[6,5]]}}}],["6.4.3",{"_index":4601,"t":{"516":{"position":[[81695,5]]},"585":{"position":[[320,5]]}}}],["6.4.4",{"_index":4615,"t":{"516":{"position":[[82268,5]]},"589":{"position":[[148,5]]}}}],["6.5",{"_index":4648,"t":{"516":{"position":[[84651,3]]},"589":{"position":[[2531,3]]}}}],["6.6",{"_index":4662,"t":{"516":{"position":[[86443,3]]}}}],["6.7",{"_index":4701,"t":{"516":{"position":[[89449,3]]}}}],["6/8",{"_index":4633,"t":{"516":{"position":[[83173,3]]},"589":{"position":[[1053,3]]}}}],["60",{"_index":3036,"t":{"455":{"position":[[940,4]]},"516":{"position":[[35771,3]]}}}],["600",{"_index":1084,"t":{"170":{"position":[[491,4],[518,4],[542,4]]},"516":{"position":[[69795,3]]}}}],["612",{"_index":4954,"t":{"516":{"position":[[108443,3]]}}}],["62",{"_index":4614,"t":{"516":{"position":[[82258,3]]},"589":{"position":[[138,3]]}}}],["63",{"_index":4218,"t":{"516":{"position":[[47006,4]]}}}],["64",{"_index":4217,"t":{"516":{"position":[[46830,4],[46935,4]]}}}],["64位整数字段（看清楚，非自增），类似integerfield",{"_index":2066,"t":{"252":{"position":[[292,31]]}}}],["64位整数类型自增字段，数字范围更大，从1到9223372036854775807",{"_index":2064,"t":{"252":{"position":[[234,41]]}}}],["65",{"_index":2969,"t":{"449":{"position":[[718,3]]}}}],["654b",{"_index":1272,"t":{"184":{"position":[[1580,4],[1740,4]]}}}],["65qcw",{"_index":4480,"t":{"516":{"position":[[73040,5],[73240,5]]}}}],["66",{"_index":4647,"t":{"516":{"position":[[84316,3]]},"589":{"position":[[2196,3]]}}}],["6696798b11",{"_index":4504,"t":{"516":{"position":[[75455,10]]}}}],["6696798b78",{"_index":4452,"t":{"516":{"position":[[71026,10],[71147,10],[71197,10],[71247,10],[71660,10],[71711,10],[71760,10],[71809,10],[71860,10],[72139,10],[72190,10],[72241,10],[72292,10],[75418,10],[76828,10]]}}}],["66cb59b984",{"_index":4790,"t":{"516":{"position":[[94987,10],[95062,10],[95137,10],[95281,10],[99050,10],[127147,10],[127200,10],[127253,10]]}}}],["675d469f8b",{"_index":4483,"t":{"516":{"position":[[73335,10],[73383,10],[73431,10],[73479,10],[73537,10],[73595,10],[73653,10],[73701,10],[73749,10],[77811,10],[78554,10]]}}}],["67nz2",{"_index":4486,"t":{"516":{"position":[[73442,5],[73606,5],[73712,5]]}}}],["684ft",{"_index":4694,"t":{"516":{"position":[[88690,5],[88780,5]]}}}],["685tk",{"_index":3811,"t":{"516":{"position":[[17763,5]]},"526":{"position":[[2708,5]]}}}],["6885",{"_index":2008,"t":{"238":{"position":[[242,4]]}}}],["68f90222d039",{"_index":5249,"t":{"516":{"position":[[130572,12]]}}}],["68g6v",{"_index":3805,"t":{"516":{"position":[[17383,5]]},"526":{"position":[[2328,5]]}}}],["6955765f44",{"_index":3804,"t":{"516":{"position":[[17372,10],[17428,10],[80622,10],[80654,10]]},"526":{"position":[[2317,10],[2373,10]]},"577":{"position":[[272,10],[304,10]]}}}],["6b976979db",{"_index":4575,"t":{"516":{"position":[[80287,10]]},"575":{"position":[[72,10]]}}}],["6c931e272f00",{"_index":2011,"t":{"238":{"position":[[257,17]]}}}],["6c9f56fcfb",{"_index":4534,"t":{"516":{"position":[[77865,10],[78152,10],[78203,10],[78608,10],[78742,10],[78791,10],[78842,10],[78893,10]]}}}],["6d78dbd749",{"_index":4371,"t":{"516":{"position":[[63007,10]]}}}],["6k8cb",{"_index":3907,"t":{"516":{"position":[[23613,5]]}}}],["6m",{"_index":3607,"t":{"516":{"position":[[8129,2]]}}}],["6m50",{"_index":4619,"t":{"516":{"position":[[82568,5],[84361,5],[84500,5],[84593,5],[84640,5]]},"589":{"position":[[448,5],[2241,5],[2380,5],[2473,5],[2520,5]]}}}],["6s",{"_index":4216,"t":{"516":{"position":[[46818,2],[46923,2],[46994,2],[47068,2],[47177,2],[50964,2],[59563,2],[63038,2],[91411,2],[118906,2]]},"562":{"position":[[149,2]]}}}],["6vmvt",{"_index":4412,"t":{"516":{"position":[[66570,5],[66904,5],[67412,5]]}}}],["6zmlf",{"_index":4362,"t":{"516":{"position":[[62489,5]]}}}],["6）preaccess",{"_index":3372,"t":{"508":{"position":[[365,12]]}}}],["6）retrieveupdateapiview",{"_index":1744,"t":{"197":{"position":[[6031,24]]}}}],["7",{"_index":2598,"t":{"303":{"position":[[1521,7],[1648,5]]},"422":{"position":[[238,1],[353,1]]},"516":{"position":[[10466,1],[83197,1],[87343,1],[87885,1],[90463,1],[91121,1],[91908,2]]},"589":{"position":[[1077,1]]}}}],["7.1",{"_index":4730,"t":{"516":{"position":[[91922,3]]},"591":{"position":[[0,3]]}}}],["7.1.1",{"_index":4755,"t":{"516":{"position":[[92759,5]]},"591":{"position":[[837,5]]}}}],["7.1.2",{"_index":4764,"t":{"516":{"position":[[93018,5]]},"591":{"position":[[1096,5]]}}}],["7.1.3",{"_index":4769,"t":{"516":{"position":[[93223,5]]},"591":{"position":[[1301,5]]}}}],["7.2",{"_index":4775,"t":{"516":{"position":[[93805,3]]},"591":{"position":[[1883,3]]}}}],["7.3",{"_index":4787,"t":{"516":{"position":[[94391,3]]}}}],["7.3.1",{"_index":4788,"t":{"516":{"position":[[94406,5]]}}}],["7.3.2",{"_index":4798,"t":{"516":{"position":[[95536,5]]}}}],["7.3.3",{"_index":4808,"t":{"516":{"position":[[96743,5]]}}}],["7.3.4",{"_index":4818,"t":{"516":{"position":[[97895,5]]}}}],["7.3.5",{"_index":4834,"t":{"516":{"position":[[99456,5]]}}}],["7.3.6",{"_index":4844,"t":{"516":{"position":[[100257,5]]}}}],["7.3.7",{"_index":4847,"t":{"516":{"position":[[100408,5]]}}}],["7.4",{"_index":4857,"t":{"516":{"position":[[101088,3]]}}}],["7.5",{"_index":4871,"t":{"516":{"position":[[101887,3]]}}}],["7.5.1",{"_index":4872,"t":{"516":{"position":[[101902,5]]}}}],["7.5.1804",{"_index":3481,"t":{"516":{"position":[[3256,8]]}}}],["7.5.2",{"_index":4890,"t":{"516":{"position":[[103031,5]]}}}],["7.5.3",{"_index":4896,"t":{"516":{"position":[[104243,5]]},"595":{"position":[[192,5]]}}}],["7.5.4",{"_index":4911,"t":{"516":{"position":[[105237,5]]},"604":{"position":[[6,5]]}}}],["7/8",{"_index":4634,"t":{"516":{"position":[[83191,3]]},"589":{"position":[[1071,3]]}}}],["71m",{"_index":4525,"t":{"516":{"position":[[76912,3]]}}}],["72",{"_index":4507,"t":{"516":{"position":[[75509,3]]}}}],["72m",{"_index":4584,"t":{"516":{"position":[[80509,3]]},"577":{"position":[[159,3]]}}}],["73",{"_index":2821,"t":{"422":{"position":[[247,2],[310,2],[362,2]]}}}],["7405f73a",{"_index":3781,"t":{"516":{"position":[[16380,8]]},"526":{"position":[[1325,8]]}}}],["74m",{"_index":4519,"t":{"516":{"position":[[76577,3]]}}}],["75",{"_index":4436,"t":{"516":{"position":[[69109,3],[69147,3]]}}}],["7665f7fd85",{"_index":4353,"t":{"516":{"position":[[61988,10],[62417,10],[62888,10]]}}}],["7700:8080",{"_index":54,"t":{"21":{"position":[[575,9]]}}}],["78m",{"_index":4523,"t":{"516":{"position":[[76845,3]]}}}],["79",{"_index":4688,"t":{"516":{"position":[[88205,3]]}}}],["7bfwh",{"_index":4549,"t":{"516":{"position":[[78753,5]]}}}],["7df9756ccc",{"_index":4596,"t":{"516":{"position":[[81550,10],[83368,10],[83409,10],[83449,10],[83489,10],[83529,10],[83579,10],[83629,10],[83679,10],[83719,10],[83759,10],[83799,10],[83839,10],[83889,10],[83939,10],[83989,10],[84039,10],[84080,10],[84121,10],[84162,10],[84203,10],[84244,10],[84285,10],[84326,10],[84373,10],[84419,10],[84465,10],[84512,10],[84558,10],[84605,10]]},"585":{"position":[[175,10]]},"589":{"position":[[1248,10],[1289,10],[1329,10],[1369,10],[1409,10],[1459,10],[1509,10],[1559,10],[1599,10],[1639,10],[1679,10],[1719,10],[1769,10],[1819,10],[1869,10],[1919,10],[1960,10],[2001,10],[2042,10],[2083,10],[2124,10],[2165,10],[2206,10],[2253,10],[2299,10],[2345,10],[2392,10],[2438,10],[2485,10]]}}}],["7m21",{"_index":4621,"t":{"516":{"position":[[82655,5]]},"589":{"position":[[535,5]]}}}],["7m33",{"_index":4538,"t":{"516":{"position":[[78030,5]]}}}],["7m34",{"_index":4542,"t":{"516":{"position":[[78132,5]]}}}],["7m35",{"_index":4540,"t":{"516":{"position":[[78081,5]]}}}],["7m37",{"_index":4503,"t":{"516":{"position":[[75435,5]]}}}],["7m5",{"_index":4620,"t":{"516":{"position":[[82612,4],[84408,4],[84454,4],[84547,4]]},"589":{"position":[[492,4],[2288,4],[2334,4],[2427,4]]}}}],["7m51",{"_index":4623,"t":{"516":{"position":[[82698,5]]},"589":{"position":[[578,5]]}}}],["7ptsb",{"_index":4586,"t":{"516":{"position":[[80633,5]]},"577":{"position":[[283,5]]}}}],["7s",{"_index":4064,"t":{"516":{"position":[[33779,2],[33884,2],[33957,2]]}}}],["7）access",{"_index":3374,"t":{"508":{"position":[[476,9]]}}}],["7）retrieveupdatedestoryapiview",{"_index":1747,"t":{"197":{"position":[[6131,31]]}}}],["8",{"_index":367,"t":{"71":{"position":[[13,1]]},"73":{"position":[[550,1]]},"149":{"position":[[811,3]]},"422":{"position":[[240,1],[355,1]]},"516":{"position":[[82653,1],[82696,1],[82739,1],[82781,1],[83087,1],[83105,1],[83123,1],[83141,1],[83159,1],[83177,1],[83195,1],[83213,1],[83215,1],[83231,1],[83233,1],[83249,1],[83251,1],[87341,1],[87883,1],[90461,1],[91119,1],[106587,2]]},"589":{"position":[[533,1],[576,1],[619,1],[661,1],[967,1],[985,1],[1003,1],[1021,1],[1039,1],[1057,1],[1075,1],[1093,1],[1095,1],[1111,1],[1113,1],[1129,1],[1131,1]]},"616":{"position":[[4,2]]}}}],["8.1",{"_index":4935,"t":{"516":{"position":[[106976,3]]}}}],["8.1.1",{"_index":4936,"t":{"516":{"position":[[106986,5]]}}}],["8.1.2",{"_index":4956,"t":{"516":{"position":[[108469,5]]}}}],["8.1.3",{"_index":4970,"t":{"516":{"position":[[109846,5]]}}}],["8.2",{"_index":4989,"t":{"516":{"position":[[111301,3]]}}}],["8.2.1",{"_index":4998,"t":{"516":{"position":[[111722,5]]}}}],["8.2.2",{"_index":5036,"t":{"516":{"position":[[114107,5]]},"620":{"position":[[247,5]]}}}],["8.2.3",{"_index":5065,"t":{"516":{"position":[[117264,5]]},"636":{"position":[[114,5]]}}}],["8.3",{"_index":5078,"t":{"516":{"position":[[117843,3]]}}}],["8.3.1",{"_index":5079,"t":{"516":{"position":[[117853,5]]}}}],["8.3.2",{"_index":5086,"t":{"516":{"position":[[119156,5]]}}}],["8/1",{"_index":4637,"t":{"516":{"position":[[83227,3],[83245,3]]},"589":{"position":[[1107,3],[1125,3]]}}}],["8/8",{"_index":4635,"t":{"516":{"position":[[83209,3]]},"589":{"position":[[1089,3]]}}}],["80",{"_index":122,"t":{"27":{"position":[[724,2]]},"170":{"position":[[423,3]]},"186":{"position":[[775,4]]},"449":{"position":[[935,3]]},"455":{"position":[[1386,3],[1763,3],[2128,3]]},"457":{"position":[[718,3],[861,3],[1007,3],[1151,3],[2112,3],[3532,3],[4640,3]]},"487":{"position":[[525,3],[950,3]]},"493":{"position":[[532,3],[538,16]]},"506":{"position":[[197,3]]},"516":{"position":[[20998,2],[23012,2],[25348,2],[27170,2],[27199,2],[36780,2],[37084,2],[40508,2],[42337,2],[42630,2],[43790,2],[44084,2],[45263,2],[46216,41],[46468,2],[46567,2],[48222,2],[48268,2],[48843,2],[48889,2],[65566,2],[70288,2],[85561,2],[94763,2],[95781,2],[95808,2],[98295,2],[98310,2],[99825,2],[99906,2],[103355,2],[103794,2],[103809,2],[104472,2],[104821,2],[105772,2],[106139,3],[107539,2],[108804,2],[110688,2]]},"526":{"position":[[5943,2]]},"599":{"position":[[138,2]]},"612":{"position":[[154,3]]}}}],["80/tcp",{"_index":3828,"t":{"516":{"position":[[18833,6],[24536,6],[26057,6],[96095,6],[96391,6],[96410,6],[98621,6],[98865,6],[98884,6],[104177,6]]},"526":{"position":[[3778,6]]},"595":{"position":[[126,6]]}}}],["8000",{"_index":1102,"t":{"170":{"position":[[983,5]]},"230":{"position":[[358,4]]}}}],["8000/tcp",{"_index":5229,"t":{"516":{"position":[[129718,8]]}}}],["8080",{"_index":149,"t":{"27":{"position":[[1525,4]]},"457":{"position":[[4388,5]]},"516":{"position":[[42246,4],[43678,4],[45298,4],[45305,10],[45991,26],[103635,4],[103964,4],[103981,4],[104573,4],[105873,4]]}}}],["8080/tcp",{"_index":4895,"t":{"516":{"position":[[104224,8]]},"595":{"position":[[173,8]]}}}],["8080:8080",{"_index":59,"t":{"21":{"position":[[698,9]]}}}],["80:30002/tcp",{"_index":4842,"t":{"516":{"position":[[100179,12]]}}}],["80:31830/tcp",{"_index":4600,"t":{"516":{"position":[[81672,12]]},"585":{"position":[[297,12]]}}}],["80:31928/tcp",{"_index":3962,"t":{"516":{"position":[[26788,12]]}}}],["80:32240/tcp,443:31335/tcp",{"_index":4888,"t":{"516":{"position":[[103000,26]]}}}],["8100:80",{"_index":2937,"t":{"444":{"position":[[27,7]]}}}],["81m",{"_index":4582,"t":{"516":{"position":[[80480,3]]},"577":{"position":[[130,3]]}}}],["84",{"_index":4727,"t":{"516":{"position":[[91754,3]]}}}],["8443",{"_index":5215,"t":{"516":{"position":[[129218,4]]}}}],["86",{"_index":4724,"t":{"516":{"position":[[91601,3]]}}}],["8601格式，即yyyi",{"_index":3672,"t":{"516":{"position":[[10366,12]]}}}],["8601格式，时间和日期之间使用t",{"_index":3675,"t":{"516":{"position":[[10434,29]]}}}],["864f9875b9",{"_index":3740,"t":{"516":{"position":[[13416,10]]}}}],["86_x64",{"_index":3460,"t":{"516":{"position":[[2737,6]]}}}],["87spt",{"_index":3812,"t":{"516":{"position":[[17811,5]]},"526":{"position":[[2756,5]]}}}],["89",{"_index":4172,"t":{"516":{"position":[[41667,3]]}}}],["8mi",{"_index":4590,"t":{"516":{"position":[[80674,3]]},"577":{"position":[[324,3]]}}}],["8p84h",{"_index":4791,"t":{"516":{"position":[[94998,5],[95292,5],[99061,5]]}}}],["8rbzt",{"_index":4490,"t":{"516":{"position":[[74192,5],[74935,5]]}}}],["8u171",{"_index":134,"t":{"27":{"position":[[1047,5]]}}}],["8wp2k",{"_index":5188,"t":{"516":{"position":[[127158,5]]}}}],["8zhwk",{"_index":4640,"t":{"516":{"position":[[83460,5],[83590,5],[84050,5],[84384,5]]},"589":{"position":[[1340,5],[1470,5],[1930,5],[2264,5]]}}}],["8）post",{"_index":3376,"t":{"508":{"position":[[555,7]]}}}],["9",{"_index":1263,"t":{"184":{"position":[[1422,1]]},"186":{"position":[[3630,3]]},"325":{"position":[[94,2]]},"422":{"position":[[242,1],[357,1]]},"446":{"position":[[350,1],[386,1]]},"516":{"position":[[87339,1],[87881,1],[90459,1],[91117,1],[120553,2]]},"642":{"position":[[216,2]]}}}],["9.0.8",{"_index":145,"t":{"27":{"position":[[1383,5],[1432,5]]}}}],["9.0.8.tar.gz",{"_index":138,"t":{"27":{"position":[[1100,12]]}}}],["9.0.8/bin/catalina.sh\",\"run",{"_index":151,"t":{"27":{"position":[[1640,29]]}}}],["9.0.8/bin/logs/catalina.out",{"_index":152,"t":{"27":{"position":[[1756,27]]}}}],["9.0.8/bin/startup.sh",{"_index":150,"t":{"27":{"position":[[1583,21],[1699,20]]}}}],["9.1",{"_index":5100,"t":{"516":{"position":[[120566,3]]},"642":{"position":[[229,3]]}}}],["9.2",{"_index":5106,"t":{"516":{"position":[[121007,3]]}}}],["9.3",{"_index":5116,"t":{"516":{"position":[[121841,3]]}}}],["9.4",{"_index":5192,"t":{"516":{"position":[[127443,3]]}}}],["9/cicd",{"_index":691,"t":{"110":{"position":[[1611,6]]}}}],["90",{"_index":3324,"t":{"504":{"position":[[2331,2]]},"516":{"position":[[41703,3],[80318,3]]},"575":{"position":[[103,3]]}}}],["9223372036854775807。在django的模板表单里体现为一个numberinput",{"_index":2068,"t":{"252":{"position":[[346,53]]}}}],["9223372036854775808",{"_index":2067,"t":{"252":{"position":[[326,19]]}}}],["93",{"_index":4465,"t":{"516":{"position":[[71791,3]]}}}],["94",{"_index":4463,"t":{"516":{"position":[[71742,3]]}}}],["94m",{"_index":5061,"t":{"516":{"position":[[116766,3],[116804,3],[116842,3]]},"632":{"position":[[133,3],[171,3],[209,3]]}}}],["95",{"_index":2827,"t":{"427":{"position":[[483,5]]},"516":{"position":[[32484,3]]}}}],["95d84d80",{"_index":5245,"t":{"516":{"position":[[130548,8]]}}}],["966bf7f44",{"_index":4495,"t":{"516":{"position":[[74371,9],[74418,9],[74475,9],[74573,9],[74620,9],[74677,9],[74775,9],[74822,9],[74879,9],[74977,9],[75024,9],[75081,9],[76863,9]]}}}],["97",{"_index":4947,"t":{"516":{"position":[[108187,3]]}}}],["996rt",{"_index":4543,"t":{"516":{"position":[[78163,5],[78802,5]]}}}],["9]{2",{"_index":2018,"t":{"240":{"position":[[424,10]]}}}],["9]{2})/(?p<slug>[\\w",{"_index":2019,"t":{"240":{"position":[[509,19]]}}}],["9]{4",{"_index":2016,"t":{"240":{"position":[[340,10],[820,6],[849,6]]}}}],["9]{4})/(?p<month>[0",{"_index":2017,"t":{"240":{"position":[[404,19],[489,19]]}}}],["9bck8",{"_index":4657,"t":{"516":{"position":[[86235,5]]}}}],["9db6",{"_index":3784,"t":{"516":{"position":[[16399,4]]},"526":{"position":[[1344,4]]}}}],["9dxxq",{"_index":4728,"t":{"516":{"position":[[91780,5]]}}}],["9f38484d220f",{"_index":62,"t":{"23":{"position":[[67,12]]}}}],["9m25",{"_index":4328,"t":{"516":{"position":[[60007,5]]},"562":{"position":[[593,5]]}}}],["9m6",{"_index":4624,"t":{"516":{"position":[[82741,4]]},"589":{"position":[[621,4]]}}}],["9m7",{"_index":3870,"t":{"516":{"position":[[20598,4]]},"526":{"position":[[5543,4]]}}}],["9mi",{"_index":4588,"t":{"516":{"position":[[80642,3]]},"577":{"position":[[292,3]]}}}],["9s",{"_index":3963,"t":{"516":{"position":[[26801,2],[58703,2],[114087,2]]},"553":{"position":[[142,2]]},"620":{"position":[[227,2]]}}}],["9）tri",{"_index":3378,"t":{"508":{"position":[[582,6]]}}}],["_",{"_index":633,"t":{"107":{"position":[[366,1]]}}}],["__all__",{"_index":1175,"t":{"177":{"position":[[373,9]]},"190":{"position":[[307,9]]}}}],["__contain",{"_index":2384,"t":{"264":{"position":[[1435,42],[1480,47]]}}}],["__init__(self",{"_index":1176,"t":{"177":{"position":[[387,14]]}}}],["__init__.pi",{"_index":1956,"t":{"232":{"position":[[26,11],[86,11],[127,11]]}}}],["_base_manager管理器的名字，默认是'object",{"_index":2277,"t":{"258":{"position":[[731,36]]}}}],["_default_manag",{"_index":2279,"t":{"258":{"position":[[789,26]]}}}],["_prefetched_objects_cach",{"_index":1708,"t":{"197":{"position":[[4883,28]]}}}],["a'，'m'或'k",{"_index":2653,"t":{"325":{"position":[[318,11]]}}}],["a,b,c",{"_index":2654,"t":{"325":{"position":[[347,15]]}}}],["a,b}.txt",{"_index":2845,"t":{"432":{"position":[[101,9]]}}}],["a..d}.txt",{"_index":2847,"t":{"432":{"position":[[165,10]]}}}],["a.txt",{"_index":992,"t":{"151":{"position":[[762,8]]},"432":{"position":[[111,8],[176,8]]}}}],["a.txt\",text",{"_index":988,"t":{"151":{"position":[[703,13]]}}}],["a/b/c",{"_index":241,"t":{"34":{"position":[[4346,7]]}}}],["a2e0",{"_index":5248,"t":{"516":{"position":[[130567,4]]}}}],["a8a8",{"_index":2010,"t":{"238":{"position":[[252,4]]}}}],["a8zcriux_eca12wip_qiup3sf",{"_index":5252,"t":{"516":{"position":[[131460,25]]}}}],["a=$b",{"_index":2771,"t":{"392":{"position":[[183,4]]}}}],["a=5",{"_index":2829,"t":{"427":{"position":[[524,4]]}}}],["a==$b",{"_index":2772,"t":{"392":{"position":[[332,8]]}}}],["a\\nb\\nc\\n",{"_index":1023,"t":{"155":{"position":[[697,13]]}}}],["aa",{"_index":2758,"t":{"374":{"position":[[690,5]]}}}],["aa+++aa",{"_index":2756,"t":{"374":{"position":[[654,11]]}}}],["aa=aa",{"_index":2615,"t":{"303":{"position":[[2251,5]]}}}],["ab",{"_index":2837,"t":{"429":{"position":[[321,2]]}}}],["abac",{"_index":5119,"t":{"516":{"position":[[122127,40]]}}}],["abc",{"_index":990,"t":{"151":{"position":[[745,6]]},"303":{"position":[[2104,3]]},"325":{"position":[[334,12]]},"400":{"position":[[24,8]]}}}],["abc/test.html",{"_index":3140,"t":{"457":{"position":[[5833,14]]}}}],["abort",{"_index":420,"t":{"73":{"position":[[1337,5]]},"132":{"position":[[269,32],[654,8],[685,8],[853,8],[891,8]]}}}],["about_django(valu",{"_index":1454,"t":{"188":{"position":[[2788,20]]}}}],["abstract",{"_index":713,"t":{"112":{"position":[[245,8]]},"258":{"position":[[311,8]]}}}],["abstract=true，那么模型会被认为是一个抽象模型。抽象模型本身不实际生成数据库表，而是作为其它模型的父类，被继承使用。具体内容可以参考django",{"_index":2267,"t":{"258":{"position":[[320,86]]}}}],["abstractproject",{"_index":716,"t":{"112":{"position":[[322,15]]}}}],["abstractproject：freestyleproject",{"_index":559,"t":{"90":{"position":[[1571,32]]}}}],["accept_mutex",{"_index":3020,"t":{"453":{"position":[[199,13],[226,12]]}}}],["accept（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行accept",{"_index":1524,"t":{"193":{"position":[[715,96]]}}}],["access",{"_index":3377,"t":{"508":{"position":[[563,6]]},"510":{"position":[[669,6]]},"516":{"position":[[113920,6],[115263,6],[115483,6],[116715,6],[116929,6],[122281,6]]},"620":{"position":[[60,6]]},"624":{"position":[[82,6]]},"626":{"position":[[60,6]]},"632":{"position":[[82,6]]},"634":{"position":[[67,6]]}}}],["access.log",{"_index":4968,"t":{"516":{"position":[[109791,10],[111280,10]]}}}],["access_by_lua",{"_index":3399,"t":{"510":{"position":[[636,13]]}}}],["access_by_lua_fil",{"_index":3400,"t":{"510":{"position":[[650,18]]}}}],["access_log",{"_index":2963,"t":{"449":{"position":[[573,10]]}}}],["accessmod",{"_index":5003,"t":{"516":{"position":[[111883,12],[112096,17],[113206,12],[113404,12],[113602,12],[114246,12],[114369,17],[114661,12],[114807,12],[114953,12]]},"620":{"position":[[386,12]]}}}],["account",{"_index":5241,"t":{"516":{"position":[[130246,7],[130613,7]]}}}],["account.nam",{"_index":5243,"t":{"516":{"position":[[130483,13]]}}}],["account.uid",{"_index":5244,"t":{"516":{"position":[[130535,12]]}}}],["accountserializer(account",{"_index":1342,"t":{"184":{"position":[[3402,26]]}}}],["account：kubernetes管理的账号，用于为pod中的服务进程在访问kubernet",{"_index":5103,"t":{"516":{"position":[[120754,57]]}}}],["account：一般是独立于kubernet",{"_index":5102,"t":{"516":{"position":[[120706,39]]}}}],["account：实现serviceaccount",{"_index":5199,"t":{"516":{"position":[[127986,30]]}}}],["action",{"_index":1753,"t":{"199":{"position":[[147,6],[1475,6],[2029,17],[2205,6],[3061,9]]},"418":{"position":[[42,7]]}}}],["action对象属性来获取当前请求视图集时的act",{"_index":1792,"t":{"199":{"position":[[3071,46]]}}}],["activ",{"_index":3728,"t":{"516":{"position":[[12877,6],[12892,6],[12919,6],[12942,6],[12965,6],[14028,6],[15568,6],[15632,6],[15679,6],[15731,6],[15892,6],[15919,6],[15942,6],[15965,6],[16075,6],[16463,6],[16609,6],[16618,6],[91349,6]]},"522":{"position":[[482,6]]},"526":{"position":[[513,6],[577,6],[624,6],[676,6],[837,6],[864,6],[887,6],[910,6],[1020,6],[1408,6],[1554,6],[1563,6]]}}}],["activeconn",{"_index":4748,"t":{"516":{"position":[[92610,10],[93678,10]]},"591":{"position":[[688,10],[1756,10]]}}}],["activedeadlinesecond",{"_index":4671,"t":{"516":{"position":[[86808,22],[90131,22]]}}}],["actual",{"_index":895,"t":{"139":{"position":[[394,7]]}}}],["add",{"_index":101,"t":{"27":{"position":[[161,3],[210,23],[1039,3],[1082,3]]},"32":{"position":[[341,6]]},"34":{"position":[[533,3],[547,3],[640,8],[685,3],[742,4]]},"275":{"position":[[1346,22]]}}}],["add()方法只添加不存在或失效的key，如果key",{"_index":2530,"t":{"275":{"position":[[1229,34]]}}}],["add_fieldset",{"_index":1167,"t":{"175":{"position":[[1339,13]]}}}],["add_form",{"_index":1165,"t":{"175":{"position":[[1299,8]]}}}],["add_head",{"_index":3240,"t":{"487":{"position":[[713,10],[1296,10]]}}}],["addr",{"_index":3348,"t":{"504":{"position":[[4404,4]]}}}],["address",{"_index":2338,"t":{"258":{"position":[[4296,18],[4541,10]]},"455":{"position":[[427,7]]},"516":{"position":[[9963,8],[10603,8],[10681,8],[10711,8],[79999,7],[104753,7],[106056,7]]},"520":{"position":[[553,8]]},"599":{"position":[[70,7]]},"612":{"position":[[71,7]]}}}],["address=192.168.90.100",{"_index":3588,"t":{"516":{"position":[[7478,22]]}}}],["addressbeijing</address",{"_index":3655,"t":{"516":{"position":[[9915,24]]},"520":{"position":[[505,24]]}}}],["addrport",{"_index":1932,"t":{"230":{"position":[[298,10]]}}}],["add命令会自动处理url和解压tar",{"_index":102,"t":{"27":{"position":[[165,39]]}}}],["admin",{"_index":1054,"t":{"166":{"position":[[27,5]]},"170":{"position":[[462,7]]},"175":{"position":[[71,5]]},"177":{"position":[[27,5]]},"230":{"position":[[120,5],[197,18]]},"232":{"position":[[281,5]]},"516":{"position":[[35825,7],[36084,5],[119292,7],[120477,5],[126119,10],[127291,20],[129899,5],[130003,5],[130034,5],[130088,5],[130190,5],[130206,5],[130326,5],[130384,5],[130507,5]]},"642":{"position":[[140,5]]}}}],["admin.pi",{"_index":1961,"t":{"232":{"position":[[98,8]]}}}],["admin.register(book",{"_index":1199,"t":{"177":{"position":[[1076,21]]}}}],["admin.register(project",{"_index":1109,"t":{"173":{"position":[[0,24]]}}}],["admin.register(us",{"_index":1159,"t":{"175":{"position":[[804,21]]}}}],["admin.site.site_head",{"_index":1056,"t":{"166":{"position":[[64,22]]}}}],["admin.site.site_titl",{"_index":1055,"t":{"166":{"position":[[33,21]]}}}],["admin.site.url",{"_index":1059,"t":{"166":{"position":[[133,17]]}}}],["admin@bothinlidemac",{"_index":2605,"t":{"303":{"position":[[2051,19]]}}}],["admin@kubernet",{"_index":5183,"t":{"516":{"position":[[126193,16],[126242,18],[127375,16],[127424,18]]}}}],["admiss",{"_index":5105,"t":{"516":{"position":[[120959,9],[127557,9],[127746,15]]}}}],["adsafdsadf",{"_index":2611,"t":{"303":{"position":[[2132,10]]}}}],["advert_int",{"_index":3313,"t":{"504":{"position":[[1370,10],[2418,10]]}}}],["advertis",{"_index":3587,"t":{"516":{"position":[[7468,9]]}}}],["affin",{"_index":4266,"t":{"516":{"position":[[52871,15],[54256,9],[55926,9],[58107,9],[58938,8],[60221,9],[96481,9],[98955,9]]},"541":{"position":[[422,9]]},"549":{"position":[[312,9]]},"555":{"position":[[225,8]]},"562":{"position":[[807,9]]}}}],["after=network.target",{"_index":414,"t":{"73":{"position":[[1193,20]]}}}],["ag",{"_index":2341,"t":{"258":{"position":[[4800,3]]},"516":{"position":[[8094,3],[9955,4],[10595,4],[10638,5],[12865,3],[13339,3],[14010,3],[14066,3],[15556,3],[15880,3],[16063,3],[17348,3],[18244,3],[19435,3],[19944,3],[20375,3],[20580,3],[22411,3],[22565,3],[23592,3],[23812,3],[23962,3],[24835,3],[26002,3],[26737,3],[32457,3],[33366,3],[34880,3],[38000,3],[38436,3],[41051,3],[41512,3],[43048,3],[44942,3],[46158,3],[47433,3],[49458,3],[50442,3],[50918,3],[51802,3],[52284,3],[52472,3],[54708,3],[55612,3],[56384,3],[57892,3],[58660,3],[58817,3],[59513,3],[59882,3],[60766,3],[61969,3],[62398,3],[62859,3],[63737,3],[63902,3],[66331,3],[66552,3],[66886,3],[67394,3],[67739,3],[68056,3],[68428,3],[69071,3],[70857,3],[71008,3],[71129,3],[71531,3],[71642,3],[72121,3],[73011,3],[74165,3],[75400,3],[76533,3],[76810,3],[77721,3],[77981,3],[78464,3],[78724,3],[81471,3],[81536,3],[81626,3],[82217,3],[82440,3],[82929,3],[83358,3],[86033,3],[86210,3],[88103,3],[88367,3],[88679,3],[91370,3],[91495,3],[96036,3],[98568,3],[102761,3],[102954,3],[104138,3],[104767,3],[106070,3],[108138,3],[109484,3],[111182,3],[113955,3],[115289,3],[115524,3],[116533,3],[116728,3],[116970,3],[118874,3],[120276,3],[127126,3],[129481,3],[129651,3]]},"520":{"position":[[545,4]]},"522":{"position":[[464,3],[520,3]]},"526":{"position":[[501,3],[825,3],[1008,3],[2293,3],[3189,3],[4380,3],[4889,3],[5320,3],[5525,3]]},"532":{"position":[[108,3]]},"541":{"position":[[108,3]]},"545":{"position":[[100,3]]},"549":{"position":[[97,3]]},"553":{"position":[[99,3]]},"555":{"position":[[104,3]]},"562":{"position":[[99,3],[468,3]]},"567":{"position":[[111,3]]},"569":{"position":[[82,3]]},"571":{"position":[[82,3]]},"585":{"position":[[96,3],[161,3],[251,3]]},"589":{"position":[[97,3],[320,3],[809,3],[1238,3]]},"595":{"position":[[87,3]]},"599":{"position":[[84,3]]},"612":{"position":[[85,3]]},"620":{"position":[[95,3]]},"624":{"position":[[108,3]]},"626":{"position":[[101,3]]},"630":{"position":[[82,3]]},"632":{"position":[[95,3]]},"634":{"position":[[108,3]]},"640":{"position":[[84,3]]}}}],["age15</ag",{"_index":3654,"t":{"516":{"position":[[9903,11]]},"520":{"position":[[493,11]]}}}],["agent",{"_index":634,"t":{"107":{"position":[[408,5]]},"128":{"position":[[123,5]]},"132":{"position":[[459,5]]},"137":{"position":[[842,5]]},"141":{"position":[[74,5]]},"151":{"position":[[617,5],[654,5],[794,5]]},"273":{"position":[[1699,6],[1842,7]]}}}],["agent部分：指定流水线的执行位置（jenkin",{"_index":835,"t":{"128":{"position":[[404,26]]}}}],["agent）。流水线中的每个阶段都必须在某个地方（物理机、虚拟机或docker容器）执行，ag",{"_index":836,"t":{"128":{"position":[[431,63]]}}}],["age年龄的大小，不得低于18",{"_index":2344,"t":{"258":{"position":[[4930,23]]}}}],["ajax",{"_index":516,"t":{"88":{"position":[[575,4],[1150,4]]}}}],["alia",{"_index":1100,"t":{"170":{"position":[[915,5],[1205,5]]},"457":{"position":[[1719,5],[1734,6],[1791,5],[1908,5],[5872,5]]}}}],["allof",{"_index":914,"t":{"139":{"position":[[1091,5]]}}}],["allof：所有条件都必须符合。下例表示当分支为master且环境变量deploy_to的值为product",{"_index":913,"t":{"139":{"position":[[1018,65]]}}}],["allow",{"_index":2981,"t":{"449":{"position":[[1121,5]]},"516":{"position":[[90715,6]]}}}],["allow_blank",{"_index":1321,"t":{"184":{"position":[[2788,11]]}}}],["allow_blank=fals",{"_index":1252,"t":{"184":{"position":[[1133,18],[1230,18],[1312,18],[1382,18],[1478,18]]}}}],["allow_empty_file=fals",{"_index":1311,"t":{"184":{"position":[[2501,23],[2596,23]]}}}],["allow_files:可选参数，只能是true或者false。默认为true。决定是否应该将文件名包括在内。它和allow_folders其中，必须有一个为tru",{"_index":2162,"t":{"252":{"position":[[5719,84]]}}}],["allow_files=tru",{"_index":2156,"t":{"252":{"position":[[5371,17]]}}}],["allow_fold",{"_index":2163,"t":{"252":{"position":[[5804,14]]}}}],["allow_folders=fals",{"_index":2157,"t":{"252":{"position":[[5389,20]]}}}],["allow_nul",{"_index":1328,"t":{"184":{"position":[[2992,10]]}}}],["allow_null=tru",{"_index":1387,"t":{"186":{"position":[[1580,16]]}}}],["allowani",{"_index":1817,"t":{"207":{"position":[[0,8]]}}}],["allowempty：布尔类型，允许stash",{"_index":980,"t":{"151":{"position":[[270,28]]}}}],["alpin",{"_index":3637,"t":{"516":{"position":[[9257,6]]}}}],["alreadi",{"_index":4067,"t":{"516":{"position":[[33842,7],[41254,7],[45697,7],[46881,7]]}}}],["alway",{"_index":846,"t":{"132":{"position":[[117,23],[530,7],[560,7],[708,7],[745,7]]},"155":{"position":[[1255,6]]},"516":{"position":[[29409,7],[32897,26],[33083,12],[48441,6]]}}}],["alwaysadmit",{"_index":5195,"t":{"516":{"position":[[127777,18]]}}}],["alwaysallow：允许接收所有请求，相当于集群不需要授权流程（kubernet",{"_index":5118,"t":{"516":{"position":[[122076,50]]}}}],["alwaysdeni",{"_index":5117,"t":{"516":{"position":[[122049,26],[127796,24]]}}}],["alwayspullimag",{"_index":5196,"t":{"516":{"position":[[127821,30]]}}}],["always|never|ifnotpres",{"_index":3980,"t":{"516":{"position":[[28011,25]]}}}],["always的话，就意味着一直重启，意味着job任务会重复去执行了，当然不对，所以不能设置为alway",{"_index":4682,"t":{"516":{"position":[[87513,57]]}}}],["amazonshop/mygoods.html",{"_index":2402,"t":{"264":{"position":[[2089,26],[2224,26]]}}}],["amd64",{"_index":255,"t":{"34":{"position":[[4924,6]]},"516":{"position":[[17650,5],[17709,5]]},"526":{"position":[[2595,5],[2654,5]]}}}],["amd64:v0.3.6",{"_index":4569,"t":{"516":{"position":[[79937,12]]}}}],["amk",{"_index":2652,"t":{"325":{"position":[[295,19]]}}}],["amvua21ucybib29r",{"_index":971,"t":{"149":{"position":[[715,19]]}}}],["ancestorinpath",{"_index":496,"t":{"85":{"position":[[540,16]]}}}],["annot",{"_index":3788,"t":{"516":{"position":[[16582,12],[18490,12],[24212,12],[30465,11],[96303,12],[98784,12],[118291,12],[119752,12],[130448,12]]},"526":{"position":[[1527,12],[3435,12]]}}}],["anon",{"_index":1833,"t":{"215":{"position":[[239,7]]}}}],["anonratethrottl",{"_index":1842,"t":{"217":{"position":[[3,16]]}}}],["answer",{"_index":2306,"t":{"258":{"position":[[2546,6],[2611,8],[2658,8]]}}}],["answer(models.model",{"_index":2298,"t":{"258":{"position":[[1956,21]]}}}],["answer.get_next_in_ord",{"_index":2308,"t":{"258":{"position":[[2584,26]]}}}],["answer.get_previous_in_ord",{"_index":2309,"t":{"258":{"position":[[2627,30]]}}}],["answer.objects.get(id=2",{"_index":2307,"t":{"258":{"position":[[2555,24]]}}}],["answer模型中设置了order_with_respect_to",{"_index":2299,"t":{"258":{"position":[[2096,36]]}}}],["ant",{"_index":911,"t":{"139":{"position":[[842,41]]}}}],["ant、maven",{"_index":558,"t":{"90":{"position":[[1548,15]]}}}],["ant是比maven更老的java构建工具。ant发明了一种描述文件路径的表达式，大家都习惯称其为ant风格路径表达式。jenkin",{"_index":1034,"t":{"157":{"position":[[0,67]]}}}],["ant路径表达式包括3",{"_index":1035,"t":{"157":{"position":[[94,16]]}}}],["anyof",{"_index":917,"t":{"139":{"position":[[1228,5]]}}}],["anyof：其中一个条件为true，就符合。下例表示master分支或stag",{"_index":916,"t":{"139":{"position":[[1170,50]]}}}],["apach",{"_index":137,"t":{"27":{"position":[[1086,6]]}}}],["api",{"_index":157,"t":{"32":{"position":[[90,7],[112,6],[144,3]]},"50":{"position":[[16,19]]},"52":{"position":[[17,6],[311,6]]},"64":{"position":[[14,3]]},"88":{"position":[[442,17]]},"110":{"position":[[107,4],[400,4],[1328,4]]},"112":{"position":[[73,4],[637,4],[1429,4]]},"193":{"position":[[973,8]]},"516":{"position":[[1066,39],[11657,3],[30911,3],[30969,3],[122025,3],[122736,12],[122749,13],[123106,9],[126081,3],[127502,25]]}}}],["api/json",{"_index":323,"t":{"56":{"position":[[47,9]]}}}],["api/v1/namespaces/default",{"_index":3779,"t":{"516":{"position":[[16348,26]]},"526":{"position":[[1293,26]]}}}],["apiexcept",{"_index":1613,"t":{"197":{"position":[[249,36]]},"227":{"position":[[1017,12]]}}}],["apigroup",{"_index":5130,"t":{"516":{"position":[[122718,10],[123007,10],[123095,10],[123804,9],[123885,9],[124144,9],[124239,9],[124721,9],[124816,9],[126399,10],[126623,9],[126694,9]]}}}],["apiserv",{"_index":3423,"t":{"516":{"position":[[1054,9],[7458,9],[17524,9],[121928,96],[125025,16],[127453,48],[127703,42]]},"526":{"position":[[2469,9]]}}}],["apiservcer中的pod对象信息会随着时间的推移而更新，在宽限期内（默认30s），pod被视为dead",{"_index":4148,"t":{"516":{"position":[[39575,54]]}}}],["apiserver:v1.17.4",{"_index":3575,"t":{"516":{"position":[[6968,17]]}}}],["apiserver发送删除pod",{"_index":4147,"t":{"516":{"position":[[39550,24]]}}}],["apiserver将接收到的pod状态信息存入etcd",{"_index":4146,"t":{"516":{"position":[[39512,28]]}}}],["apiserver开始反映etcd中的pod对象的变化，其它组件使用watch机制来跟踪检查apiserv",{"_index":4143,"t":{"516":{"position":[[39342,59]]}}}],["apiserver开始生成pod对象的信息，并将信息存入etcd",{"_index":4142,"t":{"516":{"position":[[39296,45]]}}}],["apiserver是访问及管理资源对象的唯一入口。任何一个请求访问apiserv",{"_index":5104,"t":{"516":{"position":[[120823,54]]}}}],["apiserver组件会调用scheduler组件来决定到底应该把这个服务安装到哪个nod",{"_index":3433,"t":{"516":{"position":[[1501,49]]}}}],["apiserver调用control",{"_index":3435,"t":{"516":{"position":[[1607,21]]}}}],["apivers",{"_index":3743,"t":{"516":{"position":[[13611,11],[13666,11],[16218,11],[16978,11],[20845,11],[22824,11],[25107,11],[27041,11],[27725,11],[30279,10],[30864,10],[31903,11],[32648,11],[34202,11],[35585,11],[36607,11],[37457,11],[40332,11],[42458,11],[43917,11],[45091,11],[46298,11],[48052,11],[48676,11],[50071,11],[51393,11],[54124,11],[55793,11],[57484,11],[57976,11],[60086,11],[63381,11],[65103,11],[65835,11],[69547,11],[70338,11],[80784,11],[81729,11],[81956,11],[84952,11],[85590,11],[86585,11],[87591,11],[89643,11],[90829,11],[93857,11],[94506,11],[95590,11],[98095,11],[99675,11],[100532,11],[103095,11],[103362,11],[103644,11],[103812,11],[104276,11],[105490,11],[107391,11],[108656,11],[110545,11],[111754,11],[113119,11],[113317,11],[113515,11],[114162,11],[114576,11],[114722,11],[114868,11],[115710,11],[116032,11],[117932,11],[118422,11],[119427,11],[119866,11],[122615,11],[122912,11],[123667,11],[124015,11],[124581,11],[126306,11],[126485,11],[129039,11]]},"522":{"position":[[65,11],[120,11]]},"526":{"position":[[1163,11],[1923,11],[5790,11]]},"541":{"position":[[289,11]]},"545":{"position":[[1200,11]]},"549":{"position":[[181,11]]},"562":{"position":[[672,11]]},"579":{"position":[[58,11]]},"585":{"position":[[354,11],[581,11]]},"591":{"position":[[1935,11]]},"595":{"position":[[225,11]]},"608":{"position":[[87,11]]},"620":{"position":[[302,11]]},"644":{"position":[[18,11]]},"646":{"position":[[25,11]]},"649":{"position":[[18,11]]}}}],["apiview",{"_index":1620,"t":{"197":{"position":[[517,7]]},"201":{"position":[[366,7]]},"205":{"position":[[337,7]]},"215":{"position":[[465,7]]}}}],["apiview与view",{"_index":1610,"t":{"197":{"position":[[104,20]]}}}],["apiview与viewsetmixin，作用也与apiview",{"_index":1763,"t":{"199":{"position":[[827,59]]}}}],["apiview中仍以常规的类视图定义方法来实现get",{"_index":1618,"t":{"197":{"position":[[429,29]]}}}],["apiview提供的check_object_permiss",{"_index":1645,"t":{"197":{"position":[[1716,59]]}}}],["apiview是rest",{"_index":1608,"t":{"197":{"position":[[53,12]]}}}],["apiview，主要增加了操作序列化器和数据库查询的方法，作用是为下面mixin扩展类的执行提供方法支持。通常在使用时，可搭配一个或多个mixin",{"_index":1629,"t":{"197":{"position":[[844,80]]}}}],["api和python原生的文件读写api非常类似，其实本质上就是进行了一层封装，让我们可以在django",{"_index":2137,"t":{"252":{"position":[[4209,81]]}}}],["app",{"_index":162,"t":{"32":{"position":[[613,5],[802,4],[825,4]]},"284":{"position":[[0,36]]},"289":{"position":[[99,8],[161,8],[263,6],[288,26],[368,4]]},"516":{"position":[[65318,4],[65377,4],[65475,4],[65958,4],[66001,4],[70040,4],[70099,4],[70197,4],[70461,4],[70504,4],[80943,4],[80986,4],[85313,4],[85372,4],[85470,4],[85699,4],[85742,4],[87024,4],[87085,4],[87185,4],[87710,4],[87755,4],[90217,4],[90263,4],[90333,4],[93988,4],[94629,4],[94672,4],[95684,4],[98190,4],[99768,4],[103221,4],[103264,4],[103489,4],[103533,4],[103734,4],[103903,4],[123116,10],[129076,4],[129258,4]]},"579":{"position":[[217,4],[260,4]]},"591":{"position":[[2066,4]]}}}],["app=count",{"_index":4687,"t":{"516":{"position":[[88174,11],[88230,11]]}}}],["app=kub",{"_index":4774,"t":{"516":{"position":[[93501,8]]},"591":{"position":[[1579,8]]}}}],["app=nginx",{"_index":4410,"t":{"516":{"position":[[66405,9],[95034,9],[95109,9],[95184,9],[96106,9],[96332,9],[98632,9],[98813,9],[100192,9]]}}}],["app_label",{"_index":2268,"t":{"258":{"position":[[407,9],[473,9]]}}}],["app_nam",{"_index":1937,"t":{"230":{"position":[[615,8],[1048,10]]},"289":{"position":[[406,8]]}}}],["apples”。因为我们中文通常不区分单复数，所以保持和verbose_nam",{"_index":2346,"t":{"258":{"position":[[5118,73]]}}}],["appli",{"_index":1710,"t":{"197":{"position":[[4952,7]]},"516":{"position":[[9031,5],[11088,5],[12584,5],[14317,34],[14368,5],[14417,5],[14499,5],[14550,5],[14666,12],[14944,5],[23053,5],[32242,5],[80193,5],[102631,5]]},"524":{"position":[[0,34],[51,5],[100,5],[182,5],[233,5],[349,12],[627,5]]},"573":{"position":[[34,5]]}}}],["applic",{"_index":1044,"t":{"164":{"position":[[19,11]]}}}],["application/octet",{"_index":2974,"t":{"449":{"position":[[827,17]]}}}],["application/xml",{"_index":329,"t":{"58":{"position":[[105,15]]}}}],["apply命令和配置文件去操作kubernet",{"_index":3687,"t":{"516":{"position":[[11042,37]]}}}],["apply描述一个资源最终的状态（在yaml",{"_index":3756,"t":{"516":{"position":[[14624,41]]},"524":{"position":[[307,41]]}}}],["approv",{"_index":816,"t":{"118":{"position":[[51,9]]}}}],["apps.pi",{"_index":1962,"t":{"232":{"position":[[107,7]]}}}],["apps.py中的类xxxconfig中的name属性要加前缀app",{"_index":2558,"t":{"287":{"position":[[81,42]]}}}],["apps/v1",{"_index":3933,"t":{"516":{"position":[[25119,7],[65115,7],[65847,7],[69559,7],[70350,7],[80796,7],[84964,7],[85602,7],[94518,7],[103107,7],[103374,7]]},"579":{"position":[[70,7]]}}}],["apps目录下，再执行startapp",{"_index":2568,"t":{"289":{"position":[[340,24]]}}}],["apps目录加入sys.path",{"_index":2561,"t":{"289":{"position":[[17,58]]}}}],["app在app",{"_index":2567,"t":{"289":{"position":[[270,17],[315,22]]}}}],["app没有在installed_apps中注册，则必须通过此元选项声明它属于哪个app",{"_index":2269,"t":{"258":{"position":[[417,55]]}}}],["app目录下的models.pi",{"_index":1938,"t":{"230":{"position":[[629,38]]}}}],["apt",{"_index":189,"t":{"34":{"position":[[1147,3],[1167,3],[1522,3]]}}}],["arg",{"_index":228,"t":{"34":{"position":[[2789,3],[2799,6],[2830,24],[2900,3],[2958,3],[3017,3],[3042,3],[3082,3],[3141,3],[3223,3]]},"177":{"position":[[402,6]]},"197":{"position":[[1188,6],[2389,6],[2536,6],[3146,6],[3312,6],[3858,6],[4019,6],[4402,6],[4469,6],[4623,6],[5207,6],[5278,6],[5343,6],[5498,6]]},"344":{"position":[[134,6],[549,4],[636,5]]},"459":{"position":[[404,4],[482,4]]},"516":{"position":[[28095,5],[31745,4],[79950,5]]}}}],["arg_",{"_index":3157,"t":{"459":{"position":[[417,7]]}}}],["array",{"_index":2839,"t":{"429":{"position":[[425,8]]}}}],["array2",{"_index":2768,"t":{"387":{"position":[[66,13],[104,13]]}}}],["array=(a",{"_index":2823,"t":{"427":{"position":[[201,18]]}}}],["array_nam",{"_index":2769,"t":{"389":{"position":[[62,13],[120,10]]}}}],["array_name=(value1",{"_index":2761,"t":{"379":{"position":[[36,18]]}}}],["array_name[*]}或者${#array_nam",{"_index":2766,"t":{"385":{"position":[[0,59]]}}}],["array_name[*]}或者${array_nam",{"_index":2765,"t":{"383":{"position":[[21,34]]}}}],["array_name[index",{"_index":2764,"t":{"381":{"position":[[15,20]]},"389":{"position":[[44,17]]}}}],["array_new=(${array1",{"_index":2767,"t":{"387":{"position":[[42,23],[80,23]]}}}],["articl",{"_index":1990,"t":{"236":{"position":[[554,8],[567,9]]}}}],["articles/2003",{"_index":1995,"t":{"236":{"position":[[687,15],[828,14]]}}}],["articles/2003/03/build",{"_index":1997,"t":{"236":{"position":[[877,26]]}}}],["articles/2005/03",{"_index":1991,"t":{"236":{"position":[[588,18]]}}}],["artifact_nam",{"_index":939,"t":{"143":{"position":[[292,13]]}}}],["as_view()方法的时候，才会将act",{"_index":1754,"t":{"199":{"position":[[176,46]]}}}],["ascii",{"_index":2004,"t":{"238":{"position":[[110,5]]}}}],["asgi",{"_index":1971,"t":{"232":{"position":[[674,4]]}}}],["asgi.pi",{"_index":1959,"t":{"232":{"position":[[58,7]]}}}],["assign",{"_index":3848,"t":{"516":{"position":[[19539,8],[33470,8],[41150,8],[45583,8]]},"526":{"position":[[4484,8]]}}}],["assum",{"_index":2056,"t":{"249":{"position":[[397,6]]}}}],["ast.literal_eval(urllib.urlopen(\"jenkins_url\").read",{"_index":320,"t":{"52":{"position":[[208,54]]}}}],["attach",{"_index":76,"t":{"23":{"position":[[780,6]]},"516":{"position":[[12440,6]]}}}],["attr",{"_index":1445,"t":{"188":{"position":[[2316,7],[2450,5]]}}}],["attr2]{0,10",{"_index":353,"t":{"62":{"position":[[193,12]]}}}],["attrs['bcom",{"_index":1447,"t":{"188":{"position":[[2358,17]]}}}],["attrs['bread",{"_index":1446,"t":{"188":{"position":[[2332,14]]}}}],["auth",{"_index":495,"t":{"85":{"position":[[534,5]]}}}],["auth_pass",{"_index":3316,"t":{"504":{"position":[[1415,9],[2463,9]]}}}],["auth_typ",{"_index":3315,"t":{"504":{"position":[[1400,9],[2448,9]]}}}],["authent",{"_index":3314,"t":{"504":{"position":[[1383,14],[2431,14]]},"516":{"position":[[120878,38]]}}}],["authentication_class",{"_index":1615,"t":{"197":{"position":[[334,22]]},"201":{"position":[[402,22]]},"209":{"position":[[282,22]]},"219":{"position":[[337,22]]}}}],["authentication_classess",{"_index":1801,"t":{"201":{"position":[[206,41]]}}}],["authenticationfail",{"_index":1918,"t":{"227":{"position":[[1054,20]]}}}],["author",{"_index":11,"t":{"15":{"position":[[51,13]]},"177":{"position":[[158,7],[210,7],[576,7],[653,7],[749,8],[799,7],[863,7],[1391,7],[1494,8]]},"258":{"position":[[2988,9]]},"352":{"position":[[31,12],[49,7],[62,9]]},"369":{"position":[[410,11]]},"422":{"position":[[14,11]]},"516":{"position":[[120917,18],[121145,56],[122692,13],[122974,13],[123729,13],[123866,13],[124077,13],[124213,13],[124486,15],[124643,13],[124790,13],[126547,13]]},"644":{"position":[[80,13]]},"646":{"position":[[87,13]]},"649":{"position":[[80,13]]}}}],["author.objects.al",{"_index":1191,"t":{"177":{"position":[[809,20]]}}}],["author.objects.filter(id__in=author_id",{"_index":1183,"t":{"177":{"position":[[586,40]]}}}],["author_id",{"_index":1180,"t":{"177":{"position":[[475,10]]}}}],["author_id=p.id",{"_index":1209,"t":{"177":{"position":[[1469,15]]}}}],["author_nam",{"_index":1201,"t":{"177":{"position":[[1158,15]]}}}],["author_names(self",{"_index":1212,"t":{"177":{"position":[[1599,18]]}}}],["authorfilt",{"_index":1202,"t":{"177":{"position":[[1188,14]]}}}],["authorfilter(admin.simplelistfilt",{"_index":1186,"t":{"177":{"position":[[681,37]]}}}],["authority=/etc/kubernetes/pki/ca.crt",{"_index":5172,"t":{"516":{"position":[[125435,36]]}}}],["auto",{"_index":205,"t":{"34":{"position":[[1541,4]]},"449":{"position":[[66,5]]},"451":{"position":[[548,5]]}}}],["auto_now:每当对象被保存时将字段设为当前日期，常用于保存最后修改时间。auto_now_add：每当对象被创建时，设为当前日期，常用于保存创建日期(注意，它是不可修改的)。设置上面两个参数就相当于给field添加了editable=false和blank=true属性。如果想具有修改属性，请用default参数。例子：pub_tim",{"_index":2076,"t":{"252":{"position":[[826,172]]}}}],["auto_now_add=fals",{"_index":2074,"t":{"252":{"position":[[663,19]]}}}],["autofield",{"_index":2060,"t":{"252":{"position":[[38,9]]}}}],["autoindex",{"_index":3122,"t":{"457":{"position":[[4555,10],[4715,9],[4734,16]]}}}],["autoindex.conf",{"_index":3123,"t":{"457":{"position":[[4603,14]]}}}],["autoindex_exact_s",{"_index":3127,"t":{"457":{"position":[[4760,20]]}}}],["autoindex_format",{"_index":3129,"t":{"457":{"position":[[4833,16]]}}}],["autoindex_localtim",{"_index":3130,"t":{"457":{"position":[[4896,19]]}}}],["autosc",{"_index":5135,"t":{"516":{"position":[[123127,14]]}}}],["autoscal",{"_index":3723,"t":{"516":{"position":[[12553,9]]}}}],["autoscaler(hpa",{"_index":4555,"t":{"516":{"position":[[79090,16]]}}}],["autoscaler（hpa",{"_index":4558,"t":{"516":{"position":[[79252,21]]}}}],["autoscaler：可以根据集群负载自动水平调整pod",{"_index":4396,"t":{"516":{"position":[[64787,38]]}}}],["autoscaling/v1",{"_index":4603,"t":{"516":{"position":[[81741,14]]},"585":{"position":[[366,14]]}}}],["avail",{"_index":3869,"t":{"516":{"position":[[20570,9],[23802,9],[23861,17],[23952,9],[24328,9],[24658,9],[38623,10],[52585,10],[54967,10],[55082,10],[58900,10],[70740,9],[70847,9],[71521,9],[76523,9],[81461,9],[82919,9],[86023,9],[112640,14],[113989,9],[114033,9],[114077,9]]},"526":{"position":[[5515,9]]},"535":{"position":[[150,10],[265,10]]},"555":{"position":[[187,10]]},"585":{"position":[[86,9]]},"589":{"position":[[799,9]]},"620":{"position":[[129,9],[173,9],[217,9]]}}}],["aw",{"_index":285,"t":{"42":{"position":[[659,3]]}}}],["awar",{"_index":2664,"t":{"328":{"position":[[172,8]]}}}],["awk",{"_index":408,"t":{"73":{"position":[[1088,3]]}}}],["awk15p.t6bamck54w69u4s8",{"_index":3602,"t":{"516":{"position":[[7897,23]]}}}],["azru",{"_index":283,"t":{"42":{"position":[[644,5]]}}}],["a|b",{"_index":2656,"t":{"325":{"position":[[477,3]]}}}],["a或b",{"_index":2657,"t":{"325":{"position":[[481,5]]}}}],["a访问不到pipelin",{"_index":935,"t":{"143":{"position":[[104,13]]}}}],["a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpr",{"_index":2572,"t":{"294":{"position":[[35,52]]}}}],["b",{"_index":239,"t":{"34":{"position":[[4311,1]]},"275":{"position":[[1550,4],[1570,4],[1614,4],[1656,4],[1676,4],[1753,4]]},"311":{"position":[[41,1],[198,3]]},"322":{"position":[[79,5]]},"328":{"position":[[260,3],[264,3]]},"392":{"position":[[29,1],[62,2],[88,2],[116,2],[138,2],[163,2],[193,1],[238,2],[290,2],[359,2]]},"394":{"position":[[59,1],[111,2],[162,2],[217,2],[273,2],[330,2],[388,2]]},"396":{"position":[[29,1],[150,2],[217,2]]},"398":{"position":[[33,1],[79,2],[129,2]]},"400":{"position":[[33,1],[86,2],[137,2]]},"402":{"position":[[115,1],[152,1]]},"427":{"position":[[220,1]]},"469":{"position":[[413,1],[418,1]]},"516":{"position":[[79619,1]]}}}],["b.txt",{"_index":2848,"t":{"432":{"position":[[185,5]]}}}],["b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch",{"_index":2846,"t":{"432":{"position":[[120,44]]}}}],["back",{"_index":4517,"t":{"516":{"position":[[76411,4]]}}}],["back_end",{"_index":3037,"t":{"455":{"position":[[973,9]]}}}],["back_end_serv",{"_index":3021,"t":{"455":{"position":[[79,16]]}}}],["backend",{"_index":2406,"t":{"267":{"position":[[66,10]]},"269":{"position":[[102,10],[353,10],[559,10],[1279,10],[1475,10],[1667,10],[1852,10],[2238,10]]},"516":{"position":[[104423,8],[104523,8],[104918,8],[105723,8],[105823,8],[106308,8]]},"601":{"position":[[85,8]]},"614":{"position":[[150,8]]}}}],["backend/stat",{"_index":1099,"t":{"170":{"position":[[897,15],[1187,15]]}}}],["backofflimit",{"_index":4672,"t":{"516":{"position":[[86871,13],[90157,13]]}}}],["backspac",{"_index":2634,"t":{"311":{"position":[[65,9]]}}}],["backup",{"_index":3033,"t":{"455":{"position":[[593,6]]},"504":{"position":[[2166,6]]}}}],["bad",{"_index":1432,"t":{"188":{"position":[[1543,3]]}}}],["balanc",{"_index":3049,"t":{"455":{"position":[[1430,9],[1807,9],[2172,9]]}}}],["balance.lion.club",{"_index":3048,"t":{"455":{"position":[[1402,18],[1779,18],[2144,18]]}}}],["bar",{"_index":621,"t":{"103":{"position":[[497,5]]},"107":{"position":[[227,5]]},"244":{"position":[[224,8]]},"258":{"position":[[1119,6],[1149,3],[1183,22],[1241,18]]}}}],["bar(models.model",{"_index":2283,"t":{"258":{"position":[[1010,18]]}}}],["bar.groovi",{"_index":594,"t":{"101":{"position":[[100,10]]}}}],["bar.json",{"_index":600,"t":{"101":{"position":[[257,8]]}}}],["bar.objects.get(pk=1",{"_index":2285,"t":{"258":{"position":[[1155,21]]}}}],["bar/foo",{"_index":670,"t":{"110":{"position":[[783,10]]}}}],["base",{"_index":10,"t":{"15":{"position":[[45,5]]},"516":{"position":[[31948,4],[32273,4],[32465,4],[32589,4],[121073,20],[122275,5]]}}}],["base.txt",{"_index":970,"t":{"149":{"position":[[697,11],[784,11]]}}}],["base.yaml",{"_index":4047,"t":{"516":{"position":[[31885,17],[32255,9]]}}}],["base64",{"_index":972,"t":{"149":{"position":[[745,9]]},"516":{"position":[[119243,17],[119302,6],[119372,6]]}}}],["base64算法进行编码后的字符串放在http请求中的head",{"_index":5108,"t":{"516":{"position":[[121094,50]]}}}],["base_manager_nam",{"_index":2276,"t":{"258":{"position":[[713,17]]}}}],["baseurl=http://mirror.aliyun.com/kubernetes/yum/repos/kubernet",{"_index":3555,"t":{"516":{"position":[[6232,64]]}}}],["bash",{"_index":2582,"t":{"303":{"position":[[679,79]]},"350":{"position":[[2,4],[13,54]]},"429":{"position":[[12,4],[479,4],[897,35]]}}}],["basicaccountseri",{"_index":1634,"t":{"197":{"position":[[1144,22]]}}}],["basicauthent",{"_index":1804,"t":{"201":{"position":[[313,19],[451,20]]}}}],["bat(\"mv",{"_index":801,"t":{"114":{"position":[[863,7]]}}}],["batch",{"_index":5136,"t":{"516":{"position":[[123142,7]]}}}],["batch/v1",{"_index":4666,"t":{"516":{"position":[[86597,8],[87603,8]]}}}],["batch/v1beta1",{"_index":4704,"t":{"516":{"position":[[89655,13],[90841,13]]}}}],["bat、powershel",{"_index":1005,"t":{"153":{"position":[[466,17]]}}}],["bat步骤执行的是windows的批处理命令。powershell步骤执行的是powershell脚本，支持3+版本。这两个步骤支持的参数与sh",{"_index":1006,"t":{"153":{"position":[[484,77]]}}}],["bb",{"_index":3090,"t":{"457":{"position":[[2533,5],[3136,4],[5527,6],[5698,6],[5855,4]]}}}],["bbs/abc/test.html",{"_index":3139,"t":{"457":{"position":[[5585,18],[5623,18],[5661,18],[5757,18],[5795,18]]}}}],["bc",{"_index":2838,"t":{"429":{"position":[[326,2]]}}}],["bcomment",{"_index":1233,"t":{"184":{"position":[[319,8],[791,8]]},"186":{"position":[[366,11],[641,12],[762,12],[883,12],[1003,12],[2566,12],[3118,8],[3577,11]]},"188":{"position":[[638,8],[2347,8],[2387,9],[2584,11],[3227,8]]},"190":{"position":[[800,8],[1700,11],[1747,11],[1970,11],[2044,11],[2373,8]]}}}],["be7a",{"_index":5246,"t":{"516":{"position":[[130557,4]]}}}],["beij",{"_index":3657,"t":{"516":{"position":[[9972,7],[10612,7],[10656,8]]},"520":{"position":[[562,7]]}}}],["besteffort",{"_index":3838,"t":{"516":{"position":[[19271,10]]},"526":{"position":[[4216,10]]}}}],["beta.kubernetes.io/os,则以nod",{"_index":4308,"t":{"516":{"position":[[57338,45]]},"545":{"position":[[1054,45]]}}}],["bh8dr",{"_index":4597,"t":{"516":{"position":[[81561,5],[83379,5]]},"585":{"position":[[186,5]]},"589":{"position":[[1259,5]]}}}],["bigautofield",{"_index":2063,"t":{"252":{"position":[[221,12]]}}}],["bigintegerfield",{"_index":2065,"t":{"252":{"position":[[276,15]]}}}],["bin",{"_index":2716,"t":{"347":{"position":[[149,5]]}}}],["bin/bash",{"_index":79,"t":{"23":{"position":[[898,9]]},"27":{"position":[[783,9]]},"42":{"position":[[532,9],[1226,9]]},"46":{"position":[[1368,9]]},"73":{"position":[[732,11],[1040,11]]},"356":{"position":[[66,11]]},"369":{"position":[[396,11]]},"372":{"position":[[56,11]]},"374":{"position":[[524,11]]},"422":{"position":[[0,11]]},"516":{"position":[[4983,11],[5215,9]]}}}],["bin/bashfor",{"_index":2596,"t":{"303":{"position":[[1464,14]]}}}],["bin/cat\",\"/tmp/hello.txt",{"_index":4196,"t":{"516":{"position":[[44117,29]]}}}],["bin/echo",{"_index":216,"t":{"34":{"position":[[2533,13]]},"516":{"position":[[34419,9],[34604,9],[35743,9]]}}}],["bin/php",{"_index":2719,"t":{"347":{"position":[[321,8]]}}}],["bin/sh",{"_index":88,"t":{"25":{"position":[[165,7]]},"347":{"position":[[305,7]]},"364":{"position":[[43,9]]},"504":{"position":[[2895,9]]},"516":{"position":[[34367,12],[34521,11],[34987,7],[35126,7],[35712,12],[36057,7],[42703,11],[87314,11],[87856,11],[90434,11],[91092,11],[95305,7],[99074,7],[107695,12],[108912,12],[110796,12],[115832,12],[116154,12],[118976,7],[120388,7]]},"642":{"position":[[51,7]]}}}],["binary_remote_addr",{"_index":3152,"t":{"459":{"position":[[189,18]]}}}],["binaryfield",{"_index":2069,"t":{"252":{"position":[[400,11]]}}}],["bind",{"_index":15,"t":{"15":{"position":[[100,7]]},"42":{"position":[[184,4]]},"516":{"position":[[123748,7],[124103,7],[124662,7],[126566,7],[126892,7]]},"646":{"position":[[113,7]]},"649":{"position":[[99,7]]}}}],["birth_day",{"_index":2337,"t":{"258":{"position":[[4283,12],[4528,12]]}}}],["bit",{"_index":2786,"t":{"402":{"position":[[447,12]]}}}],["blank",{"_index":2181,"t":{"254":{"position":[[215,5],[1117,6]]}}}],["blank=tru",{"_index":2213,"t":{"256":{"position":[[350,11]]}}}],["blockdevic",{"_index":4964,"t":{"516":{"position":[[109260,11]]}}}],["blog/article/1)来创建其缓存键。这意味着不同用户请求同样路径都会得到同样的缓存版本，不考虑客户端us",{"_index":2491,"t":{"273":{"position":[[1624,74]]}}}],["blog_id",{"_index":2043,"t":{"244":{"position":[[265,11]]}}}],["blogs、learn、pol",{"_index":2555,"t":{"282":{"position":[[106,40]]}}}],["bn7wb",{"_index":4370,"t":{"516":{"position":[[62958,5]]}}}],["bodi",{"_index":330,"t":{"58":{"position":[[121,5]]},"510":{"position":[[979,4]]},"516":{"position":[[20123,5],[20168,6],[26273,5],[26312,6]]},"526":{"position":[[5068,5],[5113,6]]}}}],["body_bytes_s",{"_index":2959,"t":{"449":{"position":[[492,16]]}}}],["body_filter_by_lua",{"_index":3409,"t":{"510":{"position":[[929,18]]}}}],["body_filter_by_lua_fil",{"_index":3410,"t":{"510":{"position":[[948,23]]}}}],["book",{"_index":975,"t":{"149":{"position":[[849,4]]},"177":{"position":[[152,5],[359,4]]},"186":{"position":[[114,4],[3419,4]]},"188":{"position":[[4791,4],[5156,4]]},"197":{"position":[[673,5],[1982,4]]},"199":{"position":[[289,5],[446,5],[2418,4],[2575,4]]}}}],["book.bpub_d",{"_index":1483,"t":{"188":{"position":[[5671,16]]}}}],["book.bread",{"_index":1783,"t":{"199":{"position":[[2600,10]]}}}],["book.btitl",{"_index":1477,"t":{"188":{"position":[[5356,11]]}}}],["book.sav",{"_index":1785,"t":{"199":{"position":[[2639,11]]}}}],["book_q",{"_index":1358,"t":{"186":{"position":[[449,7]]}}}],["bookadmin(admin.modeladmin",{"_index":1200,"t":{"177":{"position":[[1104,28]]}}}],["bookauthor",{"_index":1170,"t":{"177":{"position":[[166,10]]}}}],["bookauthor(book_id=obj.id",{"_index":1208,"t":{"177":{"position":[[1441,27]]}}}],["bookauthor.objects.bulk_create(snp_list",{"_index":1211,"t":{"177":{"position":[[1554,40]]}}}],["bookauthor.objects.filter(author_id=self.value()).values_list(\"book_id",{"_index":1197,"t":{"177":{"position":[[935,72]]}}}],["bookauthor.objects.filter(book_id=obj.id).delet",{"_index":1210,"t":{"177":{"position":[[1503,50],[1751,50]]}}}],["bookauthor.objects.filter(book_id=self.instance.pk).values_list(\"author_id",{"_index":1181,"t":{"177":{"position":[[488,76]]}}}],["bookdetailview(genericapiview",{"_index":1648,"t":{"197":{"position":[[1850,31]]}}}],["bookdetailview(retrieveapiview",{"_index":1822,"t":{"209":{"position":[[177,32]]},"219":{"position":[[232,32]]},"225":{"position":[[366,32]]}}}],["bookdetailview(retrievemodelmixin",{"_index":1695,"t":{"197":{"position":[[4174,34]]}}}],["bookform",{"_index":1203,"t":{"177":{"position":[[1285,8]]}}}],["bookform(forms.modelform",{"_index":1171,"t":{"177":{"position":[[183,26]]}}}],["bookinfo",{"_index":1224,"t":{"184":{"position":[[95,24]]},"186":{"position":[[105,8],[3410,8]]},"188":{"position":[[5108,10],[5147,8],[5340,10]]},"190":{"position":[[289,8],[1128,8],[1290,8],[1643,8],[1913,8]]}}}],["bookinfo(**validated_data",{"_index":1458,"t":{"188":{"position":[[3793,26]]}}}],["bookinfo(models.model",{"_index":1225,"t":{"184":{"position":[[126,23]]}}}],["bookinfo.doesnotexist",{"_index":1758,"t":{"199":{"position":[[489,22]]}}}],["bookinfo.objects.al",{"_index":1359,"t":{"186":{"position":[[459,22]]},"197":{"position":[[681,22],[1893,22],[2989,22],[4237,22]]},"199":{"position":[[297,22],[1582,22],[2312,22]]},"209":{"position":[[221,22]]},"211":{"position":[[402,22]]},"219":{"position":[[276,22]]},"221":{"position":[[325,22]]},"223":{"position":[[321,22]]},"225":{"position":[[410,22]]}}}],["bookinfo.objects.all().order_by('id",{"_index":1886,"t":{"225":{"position":[[1000,37],[1509,37]]}}}],["bookinfo.objects.create(**validated_data",{"_index":1468,"t":{"188":{"position":[[4331,41]]}}}],["bookinfo.objects.get(id=2",{"_index":1347,"t":{"186":{"position":[[121,26],[3426,26]]},"188":{"position":[[5163,26]]}}}],["bookinfo.objects.get(id=pk",{"_index":1757,"t":{"199":{"position":[[454,27]]}}}],["bookinfo.objects.latest('id",{"_index":1781,"t":{"199":{"position":[[2425,29]]}}}],["bookinfoseri",{"_index":1349,"t":{"186":{"position":[[193,18],[2394,20],[2784,27],[3363,18]]},"188":{"position":[[304,27],[835,18],[1967,18],[2492,18],[3388,18],[4946,18]]},"190":{"position":[[172,26],[450,18],[486,20],[522,21],[1396,20],[2096,21]]},"197":{"position":[[1935,18],[3031,18],[4279,18]]},"199":{"position":[[1624,18],[2354,18]]},"209":{"position":[[263,18]]},"211":{"position":[[444,18]]},"219":{"position":[[318,18]]},"221":{"position":[[367,18]]},"223":{"position":[[363,18]]},"225":{"position":[[452,18],[1057,18],[1566,18]]}}}],["bookinfoserializer(book",{"_index":1350,"t":{"186":{"position":[[225,24],[3466,24]]},"188":{"position":[[5255,24]]},"197":{"position":[[717,25]]},"199":{"position":[[333,25],[575,25]]}}}],["bookinfoserializer(book_q",{"_index":1360,"t":{"186":{"position":[[495,27]]}}}],["bookinfoserializer(data=data",{"_index":1412,"t":{"188":{"position":[[893,29],[1277,29],[2027,29],[2604,29],[3448,29],[5029,29]]}}}],["bookinfoserializer(instance=book",{"_index":1481,"t":{"188":{"position":[[5592,33],[5714,33]]}}}],["bookinfoserializer(serializers.modelseri",{"_index":1489,"t":{"190":{"position":[[205,48],[1044,48],[1206,48],[1559,48],[1829,48]]}}}],["bookinfoserializer(serializers.seri",{"_index":1236,"t":{"184":{"position":[[491,43]]},"186":{"position":[[2818,43]]},"188":{"position":[[338,43],[1736,43],[2234,43],[2900,43],[3680,43],[4218,43]]}}}],["bookinfoviewset(mixins.listmodelmixin",{"_index":1772,"t":{"199":{"position":[[1488,38],[2218,38]]}}}],["bookinfoviewset(modelviewset",{"_index":1827,"t":{"211":{"position":[[360,30]]}}}],["bookinfoviewset(viewsets.viewset",{"_index":1755,"t":{"199":{"position":[[229,34]]}}}],["bookinfoviewset.as_view({'get",{"_index":1761,"t":{"199":{"position":[[753,31]]}}}],["bookinfoviewset.as_view({'get':'list",{"_index":1760,"t":{"199":{"position":[[683,40]]}}}],["bookinfo数据，每个bookinfo对象关联的英雄heroinfo对象可能有多个，此时关联字段类型的指明仍可使用上述几种方式，只是在声明关联字段时，多补充一个many=tru",{"_index":1403,"t":{"186":{"position":[[2617,128]]}}}],["booklistview(apiview",{"_index":1624,"t":{"197":{"position":[[626,22]]}}}],["booklistview(listapiview",{"_index":1861,"t":{"221":{"position":[[287,26]]},"223":{"position":[[283,26]]},"225":{"position":[[962,26],[1471,26]]}}}],["booklistview(listmodelmixin",{"_index":1671,"t":{"197":{"position":[[2932,28]]}}}],["booktest.model",{"_index":1346,"t":{"186":{"position":[[82,15],[1987,15],[3387,15]]}}}],["booktest.seri",{"_index":1348,"t":{"186":{"position":[[165,20],[1935,20],[3335,20]]},"188":{"position":[[807,20],[1939,20],[2464,20],[3360,20]]},"190":{"position":[[422,20]]}}}],["booktest/xiyouji.png",{"_index":1374,"t":{"186":{"position":[[1028,26]]}}}],["boolean",{"_index":718,"t":{"112":{"position":[[362,7],[689,7]]},"516":{"position":[[28289,7]]}}}],["booleanfield",{"_index":1247,"t":{"184":{"position":[[1015,12],[1028,14]]},"252":{"position":[[426,12]]}}}],["booleanparam",{"_index":928,"t":{"141":{"position":[[424,28],[453,21]]}}}],["booleanparam(defaultvalu",{"_index":920,"t":{"141":{"position":[[97,26]]}}}],["booleanparam(nam",{"_index":1012,"t":{"155":{"position":[[376,18],[524,18]]}}}],["borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7",{"_index":3420,"t":{"516":{"position":[[632,47]]}}}],["bothin",{"_index":48,"t":{"21":{"position":[[456,6]]},"25":{"position":[[123,6]]}}}],["bothin/tomcat:1.0",{"_index":50,"t":{"21":{"position":[[495,17],[585,17]]}}}],["bothin;sleep",{"_index":93,"t":{"25":{"position":[[202,12]]}}}],["bound",{"_index":5017,"t":{"516":{"position":[[112675,11],[115309,5],[115347,5],[115385,5],[115558,5],[115609,5],[115660,5],[116748,5],[116786,5],[116824,5],[117004,5],[117055,5],[117106,5]]},"624":{"position":[[128,5],[166,5],[204,5]]},"626":{"position":[[135,5],[186,5],[237,5]]},"632":{"position":[[115,5],[153,5],[191,5]]},"634":{"position":[[142,5],[193,5],[244,5]]}}}],["bpub_dat",{"_index":1229,"t":{"184":{"position":[[210,9],[666,9]]},"186":{"position":[[326,12],[597,13],[718,13],[839,13],[959,13],[2993,9],[3537,12]]},"188":{"position":[[513,9],[861,13],[1052,12],[1238,12],[2545,12],[3102,9],[4991,12],[5215,12],[5658,12]]},"190":{"position":[[636,9],[1163,12],[1678,12],[1948,12],[2216,9]]},"223":{"position":[[451,12]]}}}],["br_netfilt",{"_index":3515,"t":{"516":{"position":[[4648,12],[4708,12]]}}}],["branch",{"_index":915,"t":{"139":{"position":[[1099,6],[1236,6],[1252,6]]}}}],["bread",{"_index":1231,"t":{"184":{"position":[[260,5],[729,5]]},"186":{"position":[[353,8],[626,9],[747,9],[868,9],[988,9],[2551,9],[3056,5],[3564,8]]},"188":{"position":[[576,5],[2324,5],[2379,5],[2571,8],[3165,5]]},"190":{"position":[[705,5],[1691,8],[1738,8],[1961,8],[1999,8],[2287,5]]},"221":{"position":[[413,8]]},"223":{"position":[[442,8],[498,5]]}}}],["break",{"_index":2808,"t":{"415":{"position":[[91,16]]},"457":{"position":[[3433,5],[4151,6],[4487,6]]}}}],["browser/$1",{"_index":3120,"t":{"457":{"position":[[4134,16]]}}}],["btitl",{"_index":1226,"t":{"184":{"position":[[150,6],[608,6]]},"186":{"position":[[308,9],[577,10],[698,10],[819,10],[940,10],[2513,10],[2935,6],[3519,9]]},"188":{"position":[[455,6],[975,10],[1217,10],[1993,10],[2107,10],[2518,10],[3017,6],[3414,10],[3528,10],[4972,10],[5197,10]]},"190":{"position":[[590,6],[1153,9],[1668,9],[1938,9],[2168,6]]},"221":{"position":[[402,10]]}}}],["bug",{"_index":519,"t":{"88":{"position":[[658,11]]}}}],["build",{"_index":153,"t":{"30":{"position":[[11,5],[73,5]]},"32":{"position":[[15,5],[362,5],[486,5],[636,5],[925,5],[973,5]]},"34":{"position":[[3000,5],[3011,5]]},"46":{"position":[[64,5]]},"112":{"position":[[871,5]]},"155":{"position":[[0,15],[333,6],[421,13]]},"238":{"position":[[116,32]]}}}],["build_numb",{"_index":665,"t":{"110":{"position":[[687,12],[832,14]]},"143":{"position":[[274,17]]},"151":{"position":[[717,15]]}}}],["build_tag",{"_index":671,"t":{"110":{"position":[[794,9]]}}}],["builddep",{"_index":191,"t":{"34":{"position":[[1186,10],[1553,10]]}}}],["builddeps='gcc",{"_index":184,"t":{"34":{"position":[[1106,14]]}}}],["builddiscarder(logrot",{"_index":508,"t":{"88":{"position":[[114,29]]}}}],["builddiscarder(logrotator(numtokeepstr",{"_index":870,"t":{"137":{"position":[[237,39]]}}}],["builddiscarder：保存最近历史构建记录的数量。当pipeline执行完成后，会在硬盘上保存制品和构建执行日志，如果长时间不清理会占用大量空间，设置此选项后会自动清理。此选项只能在pipeline下的opt",{"_index":868,"t":{"137":{"position":[[105,121],[286,121]]}}}],["buildingtag",{"_index":902,"t":{"139":{"position":[[624,13]]}}}],["buildingtag：如果pipeline所执行的代码被打了tag（代码仓库打tag",{"_index":901,"t":{"139":{"position":[[568,48]]}}}],["buildscript",{"_index":807,"t":{"116":{"position":[[279,11]]}}}],["buildwrapp",{"_index":573,"t":{"92":{"position":[[772,13]]}}}],["buildwrapper类是jenkins中用于包装构建过程的抽象类，该类同样实现了describable接口，并提供了相应的descriptor",{"_index":574,"t":{"92":{"position":[[786,75]]}}}],["build步骤其实也是一种触发pipeline执行的方式，它与triggers指令中的upstream",{"_index":1008,"t":{"155":{"position":[[146,59]]}}}],["build步骤是可以带参数的，而upstream",{"_index":1010,"t":{"155":{"position":[[265,41]]}}}],["build步骤是由上游pipeline使用的，而upstream方式是由下游pipelin",{"_index":1009,"t":{"155":{"position":[[210,50]]}}}],["build：run",{"_index":555,"t":{"90":{"position":[[1415,9]]}}}],["busybox",{"_index":215,"t":{"34":{"position":[[2514,7]]},"516":{"position":[[32048,7],[32820,7],[33934,7],[34007,7],[34027,61],[34330,7],[35118,7],[35675,7],[36045,7],[107658,7],[107787,20],[108371,7],[108875,7],[109678,7],[110759,7],[115795,7],[116117,7]]}}}],["busybox:1.30",{"_index":4049,"t":{"516":{"position":[[32063,12],[32835,12],[33827,14],[34345,12],[35690,12],[40553,12],[40694,12],[41239,14],[87292,12],[87834,12],[88161,12],[88217,12],[90412,12],[91070,12],[107673,12],[108890,12],[110774,12],[115810,12],[116132,12]]}}}],["busybox并不是一个程序，而是类似于一个工具类的集合，kubernetes集群启动管理后，它会自动关闭。解决方法就是让其一直在运行，这就用到了command",{"_index":4071,"t":{"516":{"position":[[34089,85]]}}}],["busybox：用1.30版本的busybox镜像创建，（busybox是一个小巧的linux",{"_index":4051,"t":{"516":{"position":[[32148,52]]}}}],["bypass",{"_index":3219,"t":{"485":{"position":[[137,7]]}}}],["byte",{"_index":5094,"t":{"516":{"position":[[119806,5],[119824,5],[130651,5],[131644,5]]}}}],["bzip2",{"_index":176,"t":{"34":{"position":[[628,5]]}}}],["b的变量。在pipeline之间共享变量可以通过参数化pipeline来实现。我们将在第8",{"_index":936,"t":{"143":{"position":[[118,52]]}}}],["c",{"_index":89,"t":{"25":{"position":[[174,1]]},"34":{"position":[[1335,1],[1384,1],[1412,1],[1989,1],[2050,3],[4321,1]]},"275":{"position":[[1555,5],[1578,4],[1622,4],[1661,5],[1684,4],[1758,5]]},"303":{"position":[[1486,8],[1617,6],[2087,1]]},"402":{"position":[[173,1],[211,1]]},"427":{"position":[[222,1]]},"504":{"position":[[2967,1],[3103,1],[3194,1]]},"516":{"position":[[34533,3],[34980,1],[35116,1],[36043,1],[40584,3],[40615,1],[40725,3],[40756,1],[42717,3],[108369,1],[109676,1]]}}}],["c\",\"for",{"_index":4678,"t":{"516":{"position":[[87326,7],[87868,7],[90446,7],[91104,7]]}}}],["c\",\"tail",{"_index":4942,"t":{"516":{"position":[[107708,8],[108925,8],[110809,8]]}}}],["c\",\"touch",{"_index":4073,"t":{"516":{"position":[[34380,9]]}}}],["c\",\"while",{"_index":4091,"t":{"516":{"position":[[35725,9],[115845,9],[116167,9]]}}}],["c.biancheng.net",{"_index":2590,"t":{"303":{"position":[[1206,17],[1251,39],[1314,27],[1392,17]]}}}],["c.txt",{"_index":130,"t":{"27":{"position":[[985,5]]},"432":{"position":[[191,5]]}}}],["c.txt拷贝到容器/usr/loc",{"_index":129,"t":{"27":{"position":[[944,35]]}}}],["c/",{"_index":159,"t":{"32":{"position":[[244,3]]}}}],["c1",{"_index":3661,"t":{"516":{"position":[[10251,3]]}}}],["c2",{"_index":3662,"t":{"516":{"position":[[10276,3]]}}}],["c3",{"_index":3664,"t":{"516":{"position":[[10292,3]]}}}],["c4",{"_index":3666,"t":{"516":{"position":[[10312,3]]}}}],["c5",{"_index":3667,"t":{"516":{"position":[[10339,3]]}}}],["c6",{"_index":3673,"t":{"516":{"position":[[10394,3]]}}}],["c7",{"_index":3676,"t":{"516":{"position":[[10474,3]]}}}],["c79c65bb7",{"_index":5221,"t":{"516":{"position":[[129515,9]]}}}],["c8",{"_index":3677,"t":{"516":{"position":[[10526,3]]}}}],["c848d767",{"_index":4489,"t":{"516":{"position":[[74183,8],[74230,8],[74277,8],[74324,8],[74522,8],[74724,8],[74926,8],[75128,8],[76897,8]]}}}],["c848d76789",{"_index":4506,"t":{"516":{"position":[[75492,10]]}}}],["c=cn/st=bj/l=bj/o=nginx/cn=itheima.com",{"_index":4922,"t":{"516":{"position":[[105356,41]]},"606":{"position":[[95,41]]}}}],["ca",{"_index":3245,"t":{"491":{"position":[[57,2],[70,2]]},"516":{"position":[[7941,2],[125253,2]]}}}],["ca.crt",{"_index":5163,"t":{"516":{"position":[[125256,6],[131631,7]]}}}],["ca.key",{"_index":5165,"t":{"516":{"position":[[125270,6]]}}}],["cach",{"_index":1714,"t":{"197":{"position":[[5021,5]]},"267":{"position":[[42,6],[167,10]]},"269":{"position":[[78,6],[329,6],[454,10],[535,6],[1255,6],[1451,6],[1643,6],[1828,6],[2214,6]]},"271":{"position":[[29,6]]},"273":{"position":[[794,5],[832,5]]},"275":{"position":[[120,6]]},"277":{"position":[[255,6],[292,5]]},"487":{"position":[[730,5],[1019,6],[1082,6],[1313,5]]}}}],["cache.add('add_key",{"_index":2532,"t":{"275":{"position":[[1310,20]]}}}],["cache.add(key,value,timeout=default_timeout,version=non",{"_index":2509,"t":{"275":{"position":[[405,57]]}}}],["cache.clear",{"_index":2518,"t":{"275":{"position":[[793,13],[1768,13]]}}}],["cache.clos",{"_index":2525,"t":{"275":{"position":[[1049,13],[1797,13]]}}}],["cache.decr(key,delta=1,version=non",{"_index":2523,"t":{"275":{"position":[[978,36]]}}}],["cache.delete('a",{"_index":2539,"t":{"275":{"position":[[1707,17]]}}}],["cache.delete(key,version=non",{"_index":2516,"t":{"275":{"position":[[726,30]]}}}],["cache.delete_many(['a",{"_index":2540,"t":{"275":{"position":[[1729,23]]}}}],["cache.get('add_key",{"_index":2533,"t":{"275":{"position":[[1406,20]]}}}],["cache.get('my_key",{"_index":2528,"t":{"275":{"position":[[1129,19],[1198,19]]}}}],["cache.get(key,default=none,version=non",{"_index":2507,"t":{"275":{"position":[[339,40]]}}}],["cache.get_many(['a",{"_index":2537,"t":{"275":{"position":[[1529,20],[1635,20]]}}}],["cache.get_many(key,version=non",{"_index":2512,"t":{"275":{"position":[[586,32]]}}}],["cache.get_or_set(key,default,timeout=defalut_timeout,version=non",{"_index":2511,"t":{"275":{"position":[[495,66]]}}}],["cache.incr(key,delta=1,version=non",{"_index":2521,"t":{"275":{"position":[[907,36]]}}}],["cache.lion.club",{"_index":3235,"t":{"487":{"position":[[541,16],[966,16]]}}}],["cache.set('a",{"_index":2534,"t":{"275":{"position":[[1463,14]]}}}],["cache.set('add_key",{"_index":2531,"t":{"275":{"position":[[1268,20]]}}}],["cache.set('b",{"_index":2535,"t":{"275":{"position":[[1485,14]]}}}],["cache.set('c",{"_index":2536,"t":{"275":{"position":[[1507,14]]}}}],["cache.set('my_key",{"_index":2526,"t":{"275":{"position":[[1084,19]]}}}],["cache.set(key,value,timeout=default_timeout,version=non",{"_index":2506,"t":{"275":{"position":[[266,57]]}}}],["cache.set_many(dict,timeout",{"_index":2514,"t":{"275":{"position":[[662,28]]}}}],["cache.set_many({'a",{"_index":2538,"t":{"275":{"position":[[1590,20]]}}}],["cache.touch(key,timeout=default_timeout,version=non",{"_index":2520,"t":{"275":{"position":[[833,53]]}}}],["cache1",{"_index":2501,"t":{"275":{"position":[[127,6]]}}}],["cache2",{"_index":2503,"t":{"275":{"position":[[154,6]]}}}],["cache_control",{"_index":2485,"t":{"273":{"position":[[1111,15],[1321,13],[1384,13],[1463,13]]}}}],["cache_control(must_revalidate=tru",{"_index":2488,"t":{"273":{"position":[[1514,36]]}}}],["cache_control(private=tru",{"_index":2486,"t":{"273":{"position":[[1398,28]]}}}],["cache_nam",{"_index":3244,"t":{"487":{"position":[[1066,11],[1119,12]]}}}],["cache_pag",{"_index":2460,"t":{"273":{"position":[[48,10],[388,10],[472,60]]}}}],["cache_page(5",{"_index":2461,"t":{"273":{"position":[[59,14]]}}}],["cache_page(60",{"_index":2470,"t":{"273":{"position":[[439,13],[582,13],[674,13]]}}}],["cache_page有一个必填参数，缓存时限，单位为秒，为了便于理解，可以写成表达式形式，如上60",{"_index":2467,"t":{"273":{"position":[[232,49]]}}}],["cache_serv",{"_index":3232,"t":{"487":{"position":[[441,13]]}}}],["cache_zon",{"_index":3236,"t":{"487":{"position":[[583,11],[1178,11]]}}}],["caches['default",{"_index":2502,"t":{"275":{"position":[[136,17]]}}}],["caches['oth",{"_index":2504,"t":{"275":{"position":[[163,16]]}}}],["cache获取默认缓存，这等于caches['default",{"_index":2505,"t":{"275":{"position":[[226,33]]}}}],["cacreateseri",{"_index":5166,"t":{"516":{"position":[[125278,14]]}}}],["cakey",{"_index":5164,"t":{"516":{"position":[[125264,5]]}}}],["call",{"_index":611,"t":{"103":{"position":[[178,4],[243,6]]},"110":{"position":[[1001,7]]},"516":{"position":[[4493,4],[4533,4]]}}}],["call(str",{"_index":626,"t":{"107":{"position":[[39,11]]},"114":{"position":[[363,11]]}}}],["camelcas",{"_index":603,"t":{"101":{"position":[[425,11]]}}}],["can't",{"_index":4202,"t":{"516":{"position":[[44674,5]]}}}],["can_deliver_pizza",{"_index":2313,"t":{"258":{"position":[[3176,23]]}}}],["cap",{"_index":2646,"t":{"320":{"position":[[53,4]]}}}],["capac",{"_index":5000,"t":{"516":{"position":[[111840,9],[112029,14],[113183,9],[113381,9],[113579,9],[113911,8],[115254,8],[115474,8],[116706,8],[116920,8]]},"620":{"position":[[51,8]]},"624":{"position":[[73,8]]},"626":{"position":[[51,8]]},"632":{"position":[[73,8]]},"634":{"position":[[58,8]]}}}],["cascad",{"_index":2216,"t":{"256":{"position":[[444,26]]}}}],["cascade=fals",{"_index":4434,"t":{"516":{"position":[[68857,21],[68943,13]]}}}],["cascade：模拟sql语言中的on",{"_index":2215,"t":{"256":{"position":[[417,19]]}}}],["case",{"_index":2805,"t":{"415":{"position":[[0,4],[40,4],[64,4],[108,4],[133,4],[154,4],[189,4],[211,4]]},"432":{"position":[[2008,4]]}}}],["cat",{"_index":2600,"t":{"303":{"position":[[1583,12],[2215,3]]},"516":{"position":[[3219,3],[4937,3],[5847,3],[42153,3],[43570,3],[44669,4],[99086,3]]}}}],["catalina_bas",{"_index":146,"t":{"27":{"position":[[1393,13]]}}}],["catalina_hom",{"_index":143,"t":{"27":{"position":[[1344,13]]}}}],["caus",{"_index":4513,"t":{"516":{"position":[[76005,5]]}}}],["cc",{"_index":2610,"t":{"303":{"position":[[2117,2]]}}}],["cd",{"_index":2569,"t":{"289":{"position":[[365,2]]},"504":{"position":[[81,2],[290,2],[473,2]]},"516":{"position":[[79737,2],[102005,2],[118986,2],[124923,2]]}}}],["ce",{"_index":3536,"t":{"516":{"position":[[5546,2],[5584,2],[5686,2]]}}}],["ce.repo",{"_index":3533,"t":{"516":{"position":[[5446,7],[5481,7]]}}}],["ce/linux/centos/dock",{"_index":3532,"t":{"516":{"position":[[5423,22]]}}}],["cee0",{"_index":1273,"t":{"184":{"position":[[1585,4],[1745,4]]}}}],["cento",{"_index":87,"t":{"25":{"position":[[158,6]]},"27":{"position":[[570,11],[587,6],[818,6],[905,6]]},"432":{"position":[[2570,7],[2611,6],[2652,6]]},"516":{"position":[[3243,6]]}}}],["centos,并且每两秒在console输出一个hello",{"_index":86,"t":{"25":{"position":[[89,33]]}}}],["centos7",{"_index":371,"t":{"73":{"position":[[49,13]]}}}],["centos7.x",{"_index":3459,"t":{"516":{"position":[[2715,21]]}}}],["cert",{"_index":3604,"t":{"516":{"position":[[7944,4],[105456,4]]},"608":{"position":[[53,4]]}}}],["certif",{"_index":5171,"t":{"516":{"position":[[125423,11]]}}}],["certificate=/etc/kubernetes/pki/devman.crt",{"_index":5176,"t":{"516":{"position":[[125601,42]]}}}],["certs=tru",{"_index":5170,"t":{"516":{"position":[[125410,10],[125581,10]]}}}],["cftnp",{"_index":4418,"t":{"516":{"position":[[66943,5],[67455,5]]}}}],["cgi或者php",{"_index":2152,"t":{"252":{"position":[[5160,135]]}}}],["cgroup",{"_index":3569,"t":{"516":{"position":[[6687,6]]}}}],["chang",{"_index":847,"t":{"132":{"position":[[141,30]]},"177":{"position":[[1335,8],[1383,7]]},"258":{"position":[[3268,9]]},"516":{"position":[[75998,6]]}}}],["changelog",{"_index":885,"t":{"139":{"position":[[132,9]]}}}],["changelog：如果版本控制库的changelog",{"_index":884,"t":{"139":{"position":[[86,38]]}}}],["changeset",{"_index":888,"t":{"139":{"position":[[229,9]]}}}],["changeset：如果版本控制库的变更集合中包含一个或多个文件符合给定的",{"_index":887,"t":{"139":{"position":[[170,51]]}}}],["changeworkingdirectori",{"_index":791,"t":{"114":{"position":[[622,22]]}}}],["channel",{"_index":804,"t":{"116":{"position":[[110,8]]}}}],["char",{"_index":2751,"t":{"374":{"position":[[295,5],[310,5],[362,5],[377,5],[427,5],[442,5],[494,5],[509,5]]}}}],["chardevic",{"_index":4963,"t":{"516":{"position":[[109240,10]]}}}],["charfield",{"_index":1249,"t":{"184":{"position":[[1079,9]]},"252":{"position":[[545,9]]}}}],["charfield(label",{"_index":1492,"t":{"190":{"position":[[599,21],[2177,21]]}}}],["charfield(max_length=non",{"_index":1250,"t":{"184":{"position":[[1089,26]]}}}],["charfield至少需要一个max_length",{"_index":2179,"t":{"254":{"position":[[0,76]]}}}],["check_nginx_pid_restart",{"_index":3298,"t":{"504":{"position":[[850,23],[1492,23],[1899,23],[2540,23]]}}}],["checkboxselectmultipl",{"_index":1169,"t":{"177":{"position":[[109,22]]}}}],["checkout",{"_index":430,"t":{"78":{"position":[[74,8]]}}}],["checkouttosubdirectory('subdir",{"_index":871,"t":{"137":{"position":[[418,32]]}}}],["child",{"_index":3269,"t":{"496":{"position":[[78,5]]}}}],["chines",{"_index":7,"t":{"15":{"position":[[14,7]]}}}],["chkconfig",{"_index":3345,"t":{"504":{"position":[[3976,9]]}}}],["chmod",{"_index":256,"t":{"34":{"position":[[4936,5]]},"347":{"position":[[8,5]]},"369":{"position":[[564,5]]},"504":{"position":[[3506,5]]},"516":{"position":[[5142,5]]}}}],["choic",{"_index":1024,"t":{"155":{"position":[[724,10]]},"254":{"position":[[634,7]]}}}],["choice(models.model",{"_index":1944,"t":{"230":{"position":[[832,21]]}}}],["choice_text",{"_index":1948,"t":{"230":{"position":[[919,11]]}}}],["choicefield",{"_index":1304,"t":{"184":{"position":[[2362,11]]}}}],["choicefield(choic",{"_index":1305,"t":{"184":{"position":[[2374,20]]}}}],["choices与django",{"_index":1306,"t":{"184":{"position":[[2395,19]]}}}],["choices的第二元素的值，可以使用get_foo_display()方法，其中的foo用字段名代替，即上述使用get_gender_display",{"_index":2190,"t":{"254":{"position":[[802,89]]}}}],["choice类型的参数没有对应的传参方法，而是使用str",{"_index":1025,"t":{"155":{"position":[[751,44]]}}}],["choice，选择参数类型，使用\\n",{"_index":931,"t":{"141":{"position":[[558,26]]}}}],["chown",{"_index":301,"t":{"46":{"position":[[419,5],[979,5],[1340,5]]},"516":{"position":[[7793,5]]}}}],["chown=<user>:<group",{"_index":167,"t":{"34":{"position":[[29,21],[75,21],[439,20],[764,20]]}}}],["chrome",{"_index":3119,"t":{"457":{"position":[[4117,8]]}}}],["chronyd",{"_index":3489,"t":{"516":{"position":[[3510,11],[3555,7],[3597,7]]}}}],["cicd",{"_index":1,"t":{"7":{"position":[[0,4]]},"110":{"position":[[1529,15],[1547,4]]}}}],["cidr=10.244.0.0/16",{"_index":3595,"t":{"516":{"position":[[7631,18]]}}}],["cidr=10.96.0.0/12",{"_index":3592,"t":{"516":{"position":[[7599,17]]}}}],["cj",{"_index":3703,"t":{"516":{"position":[[11902,2]]}}}],["cl82j",{"_index":4435,"t":{"516":{"position":[[69089,5]]}}}],["claim",{"_index":5049,"t":{"516":{"position":[[115518,5],[116964,5]]},"626":{"position":[[95,5]]},"634":{"position":[[102,5]]}}}],["claimnam",{"_index":5056,"t":{"516":{"position":[[116000,10],[116322,10]]}}}],["claim）是持久卷声明的意思，是用户对于存储需求的一种声明。换句话说，pvc其实就是用户向kubernet",{"_index":4995,"t":{"516":{"position":[[111575,70]]}}}],["class",{"_index":468,"t":{"83":{"position":[[173,5]]},"101":{"position":[[129,5]]},"103":{"position":[[458,5]]},"107":{"position":[[188,5]]},"173":{"position":[[25,5]]},"175":{"position":[[237,5],[367,5],[513,5],[826,5]]},"177":{"position":[[177,5],[339,5],[675,5],[1098,5]]},"184":{"position":[[120,5],[485,5]]},"186":{"position":[[1187,5],[2812,5]]},"188":{"position":[[332,5],[1730,5],[2228,5],[2894,5],[3674,5],[4212,5]]},"190":{"position":[[199,5],[269,5],[1038,5],[1108,5],[1200,5],[1270,5],[1333,5],[1417,5],[1553,5],[1623,5],[1823,5],[1893,5]]},"197":{"position":[[620,5],[1844,5],[2457,5],[2926,5],[3221,5],[3922,5],[4168,5],[4532,5],[5404,5]]},"199":{"position":[[223,5],[1482,5],[2212,5]]},"201":{"position":[[374,5]]},"205":{"position":[[345,5]]},"209":{"position":[[171,5]]},"211":{"position":[[218,5],[354,5]]},"215":{"position":[[473,5]]},"217":{"position":[[216,5],[280,5],[346,5]]},"219":{"position":[[226,5]]},"221":{"position":[[281,5]]},"223":{"position":[[277,5]]},"225":{"position":[[230,5],[360,5],[843,5],[956,5],[1465,5]]},"230":{"position":[[697,5],[826,5]]},"252":{"position":[[631,5],[1621,5],[1899,5],[2973,5],[3198,5],[3661,5],[4305,5],[5313,5],[6164,5],[6340,5]]},"256":{"position":[[44,5],[859,5],[1424,5],[1491,5],[1670,5],[1984,14],[2367,5]]},"258":{"position":[[159,5],[219,5],[974,5],[1004,5],[1084,5],[1888,5],[1950,5],[2049,5],[3731,5],[3852,5],[4770,5],[4828,5]]},"273":{"position":[[548,5]]},"516":{"position":[[19264,6]]},"526":{"position":[[4209,6]]}}}],["classpath",{"_index":141,"t":{"27":{"position":[[1283,9]]}}}],["clean",{"_index":449,"t":{"78":{"position":[[534,5]]}}}],["cleanup",{"_index":852,"t":{"132":{"position":[[370,43]]},"155":{"position":[[1065,14],[1140,12],[1211,9]]}}}],["cleanup插件（地址为https：//plugins.jenkins.io/w",{"_index":1031,"t":{"155":{"position":[[1168,42]]}}}],["cleanw",{"_index":1033,"t":{"155":{"position":[[1264,9]]}}}],["clear",{"_index":2519,"t":{"275":{"position":[[807,12]]}}}],["client",{"_index":5175,"t":{"516":{"position":[[125594,6],[125646,6]]}}}],["client_class",{"_index":2445,"t":{"269":{"position":[[2335,15]]}}}],["client_max_body_s",{"_index":1103,"t":{"170":{"position":[[1012,20]]}}}],["clone",{"_index":428,"t":{"78":{"position":[[9,5]]},"516":{"position":[[79612,5]]}}}],["cluster",{"_index":3724,"t":{"516":{"position":[[12628,7],[25971,7],[26082,14],[26706,7],[81595,7],[96005,7],[98438,9],[98537,7],[100093,7],[102923,7],[104107,7],[125383,7],[129620,7]]},"585":{"position":[[220,7]]},"595":{"position":[[56,7]]}}}],["cluster.loc",{"_index":4831,"t":{"516":{"position":[[99176,13]]}}}],["cluster=kubernet",{"_index":5179,"t":{"516":{"position":[[125760,18]]}}}],["clusterip",{"_index":3947,"t":{"516":{"position":[[26026,9],[27117,10],[27229,9],[94032,10],[95643,9],[95699,10],[95756,9],[95911,9],[96057,9],[96067,9],[96233,9],[96264,9],[96352,9],[97876,10],[98205,10],[98270,9],[98600,9],[98833,9],[103749,10],[103771,9],[103919,10],[103941,9],[104156,9],[104203,9],[129689,9]]},"591":{"position":[[2110,10]]},"595":{"position":[[105,9],[152,9]]}}}],["clusterip.yaml",{"_index":4800,"t":{"516":{"position":[[95573,16],[95880,14],[97844,14]]}}}],["clusterip类型的servic",{"_index":4799,"t":{"516":{"position":[[95542,20]]}}}],["clusterip设置为none，即可创建headli",{"_index":4825,"t":{"516":{"position":[[98223,32]]}}}],["clusterip：默认值，它是kubernetes系统自动分配的虚拟ip",{"_index":4783,"t":{"516":{"position":[[94206,47]]}}}],["clusternam",{"_index":4031,"t":{"516":{"position":[[30496,11]]}}}],["clusterrol",{"_index":5134,"t":{"516":{"position":[[122900,11],[122988,11],[124091,11],[124195,11],[124227,11],[124772,11],[124804,11]]},"644":{"position":[[6,11],[94,11]]},"646":{"position":[[101,11]]}}}],["clusterrole=clust",{"_index":5236,"t":{"516":{"position":[[130014,19]]}}}],["clusterrolebind",{"_index":5147,"t":{"516":{"position":[[123996,18],[129974,18]]},"646":{"position":[[6,18]]}}}],["clusterrolebinding在整个集群级别和所有namespaces将特定的subject与clusterrol",{"_index":5146,"t":{"516":{"position":[[123921,68]]}}}],["clusterrole可以对集群范围内资源、跨namespac",{"_index":5133,"t":{"516":{"position":[[122845,48]]}}}],["clusterrole是一个集群角色，但是因为使用了rolebind",{"_index":5151,"t":{"516":{"position":[[124502,37]]}}}],["clusterrole），然后在多个命名空间中重复使用这些clusterrol",{"_index":5150,"t":{"516":{"position":[[124369,116]]}}}],["cm",{"_index":3717,"t":{"516":{"position":[[12123,2],[93406,2],[118226,2]]},"591":{"position":[[1484,2]]}}}],["cmd",{"_index":105,"t":{"27":{"position":[[261,3],[727,3],[744,3],[779,3],[849,3],[1609,3],[1670,3]]},"34":{"position":[[1570,3],[1582,3],[1614,6],[1631,6],[1665,10],[1716,3],[1729,4],[1791,47],[2006,3],[2036,3],[2156,3],[2203,3],[2267,5],[2299,3],[2355,7],[2556,3],[4469,3],[4992,13],[5006,3]]},"46":{"position":[[1155,3],[1188,18],[1312,3]]}}}],["cmd1;cmd2;cmd3",{"_index":2911,"t":{"437":{"position":[[101,16]]}}}],["cmd效果相同，结果为shell命令cmd的输，过某些shel",{"_index":2903,"t":{"435":{"position":[[44,54]]}}}],["cmd版可以查询ip",{"_index":125,"t":{"27":{"position":[[795,17]]}}}],["cmd的升级版本,cmd只能执行一条命令,运行时如果加一些参数是不行的.但如果把cmd替换成entrypoint就可以在run",{"_index":109,"t":{"27":{"position":[[379,79]]}}}],["cmd，shell扫描一遍命令行，发现了$(cmd)结构，便将$(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh",{"_index":2822,"t":{"427":{"position":[[106,92]]}}}],["cn=devman/o=devgroup",{"_index":5162,"t":{"516":{"position":[[125158,23]]}}}],["cname",{"_index":4853,"t":{"516":{"position":[[100944,5],[100986,5]]}}}],["cnd44",{"_index":4498,"t":{"516":{"position":[[74583,5],[74630,5],[74687,5]]}}}],["cni0",{"_index":3624,"t":{"516":{"position":[[8734,4],[8805,4]]}}}],["code",{"_index":3092,"t":{"457":{"position":[[2969,4],[2989,4]]},"479":{"position":[[42,9]]}}}],["code='invalid",{"_index":1425,"t":{"188":{"position":[[1161,17],[2155,17],[2719,17],[3576,17]]}}}],["code='requir",{"_index":1416,"t":{"188":{"position":[[1033,18]]}}}],["coerce_to_string=non",{"_index":1292,"t":{"184":{"position":[[2007,22]]}}}],["cofig.xml",{"_index":334,"t":{"58":{"position":[[286,13]]}}}],["collectstat",{"_index":1074,"t":{"170":{"position":[[235,23],[276,13]]}}}],["column",{"_index":1065,"t":{"168":{"position":[[86,6]]}}}],["com.bothin",{"_index":619,"t":{"103":{"position":[[447,10]]},"107":{"position":[[177,10]]}}}],["com.bothin.globalvar",{"_index":629,"t":{"107":{"position":[[274,21],[375,21]]}}}],["com.cloudbees.groovy.cps.noncp",{"_index":826,"t":{"121":{"position":[[37,31]]}}}],["com/qikqiak/globalvars.groovi",{"_index":617,"t":{"103":{"position":[[409,29]]}}}],["comand：指定要对资源执行的操作，例如create、get、delet",{"_index":3689,"t":{"516":{"position":[[11377,38]]}}}],["command",{"_index":2583,"t":{"303":{"position":[[802,7],[840,10],[1016,36],[1725,7],[1755,7],[1768,7],[1835,7],[1868,7],[1883,7]]},"305":{"position":[[547,7]]},"320":{"position":[[8,7]]},"411":{"position":[[61,7]]},"413":{"position":[[146,7]]},"516":{"position":[[9169,7],[11345,9],[28048,8],[28946,8],[31697,7],[34247,7],[34358,8],[34748,7],[34838,7],[34888,7],[35096,7],[35703,8],[40566,8],[40707,8],[42142,8],[42694,8],[42809,8],[43559,8],[44108,8],[87305,8],[87847,8],[90425,8],[91083,8],[107686,8],[108903,8],[110787,8],[115823,8],[116145,8]]}}}],["command.yaml",{"_index":4072,"t":{"516":{"position":[[34181,20],[34727,12]]}}}],["command1",{"_index":2794,"t":{"407":{"position":[[19,8]]},"409":{"position":[[72,8]]},"415":{"position":[[226,8],[265,8],[312,8],[349,8]]}}}],["command2",{"_index":2797,"t":{"407":{"position":[[49,8]]},"409":{"position":[[81,8]]},"415":{"position":[[235,8],[274,8],[321,8],[358,8]]}}}],["command>out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.fil",{"_index":2625,"t":{"305":{"position":[[573,73]]}}}],["commandn",{"_index":2798,"t":{"407":{"position":[[63,8]]},"409":{"position":[[94,8]]},"415":{"position":[[248,8],[287,8],[334,8],[371,8]]}}}],["command写了，但args没有写，那么dockerfile默认的配置会被忽略，执行输入的command",{"_index":4086,"t":{"516":{"position":[[35367,55]]}}}],["command和args均没有写，那么用dockerfil",{"_index":4085,"t":{"516":{"position":[[35328,36]]}}}],["command和args都写了，那么dockerfile的配置被忽略，执行command并追加上arg",{"_index":4088,"t":{"516":{"position":[[35493,56]]}}}],["command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖dockerfile中entrypoint",{"_index":4084,"t":{"516":{"position":[[35194,131]]}}}],["command没写，但args写了，那么dockerfile中配置的entrypoint的命令会被执行，使用当前arg",{"_index":4087,"t":{"516":{"position":[[35425,65]]}}}],["command，用于在pod",{"_index":4076,"t":{"516":{"position":[[34474,32]]}}}],["comment_volume_from",{"_index":2357,"t":{"264":{"position":[[212,19],[729,20],[826,19]]}}}],["comment_volume_to",{"_index":2359,"t":{"264":{"position":[[273,17],[854,18],[947,17]]}}}],["commit",{"_index":47,"t":{"21":{"position":[[446,6]]},"46":{"position":[[659,6],[690,6]]}}}],["compar",{"_index":909,"t":{"139":{"position":[[814,11],[917,11],[995,11]]}}}],["complet",{"_index":4667,"t":{"516":{"position":[[86717,12],[88082,11],[88419,9],[88478,12],[88790,9],[88923,9],[89016,9],[89279,9],[89312,9],[89345,9],[90101,12],[91474,11],[91692,9],[91742,9]]}}}],["components=1",{"_index":200,"t":{"34":{"position":[[1360,12]]}}}],["comput",{"_index":644,"t":{"110":{"position":[[177,8]]},"112":{"position":[[0,9],[1766,8]]},"116":{"position":[[180,8]]}}}],["computer.getchannel",{"_index":811,"t":{"116":{"position":[[429,22]]}}}],["computer.getexecutor",{"_index":742,"t":{"112":{"position":[[1004,24]]}}}],["computer/<displayname>/api/json",{"_index":346,"t":{"60":{"position":[[146,32]]}}}],["computer/<displayname>/config.xml",{"_index":347,"t":{"60":{"position":[[196,34],[236,35]]}}}],["computer/api/json",{"_index":345,"t":{"60":{"position":[[113,18]]}}}],["con",{"_index":2368,"t":{"264":{"position":[[608,3]]}}}],["con.add(q1",{"_index":2388,"t":{"264":{"position":[[1688,11]]}}}],["con.add(q2",{"_index":2389,"t":{"264":{"position":[[1707,11]]}}}],["concurrencypolici",{"_index":4706,"t":{"516":{"position":[[89831,18],[90696,18]]}}}],["condit",{"_index":854,"t":{"132":{"position":[[549,10],[590,10],[632,10],[674,10],[734,10],[782,10],[831,10],[880,10]]},"411":{"position":[[48,9]]},"413":{"position":[[133,9],[159,9]]},"457":{"position":[[4053,11],[4160,9]]},"516":{"position":[[19045,11],[24608,11]]},"526":{"position":[[3990,11]]}}}],["condition1",{"_index":2793,"t":{"407":{"position":[[3,10]]}}}],["condition2",{"_index":2796,"t":{"407":{"position":[[33,10]]}}}],["config",{"_index":3367,"t":{"508":{"position":[[181,6]]},"510":{"position":[[204,6]]},"516":{"position":[[6884,6],[118584,6],[118651,6],[120018,6],[120066,6],[125372,6],[125543,6],[125721,6],[125840,6],[126163,6],[126965,6],[127345,6]]}}}],["config.xml",{"_index":331,"t":{"58":{"position":[[127,10]]},"60":{"position":[[276,14]]}}}],["configmap",{"_index":3716,"t":{"516":{"position":[[12112,10],[30001,10],[117859,10],[117870,38],[117953,9],[117979,9],[118049,22],[118074,11],[118172,13],[118229,9],[118252,9],[118467,9],[118560,15],[118631,11],[118658,10],[118675,9],[118761,9],[118830,9],[118882,9],[118959,9],[119063,31],[119124,19]]}}}],["configmap.yaml",{"_index":5080,"t":{"516":{"position":[[117909,22],[118127,14],[118738,14]]}}}],["configmap.yaml，将上面创建的configmap",{"_index":5084,"t":{"516":{"position":[[118387,34]]}}}],["configmap/config",{"_index":5085,"t":{"516":{"position":[[118602,17],[118989,18]]}}}],["configmap/configmap",{"_index":5083,"t":{"516":{"position":[[118142,19]]}}}],["configmap、secret",{"_index":4934,"t":{"516":{"position":[[106954,21]]}}}],["configmap的存储卷，挂载预定义的configmap",{"_index":4027,"t":{"516":{"position":[[30012,40]]}}}],["configur",{"_index":377,"t":{"73":{"position":[[236,13]]},"504":{"position":[[328,11]]}}}],["configuration)。这个模块是纯粹的python",{"_index":1977,"t":{"234":{"position":[[47,29]]}}}],["connect",{"_index":784,"t":{"114":{"position":[[507,14],[545,7]]},"455":{"position":[[700,12]]},"459":{"position":[[224,10]]},"516":{"position":[[45961,8],[45970,10]]}}}],["connection_pool_kwarg",{"_index":2447,"t":{"269":{"position":[[2388,25]]}}}],["connection_request",{"_index":3154,"t":{"459":{"position":[[248,18]]}}}],["constraint",{"_index":2185,"t":{"254":{"position":[[544,10]]},"258":{"position":[[4696,11],[4840,11]]}}}],["contact",{"_index":1850,"t":{"217":{"position":[[265,10],[331,10],[532,11]]}}}],["contactdetailview(apiview",{"_index":1851,"t":{"217":{"position":[[286,27]]}}}],["contactlistview(apiview",{"_index":1848,"t":{"217":{"position":[[222,25]]}}}],["contain",{"_index":3748,"t":{"516":{"position":[[13737,11],[13763,10],[18594,11],[18613,9],[19769,9],[19829,9],[20913,11],[22927,11],[23966,10],[24491,11],[25278,11],[27917,11],[28393,30],[31149,10],[31574,10],[31994,11],[32730,11],[33691,9],[33749,9],[33811,9],[33924,9],[33997,9],[34276,11],[35655,11],[36679,11],[36984,11],[37533,11],[38828,12],[38852,10],[40412,11],[40437,9],[41223,9],[41323,9],[41386,9],[42534,11],[42559,9],[43997,11],[44417,9],[44489,9],[44539,9],[45176,11],[45666,9],[45771,9],[45834,9],[46381,11],[46850,9],[46963,9],[47034,9],[47209,9],[48135,11],[48756,11],[49297,9],[50146,11],[51472,11],[54212,11],[55882,11],[57595,11],[58063,11],[60177,11],[63458,11],[65496,11],[66022,11],[66335,10],[68060,10],[68432,10],[70218,11],[70525,11],[76537,10],[77725,10],[78468,10],[81007,11],[85491,11],[85763,11],[86037,10],[87257,11],[87799,11],[88107,10],[90377,11],[91035,11],[94693,11],[103285,11],[103555,11],[107469,11],[108734,11],[110618,11],[115777,11],[116099,11],[118498,11],[119939,11],[127892,17]]},"522":{"position":[[191,11],[217,10]]},"526":{"position":[[3539,11],[3558,9],[4714,9],[4774,9],[5858,11]]},"541":{"position":[[378,11]]},"545":{"position":[[1311,11]]},"549":{"position":[[268,11]]},"562":{"position":[[763,11]]},"579":{"position":[[281,11]]}}}],["containercr",{"_index":4487,"t":{"516":{"position":[[73500,17],[73558,17],[73616,17],[74438,17],[74640,17],[74842,17],[75044,17],[83550,17],[83600,17],[83650,17],[83860,17],[83910,17],[83960,17],[84010,17],[88883,17],[89079,17],[89149,17]]},"589":{"position":[[1430,17],[1480,17],[1530,17],[1740,17],[1790,17],[1840,17],[1890,17]]}}}],["containerport",{"_index":3876,"t":{"516":{"position":[[20983,14],[22997,14],[25333,14],[28348,14],[36765,14],[37069,14],[40493,14],[42615,14],[44069,14],[45248,14],[46453,14],[48207,14],[48828,14],[65551,14],[70273,14],[85546,14],[94748,14],[103340,14],[103620,14],[107524,14],[108789,14],[110673,14]]},"526":{"position":[[5928,14]]}}}],["containerport<integ",{"_index":4099,"t":{"516":{"position":[[36386,21]]}}}],["containersreadi",{"_index":3833,"t":{"516":{"position":[[19097,15]]},"526":{"position":[[4042,15]]}}}],["containers的port",{"_index":4096,"t":{"516":{"position":[[36168,36]]}}}],["content",{"_index":328,"t":{"58":{"position":[[91,7]]},"149":{"position":[[759,7],[820,12]]},"151":{"position":[[845,7],[878,12]]},"193":{"position":[[1368,12]]},"252":{"position":[[4149,8]]},"328":{"position":[[322,7],[425,8]]},"510":{"position":[[765,7]]}}}],["content_by_lua",{"_index":3401,"t":{"510":{"position":[[730,14]]}}}],["content_by_lua_fil",{"_index":3402,"t":{"510":{"position":[[745,19]]}}}],["content_typ",{"_index":1539,"t":{"193":{"position":[[1354,13]]}}}],["content_type=non",{"_index":1532,"t":{"193":{"position":[[1053,18]]}}}],["context",{"_index":163,"t":{"32":{"position":[[707,12]]},"227":{"position":[[122,9],[205,8],[725,9],[773,8]]},"516":{"position":[[125732,7],[125851,7],[125889,7],[126174,7],[126222,7],[126976,7],[127014,7],[127356,7],[127404,7]]}}}],["context={'request",{"_index":1343,"t":{"184":{"position":[[3429,19]]}}}],["context['view",{"_index":1911,"t":{"227":{"position":[[810,15]]}}}],["context参数附加的数据，可以通过serializer对象的context",{"_index":1344,"t":{"184":{"position":[[3459,46]]}}}],["context和可用的podsecuritypolicy对pod",{"_index":5209,"t":{"516":{"position":[[128611,41]]}}}],["context属性补充三个数据：request、format、view",{"_index":1637,"t":{"197":{"position":[[1264,84]]}}}],["contour",{"_index":4865,"t":{"516":{"position":[[101659,8]]}}}],["contributing.md",{"_index":442,"t":{"78":{"position":[[453,19]]}}}],["control",{"_index":569,"t":{"92":{"position":[[640,7]]},"320":{"position":[[20,7]]},"516":{"position":[[6991,10],[17577,10],[18562,10],[24924,10],[65212,11],[69656,11],[85060,11],[86688,11],[89755,11],[90919,11],[101971,10],[102016,11],[102088,12],[102234,12],[102610,12],[102688,12],[102783,10],[102867,12],[120969,37],[122288,8],[127762,14],[127963,14]]},"526":{"position":[[2522,10],[3507,10]]}}}],["control=namespacelifecycle,limitranger,serviceaccount,persistentvolumelabel",{"_index":5193,"t":{"516":{"position":[[127567,76]]}}}],["controller/nginx",{"_index":4880,"t":{"516":{"position":[[102435,16],[102522,16]]}}}],["controller:0.30.0",{"_index":4881,"t":{"516":{"position":[[102460,17],[102547,17]]}}}],["controllermanag",{"_index":3426,"t":{"516":{"position":[[1154,17]]}}}],["controller通过监听这些配置规则并转化成nginx",{"_index":4862,"t":{"516":{"position":[[101464,36]]}}}],["controller：具体实现反向代理及负载均衡的程序，对ingress定义的规则进行解析，根据配置的规则来实现请求转发，实现方式有很多，比如nginx",{"_index":4864,"t":{"516":{"position":[[101581,77]]}}}],["controller：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod",{"_index":3445,"t":{"516":{"position":[[1989,53]]}}}],["con这个总的q对象添加到filter过滤条件中，还可以在con",{"_index":2390,"t":{"264":{"position":[[1802,49]]}}}],["cooki",{"_index":2492,"t":{"273":{"position":[[1706,15],[1850,9]]},"459":{"position":[[654,6]]}}}],["copi",{"_index":103,"t":{"27":{"position":[[205,4],[980,4]]},"32":{"position":[[336,4],[593,4],[739,7],[781,4],[810,4]]},"34":{"position":[[6,4],[21,4],[67,4],[121,4],[232,4],[250,4],[381,4],[555,4],[575,4],[678,4],[719,4],[5133,4]]}}}],["core",{"_index":3001,"t":{"451":{"position":[[355,4]]},"516":{"position":[[3265,6]]}}}],["coredn",{"_index":3803,"t":{"516":{"position":[[17364,7],[17420,7],[80614,7],[80646,7]]},"526":{"position":[[2309,7],[2365,7]]},"577":{"position":[[264,7],[296,7]]}}}],["coredns:1.6.5",{"_index":3581,"t":{"516":{"position":[[7083,13]]}}}],["count",{"_index":771,"t":{"114":{"position":[[160,6],[205,9]]},"333":{"position":[[118,10]]},"516":{"position":[[18933,6]]},"526":{"position":[[3878,6]]}}}],["count=0",{"_index":2687,"t":{"333":{"position":[[56,8]]}}}],["counter",{"_index":4676,"t":{"516":{"position":[[87029,7],[87112,8],[87190,7],[87277,7],[87715,7],[87760,7],[87819,7],[88153,7],[88209,7],[90222,7],[90290,8],[90338,7],[90397,7],[91055,7]]}}}],["cp",{"_index":80,"t":{"23":{"position":[[928,2],[1001,2]]},"101":{"position":[[545,4]]},"121":{"position":[[23,3],[112,3],[116,8]]},"294":{"position":[[3,2]]},"504":{"position":[[3671,2],[3757,2],[3858,2]]},"516":{"position":[[7719,2],[12494,2]]}}}],["cpgrv",{"_index":4639,"t":{"516":{"position":[[83420,5],[83540,5],[84173,5],[84430,5]]},"589":{"position":[[1300,5],[1420,5],[2053,5],[2310,5]]}}}],["cpu",{"_index":2689,"t":{"342":{"position":[[8,22],[247,22]]},"449":{"position":[[91,3]]},"451":{"position":[[556,13],[610,3],[702,3],[739,3]]},"516":{"position":[[237,30],[2762,4],[28570,4],[28615,3],[28706,4],[28718,18],[37616,4],[37685,4],[80409,4],[81090,4],[81137,4],[81915,8]]},"577":{"position":[[59,4]]},"579":{"position":[[364,4],[411,4]]},"585":{"position":[[540,8]]}}}],["cpu(cor",{"_index":4577,"t":{"516":{"position":[[80398,10],[80589,10]]},"577":{"position":[[48,10],[239,10]]}}}],["cpu和memori",{"_index":4112,"t":{"516":{"position":[[37733,22]]}}}],["cpu和内存等，如果不对某个容器的资源做限制，那么它就可能吃掉大量资源，导致其它容器无法运行。针对这种情况，kubernetes提供了对内存和cpu的资源进行配额的机制，这种机制主要通过resourc",{"_index":4106,"t":{"516":{"position":[[37171,139]]}}}],["cpu的限制，单位为core数，将用于dock",{"_index":3989,"t":{"516":{"position":[[28582,26]]}}}],["cpu限制，单位是cor",{"_index":4109,"t":{"516":{"position":[[37627,14],[37696,14],[81101,14],[81151,14]]},"579":{"position":[[375,14],[425,14]]}}}],["cpu，硬盘30gb",{"_index":3463,"t":{"516":{"position":[[2767,13]]}}}],["cpu：cor",{"_index":4113,"t":{"516":{"position":[[37756,18]]}}}],["crashloopbackoff",{"_index":4207,"t":{"516":{"position":[[44968,16],[46189,16]]}}}],["creat",{"_index":267,"t":{"38":{"position":[[31,6],[163,6]]},"42":{"position":[[448,6],[894,6]]},"175":{"position":[[289,7]]},"197":{"position":[[3257,6]]},"199":{"position":[[66,8],[163,9],[3172,9]]},"516":{"position":[[9149,6],[9214,6],[12235,6],[12764,6],[12799,7],[13216,6],[13252,7],[13838,6],[13876,7],[13897,7],[14454,7],[14475,7],[14703,6],[16818,6],[16846,7],[17060,6],[18141,7],[19732,7],[19761,7],[21046,6],[23289,6],[23505,7],[24806,8],[25396,6],[27270,6],[32278,7],[33137,6],[33196,7],[33656,7],[33683,7],[33876,7],[33916,7],[34713,6],[34756,7],[35934,6],[35969,7],[36836,6],[36875,7],[37844,6],[37891,7],[38266,6],[38313,7],[40848,6],[40903,7],[41288,7],[41315,7],[42889,6],[42936,7],[44211,6],[44266,7],[44368,7],[44409,7],[45366,6],[45431,7],[45731,7],[45763,7],[46645,6],[46706,7],[46915,7],[46955,7],[48988,6],[49043,7],[50262,6],[50307,7],[50722,6],[50767,7],[51610,6],[51663,7],[52111,6],[52164,7],[54506,6],[54577,7],[55396,6],[55467,7],[56188,6],[56261,7],[57714,6],[57779,7],[58470,6],[58539,7],[59325,6],[59394,7],[60551,6],[60628,7],[66106,6],[66165,7],[70617,6],[70690,7],[76021,6],[76082,6],[76143,6],[82041,6],[82106,7],[85854,6],[85910,7],[87965,6],[88004,7],[91205,6],[91256,7],[94797,6],[94853,7],[95862,6],[95921,7],[98356,6],[98417,7],[99952,6],[100009,7],[100732,6],[100797,7],[104020,6],[104612,6],[104672,7],[105411,6],[105912,6],[105974,7],[107973,6],[108024,7],[109319,6],[109370,7],[111040,6],[111081,7],[113750,6],[113789,7],[113818,7],[113847,7],[115051,6],[115097,7],[115132,7],[115167,7],[116391,6],[116420,7],[116437,7],[118117,6],[118162,7],[118724,6],[118771,7],[119592,6],[119628,7],[120137,6],[120178,7],[123445,9],[126763,6],[126827,7],[126900,7],[129320,6],[129867,6],[129967,6]]},"522":{"position":[[292,6],[330,7],[351,7]]},"524":{"position":[[137,7],[158,7],[386,6]]},"526":{"position":[[1763,6],[1791,7],[2005,6],[3086,7],[4677,7],[4706,7],[5991,6]]},"530":{"position":[[31,6],[102,7]]},"539":{"position":[[31,6],[102,7]]},"543":{"position":[[31,6],[104,7]]},"547":{"position":[[31,6],[96,7]]},"551":{"position":[[31,6],[100,7]]},"560":{"position":[[142,6],[211,7]]},"564":{"position":[[31,6],[108,7]]},"587":{"position":[[34,6],[99,7]]},"593":{"position":[[31,6]]},"597":{"position":[[31,6],[91,7]]},"608":{"position":[[8,6]]},"610":{"position":[[31,6],[93,7]]},"618":{"position":[[31,6],[70,7],[99,7],[128,7]]},"622":{"position":[[31,6],[77,7],[112,7],[147,7]]},"628":{"position":[[31,6],[60,7],[77,7]]},"638":{"position":[[31,6],[72,7]]}}}],["create()和upd",{"_index":1487,"t":{"190":{"position":[[135,25]]}}}],["create(request",{"_index":1675,"t":{"197":{"position":[[3120,25]]}}}],["create(self",{"_index":1457,"t":{"188":{"position":[[3747,12],[4285,12]]},"197":{"position":[[3290,12]]}}}],["create/patch",{"_index":3685,"t":{"516":{"position":[[11011,12]]}}}],["createapiview",{"_index":1731,"t":{"197":{"position":[[5702,14]]}}}],["createcachet",{"_index":2408,"t":{"269":{"position":[[61,16]]}}}],["createfilepath(path",{"_index":753,"t":{"112":{"position":[[1506,20]]}}}],["createitem?name=<jobnam",{"_index":326,"t":{"58":{"position":[[56,26]]}}}],["createitem?name=<newjobname>&mode=copy&from=<fromjobnam",{"_index":332,"t":{"58":{"position":[[149,58]]}}}],["createmodelmixin(object",{"_index":1677,"t":{"197":{"position":[[3227,25]]}}}],["creationtimestamp",{"_index":3773,"t":{"516":{"position":[[16259,18],[24143,18],[30516,17]]},"526":{"position":[[1204,18]]}}}],["creator",{"_index":1114,"t":{"173":{"position":[[122,10]]}}}],["credenti",{"_index":14,"t":{"15":{"position":[[88,11]]},"516":{"position":[[125554,11]]}}}],["cron",{"_index":4705,"t":{"516":{"position":[[89800,30],[90528,19]]}}}],["cronjob",{"_index":3702,"t":{"516":{"position":[[11893,8],[89466,11],[89627,15],[89681,7],[89767,7],[90861,7],[90888,7],[90931,7],[91164,9],[91248,7],[91266,9],[91311,8],[91377,7],[91502,7],[91538,7],[91574,7],[91663,7],[91713,7],[91761,7],[91806,9],[91891,8]]}}}],["cronjob(cj",{"_index":4702,"t":{"516":{"position":[[89453,12]]}}}],["cronjob.batch",{"_index":4729,"t":{"516":{"position":[[91873,13]]}}}],["cronjob.batch/pc",{"_index":4717,"t":{"516":{"position":[[91231,16]]}}}],["cronjob.yaml",{"_index":4716,"t":{"516":{"position":[[90810,18],[91218,12],[91860,12]]}}}],["cronjob：它创建的pod",{"_index":4399,"t":{"516":{"position":[[64916,34]]}}}],["cs5r8",{"_index":3807,"t":{"516":{"position":[[17439,5]]},"526":{"position":[[2384,5]]}}}],["ctime",{"_index":2475,"t":{"273":{"position":[[754,5],[853,5]]}}}],["ctime=time.tim",{"_index":2465,"t":{"273":{"position":[[154,17]]}}}],["ctrl",{"_index":2635,"t":{"311":{"position":[[88,4],[165,6],[189,6],[213,6],[237,6]]},"313":{"position":[[121,4]]}}}],["ctrl+d",{"_index":2604,"t":{"303":{"position":[[2041,6]]}}}],["ctrl+p+q",{"_index":72,"t":{"23":{"position":[[465,8]]}}}],["cull_frequ",{"_index":2413,"t":{"269":{"position":[[272,17]]},"271":{"position":[[335,14],[389,18],[408,14],[475,14]]}}}],["curl",{"_index":126,"t":{"27":{"position":[[844,4],[855,7]]},"516":{"position":[[20031,4],[26185,4],[43141,4],[95403,4],[95455,4],[95507,4],[96711,4],[97337,4],[97714,4],[108254,4],[109597,4]]},"526":{"position":[[4976,4]]}}}],["curl/7.29.0",{"_index":4955,"t":{"516":{"position":[[108451,13]]}}}],["current",{"_index":736,"t":{"112":{"position":[[863,7]]},"516":{"position":[[66199,14],[66317,7],[68042,7],[68414,7],[70994,7],[75386,7],[76796,7],[77707,7],[78450,7],[85998,7]]}}}],["currentbuild",{"_index":682,"t":{"110":{"position":[[1293,13]]}}}],["currentbuild.numb",{"_index":896,"t":{"139":{"position":[[402,19]]}}}],["cusercreationform",{"_index":1166,"t":{"175":{"position":[[1310,17]]}}}],["cusercreationform(modelform",{"_index":1138,"t":{"175":{"position":[[243,29]]}}}],["custom_exception_handler(exc",{"_index":1901,"t":{"227":{"position":[[92,29]]}}}],["customer(models.model",{"_index":2329,"t":{"258":{"position":[[3737,23],[4776,23]]}}}],["customrespons",{"_index":2700,"t":{"344":{"position":[[265,18]]}}}],["cv0wyxjndzjy_uwcwagprqrt_gunxmok9aunzurqm55gr2rxiztjswvp2ebatsdghrmuubqvtfovdjb4x3nxcyln2opaamqg3rnu2rr",{"_index":5251,"t":{"516":{"position":[[131356,103]]}}}],["cxzrb307qdcfxpfchr_2rt5fvfxargg_c0e3efhaayqo7citxsnioixpofnar8aurmopjyodqipqbwuehb7fhlu1dcduhniixvc_uicz",{"_index":5254,"t":{"516":{"position":[[131516,104]]}}}],["c语言程序、shell",{"_index":2574,"t":{"303":{"position":[[13,45]]}}}],["c语言运算规则,比如可以直接使用for((i=0;i<5;i",{"_index":2830,"t":{"427":{"position":[[596,46]]}}}],["c语言运算规则，都可用在$((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo",{"_index":2825,"t":{"427":{"position":[[379,92]]}}}],["d",{"_index":56,"t":{"21":{"position":[[664,1]]},"23":{"position":[[139,1]]},"25":{"position":[[142,1]]},"34":{"position":[[3644,1]]},"139":{"position":[[988,6]]},"264":{"position":[[1085,4]]},"294":{"position":[[89,20]]},"311":{"position":[[222,3]]},"313":{"position":[[108,1],[155,1],[163,1]]},"325":{"position":[[77,2],[97,2]]},"402":{"position":[[232,1],[266,1]]},"427":{"position":[[224,2]]},"444":{"position":[[138,1]]},"457":{"position":[[4291,1],[4298,1]]}}}],["d.txt",{"_index":2849,"t":{"432":{"position":[[197,5]]}}}],["d2c8n",{"_index":4454,"t":{"516":{"position":[[71158,5],[71671,5],[72150,5]]}}}],["d2t",{"_index":2643,"t":{"313":{"position":[[232,4]]}}}],["d2w",{"_index":2642,"t":{"313":{"position":[[221,3]]}}}],["d:/code/data/nginx/conf.d:/etc/nginx/conf.d",{"_index":2939,"t":{"444":{"position":[[93,43]]}}}],["d:/code/data/nginx/nginx.conf:/etc/nginx/nginx.conf",{"_index":2938,"t":{"444":{"position":[[38,51]]}}}],["daemon",{"_index":24,"t":{"19":{"position":[[144,6]]},"451":{"position":[[1240,7],[1285,6]]},"504":{"position":[[4028,6]]}}}],["daemonset",{"_index":3700,"t":{"516":{"position":[[11858,10],[84854,16],[84929,22],[84984,9],[85072,9],[85616,9],[85645,9],[85811,11],[85900,9],[85920,11],[86058,9],[86225,9],[86280,9],[86334,11],[86424,10]]},"589":{"position":[[2734,16]]}}}],["daemonset(d",{"_index":4649,"t":{"516":{"position":[[84655,13]]},"589":{"position":[[2535,13]]}}}],["daemonset.app",{"_index":4661,"t":{"516":{"position":[[86405,14]]}}}],["daemonset.apps/pc",{"_index":4655,"t":{"516":{"position":[[85882,17]]}}}],["daemonset.yaml",{"_index":4654,"t":{"516":{"position":[[85569,20],[85867,14],[86390,14]]}}}],["daemonset类型的控制器可以保证在集群中的每一台（或指定）节点上都运行一个副本。一般适用于日志收集、节点监控等场景。也就是说，如果一个pod提供的功能是节点级别的（每个节点都需要且只需要一个），那么这类pod就适合使用daemonset",{"_index":4650,"t":{"516":{"position":[[84669,130]]},"589":{"position":[[2549,130]]}}}],["daemonset：在集群中的指定nod",{"_index":4397,"t":{"516":{"position":[[64826,45]]}}}],["darwin",{"_index":2552,"t":{"277":{"position":[[742,6]]}}}],["dashboard",{"_index":3467,"t":{"516":{"position":[[2924,11],[128657,10],[128830,12],[129092,9],[129119,9],[129151,9],[129274,9],[129373,13],[129444,9],[129565,9],[129751,9],[129889,9],[129919,9],[129993,9],[130163,9],[130180,9],[130196,9],[130316,9],[130358,9],[130374,9],[130424,9],[130497,9],[131706,12]]},"651":{"position":[[162,12]]}}}],["dashboard:dashboard",{"_index":5238,"t":{"516":{"position":[[130068,19]]}}}],["dashboard提供了kubectl",{"_index":5263,"t":{"516":{"position":[[131948,35]]}}}],["dashboard的servic",{"_index":5214,"t":{"516":{"position":[[129005,19]]}}}],["data",{"_index":233,"t":{"34":{"position":[[3527,5],[3537,5],[3566,5],[3696,5]]},"46":{"position":[[47,5],[97,5],[128,5],[384,5],[438,5],[492,5],[510,5],[754,93],[945,5],[998,5],[1011,5],[1033,42],[1076,10],[1306,5],[1359,5]]},"58":{"position":[[517,5],[671,4]]},"101":{"position":[[282,4]]},"186":{"position":[[260,19]]},"188":{"position":[[762,39],[854,4],[1210,4],[1589,4],[1986,4],[2511,4],[3407,4],[4965,4],[5190,4]]},"193":{"position":[[1246,5]]},"197":{"position":[[3695,6]]},"516":{"position":[[118004,5],[118310,4],[119506,5],[119784,4],[130627,4]]}}}],["data/test.txt",{"_index":300,"t":{"46":{"position":[[400,14],[960,14],[1322,14]]}}}],["data=data",{"_index":1476,"t":{"188":{"position":[[5280,10]]}}}],["data=empti",{"_index":1338,"t":{"184":{"position":[[3247,11]]}}}],["data=request.data",{"_index":1704,"t":{"197":{"position":[[4752,18]]}}}],["data={'btitl",{"_index":1482,"t":{"188":{"position":[[5626,15],[5748,15]]}}}],["databas",{"_index":2454,"t":{"271":{"position":[[275,8],[536,8]]}}}],["databaseerror",{"_index":1909,"t":{"227":{"position":[[684,13],[845,15]]}}}],["databoundconstructor",{"_index":499,"t":{"85":{"position":[[617,22]]},"88":{"position":[[219,22]]}}}],["databoundsett",{"_index":500,"t":{"85":{"position":[[678,17]]},"88":{"position":[[280,17]]}}}],["data不能是复杂结构的数据，如django的模型类对象，对于这样的数据我们可以使用serializer序列化器序列化处理后（转为了python字典类型）再传递给data",{"_index":1535,"t":{"193":{"position":[[1151,88]]}}}],["data数据不要是render处理之后的数据，只需传递python的内建类型数据即可，rest",{"_index":1533,"t":{"193":{"position":[[1072,47]]}}}],["date",{"_index":3490,"t":{"516":{"position":[[3622,4],[20565,4],[23797,4],[23844,14],[23947,4],[34429,6],[34614,6],[35753,6],[70721,4],[70842,4],[71516,4],[76518,4],[81456,4],[82914,4],[86018,4]]},"526":{"position":[[5510,4]]},"585":{"position":[[81,4]]},"589":{"position":[[794,4]]}}}],["datefield",{"_index":1299,"t":{"184":{"position":[[2186,9]]},"252":{"position":[[621,9]]}}}],["datefield(allow_null=tru",{"_index":1493,"t":{"190":{"position":[[648,26],[2228,26]]}}}],["datefield(auto_now=fals",{"_index":2073,"t":{"252":{"position":[[637,25]]}}}],["datefield(format=api_settings.date_format",{"_index":1300,"t":{"184":{"position":[[2196,42]]}}}],["datefield、datetimefield或者integerfield这种可以排序的字段，作为latest()和earliest",{"_index":2290,"t":{"258":{"position":[[1431,96]]}}}],["datetime.date(upload_date_from",{"_index":2378,"t":{"264":{"position":[[1109,31]]}}}],["datetime.strptime(upload_date_from",{"_index":2377,"t":{"264":{"position":[[1042,35]]}}}],["datetimefield",{"_index":1296,"t":{"184":{"position":[[2101,13]]},"252":{"position":[[1047,13]]}}}],["datetimefield(format=api_settings.datetime_format",{"_index":1297,"t":{"184":{"position":[[2115,50]]}}}],["day",{"_index":1838,"t":{"215":{"position":[[330,10]]},"516":{"position":[[105295,4],[125310,4]]},"606":{"position":[[34,4]]}}}],["db.model",{"_index":1474,"t":{"188":{"position":[[5130,9]]}}}],["db.serial",{"_index":1473,"t":{"188":{"position":[[4924,14]]}}}],["db_column",{"_index":2191,"t":{"254":{"position":[[892,9]]}}}],["db_index",{"_index":2192,"t":{"254":{"position":[[946,8]]}}}],["db_tabl",{"_index":2256,"t":{"256":{"position":[[2301,8]]},"258":{"position":[[493,8]]}}}],["db_tablespac",{"_index":2274,"t":{"258":{"position":[[652,13]]}}}],["dc46j",{"_index":5190,"t":{"516":{"position":[[127211,5]]}}}],["dd",{"_index":1424,"t":{"188":{"position":[[1153,7]]},"303":{"position":[[2120,2]]},"313":{"position":[[212,2]]},"516":{"position":[[10382,2]]}}}],["dd</em",{"_index":2200,"t":{"254":{"position":[[1315,9]]}}}],["de",{"_index":4320,"t":{"516":{"position":[[59285,2]]},"560":{"position":[[102,2]]}}}],["de'vɒp",{"_index":3,"t":{"12":{"position":[[51,20]]}}}],["debian:stretch",{"_index":181,"t":{"34":{"position":[[1079,14]]}}}],["debug=on",{"_index":224,"t":{"34":{"position":[[2754,8]]}}}],["debug_build",{"_index":1015,"t":{"155":{"position":[[543,14]]}}}],["decimal_palc",{"_index":1295,"t":{"184":{"position":[[2079,15]]}}}],["decimal_plac",{"_index":1291,"t":{"184":{"position":[[1991,15]]},"252":{"position":[[1231,25]]}}}],["decimal_places=2",{"_index":2082,"t":{"252":{"position":[[1382,18]]}}}],["decimalfield",{"_index":1289,"t":{"184":{"position":[[1953,12]]},"252":{"position":[[1143,12]]}}}],["decimalfield(max_digit",{"_index":1290,"t":{"184":{"position":[[1966,24]]}}}],["def",{"_index":613,"t":{"103":{"position":[[239,3]]},"107":{"position":[[35,3]]},"110":{"position":[[997,3]]},"112":{"position":[[439,3],[492,3],[919,3],[955,3],[1227,3],[1502,3],[1762,3]]},"114":{"position":[[359,3],[657,3]]},"116":{"position":[[227,3],[478,3]]},"118":{"position":[[181,3]]},"121":{"position":[[77,3]]},"149":{"position":[[755,3]]},"151":{"position":[[841,3]]},"173":{"position":[[291,3],[369,3]]},"177":{"position":[[383,3],[758,3],[873,3],[1294,3],[1595,3],[1678,3]]},"188":{"position":[[1799,3],[2297,3],[2784,3],[3743,3],[3820,3],[4281,3],[4373,3]]},"197":{"position":[[649,3],[1045,3],[1539,3],[1954,3],[2512,3],[3050,3],[3286,3],[3609,3],[3665,3],[3991,3],[4298,3],[4597,3],[5117,3],[5173,3],[5471,3],[5627,3]]},"199":{"position":[[264,3],[403,3],[2373,3],[2527,3],[3122,3]]},"211":{"position":[[254,3]]},"227":{"position":[[88,3],[698,3]]},"249":{"position":[[367,3]]},"252":{"position":[[3518,3],[6090,3]]},"264":{"position":[[12,3]]},"271":{"position":[[850,3]]},"273":{"position":[[82,3],[1427,3],[1565,3],[1860,3],[2113,3]]},"344":{"position":[[102,3],[367,3],[421,3]]}}}],["default",{"_index":396,"t":{"73":{"position":[[780,8]]},"88":{"position":[[1309,9]]},"184":{"position":[[2972,7]]},"254":{"position":[[356,7]]},"267":{"position":[[53,10]]},"269":{"position":[[89,10],[340,10],[546,10],[1266,10],[1462,10],[1654,10],[1839,10],[2225,10]]},"516":{"position":[[12869,7],[15560,7],[15884,7],[16043,7],[16067,7],[16202,7],[16307,7],[16546,7],[16560,7],[19020,7],[19145,7],[19224,7],[19508,7],[33439,7],[38591,7],[41119,7],[45552,7],[52553,7],[54935,7],[55050,7],[58868,7]]},"526":{"position":[[505,7],[829,7],[988,7],[1012,7],[1147,7],[1252,7],[1491,7],[1505,7],[3965,7],[4090,7],[4169,7],[4453,7]]},"535":{"position":[[118,7],[233,7]]},"555":{"position":[[155,7]]}}}],["default=uuid.uuid4",{"_index":2177,"t":{"252":{"position":[[6413,19],[6456,26]]}}}],["default_authentication_class",{"_index":1798,"t":{"201":{"position":[[39,33]]}}}],["default_filter_backend",{"_index":1858,"t":{"221":{"position":[[165,26]]}}}],["default_limit",{"_index":1891,"t":{"225":{"position":[[1264,13]]}}}],["default_manager_nam",{"_index":2278,"t":{"258":{"position":[[768,20]]}}}],["default_pagination_class",{"_index":1870,"t":{"225":{"position":[[66,27]]}}}],["default_permiss",{"_index":2314,"t":{"258":{"position":[[3211,19]]}}}],["default_permission_class",{"_index":1811,"t":{"205":{"position":[[40,29],[138,29]]}}}],["default_related_nam",{"_index":2280,"t":{"258":{"position":[[816,20],[1096,20]]}}}],["default_renderer_class",{"_index":1525,"t":{"193":{"position":[[831,27]]}}}],["default_serv",{"_index":3251,"t":{"493":{"position":[[95,15]]}}}],["default_tablespac",{"_index":2275,"t":{"258":{"position":[[666,46]]}}}],["default_throttle_class",{"_index":1829,"t":{"215":{"position":[[0,35],[87,27]]},"217":{"position":[[423,27]]}}}],["default_throttle_r",{"_index":1830,"t":{"215":{"position":[[38,29],[211,25],[281,22]]},"217":{"position":[[504,25]]}}}],["default_throttle_rates['anon",{"_index":1843,"t":{"217":{"position":[[42,32]]}}}],["default_throttle_rates['us",{"_index":1845,"t":{"217":{"position":[[122,32]]}}}],["default_typ",{"_index":2973,"t":{"449":{"position":[[814,12]]}}}],["defaultstorageclass,resourcequota,defaulttolerationsecond",{"_index":5194,"t":{"516":{"position":[[127644,58]]}}}],["defaultstorageclass：为了实现共享存储的动态供应，为未指定storageclass或pv的pvc尝试匹配默认的storageclass，尽可能减少用户在申请pvc",{"_index":5205,"t":{"516":{"position":[[128323,102]]}}}],["defaulttolerationseconds：这个插件为那些没有设置forg",{"_index":5206,"t":{"516":{"position":[[128426,47]]}}}],["defaultvalu",{"_index":929,"t":{"141":{"position":[[475,17]]}}}],["default设置为none，可能会引发intergyerror：not",{"_index":2184,"t":{"254":{"position":[[487,51]]}}}],["definit",{"_index":1045,"t":{"164":{"position":[[31,10]]}}}],["del",{"_index":2633,"t":{"311":{"position":[[51,3]]}}}],["delet",{"_index":1738,"t":{"197":{"position":[[5913,6]]},"256":{"position":[[437,6]]},"516":{"position":[[8798,6],[8818,6],[12297,6],[13401,6],[13443,7],[13493,6],[13523,7],[14161,6],[14201,7],[14224,7],[14985,6],[16903,6],[16933,7],[17093,6],[20232,6],[20268,7],[20647,6],[20698,7],[21082,6],[25008,6],[25059,7],[25435,6],[26944,6],[26996,7],[27306,6],[38079,6],[38128,7],[50591,6],[50638,7],[51968,6],[52023,7],[55173,6],[55246,7],[59214,6],[68648,6],[68711,7],[68844,11],[68910,6],[68989,7],[69202,6],[69263,7],[79002,6],[79063,7],[86377,6],[86435,7],[89400,6],[89441,7],[91847,6],[91900,7],[93483,6],[97826,6],[97887,7],[112425,6],[123474,9]]},"522":{"position":[[615,6],[655,7],[678,7]]},"524":{"position":[[668,6]]},"526":{"position":[[1848,6],[1878,7],[2038,6],[5177,6],[5213,7],[5592,6],[5643,7],[6027,6]]},"535":{"position":[[356,6],[429,7]]},"560":{"position":[[31,6]]},"591":{"position":[[1561,6]]}}}],["delete')的权限，也就是增删改。你可以自定义这个选项，比如设置为一个空列表，表示你不需要默认的权限，但是这一操作必须在执行migrate命令之前。也是配合auth",{"_index":2316,"t":{"258":{"position":[[3278,90]]}}}],["delete_mani",{"_index":2517,"t":{"275":{"position":[[764,13]]}}}],["delete_model(self",{"_index":1215,"t":{"177":{"position":[[1682,18]]}}}],["deletedir",{"_index":953,"t":{"149":{"position":[[0,17],[151,11]]}}}],["deletedir是一个无参步骤，删除的是当前工作目录。通常它与dir",{"_index":954,"t":{"149":{"position":[[18,55]]}}}],["delete命令会删除此rs以及它管理的pod",{"_index":4430,"t":{"516":{"position":[[68527,23]]}}}],["deletiongraceperiodsecond",{"_index":4032,"t":{"516":{"position":[[30542,26]]}}}],["deletiontimestamp",{"_index":4034,"t":{"516":{"position":[[30578,17]]}}}],["demo",{"_index":58,"t":{"21":{"position":[[690,4]]},"42":{"position":[[681,4],[1013,30]]},"160":{"position":[[115,8]]},"328":{"position":[[370,5],[538,6]]}}}],["demo.txt",{"_index":2595,"t":{"303":{"position":[[1450,8],[1549,10],[1596,20]]}}}],["demo_serv",{"_index":3043,"t":{"455":{"position":[[1257,11],[1644,11],[1968,11]]}}}],["deni",{"_index":1809,"t":{"201":{"position":[[528,6]]},"449":{"position":[[1082,4]]}}}],["denyexeconprivileged：它会拦截所有想在privileg",{"_index":5197,"t":{"516":{"position":[[127852,39]]}}}],["depend",{"_index":886,"t":{"139":{"position":[[142,20]]}}}],["deploy",{"_index":3635,"t":{"516":{"position":[[9221,10],[9291,6],[11831,11],[11843,6],[20534,6],[20654,6],[23081,11],[23296,10],[23721,15],[23766,6],[23908,6],[24044,17],[24096,6],[24913,10],[25015,6],[25079,10],[25133,10],[25406,6],[25445,6],[25781,6],[26474,6],[69466,20],[69528,18],[69579,10],[69668,6],[70297,13],[70364,10],[70394,10],[70573,12],[70679,10],[70700,12],[70797,6],[70807,10],[70864,10],[71015,10],[71136,10],[71186,10],[71236,10],[71343,6],[71353,10],[71403,10],[71423,12],[71471,6],[71481,10],[71538,10],[71649,10],[71700,10],[71749,10],[71798,10],[71849,10],[71974,6],[71984,10],[72021,10],[72128,10],[72179,10],[72230,10],[72281,10],[72769,12],[72830,10],[72844,10],[72900,10],[73018,10],[73067,10],[73116,10],[73165,10],[73218,10],[73271,10],[73324,10],[73372,10],[73420,10],[73468,10],[73526,10],[73584,10],[73642,10],[73690,10],[73738,10],[73923,12],[73984,10],[73998,10],[74054,10],[74172,10],[74219,10],[74266,10],[74313,10],[74360,10],[74407,10],[74464,10],[74511,10],[74562,10],[74609,10],[74666,10],[74713,10],[74764,10],[74811,10],[74868,10],[74915,10],[74966,10],[75013,10],[75070,10],[75117,10],[75291,36],[75407,10],[75444,10],[75481,10],[75525,46],[75794,6],[75804,10],[75822,10],[75837,11],[75931,6],[75941,10],[75978,10],[76326,10],[76340,10],[76393,10],[76479,6],[76558,10],[76817,10],[76852,10],[76886,10],[77209,6],[77219,10],[77281,10],[77295,10],[77332,10],[77376,10],[77448,6],[77458,10],[77488,10],[77503,11],[77746,10],[77800,10],[77854,10],[77988,10],[78039,10],[78090,10],[78141,10],[78192,10],[78306,6],[78316,10],[78353,10],[78489,10],[78543,10],[78597,10],[78731,10],[78780,10],[78831,10],[78882,10],[78928,12],[79051,11],[79685,13],[80810,10],[81166,12],[81322,10],[81978,10],[82828,12],[82876,10],[94532,10],[94562,10],[94842,10],[94976,10],[95051,10],[95126,10],[95270,10],[99039,10],[103121,10],[103154,10],[103388,10],[103422,10],[127136,10],[127189,10],[127242,10],[131808,32]]},"526":{"position":[[5479,6],[5599,6]]},"579":{"position":[[84,10]]},"583":{"position":[[41,10]]},"585":{"position":[[603,10]]},"589":{"position":[[708,12],[756,10]]}}}],["deploy/release/web_app/stat",{"_index":1101,"t":{"170":{"position":[[921,32],[1211,32]]}}}],["deploy_env",{"_index":1019,"t":{"155":{"position":[[634,13]]}}}],["deploy_text",{"_index":1022,"t":{"155":{"position":[[675,14]]}}}],["deploy_to",{"_index":891,"t":{"139":{"position":[[308,12],[1133,12]]}}}],["deployment(deploy",{"_index":4439,"t":{"516":{"position":[[69275,19]]}}}],["deployment,pod,svc",{"_index":4595,"t":{"516":{"position":[[81413,18]]},"585":{"position":[[38,18]]}}}],["deployment.app",{"_index":3872,"t":{"516":{"position":[[20674,15],[25035,15],[79031,15]]},"526":{"position":[[5619,15]]}}}],["deployment.apps/nginx",{"_index":3814,"t":{"516":{"position":[[18119,21],[23483,21],[81475,21]]},"526":{"position":[[3064,21]]},"585":{"position":[[100,21]]}}}],["deployment.apps/pc",{"_index":4450,"t":{"516":{"position":[[70660,18],[71384,18],[72002,18],[72881,18],[74035,18],[75959,18],[76374,18],[77313,18],[77357,18],[78334,18],[94823,18]]}}}],["deployment.apps/pod",{"_index":3738,"t":{"516":{"position":[[13232,19]]}}}],["deployment.kubernetes.io/revis",{"_index":3914,"t":{"516":{"position":[[24225,34]]}}}],["deployment.yaml",{"_index":4448,"t":{"516":{"position":[[70316,21],[70630,15],[76042,15],[76103,15],[76164,15],[79015,15],[79819,15],[94482,23],[94807,15]]}}}],["deployment.yaml,在spec",{"_index":4476,"t":{"516":{"position":[[72695,30],[73793,30]]}}}],["deployment/nginx",{"_index":4612,"t":{"516":{"position":[[82228,16],[82451,16],[82494,16],[82537,16],[82581,16],[82624,16],[82668,16],[82711,16],[82753,16],[82794,16]]},"589":{"position":[[108,16],[331,16],[374,16],[417,16],[461,16],[504,16],[548,16],[591,16],[633,16],[674,16]]}}}],["deployment上点击编辑，然后修改yaml",{"_index":5261,"t":{"516":{"position":[[131844,32]]}}}],["deployment为例演示dashboard",{"_index":5259,"t":{"516":{"position":[[131719,30]]}}}],["deployment之所以可是实现版本的回滚，就是通过记录下历史r",{"_index":4521,"t":{"516":{"position":[[76643,41]]}}}],["deployment和servi",{"_index":4593,"t":{"516":{"position":[[80738,19]]},"579":{"position":[[12,19]]}}}],["deployment控制器支持控制更新过程中的控制，如“暂停(pause)”或“继续(resum",{"_index":4527,"t":{"516":{"position":[[76929,56]]}}}],["deployment支持两种更新策略:重建更新和滚动更新,可以通过strategi",{"_index":4469,"t":{"516":{"position":[[72334,55]]}}}],["deployment来创建一组pod",{"_index":3936,"t":{"516":{"position":[[25476,46]]}}}],["deployment的副本数量，修改spec:replica",{"_index":4466,"t":{"516":{"position":[[71899,34]]}}}],["deployment的版本，并配置暂停deploy",{"_index":4529,"t":{"516":{"position":[[77136,31]]}}}],["deployment，其下的rs和pod",{"_index":4553,"t":{"516":{"position":[[78943,27]]}}}],["deployment：通过控制replicaset来控制pod",{"_index":4394,"t":{"516":{"position":[[64727,44]]}}}],["deprec",{"_index":696,"t":{"110":{"position":[[1759,20]]},"516":{"position":[[13114,10]]}}}],["describ",{"_index":563,"t":{"92":{"position":[[215,13]]},"516":{"position":[[12382,8],[16492,8],[16534,8],[18310,8],[24087,8],[32490,19],[32572,8],[33299,8],[38521,8],[40984,8],[44315,8],[45480,8],[46755,8],[49104,8],[52406,8],[54848,8],[58744,8],[96212,8],[98691,8],[104864,8],[106189,8],[118217,8],[119680,8],[130299,8]]},"526":{"position":[[1437,8],[1479,8],[3255,8]]},"535":{"position":[[31,8]]},"555":{"position":[[31,8]]},"601":{"position":[[31,8]]},"614":{"position":[[31,8]]}}}],["describable接口和descriptor",{"_index":561,"t":{"92":{"position":[[0,48]]}}}],["describable接口和descriptor类是jenkins中非常重要的两个类，它们为jenkins扩展点提供了一种标准化的描述方式，使得jenkin",{"_index":567,"t":{"92":{"position":[[520,100]]}}}],["describable接口是所有可描述对象的基本接口。当您的类需要拥有描述信息时，请让该类实现describable接口。此外，您还需要为该类提供一个descriptor",{"_index":564,"t":{"92":{"position":[[229,106]]}}}],["describable接口，并且为该对象编写descriptor类。其中，describable接口定义了一个名为“getdescriptor”的方法，它返回descriptor对象，而descriptor类则负责提供有关describ",{"_index":562,"t":{"92":{"position":[[49,159]]}}}],["descript",{"_index":921,"t":{"141":{"position":[[130,12],[493,20]]},"173":{"position":[[152,14]]}}}],["description=start",{"_index":412,"t":{"73":{"position":[[1149,17]]}}}],["description=xxx",{"_index":340,"t":{"58":{"position":[[523,15]]}}}],["descriptor",{"_index":565,"t":{"92":{"position":[[336,11],[1018,48],[1143,47]]},"303":{"position":[[405,12]]}}}],["descriptor类为用户提供了设置scm",{"_index":572,"t":{"92":{"position":[[729,42]]}}}],["descriptor类可以为用户提供一些选项来影响构建行为，例如，您可以在descriptor",{"_index":575,"t":{"92":{"position":[[862,74]]}}}],["descriptor类是用于提供describable对象的元数据信息的类。每个describable对象都有一个对应的descriptor对象，它包含该对象的一些信息，例如该对象支持哪些参数、如何验证这些参数、如何显示该对象等等。因此，descriptor类常常被用于定义各种插件、构建器、触发器、发布者等jenkin",{"_index":566,"t":{"92":{"position":[[348,171]]}}}],["desir",{"_index":3915,"t":{"516":{"position":[[24294,7],[66182,14],[66309,7],[68034,7],[68406,7],[70986,7],[75378,7],[76788,7],[77699,7],[78442,7],[85990,7]]}}}],["dest",{"_index":2571,"t":{"294":{"position":[[23,4]]}}}],["destin",{"_index":276,"t":{"42":{"position":[[304,11],[339,18]]}}}],["destori",{"_index":1751,"t":{"199":{"position":[[94,9]]}}}],["destroy",{"_index":1724,"t":{"197":{"position":[[5441,7]]}}}],["destroy(request",{"_index":1721,"t":{"197":{"position":[[5316,26]]}}}],["destroy(self",{"_index":1725,"t":{"197":{"position":[[5475,13]]}}}],["destroymodelmixin(object",{"_index":1723,"t":{"197":{"position":[[5410,26]]}}}],["dev",{"_index":186,"t":{"34":{"position":[[1127,3]]},"155":{"position":[[742,6]]},"516":{"position":[[12781,3],[12888,3],[13064,3],[13308,3],[13503,3],[13517,5],[13658,3],[13727,3],[14195,5],[16828,3],[16913,3],[16927,5],[17025,3],[18115,3],[18213,3],[18332,3],[18359,3],[19905,3],[20252,3],[20344,3],[20544,3],[20670,3],[20767,3],[20793,3],[20903,3],[22176,3],[22275,3],[22366,3],[22505,3],[22652,3],[22708,3],[22786,3],[22882,3],[23479,3],[23561,3],[23776,3],[23918,3],[24112,3],[24139,3],[25031,3],[25177,3],[25859,3],[25949,3],[26551,3],[26684,3],[26970,3],[27107,3],[31964,3],[32426,3],[32597,3],[32720,3],[33335,3],[34266,3],[34849,3],[35107,3],[35645,3],[36038,3],[36669,3],[36959,3],[37523,3],[37969,3],[38397,3],[38551,3],[40402,3],[41018,3],[41478,3],[42524,3],[43009,3],[43987,3],[44350,3],[44911,3],[45166,3],[45520,3],[46127,3],[46371,3],[46792,3],[47402,3],[48125,3],[48746,3],[49139,3],[49427,3],[50136,3],[50403,3],[50879,3],[51462,3],[51763,3],[52245,3],[52440,3],[54202,3],[54669,3],[54890,3],[55573,3],[55872,3],[56353,3],[57559,3],[57861,3],[58053,3],[58629,3],[58786,3],[59482,3],[59829,3],[60167,3],[60727,3],[61883,3],[61930,3],[62305,3],[62359,3],[62773,3],[62820,3],[63448,3],[63698,3],[63863,3],[65913,3],[66292,3],[66521,3],[66763,3],[66855,3],[67250,3],[67363,3],[67708,3],[67916,3],[68017,3],[68281,3],[68389,3],[68675,3],[68761,3],[68795,3],[68937,3],[69040,3],[70416,3],[70821,3],[70977,3],[71098,3],[71380,3],[71495,3],[71611,3],[71998,3],[72090,3],[72877,3],[72977,3],[74031,3],[74131,3],[75369,3],[75818,3],[75955,3],[76370,3],[76489,3],[76779,3],[77252,3],[77309,3],[77472,3],[77682,3],[77950,3],[78330,3],[78425,3],[78693,3],[80854,3],[81267,3],[81368,3],[81435,3],[81820,3],[82165,3],[82385,3],[82890,3],[83324,3],[85666,3],[85973,3],[86171,3],[87656,3],[88062,3],[88333,3],[88645,3],[90907,3],[91323,3],[91465,3],[91656,3],[93927,3],[94584,3],[94914,3],[95301,3],[95664,3],[95983,3],[96246,3],[96285,3],[98170,3],[98515,3],[98726,3],[98766,3],[99070,3],[99748,3],[100071,3],[100609,3],[103176,3],[103444,3],[103714,3],[103883,3],[104093,3],[104361,3],[104738,3],[104893,3],[105576,3],[106041,3],[106219,3],[107459,3],[108099,3],[108364,3],[108724,3],[109445,3],[109671,3],[110608,3],[111151,3],[114236,3],[114651,3],[114797,3],[114943,3],[115223,3],[115767,3],[116089,3],[116494,3],[116675,3],[116903,3],[118000,3],[118242,3],[118273,3],[118488,3],[118843,3],[118972,3],[119489,3],[119706,3],[119734,3],[119929,3],[120245,3],[120399,3],[122682,3],[123767,3],[124684,3],[125982,3],[126111,5],[126373,3],[126383,3],[126585,3],[126685,3],[126773,3],[127095,3]]},"522":{"position":[[112,3],[181,3],[649,5]]},"526":{"position":[[1773,3],[1858,3],[1872,5],[1970,3],[3060,3],[3158,3],[3277,3],[3304,3],[4850,3],[5197,3],[5289,3],[5489,3],[5615,3],[5712,3],[5738,3],[5848,3]]},"532":{"position":[[69,3]]},"535":{"position":[[73,3]]},"541":{"position":[[69,3],[368,3]]},"545":{"position":[[69,3],[1275,3]]},"549":{"position":[[66,3],[258,3]]},"553":{"position":[[68,3]]},"555":{"position":[[73,3]]},"562":{"position":[[68,3],[415,3],[753,3]]},"567":{"position":[[72,3]]},"569":{"position":[[43,3]]},"571":{"position":[[43,3]]},"579":{"position":[[128,3]]},"581":{"position":[[88,3]]},"583":{"position":[[87,3]]},"585":{"position":[[60,3],[445,3]]},"589":{"position":[[45,3],[265,3],[770,3],[1204,3]]},"591":{"position":[[2005,3]]},"595":{"position":[[42,3],[310,3]]},"599":{"position":[[55,3]]},"601":{"position":[[60,3]]},"608":{"position":[[173,3]]},"612":{"position":[[56,3]]},"614":{"position":[[61,3]]},"620":{"position":[[376,3]]},"624":{"position":[[42,3]]},"630":{"position":[[43,3]]},"632":{"position":[[42,3]]},"634":{"position":[[41,3]]},"640":{"position":[[53,3]]},"642":{"position":[[62,3]]},"649":{"position":[[121,3]]}}}],["dev.svc.cluster.loc",{"_index":4829,"t":{"516":{"position":[[99136,21]]}}}],["dev.yaml",{"_index":3798,"t":{"516":{"position":[[16969,8],[17073,8],[17106,8]]},"526":{"position":[[1914,8],[2018,8],[2051,8]]}}}],["dev/mapper/cento",{"_index":3506,"t":{"516":{"position":[[4318,18],[4349,18]]}}}],["dev/nginx",{"_index":3849,"t":{"516":{"position":[[19548,9]]},"526":{"position":[[4493,9]]}}}],["dev/pod",{"_index":4062,"t":{"516":{"position":[[33479,7],[41159,7],[45592,7]]}}}],["dev/pvc1",{"_index":5050,"t":{"516":{"position":[[115564,8],[117010,8]]},"626":{"position":[[141,8]]},"634":{"position":[[148,8]]}}}],["dev/pvc2",{"_index":5052,"t":{"516":{"position":[[115615,8],[117061,8]]},"626":{"position":[[192,8]]},"634":{"position":[[199,8]]}}}],["dev/pvc3",{"_index":5053,"t":{"516":{"position":[[115666,8],[117112,8]]},"626":{"position":[[243,8]]},"634":{"position":[[250,8]]}}}],["devman",{"_index":5174,"t":{"516":{"position":[[125566,6],[125795,11],[126041,8],[126616,6],[126920,11]]}}}],["devman,组是devgroup",{"_index":5160,"t":{"516":{"position":[[125049,28]]}}}],["devman.crt",{"_index":5167,"t":{"516":{"position":[[125298,10]]}}}],["devman.csr",{"_index":5161,"t":{"516":{"position":[[125141,10],[125241,10]]}}}],["devman.key",{"_index":5159,"t":{"516":{"position":[[125003,10],[125125,10]]}}}],["devman@kubernet",{"_index":5178,"t":{"516":{"position":[[125740,17],[125859,17],[125897,20],[126984,17],[127022,20]]}}}],["devop",{"_index":4,"t":{"12":{"position":[[72,18]]}}}],["devops是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（qa",{"_index":5,"t":{"12":{"position":[[91,55]]}}}],["devops这个词，其实就是development和oper",{"_index":2,"t":{"12":{"position":[[0,50]]}}}],["dev下pod",{"_index":5181,"t":{"516":{"position":[[125920,16]]}}}],["dev空间下pod",{"_index":5153,"t":{"516":{"position":[[124852,30]]}}}],["dev，然后点击deployments，查看dev空间下的所有deploy",{"_index":5260,"t":{"516":{"position":[[131753,50]]}}}],["df",{"_index":27,"t":{"19":{"position":[[202,2]]},"313":{"position":[[183,3]]}}}],["dfile.encoding=utf",{"_index":385,"t":{"73":{"position":[[531,18]]}}}],["dhudson.model.directorybrowsersupport.csp",{"_index":387,"t":{"73":{"position":[[578,42]]}}}],["dial",{"_index":4211,"t":{"516":{"position":[[45934,4]]}}}],["dictfield",{"_index":1317,"t":{"184":{"position":[[2714,9]]}}}],["dictfield(child",{"_index":1318,"t":{"184":{"position":[[2724,17]]}}}],["dictionari",{"_index":3659,"t":{"516":{"position":[[10144,14]]}}}],["dict，它将会迭代该dict并且为每一组k，v",{"_index":2515,"t":{"275":{"position":[[691,34]]}}}],["didn't",{"_index":4126,"t":{"516":{"position":[[38703,6],[52606,6],[54988,6],[55103,6],[58921,6],[58988,6]]},"535":{"position":[[171,6],[286,6]]},"555":{"position":[[208,6],[275,6]]}}}],["diff",{"_index":66,"t":{"23":{"position":[[292,4]]}}}],["dig",{"_index":4832,"t":{"516":{"position":[[99213,3],[100835,3]]}}}],["dir",{"_index":955,"t":{"149":{"position":[[74,10]]}}}],["dir('/var/log",{"_index":957,"t":{"149":{"position":[[132,16]]}}}],["directori",{"_index":4205,"t":{"516":{"position":[[44721,9],[109160,9]]}}}],["directoryorcr",{"_index":4961,"t":{"516":{"position":[[109069,17],[109123,17]]}}}],["disabl",{"_index":425,"t":{"73":{"position":[[1551,7]]},"446":{"position":[[65,7]]},"504":{"position":[[4165,7]]},"516":{"position":[[3807,7],[3910,7]]}}}],["disableconcurrentbuild",{"_index":874,"t":{"137":{"position":[[554,25]]}}}],["disableconcurrentbuilds：同一个pipeline，jenkins默认是可以同时执行多次的，如图3",{"_index":872,"t":{"137":{"position":[[453,59]]}}}],["disconnect",{"_index":797,"t":{"114":{"position":[[773,12]]}}}],["discoveri",{"_index":3603,"t":{"516":{"position":[[7925,9]]}}}],["dispatch",{"_index":1614,"t":{"197":{"position":[[286,38]]},"203":{"position":[[31,33]]}}}],["django",{"_index":1041,"t":{"162":{"position":[[12,6]]},"170":{"position":[[385,8],[866,6],[1156,6]]},"175":{"position":[[4,6],[24,6]]},"177":{"position":[[38,6]]},"182":{"position":[[33,6]]},"184":{"position":[[12,6]]},"186":{"position":[[0,9]]},"188":{"position":[[1836,8],[2536,8],[2812,8],[5649,8],[5771,9]]},"195":{"position":[[51,18],[119,18]]},"199":{"position":[[3261,18]]},"221":{"position":[[0,33],[62,6]]},"230":{"position":[[0,8],[51,6],[113,6],[228,6],[367,66]]},"232":{"position":[[193,35],[252,6],[274,6],[559,6]]},"234":{"position":[[133,6],[175,6]]},"236":{"position":[[615,14],[906,6],[927,15],[1016,6]]},"238":{"position":[[158,6]]},"249":{"position":[[0,6]]},"252":{"position":[[0,31],[3443,32],[3902,34]]},"254":{"position":[[902,43]]},"258":{"position":[[4130,93],[5066,31]]},"269":{"position":[[480,54],[923,27],[2201,6]]},"271":{"position":[[662,6],[718,7]]},"273":{"position":[[1077,27],[1302,6],[1611,12]]},"277":{"position":[[0,14],[27,8],[76,10]]}}}],["django.conf",{"_index":2170,"t":{"252":{"position":[[6033,11]]},"277":{"position":[[92,11]]}}}],["django.contrib",{"_index":1053,"t":{"166":{"position":[[5,14]]},"175":{"position":[[49,14]]},"177":{"position":[[5,14]]}}}],["django.contrib.admin",{"_index":1047,"t":{"164":{"position":[[92,23]]}}}],["django.contrib.auth",{"_index":1048,"t":{"164":{"position":[[116,22]]}}}],["django.contrib.auth.admin",{"_index":1132,"t":{"175":{"position":[[82,25]]}}}],["django.contrib.auth.form",{"_index":1133,"t":{"175":{"position":[[130,25]]}}}],["django.contrib.contenttyp",{"_index":1049,"t":{"164":{"position":[[139,30]]}}}],["django.contrib.messag",{"_index":1051,"t":{"164":{"position":[[197,26]]}}}],["django.contrib.sess",{"_index":1050,"t":{"164":{"position":[[170,26]]}}}],["django.contrib.staticfil",{"_index":1052,"t":{"164":{"position":[[224,29]]}}}],["django.cor",{"_index":2542,"t":{"277":{"position":[[190,11]]}}}],["django.core.cach",{"_index":2500,"t":{"275":{"position":[[95,17],[201,17]]},"277":{"position":[[230,17],[267,17]]}}}],["django.core.cache.backends.db.databasecach",{"_index":2409,"t":{"269":{"position":[[113,46]]}}}],["django.core.cache.backends.filebased.filebasedcach",{"_index":2407,"t":{"267":{"position":[[77,54]]},"269":{"position":[[364,54]]}}}],["django.core.cache.backends.locmem.locmemcach",{"_index":2415,"t":{"269":{"position":[[570,48]]}}}],["django.core.cache.backends.memcached.memcachedcach",{"_index":2428,"t":{"269":{"position":[[1290,54],[1486,54],[1863,54]]}}}],["django.core.cache.backends.memcached.pylibmccach",{"_index":2434,"t":{"269":{"position":[[1678,52]]}}}],["django.db",{"_index":1908,"t":{"227":{"position":[[667,9]]},"230":{"position":[[673,9]]},"252":{"position":[[6066,9],[6316,9]]},"256":{"position":[[1400,9]]},"258":{"position":[[135,9],[950,9],[1864,9],[3707,9],[4746,9]]}}}],["django.db.model",{"_index":2214,"t":{"256":{"position":[[377,39]]}}}],["django.form",{"_index":1135,"t":{"175":{"position":[[182,12]]},"177":{"position":[[63,12]]}}}],["django.http",{"_index":2541,"t":{"277":{"position":[[145,11]]}}}],["django.middleware.cache.fetchfromcachemiddlewar",{"_index":2483,"t":{"273":{"position":[[969,51]]}}}],["django.middleware.cache.updatecachemiddlewar",{"_index":2482,"t":{"273":{"position":[[898,48]]}}}],["django.url",{"_index":1980,"t":{"236":{"position":[[131,11]]},"240":{"position":[[190,11]]},"242":{"position":[[77,11],[291,11]]},"244":{"position":[[111,11]]},"277":{"position":[[41,11]]}}}],["django.views.decor",{"_index":2046,"t":{"249":{"position":[[32,31]]}}}],["django.views.decorators.cach",{"_index":2459,"t":{"273":{"position":[[11,29],[351,29],[1347,29],[2051,29]]}}}],["django.views.decorators.cache.never_cache装饰器。如果你不在视图中使用缓存，服务器端是肯定不会缓存的，然而用户的客户端如浏览器还是会缓存一些数据，这时你可以使用never_cach",{"_index":2497,"t":{"273":{"position":[[1919,126]]}}}],["django.views.decorators.http",{"_index":2052,"t":{"249":{"position":[[271,28]]}}}],["django.views.decorators.vari",{"_index":2494,"t":{"273":{"position":[[1767,28]]}}}],["django3.0开始，支持使用pathlib.path",{"_index":2127,"t":{"252":{"position":[[3866,29]]}}}],["django3.0新增。类似autofield，但是只允许1到32767",{"_index":2103,"t":{"252":{"position":[[2507,37]]}}}],["django==3.0",{"_index":1926,"t":{"230":{"position":[[21,11]]}}}],["django_admin",{"_index":1077,"t":{"170":{"position":[[313,12],[848,13]]}}}],["django_content_typ",{"_index":1066,"t":{"168":{"position":[[103,22]]}}}],["django_content_type表中添加多一个字段nam",{"_index":1067,"t":{"168":{"position":[[126,35]]}}}],["django_filt",{"_index":1857,"t":{"221":{"position":[[116,17]]}}}],["django_filters.rest_framework.djangofilterbackend",{"_index":1859,"t":{"221":{"position":[[192,54]]}}}],["django_redis.cache.rediscach",{"_index":2443,"t":{"269":{"position":[[2249,32]]}}}],["django_redis.client.defaultcli",{"_index":2446,"t":{"269":{"position":[[2351,36]]}}}],["djangorestframework",{"_index":1218,"t":{"180":{"position":[[18,19]]}}}],["django中标准的request.post",{"_index":1514,"t":{"193":{"position":[[325,39]]}}}],["django会自动使用app名和模型名，通过下划线连接生成数据表名，比如app_book",{"_index":2272,"t":{"258":{"position":[[552,59]]}}}],["django会自动帮你添加字段：id",{"_index":2061,"t":{"252":{"position":[[48,44]]}}}],["django会默认以模型的小写加上_set",{"_index":2225,"t":{"256":{"position":[[789,47]]}}}],["django原生的admin",{"_index":1037,"t":{"160":{"position":[[0,14]]}}}],["django命令创建项目，它会帮你生成django",{"_index":1927,"t":{"230":{"position":[[73,39]]}}}],["django实际上会额外创建一张用于体现多对多关系的中间表。默认情况下，该表的名称是“多对多字段名+包含该字段的模型名+一个独一无二的哈希码”，例如‘author_books_9cdf4’，当然你也可以通过db_t",{"_index":2229,"t":{"256":{"position":[[984,127]]}}}],["django将调用该函数views.special_case_2003(request",{"_index":1996,"t":{"236":{"position":[[703,124]]}}}],["django拒绝创建。这个元数据选项经常被用在admin",{"_index":2339,"t":{"258":{"position":[[4315,93]]}}}],["django框架学习中创建的demo工程，在settings.py的installed_apps中添加'rest_framework",{"_index":1220,"t":{"180":{"position":[[57,73]]}}}],["django生产环境（debug=fals",{"_index":1070,"t":{"170":{"position":[[99,61]]}}}],["django的imagefield需要提前安装pillow模块，pip",{"_index":2144,"t":{"252":{"position":[[4650,37]]}}}],["django的模型类，drf为我们提供了modelserializer模型类序列化器来帮助我们快速创建一个seri",{"_index":1485,"t":{"190":{"position":[[0,81]]}}}],["django管理器给我们提供有latest()和earliest",{"_index":2289,"t":{"258":{"position":[[1304,89]]}}}],["django还提供了一个简单的api，可以保存任意粒度的数据。你可以使用一个类似字典的对象，django.core.cache.cach",{"_index":2499,"t":{"275":{"position":[[0,89]]}}}],["django项目，应用都是创建在项目根目录下。除开应用的目录，还有其他文档docs目录、项目的djangolearnnotes目录、配置目录env、脚本目录script",{"_index":2554,"t":{"282":{"position":[[0,105]]}}}],["django项目，默认情况下，runserv",{"_index":1933,"t":{"230":{"position":[[309,26]]}}}],["django默认会在建立数据表的时候就自动给所有的模型设置('add",{"_index":2315,"t":{"258":{"position":[[3231,36]]}}}],["django默认支持sqlit",{"_index":2322,"t":{"258":{"position":[[3524,28]]}}}],["djava.awt.headless=tru",{"_index":386,"t":{"73":{"position":[[553,23]]}}}],["dkmqp",{"_index":4500,"t":{"516":{"position":[[74987,5],[75034,5],[75091,5]]}}}],["dn",{"_index":3060,"t":{"457":{"position":[[301,3],[593,3]]},"516":{"position":[[3285,43]]}}}],["do_noth",{"_index":2220,"t":{"256":{"position":[[606,17]]}}}],["doc.nginx",{"_index":3067,"t":{"457":{"position":[[482,9],[1405,9]]}}}],["docker",{"_index":17,"t":{"19":{"position":[[2,8],[24,6],[39,8],[61,6],[75,8],[97,6],[122,6],[181,6],[188,6],[232,6],[282,6]]},"21":{"position":[[0,19],[20,6],[34,6],[50,8],[85,6],[124,6],[151,7],[183,6],[237,6],[276,6],[308,6],[349,6],[378,6],[392,8],[439,6],[557,6],[603,31],[652,6]]},"23":{"position":[[28,6],[285,6],[310,15],[329,6],[479,6],[512,6],[525,8],[547,6],[577,6],[606,6],[647,6],[688,6],[728,6],[741,8],[773,6],[829,6],[870,6],[921,6],[994,6]]},"25":{"position":[[0,6],[130,6],[236,6],[280,6]]},"30":{"position":[[4,6],[66,6]]},"32":{"position":[[8,6],[21,12],[41,6],[48,27],[98,6],[119,6],[150,6],[192,6],[199,32],[263,6],[355,6],[396,6],[444,41],[521,6],[534,6],[629,6],[830,32],[918,6],[950,22],[995,6]]},"34":{"position":[[1784,6],[2218,6],[2475,8],[2917,6],[2993,6],[3632,6],[3930,6]]},"38":{"position":[[0,6],[149,6],[191,6],[225,6]]},"42":{"position":[[32,6],[434,6],[463,6],[570,26],[723,6],[772,6],[880,6],[1104,6]]},"46":{"position":[[57,6],[652,6],[683,6]]},"48":{"position":[[0,6],[192,6]]},"444":{"position":[[0,6]]},"516":{"position":[[1274,35],[1341,6],[2833,14],[5347,9],[5539,6],[5679,6],[5722,7],[6044,6],[6085,6],[7132,6],[7207,6],[7303,6],[8654,6],[8873,10],[8902,6],[8974,8],[9001,6],[18731,6]]},"526":{"position":[[3676,6]]}}}],["docker0",{"_index":3626,"t":{"516":{"position":[[8777,7]]}}}],["docker://4c62b8c0648d2512380f4ffa5da2c99d16e05634979973449c98e9b829f6253c",{"_index":3826,"t":{"516":{"position":[[18627,73]]},"526":{"position":[[3572,73]]}}}],["docker_usernam",{"_index":231,"t":{"34":{"position":[[3269,18]]}}}],["docker_username=librari",{"_index":229,"t":{"34":{"position":[[3145,23],[3227,23]]}}}],["docker_username}/alpin",{"_index":230,"t":{"34":{"position":[[3174,25]]}}}],["dockerfi",{"_index":304,"t":{"48":{"position":[[35,9]]}}}],["dockerfil",{"_index":160,"t":{"32":{"position":[[576,10],[671,10]]},"34":{"position":[[918,10],[996,23],[2488,10],[2944,10],[3056,10],[3445,10],[3711,10],[3848,10],[4212,31],[5193,10]]},"46":{"position":[[2,10],[218,10],[281,10],[449,10],[573,10],[593,10],[721,10],[848,11],[883,10],[1022,10],[1128,10],[1242,10]]},"48":{"position":[[17,10],[100,10]]}}}],["dockerfile中可以有多个cmd",{"_index":106,"t":{"27":{"position":[[265,51]]}}}],["dockerfile时运行命令,父镜像在被子继承后父镜像的onbuild",{"_index":112,"t":{"27":{"position":[[518,49]]}}}],["dockerfile：https://github.com/dock",{"_index":309,"t":{"48":{"position":[[204,36]]}}}],["docker，kubectl，kubeadm，kubelet",{"_index":3471,"t":{"516":{"position":[[3004,30],[3054,30],[3104,30]]}}}],["doctyp",{"_index":3859,"t":{"516":{"position":[[20058,9],[26208,9]]},"526":{"position":[[5003,9]]}}}],["document_root",{"_index":3164,"t":{"459":{"position":[[753,13]]}}}],["doesnotexist",{"_index":4281,"t":{"516":{"position":[[53483,13],[53741,13],[57035,13]]},"545":{"position":[[751,13]]}}}],["doindex",{"_index":483,"t":{"83":{"position":[[609,8]]}}}],["doindex(staplerrequest",{"_index":478,"t":{"83":{"position":[[387,22]]}}}],["done",{"_index":798,"t":{"114":{"position":[[798,11]]},"303":{"position":[[1560,22]]},"369":{"position":[[490,4],[542,4]]},"409":{"position":[[103,4]]},"411":{"position":[[69,4]]},"413":{"position":[[154,4]]},"516":{"position":[[7377,4],[34466,7],[34651,5],[35775,7],[40660,7],[40801,7],[97367,5],[97741,5],[115898,7],[116220,7]]}}}],["dorg.apache.commons.jelly.tags.fmt.timezone=asia/shanghai",{"_index":383,"t":{"73":{"position":[[442,57]]}}}],["dosometh",{"_index":481,"t":{"83":{"position":[[534,12]]},"110":{"position":[[1208,15],[1277,15]]}}}],["dosomething(staplerrequest",{"_index":471,"t":{"83":{"position":[[206,26]]}}}],["down",{"_index":3034,"t":{"455":{"position":[[624,4]]},"496":{"position":[[142,4]]},"516":{"position":[[8739,4],[8763,4],[8785,4]]}}}],["download",{"_index":3125,"t":{"457":{"position":[[4684,10]]}}}],["drf",{"_index":1217,"t":{"180":{"position":[[0,5]]},"277":{"position":[[298,11]]}}}],["drf_exception_handl",{"_index":1907,"t":{"227":{"position":[[606,21]]}}}],["drf_exception_handler(exc",{"_index":1910,"t":{"227":{"position":[[746,26]]}}}],["driver",{"_index":273,"t":{"42":{"position":[[205,6],[552,6],[614,6],[903,6]]}}}],["driver=systemd",{"_index":3570,"t":{"516":{"position":[[6694,15]]}}}],["driver=vieux/sshfs,source=mysshvolume,target=/world",{"_index":297,"t":{"42":{"position":[[1165,51]]}}}],["driver为cgroupfs，而kubernetes推荐使用systemd来替代cgroupf",{"_index":3544,"t":{"516":{"position":[[5745,49]]}}}],["ds",{"_index":3701,"t":{"516":{"position":[[11869,2],[17647,2],[17706,2],[85967,2]]},"526":{"position":[[2592,2],[2651,2]]}}}],["dskiptest",{"_index":447,"t":{"78":{"position":[[507,10]]}}}],["dsl",{"_index":513,"t":{"88":{"position":[[408,12]]}}}],["dslhb",{"_index":4437,"t":{"516":{"position":[[69127,5]]}}}],["dspotbugs.skip",{"_index":448,"t":{"78":{"position":[[519,14]]}}}],["dst",{"_index":277,"t":{"42":{"position":[[358,3]]}}}],["durat",{"_index":4686,"t":{"516":{"position":[[88094,8],[91486,8]]}}}],["durationfield",{"_index":1303,"t":{"184":{"position":[[2332,13],[2346,15]]},"252":{"position":[[1401,13]]}}}],["duser.timezone=asia/shanghai",{"_index":384,"t":{"73":{"position":[[501,28]]}}}],["dw",{"_index":2641,"t":{"313":{"position":[[173,2]]}}}],["e",{"_index":2403,"t":{"264":{"position":[[2146,2],[2166,2]]},"311":{"position":[[29,1]]},"322":{"position":[[28,5]]},"402":{"position":[[831,1],[870,1]]},"432":{"position":[[1986,1]]},"457":{"position":[[4313,1],[4320,1]]},"516":{"position":[[5311,1],[5321,1]]}}}],["e486",{"_index":3782,"t":{"516":{"position":[[16389,4]]},"526":{"position":[[1334,4]]}}}],["echo",{"_index":91,"t":{"25":{"position":[[191,4]]},"27":{"position":[[731,4],[748,4]]},"34":{"position":[[2010,4],[2054,5],[3264,4]]},"107":{"position":[[68,4],[469,4]]},"128":{"position":[[167,4]]},"132":{"position":[[503,4],[538,4],[579,4],[621,4],[663,4],[716,4],[764,4],[813,4],[862,4]]},"137":{"position":[[907,4]]},"141":{"position":[[199,4]]},"149":{"position":[[815,4]]},"151":{"position":[[873,4]]},"303":{"position":[[1201,4],[1387,4],[1428,4],[1539,4]]},"350":{"position":[[412,4],[456,4]]},"352":{"position":[[44,4],[57,4],[85,4]]},"364":{"position":[[63,4]]},"369":{"position":[[443,4],[482,4],[495,4],[534,4]]},"374":{"position":[[576,4],[619,4],[666,4],[696,4]]},"376":{"position":[[14,4]]},"422":{"position":[[63,4],[82,4],[101,4],[121,4],[143,4],[166,4],[185,4]]},"429":{"position":[[1071,4],[1106,4],[1142,4],[1174,4]]},"432":{"position":[[1814,4],[1835,4],[1860,4],[1881,4],[1903,4],[1927,4],[1952,4],[1970,4],[1990,4],[2516,4],[2556,4],[2595,4],[2635,4],[2676,4],[2714,4],[2760,4]]},"516":{"position":[[36069,4],[36094,4],[40624,4],[40765,4],[42721,5],[87361,4],[87903,4],[90481,4],[91139,4],[95315,4],[115863,4],[116185,4],[119284,4],[119353,4]]}}}],["edit",{"_index":2193,"t":{"254":{"position":[[986,8]]},"516":{"position":[[12252,4],[66738,4],[66797,6],[67891,4],[67950,6],[71969,4],[72032,6],[93401,4]]},"591":{"position":[[1479,4]]}}}],["editable=fals",{"_index":2178,"t":{"252":{"position":[[6433,15]]}}}],["ef",{"_index":405,"t":{"73":{"position":[[1062,2]]},"446":{"position":[[316,2]]}}}],["effect",{"_index":4378,"t":{"516":{"position":[[63599,7],[64162,6],[64171,22]]},"571":{"position":[[342,6],[351,22]]}}}],["effect为noexecute时生效，表示pod在nod",{"_index":4385,"t":{"516":{"position":[[64220,37]]},"571":{"position":[[400,37]]}}}],["efg",{"_index":2780,"t":{"400":{"position":[[37,6]]}}}],["eg",{"_index":314,"t":{"52":{"position":[[114,3]]},"62":{"position":[[172,3]]}}}],["eg：http://<jenkins_host>/config.xml",{"_index":312,"t":{"52":{"position":[[42,35]]}}}],["el7",{"_index":3556,"t":{"516":{"position":[[6297,3]]}}}],["element",{"_index":356,"t":{"62":{"position":[[227,7],[259,7],[300,7],[353,7],[385,7],[453,8]]}}}],["elif",{"_index":2795,"t":{"407":{"position":[[28,4]]}}}],["em>yyyi",{"_index":2199,"t":{"254":{"position":[[1303,8]]}}}],["email",{"_index":1144,"t":{"175":{"position":[[410,8],[921,8],[1201,8],[1386,8]]}}}],["emailfield",{"_index":1254,"t":{"184":{"position":[[1174,10]]},"252":{"position":[[1523,10]]}}}],["emailfield(max_length=non",{"_index":1255,"t":{"184":{"position":[[1185,27]]}}}],["emb",{"_index":5169,"t":{"516":{"position":[[125404,5],[125575,5]]}}}],["empti",{"_index":1162,"t":{"175":{"position":[[1092,6]]}}}],["emptydir",{"_index":4020,"t":{"516":{"position":[[29762,9],[106992,9],[107133,20],[107154,13],[107232,33],[107439,8],[107921,9],[108015,8],[108087,8],[108164,8],[108352,8],[109659,8]]}}}],["emptydir.yaml",{"_index":4940,"t":{"516":{"position":[[107377,13],[107990,13]]}}}],["emptydir、hostpath、nf",{"_index":4932,"t":{"516":{"position":[[106915,26]]}}}],["emptydir中数据不会被持久化，它会随着pod的结束而销毁，如果想简单的将数据持久化到主机中，可以选择hostpath",{"_index":4957,"t":{"516":{"position":[[108485,68]]}}}],["emptydir是在pod被分配到node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当pod",{"_index":4938,"t":{"516":{"position":[[107049,83]]}}}],["emptydir是最基础的volume类型，一个emptydir就是host",{"_index":4937,"t":{"516":{"position":[[107002,46]]}}}],["emtydir的存储卷，与pod",{"_index":4021,"t":{"516":{"position":[[29775,36]]}}}],["enabl",{"_index":424,"t":{"73":{"position":[[1513,6]]},"309":{"position":[[103,6]]},"446":{"position":[[33,6]]},"504":{"position":[[4070,6]]},"516":{"position":[[3590,6],[6078,6],[6778,6]]}}}],["enabled=1",{"_index":3557,"t":{"516":{"position":[[6308,9]]}}}],["encod",{"_index":968,"t":{"149":{"position":[[642,29],[735,9],[796,9]]},"153":{"position":[[146,38]]}}}],["encoding（可选）：目标文件的编码。如果留空，则使用操作系统默认的编码。如果写的是base64的数据，则可以使用base64",{"_index":966,"t":{"149":{"position":[[497,68]]}}}],["end",{"_index":359,"t":{"62":{"position":[[327,4]]},"303":{"position":[[1776,5],[1805,3],[2181,3]]},"344":{"position":[[252,5]]}}}],["endcach",{"_index":2480,"t":{"273":{"position":[[865,8]]}}}],["endpoint",{"_index":4806,"t":{"516":{"position":[[96417,10],[96749,9],[98891,10],[123182,12]]}}}],["endpoints列表，里面就是当前servic",{"_index":4805,"t":{"516":{"position":[[96139,41]]}}}],["endpoint是kubernetes中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址，它是根据service配置文件中selector",{"_index":4809,"t":{"516":{"position":[[96759,94]]}}}],["ens33",{"_index":3307,"t":{"504":{"position":[[1161,5],[2210,5]]}}}],["ens33:1",{"_index":4174,"t":{"516":{"position":[[41776,7]]}}}],["ens33:2",{"_index":4177,"t":{"516":{"position":[[41855,7]]}}}],["enterlocalpassivemod",{"_index":787,"t":{"114":{"position":[[567,23]]}}}],["entrypoint",{"_index":107,"t":{"27":{"position":[[317,10],[1545,10]]},"34":{"position":[[1699,10],[1734,10],[2075,10],[2091,10],[2140,10],[2160,28],[2235,10],[2256,10],[2313,10],[2342,12],[2522,10],[4476,10]]},"46":{"position":[[1163,10],[1211,10]]}}}],["entrypoint的作用和cmd",{"_index":108,"t":{"27":{"position":[[344,34]]}}}],["env",{"_index":100,"t":{"27":{"position":[[140,3],[627,3],[1184,3],[1241,3],[1279,3],[1340,3],[1389,3],[1438,3]]},"34":{"position":[[2588,3],[2607,3],[2625,3],[2738,3],[2826,3]]},"110":{"position":[[351,4],[356,43]]},"516":{"position":[[21739,3],[22909,4],[28463,4],[31777,3],[35630,3],[35783,4],[35965,3],[36031,3]]}}}],["env.branch_nam",{"_index":900,"t":{"139":{"position":[[536,15]]}}}],["env.getenvironment().each",{"_index":677,"t":{"110":{"position":[[1009,25]]}}}],["env.node_nam",{"_index":723,"t":{"112":{"position":[[475,14]]}}}],["env.redis_password",{"_index":2450,"t":{"269":{"position":[[2474,19]]}}}],["env.xxx",{"_index":657,"t":{"110":{"position":[[510,21],[600,7]]}}}],["env.yaml",{"_index":4090,"t":{"516":{"position":[[35568,16],[35948,8]]}}}],["env['node_nam",{"_index":754,"t":{"112":{"position":[[1532,17]]}}}],["env['node_name'].equals(\"mast",{"_index":760,"t":{"112":{"position":[[1679,35]]}}}],["environ",{"_index":890,"t":{"139":{"position":[[251,31],[290,11],[1115,11]]},"143":{"position":[[171,50],[222,11]]},"362":{"position":[[170,35]]},"516":{"position":[[18942,12],[24560,12]]},"526":{"position":[[3887,12]]}}}],["environment\":\"dev\"，\"environment\":\"test\"，\"environment\":\"pro",{"_index":3883,"t":{"516":{"position":[[21442,65]]}}}],["environmentfile=/etc/sysconfig/jenkin",{"_index":416,"t":{"73":{"position":[[1234,38]]}}}],["environment中定义的变量与env",{"_index":941,"t":{"143":{"position":[[342,53]]}}}],["environment指令可以在pipeline中定义，代表变量作用域为整个pipeline；也可以在stag",{"_index":933,"t":{"143":{"position":[[0,72]]}}}],["environment：用于设置环境变量，可定义在stage或pipelin",{"_index":856,"t":{"135":{"position":[[119,42]]}}}],["envvar",{"_index":663,"t":{"110":{"position":[[636,7]]},"112":{"position":[[1567,7]]}}}],["env中的变量都是jenkins内置的，或者是与具体pipeline相关的。有时候，我们需要定义一些全局的跨pipeline的自定义变量。进入manag",{"_index":946,"t":{"143":{"position":[[583,77]]}}}],["env的值在[\"xxx\",\"yyi",{"_index":4291,"t":{"516":{"position":[[54393,25],[56067,33],[58238,25]]},"541":{"position":[[563,33]]},"549":{"position":[[443,25]]}}}],["env，环境变量，用于在pod",{"_index":4094,"t":{"516":{"position":[[35868,26]]}}}],["eof",{"_index":2608,"t":{"303":{"position":[[2089,5],[2152,3],[2233,3],[2257,3]]},"516":{"position":[[4941,5],[5107,3],[5851,5],[5992,3]]}}}],["epol",{"_index":2952,"t":{"449":{"position":[[234,6]]}}}],["epoll的i/o模型(如果你不知道nginx",{"_index":2953,"t":{"449":{"position":[[243,52]]}}}],["eq",{"_index":2774,"t":{"394":{"position":[[78,2],[108,2]]},"429":{"position":[[246,3]]},"504":{"position":[[3037,2],[3224,2]]}}}],["equal",{"_index":893,"t":{"139":{"position":[[343,23],[374,6],[763,15],[826,8]]},"516":{"position":[[63556,7]]}}}],["error",{"_index":755,"t":{"112":{"position":[[1561,5]]},"114":{"position":[[199,5]]},"516":{"position":[[125986,5]]}}}],["error.html",{"_index":2989,"t":{"449":{"position":[[1234,11]]}}}],["error.log",{"_index":4969,"t":{"516":{"position":[[109802,9],[111291,9]]}}}],["error_log",{"_index":2947,"t":{"449":{"position":[[100,9]]}}}],["error_messag",{"_index":1331,"t":{"184":{"position":[[3048,14]]},"254":{"position":[[1068,14]]}}}],["error_pag",{"_index":2983,"t":{"449":{"position":[[1162,10],[1215,10]]}}}],["errordetail(str",{"_index":1452,"t":{"188":{"position":[[2687,31]]}}}],["errordetail(string='d",{"_index":1417,"t":{"188":{"position":[[1065,25]]}}}],["errordetail(string='thi",{"_index":1415,"t":{"188":{"position":[[986,25]]}}}],["errordetail(string='图书不是关于django",{"_index":1442,"t":{"188":{"position":[[2118,36],[3539,36]]}}}],["errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改rest",{"_index":1408,"t":{"188":{"position":[[113,67]]}}}],["esac",{"_index":2806,"t":{"415":{"position":[[9,4],[117,4],[122,10],[198,4],[383,4]]}}}],["esc",{"_index":2639,"t":{"311":{"position":[[139,3]]},"360":{"position":[[91,3]]}}}],["etc/cni",{"_index":3622,"t":{"516":{"position":[[8715,9]]}}}],["etc/dock",{"_index":3545,"t":{"516":{"position":[[5818,11]]}}}],["etc/docker/daemon.json",{"_index":3546,"t":{"516":{"position":[[5857,23]]}}}],["etc/export",{"_index":4979,"t":{"516":{"position":[[110244,12],[110276,12],[112906,12]]}}}],["etc/fstab",{"_index":3505,"t":{"516":{"position":[[4303,10]]}}}],["etc/fstab，注释掉swap",{"_index":3504,"t":{"516":{"position":[[4246,30]]}}}],["etc/host",{"_index":3061,"t":{"457":{"position":[[312,10]]},"516":{"position":[[3338,27]]}}}],["etc/init.d",{"_index":3342,"t":{"504":{"position":[[3827,12]]}}}],["etc/keepaliv",{"_index":3338,"t":{"504":{"position":[[3636,16],[3722,16]]}}}],["etc/kubernetes/admin.conf",{"_index":3597,"t":{"516":{"position":[[7725,26]]}}}],["etc/kubernetes/pki",{"_index":5155,"t":{"516":{"position":[[124926,20]]}}}],["etc/nginx",{"_index":2912,"t":{"442":{"position":[[106,10]]}}}],["etc/nginx/cache_temp",{"_index":3226,"t":{"487":{"position":[[330,21],[846,21]]}}}],["etc/nginx/conf.d",{"_index":2935,"t":{"442":{"position":[[732,18]]}}}],["etc/nginx/conf.d/*.conf",{"_index":2976,"t":{"449":{"position":[[870,25]]}}}],["etc/nginx/conf.d/cache.conf",{"_index":3220,"t":{"487":{"position":[[35,28],[281,28]]}}}],["etc/nginx/https/lion.club.key",{"_index":3256,"t":{"493":{"position":[[255,31]]}}}],["etc/nginx/https/lion.club_bundle.crt",{"_index":3254,"t":{"493":{"position":[[189,38]]}}}],["etc/nginx/mime.typ",{"_index":2972,"t":{"449":{"position":[[777,22]]}}}],["etc/nginx/nginx.conf",{"_index":2915,"t":{"442":{"position":[[169,21],[761,21]]},"457":{"position":[[650,21]]}}}],["etc/nginx/nginx.conf.default",{"_index":2916,"t":{"442":{"position":[[205,29]]}}}],["etc/nginx/uwsgi_param",{"_index":1087,"t":{"170":{"position":[[555,24]]}}}],["etc/redhat",{"_index":3480,"t":{"516":{"position":[[3223,11]]}}}],["etc/resolv.conf",{"_index":4826,"t":{"516":{"position":[[99090,16]]}}}],["etc/selinux/config",{"_index":3499,"t":{"516":{"position":[[3999,19]]}}}],["etc/sysconfig",{"_index":3344,"t":{"504":{"position":[[3903,15]]}}}],["etc/sysconfig/jenkin",{"_index":376,"t":{"73":{"position":[[193,22],[794,22],[824,22]]}}}],["etc/sysconfig/kubelet",{"_index":3567,"t":{"516":{"position":[[6629,26]]}}}],["etc/sysconfig/modeules/ipvs.modul",{"_index":3529,"t":{"516":{"position":[[5225,36]]}}}],["etc/sysconfig/modules/ipvs.modul",{"_index":3523,"t":{"516":{"position":[[4947,35],[5151,35]]}}}],["etc/sysctl.d/kubernetes.conf",{"_index":3508,"t":{"516":{"position":[[4430,41]]}}}],["etc/yum.repos.d.dock",{"_index":3534,"t":{"516":{"position":[[5457,23]]}}}],["etcd",{"_index":3427,"t":{"516":{"position":[[1209,4],[17476,4],[80678,4]]},"526":{"position":[[2421,4]]},"577":{"position":[[328,4]]}}}],["etcd:3.4.3",{"_index":3580,"t":{"516":{"position":[[7070,10]]}}}],["etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiserv",{"_index":3434,"t":{"516":{"position":[[1551,55]]}}}],["event",{"_index":2951,"t":{"449":{"position":[[209,11],[221,6],[1272,6]]},"516":{"position":[[19415,7],[24815,7],[33346,7],[41031,7],[52452,7],[58797,7],[96496,7],[98970,7],[118362,7]]},"526":{"position":[[4360,7]]},"555":{"position":[[84,7]]}}}],["ex1,ex2}.sh",{"_index":2850,"t":{"432":{"position":[[208,12]]}}}],["ex1.sh",{"_index":2851,"t":{"432":{"position":[[221,6],[258,6],[308,6]]}}}],["ex2.sh",{"_index":2852,"t":{"432":{"position":[[228,6],[265,6],[315,6]]}}}],["ex3.sh",{"_index":2854,"t":{"432":{"position":[[272,6],[322,6]]}}}],["ex4.sh",{"_index":2855,"t":{"432":{"position":[[279,6],[329,6]]}}}],["ex[1",{"_index":2856,"t":{"432":{"position":[[291,5]]}}}],["exampl",{"_index":637,"t":{"107":{"position":[[425,11]]}}}],["exampleview(apiview",{"_index":1805,"t":{"201":{"position":[[380,21]]},"205":{"position":[[351,21]]},"215":{"position":[[479,21]]}}}],["exc",{"_index":1914,"t":{"227":{"position":[[887,5]]}}}],["except",{"_index":1687,"t":{"197":{"position":[[3767,6]]},"199":{"position":[[482,6]]},"264":{"position":[[2126,6],[2133,9]]}}}],["exception_handl",{"_index":1900,"t":{"227":{"position":[[70,17],[359,20],[470,20],[585,17]]}}}],["exception_handler(exc",{"_index":1902,"t":{"227":{"position":[[182,22],[702,22]]}}}],["exclud",{"_index":981,"t":{"151":{"position":[[299,52]]},"190":{"position":[[1179,20],[1299,7]]}}}],["exclus",{"_index":358,"t":{"62":{"position":[[267,12],[393,12]]}}}],["exec",{"_index":77,"t":{"23":{"position":[[836,4],[877,4]]},"34":{"position":[[946,4],[1626,4],[1905,4],[2121,4],[5012,7]]},"516":{"position":[[5883,5],[12467,4],[28918,5],[28964,17],[34956,4],[35087,4],[36022,4],[42093,17],[42136,5],[42508,4],[42655,5],[42784,5],[42931,4],[43001,4],[43069,4],[43553,5],[43883,8],[43971,4],[44102,5],[44261,4],[44342,4],[44903,4],[44959,4],[47690,4],[95258,4],[99027,4],[118946,4],[120368,4],[123484,6]]},"642":{"position":[[31,4]]}}}],["exec.yaml",{"_index":4186,"t":{"516":{"position":[[42440,17],[42908,9],[43907,9],[44234,9]]}}}],["execstart=/bin/bash",{"_index":417,"t":{"73":{"position":[[1273,19]]}}}],["executegroovy(str",{"_index":803,"t":{"116":{"position":[[50,20]]}}}],["executor",{"_index":703,"t":{"110":{"position":[[1887,8]]},"112":{"position":[[611,9],[882,8]]}}}],["executor_numb",{"_index":672,"t":{"110":{"position":[[864,15]]}}}],["exec命令：在容器内执行一次命令，如果命令执行的退出码为0",{"_index":4194,"t":{"516":{"position":[[43490,44]]}}}],["exec方式为例，演示下钩子函数的使用，创建pod",{"_index":4184,"t":{"516":{"position":[[42404,30]]}}}],["exec格式时,entrypoint可以通过cmd提供额外参数,cmd的额外参数可以在容器启动时动态替换。在shell格式时entrypoint会忽略任何cmd或dock",{"_index":213,"t":{"34":{"position":[[2363,87]]}}}],["exist",{"_index":4280,"t":{"516":{"position":[[53473,9],[53733,7],[53859,6],[57027,7]]},"545":{"position":[[743,7]]}}}],["exit",{"_index":71,"t":{"23":{"position":[[450,4]]}}}],["exp",{"_index":2907,"t":{"435":{"position":[[146,14]]}}}],["exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，是\"假\"；而一个非零值的表达式所返回的退出状态码将为0，是\"true\"。若是逻辑判断，表达式exp为真则为1,假则为0",{"_index":2824,"t":{"427":{"position":[[242,134]]}}}],["expect",{"_index":894,"t":{"139":{"position":[[381,9]]}}}],["expir",{"_index":3216,"t":{"485":{"position":[[57,8]]}}}],["explain",{"_index":3720,"t":{"516":{"position":[[12314,7],[30142,7],[30181,7],[30237,7],[30387,7],[31514,7],[36253,7],[47640,7],[64025,7]]},"571":{"position":[[205,7]]}}}],["export",{"_index":373,"t":{"73":{"position":[[95,6]]},"303":{"position":[[2244,6]]},"362":{"position":[[217,74]]}}}],["expos",{"_index":98,"t":{"27":{"position":[[69,6],[717,6],[1518,6]]},"34":{"position":[[3742,6],[3759,6],[3784,6],[3954,6],[3969,6],[4049,6]]},"516":{"position":[[9284,6],[12359,6],[25774,6],[25882,7],[26467,6],[26574,7],[81315,6]]},"583":{"position":[[34,6]]}}}],["expr",{"_index":2770,"t":{"392":{"position":[[52,4],[78,4],[105,4],[133,4],[158,4],[410,4]]}}}],["express",{"_index":899,"t":{"139":{"position":[[516,10]]},"516":{"position":[[65353,15],[70075,15],[85348,15],[87061,15]]}}}],["expression：如果groovy表达式返回的是tru",{"_index":897,"t":{"139":{"position":[[424,34]]}}}],["exprexpress",{"_index":2906,"t":{"435":{"position":[[125,20]]}}}],["exp只要符合c",{"_index":2908,"t":{"435":{"position":[[161,20]]}}}],["extens",{"_index":505,"t":{"88":{"position":[[0,11]]}}}],["extensionmethod",{"_index":511,"t":{"88":{"position":[[342,17]]}}}],["extensionpoint",{"_index":510,"t":{"88":{"position":[[166,16]]}}}],["extensions/v1beta1",{"_index":4898,"t":{"516":{"position":[[104288,18],[105502,18]]},"595":{"position":[[237,18]]},"608":{"position":[[99,18]]}}}],["extern",{"_index":3945,"t":{"516":{"position":[[25982,8],[26717,8],[81606,8],[96016,8],[98548,8],[100104,8],[102934,8],[104118,8],[129631,8]]},"585":{"position":[[231,8]]},"595":{"position":[[67,8]]}}}],["externalnam",{"_index":4786,"t":{"516":{"position":[[94357,13],[100585,12],[100625,12],[100650,13],[100784,12]]}}}],["externalname.dev.svc.cluster.loc",{"_index":4852,"t":{"516":{"position":[[100859,34],[100902,35]]}}}],["externalname.yaml",{"_index":4851,"t":{"516":{"position":[[100750,17]]}}}],["externalname类型的servic",{"_index":4848,"t":{"516":{"position":[[100414,23]]}}}],["externalname类型的service用于引入集群外部的服务，它通过externalname属性指定外部一个服务的地址，然后在集群内部访问此servic",{"_index":4849,"t":{"516":{"position":[[100438,93]]}}}],["extra",{"_index":1157,"t":{"175":{"position":[[763,5]]}}}],["extra_kwarg",{"_index":1505,"t":{"190":{"position":[[1982,12]]}}}],["extra_kwargs参数为modelseri",{"_index":1504,"t":{"190":{"position":[[1774,48]]}}}],["ex{1..3},ex4}.sh",{"_index":2853,"t":{"432":{"position":[[240,17]]}}}],["eyjhbgcioijsuzi1niisimtpzci6imjrykf4bw5xcdhwcmngugjtek5nodfusxl1awptmmu2m3o4lty5a2fks2cifq.eyjpc3mioijrdwjlcm5ldgvzl3nlcnzpy2vhy2nvdw50iiwia3vizxjuzxrlcy5pby9zzxj2awnlywnjb3vudc9uyw1lc3bhy2uioijrdwjlcm5ldgvzlwrhc2hib2fyzcisimt1ymvybmv0zxmuaw8vc2vydmljzwfjy291bnqvc2vjcmv0lm5hbwuioijkyxnoym9hcmqtywrtaw4tdg9rzw4tegjxaggilcjrdwjlcm5ldgvzlmlvl3nlcnzpy2vhy2nvdw50l3nlcnzpy2utywnjb3vudc5uyw1lijoizgfzagjvyxjklwfkbwluiiwia3vizxjuzxrlcy5pby9zzxj2awnlywnjb3vudc9zzxj2awnllwfjy291bnqudwlkijoiotvkodrkodatymu3ys00zdewlweyztatnjhmotaymjjkmdm5iiwic3viijoic3lzdgvtonnlcnzpy2vhy2nvdw50omt1ymvybmv0zxmtzgfzagjvyxjkomrhc2hib2fyzc1hzg1pbij9.nal7e8zfwwddopxkqzjztb46sk9e8iujynui9vnbay3jts7t1g1msjsbnbxzqsygag",{"_index":5250,"t":{"516":{"position":[[130664,690]]}}}],["f",{"_index":43,"t":{"21":{"position":[[288,1],[320,1],[390,1]]},"23":{"position":[[699,1],[739,1]]},"25":{"position":[[13,1],[63,1],[249,1]]},"27":{"position":[[1729,1]]},"38":{"position":[[103,1],[136,1]]},"73":{"position":[[792,1]]},"294":{"position":[[129,20],[156,1]]},"311":{"position":[[174,3]]},"313":{"position":[[6,1],[8,27],[36,2],[53,1],[190,1]]},"322":{"position":[[68,5]]},"402":{"position":[[287,1],[338,1]]},"457":{"position":[[4269,1],[4276,1]]},"504":{"position":[[4310,1]]},"516":{"position":[[9038,1],[11025,1],[11095,1],[13846,1],[13982,1],[14169,1],[14375,1],[14424,1],[14506,1],[14557,1],[14951,1],[14993,1],[17068,1],[17101,1],[21054,1],[21090,1],[23060,1],[25404,1],[25443,1],[27278,1],[27314,1],[32249,1],[33145,1],[34721,1],[35144,1],[35942,1],[36844,1],[37852,1],[38087,1],[38274,1],[40856,1],[42897,1],[44219,1],[45374,1],[46653,1],[48996,1],[50270,1],[50599,1],[50730,1],[51618,1],[51976,1],[52119,1],[54514,1],[55181,1],[55404,1],[56196,1],[57722,1],[58478,1],[59222,1],[59333,1],[60559,1],[66114,1],[69210,1],[70625,1],[79010,1],[80200,1],[82049,1],[85862,1],[86385,1],[87973,1],[89408,1],[91213,1],[91855,1],[94805,1],[95870,1],[97834,1],[98364,1],[99960,1],[100740,1],[102638,1],[104028,1],[104620,1],[105920,1],[107718,1],[107981,1],[108343,1],[108935,1],[109327,1],[109650,1],[110819,1],[111048,1],[113758,1],[115059,1],[116399,1],[118125,1],[118732,1],[119600,1],[120145,1],[126771,1],[129328,1]]},"522":{"position":[[300,1],[436,1],[623,1]]},"524":{"position":[[58,1],[107,1],[189,1],[240,1],[634,1],[676,1]]},"526":{"position":[[2013,1],[2046,1],[5999,1],[6035,1]]},"530":{"position":[[39,1]]},"535":{"position":[[364,1]]},"539":{"position":[[39,1]]},"543":{"position":[[39,1]]},"547":{"position":[[39,1]]},"551":{"position":[[39,1]]},"560":{"position":[[39,1],[150,1]]},"564":{"position":[[39,1]]},"573":{"position":[[41,1]]},"587":{"position":[[42,1]]},"593":{"position":[[39,1]]},"597":{"position":[[39,1]]},"610":{"position":[[39,1]]},"618":{"position":[[39,1]]},"622":{"position":[[39,1]]},"628":{"position":[[39,1]]},"638":{"position":[[39,1]]}}}],["fail",{"_index":4198,"t":{"516":{"position":[[44555,6],[44661,7],[45926,7],[47115,7],[47134,6],[47225,6],[49216,7],[49235,6],[49313,6],[112744,11]]}}}],["fail_timeout=10",{"_index":3041,"t":{"455":{"position":[[1029,16]]}}}],["fail_timeout=tim",{"_index":3031,"t":{"455":{"position":[[533,17]]}}}],["failedjobhistorylimit",{"_index":4707,"t":{"516":{"position":[[89890,22]]}}}],["failedschedul",{"_index":4120,"t":{"516":{"position":[[38570,16],[52527,16],[54909,16],[55024,16],[58842,16]]},"535":{"position":[[92,16],[207,16]]},"555":{"position":[[129,16]]}}}],["failed）：所有容器都已经终止，但至少有一个容器终止失败，即容器返回了非0",{"_index":4138,"t":{"516":{"position":[[39130,48]]}}}],["failed，即非空约束失败异常，导致python",{"_index":2186,"t":{"254":{"position":[[555,25]]}}}],["failur",{"_index":850,"t":{"132":{"position":[[302,21],[612,8],[643,8],[804,8],[842,8]]}}}],["failurethreshold",{"_index":4006,"t":{"516":{"position":[[29339,17],[47874,16]]}}}],["fake",{"_index":1062,"t":{"168":{"position":[[27,4]]}}}],["fals",{"_index":520,"t":{"88":{"position":[[670,5]]},"184":{"position":[[2884,21],[2917,22]]},"188":{"position":[[947,7],[2081,5],[2649,5],[3502,5]]},"197":{"position":[[4673,6]]},"211":{"position":[[348,5]]},"392":{"position":[[246,6]]},"394":{"position":[[119,6],[225,6],[338,6]]},"396":{"position":[[67,10],[88,5],[233,6]]},"398":{"position":[[96,5]]},"400":{"position":[[94,6],[190,6]]},"402":{"position":[[165,6],[224,6],[279,6],[412,6],[482,6],[539,6],[601,6]]},"413":{"position":[[185,26]]},"457":{"position":[[4209,5]]},"516":{"position":[[19254,5],[29388,5],[29649,5],[69748,5],[69756,13],[91397,5],[116026,5],[116348,5]]},"526":{"position":[[4199,5]]}}}],["false，如果设置为tru",{"_index":4019,"t":{"516":{"position":[[29655,40],[31305,39]]}}}],["false，将不会针对当前模型创建和删除数据库表，也就是说django",{"_index":2295,"t":{"258":{"position":[[1715,50]]}}}],["false，那么当前字段将不会在admin后台或者其它的modelform表单中显示，同时还会被模型验证功能跳过。参数默认值为tru",{"_index":2194,"t":{"254":{"position":[[995,72]]}}}],["fannel",{"_index":3630,"t":{"516":{"position":[[9008,14]]}}}],["far",{"_index":2058,"t":{"249":{"position":[[452,3]]}}}],["fbf967dd5",{"_index":4884,"t":{"516":{"position":[[102794,9]]}}}],["fd",{"_index":2587,"t":{"303":{"position":[[973,2],[1114,23],[1938,2]]}}}],["fd<file",{"_index":2603,"t":{"303":{"position":[[1907,30]]}}}],["fd>file或者fd>>fil",{"_index":2586,"t":{"303":{"position":[[939,33]]}}}],["fe.lion",{"_index":3124,"t":{"457":{"position":[[4656,7]]}}}],["fe.lion.club",{"_index":3106,"t":{"457":{"position":[[3548,13]]}}}],["fe.lion.club/images/1.jpg",{"_index":3112,"t":{"457":{"position":[[3861,25]]}}}],["fe.lion.club/photos/1.jpg",{"_index":3114,"t":{"457":{"position":[[3957,25]]}}}],["fe.lion.club/pics/1.jpg",{"_index":3113,"t":{"457":{"position":[[3901,23]]}}}],["fe.lion.club/search",{"_index":3111,"t":{"457":{"position":[[3801,19]]}}}],["fe.lion.com/download",{"_index":3132,"t":{"457":{"position":[[4969,21]]}}}],["fe.nginx",{"_index":3069,"t":{"457":{"position":[[545,8],[1474,8]]}}}],["feet",{"_index":226,"t":{"34":{"position":[[2777,5]]}}}],["femal",{"_index":1380,"t":{"186":{"position":[[1275,10]]}}}],["ff",{"_index":3337,"t":{"504":{"position":[[3472,2]]}}}],["fg2db",{"_index":3851,"t":{"516":{"position":[[19569,5]]},"526":{"position":[[4514,5]]}}}],["fgst7",{"_index":4645,"t":{"516":{"position":[[83810,5],[84000,5],[84296,5],[84337,5]]},"589":{"position":[[1690,5],[1880,5],[2176,5],[2217,5]]}}}],["fhwf7",{"_index":4698,"t":{"516":{"position":[[88946,5],[88976,5],[89069,5],[89179,5],[89269,5]]}}}],["fi",{"_index":2799,"t":{"407":{"position":[[72,2]]},"504":{"position":[[3313,2],[3316,2]]}}}],["field",{"_index":1143,"t":{"175":{"position":[[392,6],[1181,10],[1241,10],[1366,10],[1414,10]]},"177":{"position":[[364,6]]},"188":{"position":[[1012,5]]},"190":{"position":[[298,6],[333,6],[1137,6],[1446,6],[1652,6],[1922,6]]},"516":{"position":[[30271,7],[30457,7],[31610,7],[36335,7],[47682,7],[64061,7]]},"571":{"position":[[241,7]]}}}],["field2')，field1是指向定义有多对多关系的模型的外键字段的名称，这里是membership中的‘group’字段（注意大小写），另外一个则是指向目标模型的外键字段的名称，这里是membership中的‘person",{"_index":2255,"t":{"256":{"position":[[2185,115]]}}}],["field_class",{"_index":1149,"t":{"175":{"position":[[469,13]]}}}],["field_nam",{"_index":1437,"t":{"188":{"position":[[1708,21]]}}}],["fieldfil",{"_index":2128,"t":{"252":{"position":[[3937,44]]}}}],["fieldfile.clos",{"_index":2133,"t":{"252":{"position":[[4104,18]]}}}],["fieldfile.delete(save=tru",{"_index":2136,"t":{"252":{"position":[[4175,28]]}}}],["fieldfile.nam",{"_index":2129,"t":{"252":{"position":[[3982,14]]}}}],["fieldfile.open(mode='rb",{"_index":2132,"t":{"252":{"position":[[4055,26]]}}}],["fieldfile.s",{"_index":2130,"t":{"252":{"position":[[4005,15]]}}}],["fieldfile.save(nam",{"_index":2134,"t":{"252":{"position":[[4128,20]]}}}],["fieldfile.url",{"_index":2131,"t":{"252":{"position":[[4028,13]]}}}],["fieldset",{"_index":1164,"t":{"175":{"position":[[1158,9]]}}}],["fields来明确字段，__all__",{"_index":1500,"t":{"190":{"position":[[994,43]]}}}],["fifo",{"_index":2579,"t":{"303":{"position":[[515,91]]}}}],["file",{"_index":370,"t":{"73":{"position":[[25,23]]},"101":{"position":[[71,5]]},"114":{"position":[[398,4],[403,4]]},"149":{"position":[[454,27],[616,25]]},"151":{"position":[[697,5]]},"252":{"position":[[6193,4]]},"303":{"position":[[384,20],[812,4],[1144,42],[1733,5],[1741,4]]},"402":{"position":[[29,4],[117,4],[154,5],[175,4],[213,5],[234,4],[268,5],[289,4],[340,5],[360,4],[401,5],[422,4],[471,5],[492,4],[528,5],[549,4],[590,5],[611,4],[644,5],[664,4],[697,5],[717,4],[751,5],[771,4],[813,5],[833,4],[872,5]]},"508":{"position":[[589,5]]},"516":{"position":[[44713,4],[109209,4]]}}}],["file(\\\"${path",{"_index":809,"t":{"116":{"position":[[346,19]]}}}],["file(file.nam",{"_index":793,"t":{"114":{"position":[[680,15]]}}}],["file(path",{"_index":762,"t":{"112":{"position":[[1741,11]]},"114":{"position":[[414,10]]}}}],["file.nam",{"_index":780,"t":{"114":{"position":[[444,10],[752,10],[831,12],[871,12]]}}}],["file.par",{"_index":782,"t":{"114":{"position":[[476,12],[645,11]]}}}],["file.txt",{"_index":2613,"t":{"303":{"position":[[2221,8]]}}}],["file1",{"_index":2601,"t":{"303":{"position":[[1843,6],[1859,5]]}}}],["file2",{"_index":2602,"t":{"303":{"position":[[1850,6],[1900,6]]}}}],["fileexist",{"_index":958,"t":{"149":{"position":[[165,20]]}}}],["fileexists（'/tmp/a.jar'）判断/tmp/a.jar",{"_index":959,"t":{"149":{"position":[[186,84]]}}}],["filefield",{"_index":1309,"t":{"184":{"position":[[2464,9]]},"252":{"position":[[1611,9]]}}}],["filefield(max_length=non",{"_index":1310,"t":{"184":{"position":[[2474,26]]}}}],["filefield(upload_to=non",{"_index":2085,"t":{"252":{"position":[[1627,25],[2979,25]]}}}],["filefield或者imagefield",{"_index":2146,"t":{"252":{"position":[[4709,29]]}}}],["filefield或者imagefield字段到你的模型中，定义好upload_to参数，文件最终会放在media_root目录的“upload_to",{"_index":2148,"t":{"252":{"position":[[4866,83]]}}}],["filefield，其用法和特性与filefield基本一样，只不过多了两个属性height和width。默认情况下，该字段在html中表现为一个clearablefileinput标签。在数据库内，我们实际保存的是一个字符串类型，默认最大长度100，可以通过max_length",{"_index":2141,"t":{"252":{"position":[[4402,184]]}}}],["fileformat=unix",{"_index":3336,"t":{"504":{"position":[[3432,15]]}}}],["filenam",{"_index":2122,"t":{"252":{"position":[[3552,10],[3651,9]]},"424":{"position":[[73,8],[111,8]]}}}],["filename=pc",{"_index":4514,"t":{"516":{"position":[[76030,11],[76091,11],[76152,11]]}}}],["fileorcr",{"_index":4962,"t":{"516":{"position":[[109177,12]]}}}],["filepath",{"_index":730,"t":{"112":{"position":[[734,8],[1351,9],[1450,14],[1491,10]]}}}],["filepath(computer.getchannel",{"_index":764,"t":{"112":{"position":[[1832,31]]}}}],["filepath(new",{"_index":761,"t":{"112":{"position":[[1728,12]]}}}],["filepath.match",{"_index":170,"t":{"34":{"position":[[211,14]]}}}],["filepathfield",{"_index":2086,"t":{"252":{"position":[[1694,13],[5299,13]]}}}],["filepathfield(path",{"_index":2153,"t":{"252":{"position":[[5319,22]]}}}],["filepathfield(path=\"/home/imag",{"_index":2165,"t":{"252":{"position":[[5868,34]]}}}],["filepath类才可以操作slav",{"_index":750,"t":{"112":{"position":[[1361,31]]}}}],["filesystem",{"_index":5035,"t":{"516":{"position":[[114003,10],[114047,10],[114090,10],[115331,10],[115369,10],[115407,10],[115579,10],[115630,10],[115681,10],[116770,10],[116808,10],[116846,10],[117025,10],[117076,10],[117127,10]]},"620":{"position":[[143,10],[187,10],[230,10]]},"624":{"position":[[150,10],[188,10],[226,10]]},"626":{"position":[[156,10],[207,10],[258,10]]},"632":{"position":[[137,10],[175,10],[213,10]]},"634":{"position":[[163,10],[214,10],[265,10]]}}}],["filetype=html",{"_index":2632,"t":{"309":{"position":[[129,13]]}}}],["file中，最终结果就是标准输出和错误都被重定向到fil",{"_index":2585,"t":{"303":{"position":[[878,57]]}}}],["file写作command",{"_index":2588,"t":{"303":{"position":[[1053,14]]}}}],["file将标准输出重定向到fil",{"_index":2584,"t":{"303":{"position":[[853,19]]}}}],["file操作的文件是jenkin",{"_index":751,"t":{"112":{"position":[[1393,24]]}}}],["filter",{"_index":1185,"t":{"177":{"position":[[663,11]]},"221":{"position":[[69,6]]},"510":{"position":[[873,6],[984,6]]}}}],["filter_backend",{"_index":1654,"t":{"197":{"position":[[2153,15]]},"223":{"position":[[382,15]]}}}],["filter_backends，使用rest_framework.filters.orderingfilter过滤器，rest",{"_index":1864,"t":{"223":{"position":[[70,70]]}}}],["filter_field",{"_index":1860,"t":{"221":{"position":[[249,31],[386,13]]}}}],["filter_horizont",{"_index":1116,"t":{"173":{"position":[[167,17]]},"175":{"position":[[1058,17]]}}}],["final",{"_index":3786,"t":{"516":{"position":[[16423,11],[30604,10]]},"526":{"position":[[1368,11]]}}}],["findbug",{"_index":518,"t":{"88":{"position":[[612,8],[635,8]]}}}],["finish",{"_index":4531,"t":{"516":{"position":[[77526,7]]}}}],["firewalld",{"_index":3495,"t":{"516":{"position":[[3724,13],[3770,9],[3815,9]]}}}],["first",{"_index":360,"t":{"62":{"position":[[347,5]]}}}],["first_nam",{"_index":2330,"t":{"258":{"position":[[3761,10],[3910,15]]}}}],["fitlter",{"_index":1856,"t":{"221":{"position":[[34,15]]}}}],["fixed：上一次完成状态为失败或不稳定（unst",{"_index":848,"t":{"132":{"position":[[172,44]]}}}],["fjlm6",{"_index":4419,"t":{"516":{"position":[[66981,5],[67499,5]]}}}],["flag",{"_index":924,"t":{"141":{"position":[[204,6]]},"328":{"position":[[120,9]]},"330":{"position":[[91,9]]},"333":{"position":[[137,9]]},"457":{"position":[[3273,7],[3367,4]]},"516":{"position":[[11369,7],[11474,15],[92568,5],[93636,5]]},"591":{"position":[[646,5],[1714,5]]}}}],["flags=0",{"_index":2661,"t":{"328":{"position":[[83,8]]},"330":{"position":[[54,8]]},"333":{"position":[[65,8]]}}}],["flannel",{"_index":3808,"t":{"516":{"position":[[17639,7],[17698,7]]},"526":{"position":[[2584,7],[2643,7]]}}}],["flannel.1",{"_index":3625,"t":{"516":{"position":[[8753,9],[8825,9]]}}}],["flannel.yml",{"_index":3611,"t":{"516":{"position":[[8316,11],[8395,14],[8479,11],[9045,11]]}}}],["flannel.yml，位置：/root/kub",{"_index":3612,"t":{"516":{"position":[[8369,25]]}}}],["flat=tru",{"_index":1182,"t":{"177":{"position":[[565,10],[1008,10]]}}}],["floatfield",{"_index":1287,"t":{"184":{"position":[[1899,10]]},"252":{"position":[[1722,10]]}}}],["floatfield(max_value=non",{"_index":1288,"t":{"184":{"position":[[1910,26]]}}}],["fmb8f",{"_index":4414,"t":{"516":{"position":[[66608,5],[67019,5],[67543,5],[67757,5]]}}}],["follow",{"_index":2198,"t":{"254":{"position":[[1285,9]]}}}],["foo",{"_index":593,"t":{"101":{"position":[[91,3],[168,3],[193,3],[248,3]]},"103":{"position":[[491,3]]},"107":{"position":[[221,3]]},"110":{"position":[[773,5]]},"244":{"position":[[216,7]]},"258":{"position":[[1029,3]]}}}],["foo(models.model",{"_index":2282,"t":{"258":{"position":[[980,18]]}}}],["foo.groovi",{"_index":597,"t":{"101":{"position":[[148,10]]}}}],["foo.objects.get(bar=bar",{"_index":2286,"t":{"258":{"position":[[1210,24]]}}}],["foo.objects.get(bars=bar",{"_index":2287,"t":{"258":{"position":[[1264,25]]}}}],["foo.txt",{"_index":598,"t":{"101":{"position":[[181,7]]}}}],["foo/bar",{"_index":667,"t":{"110":{"position":[[715,29]]}}}],["forbid",{"_index":4714,"t":{"516":{"position":[[90737,7]]}}}],["forbidden",{"_index":5182,"t":{"516":{"position":[[126004,12],[126025,10]]}}}],["forcibl",{"_index":1712,"t":{"197":{"position":[[4988,8]]}}}],["foreignkey",{"_index":2205,"t":{"256":{"position":[[0,16]]}}}],["foreignkey(to",{"_index":2206,"t":{"256":{"position":[[50,14]]}}}],["foreignkey、manytomanyfield和onetoonefield这三个特殊的关系类型，其第一可选位置参数都是verbose_name。如果没指定这个参数，django",{"_index":2204,"t":{"254":{"position":[[1563,129]]}}}],["form",{"_index":339,"t":{"58":{"position":[[507,9],[666,4]]},"175":{"position":[[279,4]]},"177":{"position":[[52,5],[1278,4],[1329,5],[1377,5]]}}}],["form.cleaned_data['author",{"_index":1206,"t":{"177":{"position":[[1401,28]]}}}],["format",{"_index":1268,"t":{"184":{"position":[[1539,7]]},"188":{"position":[[1101,7],[1126,7]]},"197":{"position":[[1383,6]]},"254":{"position":[[1295,7]]}}}],["forward",{"_index":1095,"t":{"170":{"position":[[769,9]]},"516":{"position":[[92595,7],[93663,7]]},"591":{"position":[[673,7],[1741,7]]}}}],["forwoarded_for",{"_index":1091,"t":{"170":{"position":[[636,14]]}}}],["found",{"_index":3093,"t":{"457":{"position":[[3087,7]]},"516":{"position":[[20784,5],[22699,5],[68786,5]]},"526":{"position":[[5729,5]]}}}],["framework",{"_index":1221,"t":{"182":{"position":[[45,9]]},"193":{"position":[[21,9],[124,9],[1401,27]]},"195":{"position":[[5,9]]},"225":{"position":[[5,18]]},"227":{"position":[[5,31],[142,28],[1002,14]]}}}],["framework中的serializer使用类来定义，须继承自rest_framework.serializers.seri",{"_index":1223,"t":{"184":{"position":[[24,70]]}}}],["framework会使用renderer渲染器处理data",{"_index":1534,"t":{"193":{"position":[[1120,30]]}}}],["framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ord",{"_index":1865,"t":{"223":{"position":[[141,85]]}}}],["framework总结.assets/视图集类继承关系.png",{"_index":1797,"t":{"199":{"position":[[3285,32]]}}}],["framework总结.assets/通用视图的继承关系.png",{"_index":1603,"t":{"195":{"position":[[75,33]]}}}],["framework总结.assets/通用视图的继承关系_含方法和属性.png",{"_index":1604,"t":{"195":{"position":[[143,40]]}}}],["framework接收到此异常，会向前端返回http",{"_index":1430,"t":{"188":{"position":[[1512,26]]}}}],["framework提供了orderingfilt",{"_index":1863,"t":{"223":{"position":[[12,51]]}}}],["framework提供了render",{"_index":1523,"t":{"193":{"position":[[694,20]]}}}],["framework提供了一个响应类response，使用该类构造响应对象时，响应的具体数据内容会被转换（rend",{"_index":1522,"t":{"193":{"position":[[616,72]]}}}],["framework提供的所有视图的基类，继承自django的view",{"_index":1609,"t":{"197":{"position":[[66,37]]}}}],["framework提供的扩展了httprequest类的request",{"_index":1509,"t":{"193":{"position":[[78,40]]}}}],["framework的parsers解析器，不仅支持表单类型数据，也支持json",{"_index":1517,"t":{"193":{"position":[[444,41]]}}}],["framework的request对象，而不是django的httprequeset",{"_index":1611,"t":{"197":{"position":[[140,45]]}}}],["framework的response对象，视图会为响应数据设置（rend",{"_index":1612,"t":{"197":{"position":[[199,49]]}}}],["framework配置中的non_field_errors_key",{"_index":1409,"t":{"188":{"position":[[181,45]]}}}],["framewrok在rest_framework.statu",{"_index":1546,"t":{"193":{"position":[[1553,45]]}}}],["freestyleproject：jenkin",{"_index":556,"t":{"90":{"position":[[1467,24]]}}}],["frontend",{"_index":3888,"t":{"516":{"position":[[21912,11]]}}}],["frontend)，env!=product",{"_index":3891,"t":{"516":{"position":[[22065,26]]}}}],["ftp",{"_index":778,"t":{"114":{"position":[[350,8]]}}}],["ftpclient().with",{"_index":785,"t":{"114":{"position":[[526,16]]}}}],["fullaccountseri",{"_index":1633,"t":{"197":{"position":[[1115,21]]}}}],["fun",{"_index":2814,"t":{"418":{"position":[[83,5],[89,13]]}}}],["function",{"_index":2811,"t":{"418":{"position":[[16,10]]}}}],["funnam",{"_index":2812,"t":{"418":{"position":[[27,7]]}}}],["funwithparam",{"_index":2819,"t":{"422":{"position":[[47,15],[213,12]]}}}],["futur",{"_index":3735,"t":{"516":{"position":[[13150,6]]}}}],["g",{"_index":247,"t":{"34":{"position":[[4578,1],[4808,1]]},"173":{"position":[[347,1]]},"325":{"position":[[163,2]]},"402":{"position":[[358,1],[399,1]]},"516":{"position":[[7814,2]]}}}],["g.name",{"_index":1125,"t":{"173":{"position":[[335,7]]}}}],["g56qb",{"_index":4643,"t":{"516":{"position":[[83730,5],[83850,5],[84255,5],[84476,5]]},"589":{"position":[[1610,5],[1730,5],[2135,5],[2356,5]]}}}],["gateway",{"_index":2691,"t":{"342":{"position":[[84,7]]},"344":{"position":[[338,7]]}}}],["ge",{"_index":2778,"t":{"394":{"position":[[288,2],[327,2]]}}}],["gender",{"_index":2188,"t":{"254":{"position":[[725,6]]}}}],["gender_choic",{"_index":1379,"t":{"186":{"position":[[1252,14]]}}}],["gener",{"_index":4036,"t":{"516":{"position":[[30646,10]]}}}],["generatenam",{"_index":4035,"t":{"516":{"position":[[30625,12]]}}}],["generator=deployment/apps.v1",{"_index":3734,"t":{"516":{"position":[[13082,28]]}}}],["generator=run",{"_index":3736,"t":{"516":{"position":[[13184,13]]}}}],["genericapiview",{"_index":1672,"t":{"197":{"position":[[2961,16],[4209,16]]}}}],["genericapiview、createmodelmixin",{"_index":1732,"t":{"197":{"position":[[5733,31]]}}}],["genericapiview、destorymodelmixin",{"_index":1739,"t":{"197":{"position":[[5923,36]]}}}],["genericapiview、listmodelmixin",{"_index":1734,"t":{"197":{"position":[[5790,33]]}}}],["genericapiview、retrievemodelmixin",{"_index":1736,"t":{"197":{"position":[[5858,33]]}}}],["genericapiview、retrievemodelmixin、updatemodelmixin",{"_index":1746,"t":{"197":{"position":[[6080,50]]}}}],["genericapiview、retrievemodelmixin、updatemodelmixin、destorymodelmixin",{"_index":1749,"t":{"197":{"position":[[6189,72]]}}}],["genericapiview、updatemodelmixin",{"_index":1743,"t":{"197":{"position":[[5995,35]]}}}],["genericapiview父类，因为五个扩展类的实现需要调用genericapiview",{"_index":1656,"t":{"197":{"position":[[2274,72]]}}}],["genericipaddressfield",{"_index":2089,"t":{"252":{"position":[[1877,21]]}}}],["genericipaddressfield(protocol='both",{"_index":2090,"t":{"252":{"position":[[1905,38]]}}}],["genericviewset",{"_index":1770,"t":{"199":{"position":[[1422,14],[1554,16],[2152,14],[2284,16]]}}}],["genericviewset就帮助我们完成了这样的继承工作，继承自genericapiview与viewsetmixin，在实现了调用as_view()时传入字典（如{'get':'list'}）的映射处理工作的同时，还提供了genericapiview提供的基础方法，可以直接搭配mixin",{"_index":1768,"t":{"199":{"position":[[1195,152]]}}}],["genericviewset，同时包括了listmodelmixin、retrievemodelmixin",{"_index":1778,"t":{"199":{"position":[[1964,57]]}}}],["genericviewset，同时包括了listmodelmixin、retrievemodelmixin、createmodelmixin、updatemodelmixin、destorymodelmixin",{"_index":1776,"t":{"199":{"position":[[1831,109]]}}}],["genrsa",{"_index":5158,"t":{"516":{"position":[[124991,6]]}}}],["get(describ",{"_index":3761,"t":{"516":{"position":[[15027,13]]},"524":{"position":[[710,13]]}}}],["get(self",{"_index":1625,"t":{"197":{"position":[[653,9],[1958,9],[3054,9],[4302,9]]}}}],["get(url",{"_index":2704,"t":{"344":{"position":[[425,9]]}}}],["get_latest_bi",{"_index":2288,"t":{"258":{"position":[[1290,13],[1394,36],[1528,13],[1576,13]]}}}],["get_next_in_order()和get_previous_in_ord",{"_index":2305,"t":{"258":{"position":[[2461,80]]}}}],["get_object",{"_index":1810,"t":{"203":{"position":[[65,35]]}}}],["get_object()方法根据pk参数查找queryset",{"_index":1651,"t":{"197":{"position":[[2009,36]]}}}],["get_object(self",{"_index":1643,"t":{"197":{"position":[[1615,16]]}}}],["get_queryset(self",{"_index":1639,"t":{"197":{"position":[[1449,18],[1543,19]]}}}],["get_serializer(self",{"_index":1635,"t":{"197":{"position":[[1167,20]]}}}],["get_serializer_class(self",{"_index":1631,"t":{"197":{"position":[[980,26],[1049,27]]},"199":{"position":[[3126,27]]}}}],["get_success_headers(self",{"_index":1684,"t":{"197":{"position":[[3669,25]]}}}],["getabsoluteremotef",{"_index":720,"t":{"112":{"position":[[382,21]]}}}],["getallexecutor",{"_index":710,"t":{"112":{"position":[[191,17]]}}}],["getattr(inst",{"_index":1707,"t":{"197":{"position":[[4865,17]]}}}],["getchannel",{"_index":712,"t":{"112":{"position":[[232,12]]}}}],["getcomput",{"_index":721,"t":{"112":{"position":[[443,13]]}}}],["getcomputer(str",{"_index":643,"t":{"110":{"position":[[152,18]]}}}],["getcurrentexecut",{"_index":734,"t":{"112":{"position":[[811,22]]}}}],["getcurrentworkspac",{"_index":729,"t":{"112":{"position":[[712,21]]}}}],["getcurrentworkunit",{"_index":732,"t":{"112":{"position":[[765,20]]}}}],["getdisplaynam",{"_index":686,"t":{"110":{"position":[[1461,16]]}}}],["getenviron",{"_index":662,"t":{"110":{"position":[[619,16]]}}}],["getfulldisplaynam",{"_index":688,"t":{"110":{"position":[[1501,20]]}}}],["getfullprojectnam",{"_index":690,"t":{"110":{"position":[[1570,20]]}}}],["gethostnam",{"_index":706,"t":{"112":{"position":[[111,13]]}}}],["getid",{"_index":684,"t":{"110":{"position":[[1411,7],[1722,7]]}}}],["getlog",{"_index":695,"t":{"110":{"position":[[1743,8]]}}}],["getlog(int",{"_index":697,"t":{"110":{"position":[[1780,10]]}}}],["getloginputstream",{"_index":700,"t":{"110":{"position":[[1824,19]]}}}],["getmonitordata",{"_index":708,"t":{"112":{"position":[[142,16]]}}}],["getnode(str",{"_index":646,"t":{"110":{"position":[[198,14]]}}}],["getoneoffexecutor",{"_index":702,"t":{"110":{"position":[[1867,19]]}}}],["getplugin(str",{"_index":650,"t":{"110":{"position":[[277,16]]}}}],["getpluginmanag",{"_index":648,"t":{"110":{"position":[[236,18]]}}}],["getproperty(str",{"_index":655,"t":{"110":{"position":[[470,18]]}}}],["getqueu",{"_index":652,"t":{"110":{"position":[[325,10]]}}}],["getrawbuild",{"_index":692,"t":{"110":{"position":[[1632,13]]}}}],["getresult",{"_index":685,"t":{"110":{"position":[[1432,11],[1919,11]]}}}],["getrunningpipelines(comput",{"_index":737,"t":{"112":{"position":[[923,29]]}}}],["gettiedjob",{"_index":715,"t":{"112":{"position":[[301,13]]}}}],["get、post等请求。如果一个方法没有被标注为@staplerdispatchable，则无法通过http",{"_index":488,"t":{"85":{"position":[[65,60]]}}}],["get、put、patch",{"_index":1745,"t":{"197":{"position":[[6059,15]]}}}],["get、put、patch、delet",{"_index":1748,"t":{"197":{"position":[[6166,22]]}}}],["gid",{"_index":2705,"t":{"344":{"position":[[435,3],[468,7]]}}}],["gis_enabled']，表示模型的建立依赖gi",{"_index":2320,"t":{"258":{"position":[[3458,46]]}}}],["git",{"_index":427,"t":{"78":{"position":[[5,3],[70,3]]},"97":{"position":[[341,3]]},"99":{"position":[[37,3]]},"101":{"position":[[0,20]]},"516":{"position":[[79509,5],[79550,3],[79608,3]]}}}],["gitbook",{"_index":3413,"t":{"512":{"position":[[33,7]]}}}],["github",{"_index":585,"t":{"94":{"position":[[140,8]]},"516":{"position":[[2358,7]]},"518":{"position":[[193,7]]}}}],["gitlab",{"_index":16,"t":{"15":{"position":[[115,6]]}}}],["given",{"_index":1140,"t":{"175":{"position":[[334,5]]}}}],["gi、mi、g、m",{"_index":4114,"t":{"516":{"position":[[37783,21]]}}}],["glob",{"_index":910,"t":{"139":{"position":[[837,4],[929,6]]},"432":{"position":[[7,87]]}}}],["global",{"_index":623,"t":{"105":{"position":[[16,6]]},"132":{"position":[[721,7],[769,7],[818,7],[867,7]]},"362":{"position":[[88,20]]}}}],["global_def",{"_index":3289,"t":{"504":{"position":[[578,11],[1627,11]]}}}],["globalvar",{"_index":620,"t":{"103":{"position":[[464,10]]},"107":{"position":[[194,10]]}}}],["globalvars.foo",{"_index":622,"t":{"103":{"position":[[560,15]]},"107":{"position":[[307,14],[474,14]]}}}],["go",{"_index":169,"t":{"34":{"position":[[206,2]]}}}],["good",{"_index":2391,"t":{"264":{"position":[[1852,5]]},"352":{"position":[[96,4]]}}}],["goods)['goods_list",{"_index":2396,"t":{"264":{"position":[[1957,20]]}}}],["goods)['page_list",{"_index":2398,"t":{"264":{"position":[[2018,19]]}}}],["goods.count",{"_index":2400,"t":{"264":{"position":[[2052,13]]}}}],["goods_count",{"_index":2399,"t":{"264":{"position":[[2038,11]]}}}],["goods_list",{"_index":2394,"t":{"264":{"position":[[1916,10]]}}}],["gosu",{"_index":252,"t":{"34":{"position":[[4731,5],[4755,4],[4827,4],[4970,4],[5020,7]]}}}],["gpgchech=0",{"_index":3558,"t":{"516":{"position":[[6318,10]]}}}],["gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum",{"_index":3560,"t":{"516":{"position":[[6345,55]]}}}],["grab",{"_index":765,"t":{"114":{"position":[[0,11]]}}}],["grab('org.apache.commons:common",{"_index":767,"t":{"114":{"position":[[45,33]]}}}],["grab(group='common",{"_index":774,"t":{"114":{"position":[[239,20]]}}}],["grant",{"_index":289,"t":{"42":{"position":[[796,5]]}}}],["grep",{"_index":406,"t":{"73":{"position":[[1067,4]]},"446":{"position":[[321,4]]},"516":{"position":[[4703,4],[5305,4],[130175,4]]}}}],["grn8z",{"_index":4484,"t":{"516":{"position":[[73346,5],[73490,5],[73664,5]]}}}],["groovi",{"_index":512,"t":{"88":{"position":[[385,6],[421,6]]},"97":{"position":[[212,6]]},"99":{"position":[[23,6]]},"101":{"position":[[57,6],[380,8],[400,6],[524,6],[618,6]]},"103":{"position":[[204,6],[369,6],[399,6]]},"107":{"position":[[162,6]]}}}],["group",{"_index":1115,"t":{"173":{"position":[[133,9],[187,9]]},"175":{"position":[[1116,8]]},"256":{"position":[[1716,5]]},"451":{"position":[[59,7]]},"516":{"position":[[126085,5]]}}}],["group(models.model",{"_index":2237,"t":{"256":{"position":[[1497,20]]}}}],["groupadd",{"_index":244,"t":{"34":{"position":[[4545,8],[4775,8]]}}}],["groups(self",{"_index":1123,"t":{"173":{"position":[[295,12]]}}}],["group、module和vers",{"_index":766,"t":{"114":{"position":[[20,24]]}}}],["gt",{"_index":2776,"t":{"394":{"position":[[177,2],[214,2]]},"396":{"position":[[154,2],[221,2]]},"398":{"position":[[83,2],[133,2]]},"516":{"position":[[53508,3],[53755,3],[54014,2]]}}}],["gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较\"ab\"和\"bc",{"_index":2836,"t":{"429":{"position":[[250,70]]}}}],["gzip",{"_index":175,"t":{"34":{"position":[[622,5]]}}}],["h",{"_index":2636,"t":{"311":{"position":[[107,1]]}}}],["h1welcom",{"_index":3953,"t":{"516":{"position":[[26279,10]]}}}],["h4p68",{"_index":4492,"t":{"516":{"position":[[74239,5],[74531,5]]}}}],["hang",{"_index":2617,"t":{"305":{"position":[[42,4]]}}}],["hangzhou.aliyuncs.com/google_containers/$imagenam",{"_index":3585,"t":{"516":{"position":[[7156,50],[7230,50],[7326,50]]}}}],["hangzhou.aliyuncs.com/google_containers/metr",{"_index":4568,"t":{"516":{"position":[[79882,47]]}}}],["hans/3.2/ref/contrib/admin/#work",{"_index":1153,"t":{"175":{"position":[[668,35]]}}}],["haproxi",{"_index":4866,"t":{"516":{"position":[[101668,9]]}}}],["hard",{"_index":582,"t":{"94":{"position":[[18,4]]}}}],["has_object_permission(self",{"_index":1825,"t":{"211":{"position":[[132,28],[258,27]]}}}],["has_permission(self",{"_index":1824,"t":{"211":{"position":[[72,21]]}}}],["hash",{"_index":584,"t":{"94":{"position":[[86,11]]},"118":{"position":[[277,4]]},"455":{"position":[[288,4],[1181,4],[1199,4],[1212,4],[1271,4],[1477,4],[1517,4]]},"516":{"position":[[7949,4],[10133,8]]}}}],["hash=5ff7956ff6",{"_index":3822,"t":{"516":{"position":[[18464,15]]},"526":{"position":[[3409,15]]}}}],["hashset",{"_index":740,"t":{"112":{"position":[[981,9]]}}}],["hbl4v",{"_index":4485,"t":{"516":{"position":[[73394,5],[73548,5],[73760,5]]}}}],["hbook",{"_index":1376,"t":{"186":{"position":[[1111,40],[1661,5],[1734,5],[2169,8],[2238,5],[2354,8],[2386,5],[2480,8]]},"190":{"position":[[1388,5],[1494,8]]}}}],["hcomment",{"_index":1385,"t":{"186":{"position":[[1501,8],[2148,11],[2333,11],[2459,11]]},"190":{"position":[[1482,11]]}}}],["head",{"_index":2051,"t":{"249":{"position":[[237,4]]},"516":{"position":[[20079,5],[20116,6],[26229,5],[26266,6]]},"526":{"position":[[5024,5],[5061,6]]}}}],["header",{"_index":327,"t":{"58":{"position":[[83,7]]},"85":{"position":[[475,8]]},"193":{"position":[[1331,8]]},"197":{"position":[[3475,7]]},"504":{"position":[[2980,6],[3207,6]]},"510":{"position":[[866,6]]}}}],["header(\"author",{"_index":494,"t":{"85":{"position":[[484,42]]}}}],["header_filter_by_lua",{"_index":3404,"t":{"510":{"position":[[812,20]]}}}],["header_filter_by_lua_fil",{"_index":3405,"t":{"510":{"position":[[833,25]]}}}],["headers=head",{"_index":1682,"t":{"197":{"position":[[3592,16]]}}}],["headers=non",{"_index":1531,"t":{"193":{"position":[[1039,13]]}}}],["header和cooki",{"_index":3408,"t":{"510":{"position":[[913,15]]}}}],["header里放入token，api",{"_index":5111,"t":{"516":{"position":[[121312,18]]}}}],["headli",{"_index":4824,"t":{"516":{"position":[[98148,10],[98406,10],[98501,10],[98589,10],[98712,10],[98744,10]]}}}],["headliness.dev.svc.cluster.loc",{"_index":4833,"t":{"516":{"position":[[99237,32],[99278,33],[99340,33],[99402,33]]}}}],["headliness.yaml",{"_index":4823,"t":{"516":{"position":[[98079,15],[98374,15]]}}}],["headliness类型的servic",{"_index":4819,"t":{"516":{"position":[[97901,21]]}}}],["healthcheck",{"_index":208,"t":{"34":{"position":[[1747,11]]}}}],["height_field",{"_index":2142,"t":{"252":{"position":[[4587,31]]}}}],["height_field=non",{"_index":2139,"t":{"252":{"position":[[4338,18]]}}}],["heima",{"_index":3653,"t":{"516":{"position":[[9896,6],[9940,7],[9948,6],[10478,5],[10588,6],[10631,6],[31982,5],[63577,7],[123798,5],[124138,5],[124715,5]]},"520":{"position":[[486,6],[530,7],[538,6]]}}}],["heima只能读取dev",{"_index":5152,"t":{"516":{"position":[[124540,22]]}}}],["hell",{"_index":2810,"t":{"418":{"position":[[0,15]]},"429":{"position":[[647,5]]}}}],["hello",{"_index":92,"t":{"25":{"position":[[196,5]]},"34":{"position":[[2547,8]]},"42":{"position":[[455,5]]},"107":{"position":[[73,7]]},"128":{"position":[[172,6]]},"132":{"position":[[508,6]]},"137":{"position":[[912,6]]},"188":{"position":[[5642,6],[5764,6]]},"275":{"position":[[1104,7],[1149,7]]},"328":{"position":[[332,6]]},"429":{"position":[[638,5]]},"516":{"position":[[46581,6],[48898,6]]}}}],["help",{"_index":3719,"t":{"516":{"position":[[12171,13],[12195,4]]}}}],["help_text",{"_index":1333,"t":{"184":{"position":[[3107,9]]},"254":{"position":[[1178,9]]}}}],["help_text=\"pleas",{"_index":2197,"t":{"254":{"position":[[1259,17]]}}}],["helper",{"_index":602,"t":{"101":{"position":[[275,6]]}}}],["here",{"_index":615,"t":{"103":{"position":[[268,7]]}}}],["heredoc",{"_index":2609,"t":{"303":{"position":[[2095,8],[2108,8],[2123,8],[2143,8]]}}}],["hero",{"_index":1394,"t":{"186":{"position":[[2019,4]]}}}],["heroinfo",{"_index":1393,"t":{"186":{"position":[[2010,8]]},"190":{"position":[[1437,8]]}}}],["heroinfo.objects.get(id=6",{"_index":1395,"t":{"186":{"position":[[2026,26]]}}}],["heroinfo_set",{"_index":1404,"t":{"186":{"position":[[3242,12],[3608,15]]}}}],["heroinfoseri",{"_index":1392,"t":{"186":{"position":[[1963,18]]}}}],["heroinfoserializer(hero",{"_index":1396,"t":{"186":{"position":[[2066,24]]}}}],["heroinfoserializer(serializers.modelseri",{"_index":1501,"t":{"190":{"position":[[1339,48]]}}}],["heroinfoserializer(serializers.seri",{"_index":1378,"t":{"186":{"position":[[1193,43]]}}}],["heroinfoserialzi",{"_index":1377,"t":{"186":{"position":[[1152,34]]}}}],["hex",{"_index":1275,"t":{"184":{"position":[[1607,5]]}}}],["hex_verbos",{"_index":1269,"t":{"184":{"position":[[1550,13]]}}}],["hgender",{"_index":1383,"t":{"186":{"position":[[1415,7],[2134,10],[2319,10],[2445,10]]},"190":{"position":[[1471,10]]}}}],["hhme/centh",{"_index":2900,"t":{"432":{"position":[[2777,12]]}}}],["hhme/cento",{"_index":2898,"t":{"432":{"position":[[2730,12]]}}}],["histori",{"_index":29,"t":{"19":{"position":[[289,7]]},"34":{"position":[[2924,7]]},"516":{"position":[[75623,7],[75923,7]]}}}],["hit",{"_index":3215,"t":{"485":{"position":[[47,4]]}}}],["hlmz4",{"_index":4493,"t":{"516":{"position":[[74286,5],[74733,5]]}}}],["hname",{"_index":1382,"t":{"186":{"position":[[1358,5],[2119,8],[2304,8],[2430,8]]},"190":{"position":[[1462,8]]}}}],["hom",{"_index":171,"t":{"34":{"position":[[237,4]]}}}],["hom?.txt",{"_index":173,"t":{"34":{"position":[[255,8]]}}}],["home",{"_index":211,"t":{"34":{"position":[[2015,5],[2060,6]]},"432":{"position":[[2692,4]]},"516":{"position":[[14894,5]]},"524":{"position":[[577,5]]}}}],["home/.kub",{"_index":3596,"t":{"516":{"position":[[7685,11],[14876,10]]},"524":{"position":[[559,10]]}}}],["home/.kube/config",{"_index":3598,"t":{"516":{"position":[[7752,18],[7817,18]]}}}],["home/cento",{"_index":2894,"t":{"432":{"position":[[2526,12]]}}}],["home/images/foo.png，但不匹配/home/images/foo/bar.png",{"_index":2168,"t":{"252":{"position":[[5934,79]]}}}],["home/nick/sshvolum",{"_index":294,"t":{"42":{"position":[[1047,20]]}}}],["hook",{"_index":4185,"t":{"516":{"position":[[42435,4],[42503,4],[42903,4],[42926,4],[42996,4],[43064,4]]}}}],["horizont",{"_index":4395,"t":{"516":{"position":[[64772,10],[79075,10]]}}}],["horizontalpodautoscal",{"_index":3704,"t":{"516":{"position":[[11913,24],[81762,23]]},"585":{"position":[[387,23]]}}}],["horizontalpodautoscaler.autoscaling/pc",{"_index":4608,"t":{"516":{"position":[[82063,38]]},"587":{"position":[[56,38]]}}}],["horizontalpodautoscalers\",\"replicationcontrollers\",\"cronjob",{"_index":5139,"t":{"516":{"position":[[123339,62]]}}}],["horn_length",{"_index":2264,"t":{"258":{"position":[[183,11],[260,15]]}}}],["host",{"_index":707,"t":{"112":{"position":[[132,9]]},"170":{"position":[[738,4],[743,6],[818,4]]},"457":{"position":[[3564,15]]},"459":{"position":[[490,4],[502,4],[516,4]]},"516":{"position":[[18840,4],[24543,4],[29057,5],[42345,5],[43798,5],[104378,5],[104475,5],[104747,5],[104908,4],[105593,6],[105678,5],[105775,5],[106050,5],[106298,4]]},"526":{"position":[[3785,4]]},"599":{"position":[[64,5]]},"601":{"position":[[75,4]]},"608":{"position":[[190,6]]},"612":{"position":[[65,5]]},"614":{"position":[[140,4]]}}}],["hostip",{"_index":4101,"t":{"516":{"position":[[36489,6]]}}}],["hostnetwork",{"_index":4018,"t":{"516":{"position":[[29636,12],[31293,11],[79845,12]]}}}],["hostpath",{"_index":4022,"t":{"516":{"position":[[29812,9],[108475,9],[108704,8],[109036,9],[109361,8],[109433,8],[109514,8]]}}}],["hostpath.yaml",{"_index":4959,"t":{"516":{"position":[[108641,14],[109336,13]]}}}],["hostpath可以解决数据持久化的问题，但是一旦node节点故障了，pod如果转移到了别的节点，又会出现问题了，此时需要准备单独的网络存储系统，比较常用的用nfs、cif",{"_index":4971,"t":{"516":{"position":[[109857,88]]}}}],["hostpath就是将node主机中一个实际目录挂在到pod中，以供容器使用，这样的设计就可以保证pod销毁了，但是数据依据可以存在于nod",{"_index":4958,"t":{"516":{"position":[[108554,75]]}}}],["hostpath的存储卷，表示挂载pod",{"_index":4023,"t":{"516":{"position":[[29829,32]]}}}],["hostport",{"_index":3986,"t":{"516":{"position":[[28379,9],[36430,8]]}}}],["host文件,解析上面的两个域名到192.168.109.100(mast",{"_index":4908,"t":{"516":{"position":[[105110,53]]}}}],["host的/root/log",{"_index":4966,"t":{"516":{"position":[[109688,33]]}}}],["hour",{"_index":882,"t":{"137":{"position":[[1113,8]]},"215":{"position":[[325,4]]}}}],["hpa",{"_index":3705,"t":{"516":{"position":[[11938,3],[80763,3],[81701,5],[81805,3],[82001,5],[82102,3],[82114,5],[82158,3],[82224,3],[82337,5],[82378,3],[82447,3],[82490,3],[82533,3],[82577,3],[82620,3],[82664,3],[82707,3],[82749,3],[82790,3]]},"579":{"position":[[37,3]]},"585":{"position":[[326,5],[430,3]]},"587":{"position":[[95,3]]},"589":{"position":[[38,3],[104,3],[217,5],[258,3],[327,3],[370,3],[413,3],[457,3],[500,3],[544,3],[587,3],[629,3],[670,3]]}}}],["hpa.yaml",{"_index":4602,"t":{"516":{"position":[[81712,16],[82054,8]]},"585":{"position":[[337,16]]},"587":{"position":[[47,8]]}}}],["hpa可以获取每个pod利用率，然后和hpa中定义的指标进行对比，同时计算出需要伸缩的具体值，最后实现pod的数量的调整。其实hpa与之前的deployment一样，也属于一种kubernetes资源对象，它通过追踪分析rc控制的所有目标pod的负载变化情况，来确定是否需要针对性地调整目标pod的副本数，这是hpa",{"_index":4559,"t":{"516":{"position":[[79274,164]]}}}],["hr",{"_index":2476,"t":{"273":{"position":[[767,4]]}}}],["htkmp",{"_index":4369,"t":{"516":{"position":[[62899,5]]}}}],["html",{"_index":605,"t":{"101":{"position":[[484,5]]},"247":{"position":[[69,4]]},"254":{"position":[[1231,27]]},"457":{"position":[[3585,5],[4422,5],[4850,5],[4858,19],[4878,4]]},"516":{"position":[[20068,4],[20073,5],[20175,6],[26218,4],[26223,5],[26319,6]]},"526":{"position":[[5013,4],[5018,5],[5120,6]]}}}],["html/photo",{"_index":3115,"t":{"457":{"position":[[4010,11]]}}}],["htmlrender",{"_index":1538,"t":{"193":{"position":[[1303,21]]}}}],["html中表现为textarea标签，最常用的字段类型之一！如果你为它设置一个max_length参数，那么在前端页面中会受到输入字符数量限制，然而在模型和数据库层面却不受影响。只有charfield",{"_index":2107,"t":{"252":{"position":[[2593,123]]}}}],["html中表现为一个clearablefileinput标签。在数据库内，我们实际保存的是一个字符串类型，默认最大长度100，可以通过max_length",{"_index":2114,"t":{"252":{"position":[[3032,129]]}}}],["html展示api",{"_index":1332,"t":{"184":{"position":[[3084,22],[3117,26]]}}}],["http",{"_index":460,"t":{"81":{"position":[[312,27],[357,28]]},"85":{"position":[[42,22],[145,22],[358,12]]},"88":{"position":[[483,4],[503,4],[1200,4]]},"249":{"position":[[27,4],[64,11]]},"277":{"position":[[133,6]]},"374":{"position":[[640,5]]},"449":{"position":[[339,9],[395,4],[1303,4],[1360,4]]},"455":{"position":[[57,8],[242,4],[776,4]]},"457":{"position":[[1529,4],[5203,4],[5210,5]]},"459":{"position":[[334,4],[341,5],[685,5],[697,5]]},"475":{"position":[[372,8]]},"489":{"position":[[8,5],[27,5]]},"491":{"position":[[47,5],[254,5],[297,25],[323,4]]},"493":{"position":[[661,5]]},"508":{"position":[[625,51]]},"510":{"position":[[211,4],[319,4]]},"516":{"position":[[42377,4],[43828,4],[46537,4],[47123,4],[48257,4],[48878,4],[49224,4],[104249,6],[104345,4],[104402,5],[104500,5],[104667,4],[104730,4],[104779,4],[104885,4],[105243,7],[105559,5],[105702,5],[105800,5],[105968,5],[106032,5],[106082,5],[106210,5],[121068,4],[121202,4]]},"595":{"position":[[198,6],[294,4]]},"597":{"position":[[86,4]]},"599":{"position":[[47,4],[96,4]]},"601":{"position":[[52,4]]},"604":{"position":[[12,7]]},"608":{"position":[[156,5]]},"610":{"position":[[87,5]]},"612":{"position":[[47,5],[97,5]]},"614":{"position":[[52,5]]}}}],["http,server,location,loc",{"_index":3397,"t":{"510":{"position":[[573,29],[681,29]]}}}],["http.yaml",{"_index":4897,"t":{"516":{"position":[[104266,9],[104630,9]]},"595":{"position":[[215,9]]},"597":{"position":[[49,9]]}}}],["http/1.1",{"_index":4953,"t":{"516":{"position":[[108429,9]]}}}],["http2",{"_index":3250,"t":{"493":{"position":[[89,5]]}}}],["http://10.244.1.23:80",{"_index":3858,"t":{"516":{"position":[[20036,21]]},"526":{"position":[[4981,21]]}}}],["http://127.0.0.1",{"_index":3142,"t":{"457":{"position":[[5985,18],[6091,17]]}}}],["http://127.0.0.1/aaa",{"_index":3145,"t":{"457":{"position":[[6186,22],[6300,21]]}}}],["http://127.0.0.1:80/hello",{"_index":4215,"t":{"516":{"position":[[46497,31]]}}}],["http://127.0.0.1:8080",{"_index":3138,"t":{"457":{"position":[[5545,22],[5716,23]]}}}],["http://127.0.0.1:8081",{"_index":3135,"t":{"457":{"position":[[5125,21]]}}}],["http://127.0.0.1:8081/proxi",{"_index":3136,"t":{"457":{"position":[[5158,27]]}}}],["http://192.168.1.188/proxy/test.html",{"_index":3141,"t":{"457":{"position":[[5907,36]]}}}],["http://192.168.100.33:8081",{"_index":3137,"t":{"457":{"position":[[5300,26],[5338,27]]}}}],["http://192.168.90.100:31928",{"_index":3965,"t":{"516":{"position":[[26873,28]]}}}],["http://<jenkins_host",{"_index":322,"t":{"54":{"position":[[70,21]]}}}],["http://<jenkins_host>/api",{"_index":315,"t":{"52":{"position":[[118,25]]},"56":{"position":[[3,29]]}}}],["http://<jenkins_host>/job/jobname/api",{"_index":324,"t":{"58":{"position":[[3,41]]}}}],["http://<jenkins_host>/queue/api",{"_index":348,"t":{"62":{"position":[[3,36]]}}}],["http://api.example.org/books/?limit=100&offset=400",{"_index":1890,"t":{"225":{"position":[[1200,50]]}}}],["http://api.example.org/books/?page=4",{"_index":1882,"t":{"225":{"position":[[609,36]]}}}],["http://c.biancheng.net",{"_index":2597,"t":{"303":{"position":[[1495,25],[1624,23]]},"374":{"position":[[596,22]]}}}],["http://cache_serv",{"_index":3242,"t":{"487":{"position":[[799,20],[1382,20]]}}}],["http://demo_serv",{"_index":3051,"t":{"455":{"position":[[1453,19],[1830,19],[2195,19]]}}}],["http://download.redis.io/releases/redi",{"_index":194,"t":{"34":{"position":[[1223,40]]}}}],["http://ip.cn",{"_index":127,"t":{"27":{"position":[[869,14]]}}}],["http://local.jenkins.com/computer/<displayname>/api",{"_index":344,"t":{"60":{"position":[[42,51]]}}}],["http://local.jenkins.com/computer/api",{"_index":343,"t":{"60":{"position":[[3,38]]}}}],["http://localhost:8080/jenkin",{"_index":451,"t":{"78":{"position":[[580,29]]}}}],["http://mirrors.aliyun.com/kubernetes/yum/doc/rpm",{"_index":3562,"t":{"516":{"position":[[6409,48]]}}}],["http://test.com:8080/request_count_test",{"_index":2712,"t":{"344":{"position":[[556,44]]}}}],["http_100_continu",{"_index":1548,"t":{"193":{"position":[[1613,17]]}}}],["http_101_switching_protocol",{"_index":1549,"t":{"193":{"position":[[1631,28]]}}}],["http_200_ok",{"_index":1551,"t":{"193":{"position":[[1672,11]]}}}],["http_201_creat",{"_index":1552,"t":{"193":{"position":[[1684,16]]}}}],["http_202_accept",{"_index":1553,"t":{"193":{"position":[[1701,17]]}}}],["http_203_non_authoritative_inform",{"_index":1554,"t":{"193":{"position":[[1719,38]]}}}],["http_204_no_cont",{"_index":1555,"t":{"193":{"position":[[1758,19]]}}}],["http_205_reset_cont",{"_index":1556,"t":{"193":{"position":[[1778,22]]}}}],["http_206_partial_cont",{"_index":1557,"t":{"193":{"position":[[1801,24]]}}}],["http_207_multi_statu",{"_index":1558,"t":{"193":{"position":[[1826,21]]}}}],["http_300_multiple_choic",{"_index":1560,"t":{"193":{"position":[[1861,25]]}}}],["http_301_moved_perman",{"_index":1561,"t":{"193":{"position":[[1887,26]]}}}],["http_302_found",{"_index":1562,"t":{"193":{"position":[[1914,14]]}}}],["http_303_see_oth",{"_index":1563,"t":{"193":{"position":[[1929,18]]}}}],["http_304_not_modifi",{"_index":1564,"t":{"193":{"position":[[1948,21]]}}}],["http_305_use_proxi",{"_index":1565,"t":{"193":{"position":[[1970,18]]}}}],["http_306_reserv",{"_index":1566,"t":{"193":{"position":[[1989,17]]}}}],["http_307_temporary_redirect",{"_index":1567,"t":{"193":{"position":[[2007,27]]}}}],["http_400_bad_request",{"_index":1569,"t":{"193":{"position":[[2050,20]]}}}],["http_401_unauthor",{"_index":1570,"t":{"193":{"position":[[2071,21]]}}}],["http_402_payment_requir",{"_index":1571,"t":{"193":{"position":[[2093,25]]}}}],["http_403_forbidden",{"_index":1572,"t":{"193":{"position":[[2119,18]]}}}],["http_404_not_found",{"_index":1573,"t":{"193":{"position":[[2138,18]]}}}],["http_405_method_not_allow",{"_index":1574,"t":{"193":{"position":[[2157,27]]}}}],["http_406_not_accept",{"_index":1575,"t":{"193":{"position":[[2185,23]]}}}],["http_407_proxy_authentication_requir",{"_index":1576,"t":{"193":{"position":[[2209,38]]}}}],["http_408_request_timeout",{"_index":1577,"t":{"193":{"position":[[2248,24]]}}}],["http_409_conflict",{"_index":1578,"t":{"193":{"position":[[2273,17]]}}}],["http_410_gone",{"_index":1579,"t":{"193":{"position":[[2291,13]]}}}],["http_411_length_requir",{"_index":1580,"t":{"193":{"position":[[2305,24]]}}}],["http_412_precondition_fail",{"_index":1581,"t":{"193":{"position":[[2330,28]]}}}],["http_413_request_entity_too_larg",{"_index":1582,"t":{"193":{"position":[[2359,33]]}}}],["http_414_request_uri_too_long",{"_index":1583,"t":{"193":{"position":[[2393,29]]}}}],["http_415_unsupported_media_typ",{"_index":1584,"t":{"193":{"position":[[2423,31]]}}}],["http_416_requested_range_not_satisfi",{"_index":1585,"t":{"193":{"position":[[2455,40]]}}}],["http_417_expectation_fail",{"_index":1586,"t":{"193":{"position":[[2496,27]]}}}],["http_422_unprocessable_ent",{"_index":1587,"t":{"193":{"position":[[2524,29]]}}}],["http_423_lock",{"_index":1588,"t":{"193":{"position":[[2554,15]]}}}],["http_424_failed_depend",{"_index":1589,"t":{"193":{"position":[[2570,26]]}}}],["http_428_precondition_requir",{"_index":1590,"t":{"193":{"position":[[2597,30]]}}}],["http_429_too_many_request",{"_index":1591,"t":{"193":{"position":[[2628,26]]}}}],["http_431_request_header_fields_too_larg",{"_index":1592,"t":{"193":{"position":[[2655,40]]}}}],["http_451_unavailable_for_legal_reason",{"_index":1593,"t":{"193":{"position":[[2696,38]]}}}],["http_500_internal_server_error",{"_index":1595,"t":{"193":{"position":[[2750,30]]}}}],["http_501_not_impl",{"_index":1596,"t":{"193":{"position":[[2781,24]]}}}],["http_502_bad_gateway",{"_index":1597,"t":{"193":{"position":[[2806,20]]}}}],["http_503_service_unavail",{"_index":1598,"t":{"193":{"position":[[2827,28]]}}}],["http_504_gateway_timeout",{"_index":1599,"t":{"193":{"position":[[2856,24]]}}}],["http_505_http_version_not_support",{"_index":1600,"t":{"193":{"position":[[2881,35]]}}}],["http_507_insufficient_storag",{"_index":1601,"t":{"193":{"position":[[2917,29]]}}}],["http_511_network_authentication_requir",{"_index":1602,"t":{"193":{"position":[[2947,40]]}}}],["http_author",{"_index":3212,"t":{"481":{"position":[[133,20]]},"483":{"position":[[113,20]]}}}],["http_cooki",{"_index":3161,"t":{"459":{"position":[[637,11]]}}}],["http_pragma",{"_index":3211,"t":{"481":{"position":[[120,12]]},"483":{"position":[[100,12]]}}}],["http_refer",{"_index":2960,"t":{"449":{"position":[[509,15]]},"459":{"position":[[583,12]]}}}],["http_user_ag",{"_index":2961,"t":{"449":{"position":[[527,19]]},"459":{"position":[[561,15]]}}}],["http_via",{"_index":3160,"t":{"459":{"position":[[607,8]]}}}],["http_x_forwarded_for",{"_index":2962,"t":{"449":{"position":[[547,25]]}}}],["httpget",{"_index":3997,"t":{"516":{"position":[[28982,8],[42307,8],[43760,8],[46258,11],[46352,7],[46486,8],[46698,7],[46781,7],[47391,7],[47450,7],[47721,7],[48106,7],[48240,8],[48861,8]]}}}],["httpget.yaml",{"_index":4214,"t":{"516":{"position":[[46285,12],[46668,12],[48039,12]]}}}],["httpget：在当前容器中向某url发起http",{"_index":4182,"t":{"516":{"position":[[42254,27]]}}}],["httpget：调用容器内web应用的url，如果返回的状态码在200和399",{"_index":4195,"t":{"516":{"position":[[43686,55]]}}}],["httpheader",{"_index":3999,"t":{"516":{"position":[[29085,12]]}}}],["httplistenaddress=$jenkins_ip",{"_index":401,"t":{"73":{"position":[[939,29]]}}}],["httpport=$jenkins_port",{"_index":402,"t":{"73":{"position":[[971,22]]}}}],["httprequest",{"_index":2044,"t":{"247":{"position":[[248,11]]}}}],["httprespons",{"_index":2045,"t":{"247":{"position":[[300,12],[327,12]]},"277":{"position":[[164,12]]}}}],["https.yaml",{"_index":4923,"t":{"516":{"position":[[105479,10],[105930,10]]},"608":{"position":[[76,10]]},"610":{"position":[[49,10]]}}}],["https://docs.djangoproject.com/zh",{"_index":1152,"t":{"175":{"position":[[629,38]]}}}],["https://docs.docker.com/develop/develop",{"_index":306,"t":{"48":{"position":[[111,46]]}}}],["https://docs.docker.com/engine/reference/build",{"_index":305,"t":{"48":{"position":[[45,54]]}}}],["https://github.com/flannel",{"_index":3613,"t":{"516":{"position":[[8410,26]]}}}],["https://github.com/jenkinsci/jenkins.git",{"_index":429,"t":{"78":{"position":[[15,40]]}}}],["https://github.com/kubernet",{"_index":4563,"t":{"516":{"position":[[79628,29]]}}}],["https://github.com/tianon/gosu/releases/download/1.12/gosu",{"_index":254,"t":{"34":{"position":[[4864,59]]}}}],["https://juejin.cn/post/6844903587470917646",{"_index":1068,"t":{"170":{"position":[[18,42]]}}}],["https://kn0t2bca.mirror.aliyuncs.com",{"_index":3549,"t":{"516":{"position":[[5949,40]]}}}],["https://kubernetes.io/docs/reference/setup",{"_index":3454,"t":{"516":{"position":[[2282,47]]},"518":{"position":[[117,47]]}}}],["https://mirrors.aliyun.com/dock",{"_index":3531,"t":{"516":{"position":[[5389,33]]}}}],["https://nginx.itheima.com:31335",{"_index":4927,"t":{"516":{"position":[[106501,42]]}}}],["https://raw.githubusercontent.com/coreos/flannel/master/documentation/kub",{"_index":3610,"t":{"516":{"position":[[8241,74]]}}}],["https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml",{"_index":5213,"t":{"516":{"position":[[128900,89]]}}}],["https://raw.githubusercontent.com/kubernetes/ingress",{"_index":4874,"t":{"516":{"position":[[102106,52],[102252,52]]}}}],["https://segmentfault.com/a/1190000016056004",{"_index":2626,"t":{"307":{"position":[[0,46]]}}}],["https://simpleui.72wo.com/docs/simpleui/#%e5%ae%98%e7%bd%91",{"_index":1039,"t":{"160":{"position":[[50,64]]}}}],["https://simpleui.72wo.com/topic/1226",{"_index":1069,"t":{"170":{"position":[[61,37]]}}}],["https://tomcat.itheima.com:31335",{"_index":4928,"t":{"516":{"position":[[106546,36]]}}}],["https://www.baidu.com",{"_index":3095,"t":{"457":{"position":[[3181,21],[3625,21],[3834,22]]},"491":{"position":[[11,21]]}}}],["https://www.jenkins.io/zh/doc/book/managing/script",{"_index":815,"t":{"118":{"position":[[0,50]]}}}],["https://www.json2yaml.com/convert",{"_index":3682,"t":{"516":{"position":[[10826,33]]}}}],["https://www.keepalived.org/software/keepaliv",{"_index":3280,"t":{"504":{"position":[[124,46]]}}}],["https://www.xxx.com",{"_index":3267,"t":{"493":{"position":[[626,20]]}}}],["https认证大体分为3",{"_index":5114,"t":{"516":{"position":[[121448,16]]}}}],["https证书认证：基于ca",{"_index":5113,"t":{"516":{"position":[[121379,30]]}}}],["https通信双方的服务器向ca机构申请证书，ca",{"_index":5115,"t":{"516":{"position":[[121473,45]]}}}],["https（这里写你配置了http",{"_index":3266,"t":{"493":{"position":[[582,28]]}}}],["http、server、loc",{"_index":3171,"t":{"473":{"position":[[130,24]]},"477":{"position":[[85,24]]},"479":{"position":[[58,24]]},"481":{"position":[[77,24]]},"483":{"position":[[53,24]]}}}],["http或者http",{"_index":4183,"t":{"516":{"position":[[42382,18],[43833,18],[46542,18]]}}}],["http端中的sever",{"_index":3071,"t":{"457":{"position":[[674,21]]}}}],["http请求转http",{"_index":3263,"t":{"493":{"position":[[474,12]]}}}],["http默认的80",{"_index":3264,"t":{"493":{"position":[[511,13]]}}}],["http，server，location，loc",{"_index":3407,"t":{"510":{"position":[[880,29],[991,29],[1074,29]]}}}],["hub",{"_index":33,"t":{"21":{"position":[[59,8],[159,9]]}}}],["hudson.filepath",{"_index":752,"t":{"112":{"position":[[1434,15],[1472,15]]}}}],["hudson.model.abstractproject",{"_index":533,"t":{"90":{"position":[[0,29]]}}}],["hudson.model.build",{"_index":534,"t":{"90":{"position":[[81,19]]}}}],["hudson.model.buildlisten",{"_index":535,"t":{"90":{"position":[[151,27]]}}}],["hudson.model.caus",{"_index":536,"t":{"90":{"position":[[220,19]]}}}],["hudson.model.comput",{"_index":537,"t":{"90":{"position":[[336,22]]},"112":{"position":[[78,21]]}}}],["hudson.model.executor",{"_index":538,"t":{"90":{"position":[[413,22]]},"112":{"position":[[642,21]]}}}],["hudson.model.item",{"_index":539,"t":{"90":{"position":[[500,18]]}}}],["hudson.model.job",{"_index":540,"t":{"90":{"position":[[575,17]]}}}],["hudson.model.label",{"_index":541,"t":{"90":{"position":[[644,19]]}}}],["hudson.model.labelexpress",{"_index":542,"t":{"90":{"position":[[707,29]]}}}],["hudson.model.nod",{"_index":545,"t":{"90":{"position":[[799,18]]}}}],["hudson.model.parametersact",{"_index":546,"t":{"90":{"position":[[868,30]]}}}],["hudson.model.run",{"_index":547,"t":{"90":{"position":[[945,17]]}}}],["hudson.model.tasklisten",{"_index":548,"t":{"90":{"position":[[1026,26]]}}}],["hudson.model.us",{"_index":549,"t":{"90":{"position":[[1094,18]]}}}],["hudson.model.view",{"_index":550,"t":{"90":{"position":[[1160,18]]}}}],["hudson.remoting.virtualchannel",{"_index":714,"t":{"112":{"position":[[254,30]]},"116":{"position":[[79,30]]}}}],["hudson.scm.scm",{"_index":551,"t":{"90":{"position":[[1231,15]]}}}],["hudson.util.remotingdiagnost",{"_index":805,"t":{"116":{"position":[[126,31]]}}}],["hudson：jenkin",{"_index":552,"t":{"90":{"position":[[1264,14]]}}}],["hup",{"_index":3271,"t":{"498":{"position":[[32,3]]}}}],["hwvvw",{"_index":3832,"t":{"516":{"position":[[19034,5],[19159,6],[19238,5]]},"526":{"position":[[3979,5],[4104,6],[4183,5]]}}}],["i/o",{"_index":2578,"t":{"303":{"position":[[511,3]]}}}],["i;don",{"_index":2841,"t":{"429":{"position":[[1076,7],[1111,7],[1147,7],[1179,7]]}}}],["i;sleep",{"_index":4679,"t":{"516":{"position":[[87366,8],[87908,8],[90486,8],[91144,8]]}}}],["i<5",{"_index":2834,"t":{"427":{"position":[[700,9]]},"429":{"position":[[940,6]]}}}],["i=0;i<5;i++));do",{"_index":2843,"t":{"429":{"position":[[1123,18]]}}}],["icon",{"_index":532,"t":{"88":{"position":[[1339,6]]}}}],["id",{"_index":42,"t":{"21":{"position":[[267,8],[290,4],[297,10],[369,8],[486,8]]},"23":{"position":[[7,20],[112,25],[787,9],[844,9],[931,19]]},"25":{"position":[[28,9],[291,9]]},"42":{"position":[[475,2],[1116,2]]},"85":{"position":[[471,3]]},"90":{"position":[[490,9]]},"173":{"position":[[107,6],[245,7],[264,7]]},"177":{"position":[[929,3],[1251,7]]},"184":{"position":[[550,2]]},"186":{"position":[[298,6],[1300,2],[2109,6],[2294,6],[2420,6],[2877,2],[3509,6]]},"188":{"position":[[397,2],[2959,2]]},"190":{"position":[[544,2],[1146,6],[1455,6],[1661,6],[1731,6],[1931,6],[2120,2]]},"217":{"position":[[114,2],[208,3]]},"223":{"position":[[435,6]]},"252":{"position":[[6373,2]]},"303":{"position":[[375,5],[381,2]]},"369":{"position":[[89,12],[105,15]]},"504":{"position":[[1169,21],[2218,21]]},"516":{"position":[[7799,4],[18623,3],[18727,3]]},"526":{"position":[[3568,3],[3672,3]]}}}],["id>alimaven</id",{"_index":436,"t":{"78":{"position":[[270,17]]}}}],["identifier）的字段。使用python的uuid类。在postgresql数据库中保存为uuid类型，其它数据库中为char(32",{"_index":2112,"t":{"252":{"position":[[2865,95]]}}}],["id列....模型对象的id列.....被关联对象的id",{"_index":2230,"t":{"256":{"position":[[1137,33]]}}}],["id或容器nam",{"_index":73,"t":{"23":{"position":[[492,11],[562,11],[589,11],[618,11],[657,11],[701,11]]}}}],["id）。如果指定这个参数，可以关联到指定的字段上，但是该字段必须具有unique=tru",{"_index":2223,"t":{"256":{"position":[[674,84]]}}}],["if($http_user_ag",{"_index":3118,"t":{"457":{"position":[[4095,19]]}}}],["if(isunix",{"_index":799,"t":{"114":{"position":[[810,13]]}}}],["if,location,loc",{"_index":3393,"t":{"510":{"position":[[459,20]]}}}],["ifconfig",{"_index":3623,"t":{"516":{"position":[[8725,8],[8744,8],[8768,8],[41767,8],[41846,8]]}}}],["ifnotpres",{"_index":4059,"t":{"516":{"position":[[32924,45],[33042,18],[37035,12]]}}}],["if、location、loc",{"_index":3383,"t":{"510":{"position":[[116,20]]}}}],["im",{"_index":1373,"t":{"186":{"position":[[1021,6]]}}}],["ima",{"_index":1369,"t":{"186":{"position":[[901,5]]}}}],["imag",{"_index":31,"t":{"21":{"position":[[27,6],[41,5],[356,6],[401,6]]},"184":{"position":[[381,5],[856,5]]},"186":{"position":[[382,8],[659,9],[2584,9],[3183,5],[3593,8]]},"188":{"position":[[703,5],[3292,5]]},"190":{"position":[[898,5],[1309,10]]},"252":{"position":[[6154,9]]},"457":{"position":[[1583,6],[1782,6],[3668,7],[3686,12],[4453,10]]},"516":{"position":[[6891,6],[6954,8],[7503,5],[13774,6],[17982,5],[18701,6],[18721,5],[19628,5],[19704,5],[20927,6],[22941,6],[23319,5],[23977,6],[24510,6],[25292,6],[27966,6],[31638,5],[32020,6],[32056,6],[32756,6],[32828,6],[33242,5],[33554,5],[33628,5],[33821,5],[34302,6],[34338,6],[35683,6],[36705,6],[36998,6],[37559,6],[40447,6],[40546,6],[40687,6],[41233,5],[42569,6],[44023,6],[45202,6],[45676,5],[46407,6],[46860,5],[48161,6],[48782,6],[50172,6],[51498,6],[54236,6],[55906,6],[57619,6],[58087,6],[60201,6],[63482,6],[65522,6],[66048,6],[66346,6],[67840,6],[68071,6],[68166,5],[68236,5],[68315,5],[68443,6],[70244,6],[70551,6],[72824,5],[72911,5],[73978,5],[74065,5],[76548,6],[77203,5],[77343,5],[77736,6],[78479,6],[79863,6],[80068,7],[81033,6],[85517,6],[85789,6],[86048,6],[87285,6],[87827,6],[88118,6],[90405,6],[91063,6],[94719,6],[103311,6],[103582,6],[107495,6],[107666,6],[108760,6],[108883,6],[110644,6],[110767,6],[115803,6],[116125,6],[118524,6],[119963,6]]},"522":{"position":[[228,6]]},"526":{"position":[[2927,5],[3646,6],[3666,5],[4573,5],[4649,5],[5872,6]]},"541":{"position":[[402,6]]},"545":{"position":[[1335,6]]},"549":{"position":[[292,6]]},"562":{"position":[[787,6]]},"579":{"position":[[307,6]]}}}],["image'n",{"_index":1365,"t":{"186":{"position":[[780,14]]}}}],["image=nginx:1.14",{"_index":3636,"t":{"516":{"position":[[9240,16]]}}}],["image=nginx:1.17.1",{"_index":3684,"t":{"516":{"position":[[10939,18],[61861,18],[62283,18],[62751,18],[81225,18]]},"581":{"position":[[46,18]]}}}],["image=nginx:latest",{"_index":3733,"t":{"516":{"position":[[13042,18],[18074,18],[23434,18]]},"526":{"position":[[3019,18]]}}}],["imagefield",{"_index":1313,"t":{"184":{"position":[[2557,10]]},"252":{"position":[[1764,10],[4294,10]]}}}],["imagefield(allow_null=tru",{"_index":1497,"t":{"190":{"position":[[906,27]]}}}],["imagefield(max_length=non",{"_index":1314,"t":{"184":{"position":[[2568,27]]}}}],["imagefield(upload_to=non",{"_index":2138,"t":{"252":{"position":[[4311,26]]}}}],["imagenam",{"_index":3582,"t":{"516":{"position":[[7103,9]]}}}],["imagepolicywebhook：这个插件将允许后端的一个webhook程序来完成admiss",{"_index":5198,"t":{"516":{"position":[[127910,52]]}}}],["imagepullpolici",{"_index":3979,"t":{"516":{"position":[[27992,16],[31664,15],[32693,15],[32776,16],[33180,15],[33316,15],[33487,15],[37018,16]]}}}],["imagepullpolicy.yaml",{"_index":4057,"t":{"516":{"position":[[32619,28],[33151,20]]}}}],["imagepullpolicy，用于设置镜像拉取策略，kubernet",{"_index":4058,"t":{"516":{"position":[[32848,48]]}}}],["imagepullsecret",{"_index":4016,"t":{"516":{"position":[[29564,17]]}}}],["images/(.*\\.jpg",{"_index":3099,"t":{"457":{"position":[[3315,18]]}}}],["images/dockerfile_best",{"_index":307,"t":{"48":{"position":[[158,22]]}}}],["images[@]};do",{"_index":3583,"t":{"516":{"position":[[7116,15]]}}}],["images_path",{"_index":2171,"t":{"252":{"position":[[6094,14]]}}}],["img](kubernetes.assets/imag",{"_index":4651,"t":{"516":{"position":[[84800,30]]},"589":{"position":[[2680,30]]}}}],["import",{"_index":394,"t":{"73":{"position":[[746,6]]},"83":{"position":[[0,6],[43,6],[87,6],[123,6]]},"103":{"position":[[532,6]]},"107":{"position":[[267,6],[368,6]]},"112":{"position":[[1465,6]]},"114":{"position":[[93,6],[303,6]]},"116":{"position":[[119,6]]},"118":{"position":[[61,6]]},"121":{"position":[[30,6]]},"166":{"position":[[20,6]]},"175":{"position":[[64,6],[108,6],[156,6],[195,6],[225,6]]},"177":{"position":[[20,6],[45,6],[76,6],[145,6]]},"186":{"position":[[98,6],[186,6],[1956,6],[2003,6],[3356,6],[3403,6]]},"188":{"position":[[828,6],[1960,6],[2485,6],[3381,6],[4939,6],[5140,6]]},"190":{"position":[[443,6]]},"197":{"position":[[510,6],[554,6],[2904,6]]},"199":{"position":[[1372,6],[1415,6],[1468,6],[2102,6],[2145,6],[2198,6]]},"201":{"position":[[283,6],[359,6]]},"205":{"position":[[281,6],[330,6]]},"209":{"position":[[35,6],[96,6],[148,6]]},"215":{"position":[[408,6],[458,6]]},"219":{"position":[[35,6],[96,6],[148,6],[202,6]]},"225":{"position":[[815,6],[1436,6]]},"227":{"position":[[63,6],[578,6],[648,6],[677,6]]},"230":{"position":[[683,6]]},"236":{"position":[[143,6],[162,6]]},"240":{"position":[[202,6],[230,6]]},"242":{"position":[[89,6],[303,6],[331,6]]},"244":{"position":[[123,6],[142,6]]},"249":{"position":[[300,6]]},"252":{"position":[[6018,6],[6045,6],[6076,6],[6285,6],[6326,6]]},"256":{"position":[[1410,6]]},"258":{"position":[[145,6],[960,6],[1874,6],[3717,6],[4756,6]]},"273":{"position":[[41,6],[142,6],[381,6],[1377,6],[1796,6],[2081,6]]},"275":{"position":[[113,6],[219,6]]},"277":{"position":[[53,6],[104,6],[157,6],[202,6],[248,6],[285,6],[330,6],[388,6],[445,6],[463,6],[492,6],[522,6],[553,6],[589,6]]},"289":{"position":[[108,6]]},"344":{"position":[[192,6],[393,6],[409,6]]}}}],["import依赖前加上app",{"_index":2556,"t":{"287":{"position":[[0,43]]}}}],["inact",{"_index":3191,"t":{"475":{"position":[[497,33]]}}}],["inactconn",{"_index":4749,"t":{"516":{"position":[[92621,9],[93689,9]]},"591":{"position":[[699,9],[1767,9]]}}}],["inactive=60m",{"_index":3230,"t":{"487":{"position":[[400,12]]}}}],["inactive=tim",{"_index":3176,"t":{"475":{"position":[[97,15]]}}}],["includ",{"_index":991,"t":{"151":{"position":[[752,9]]},"170":{"position":[[547,7],[1052,7]]},"242":{"position":[[24,9],[96,8],[310,8],[391,9]]},"277":{"position":[[60,8]]},"449":{"position":[[769,7],[862,7]]}}}],["include('aggregator.url",{"_index":2024,"t":{"242":{"position":[[160,28]]}}}],["include('contact.url",{"_index":2026,"t":{"242":{"position":[[206,25]]}}}],["include('inn",{"_index":2042,"t":{"244":{"position":[[247,17]]}}}],["include()指向的urlconf/view",{"_index":2039,"t":{"242":{"position":[[606,34]]}}}],["includes：字符串类型，stash",{"_index":982,"t":{"151":{"position":[[352,41]]}}}],["inclus",{"_index":357,"t":{"62":{"position":[[235,11],[308,11],[361,11]]}}}],["incomingfil",{"_index":792,"t":{"114":{"position":[[661,12]]}}}],["incomingfile.withoutputstream",{"_index":794,"t":{"114":{"position":[[696,29]]}}}],["incubator/metr",{"_index":4564,"t":{"516":{"position":[[79658,17]]}}}],["index",{"_index":2328,"t":{"258":{"position":[[3669,7],[3864,7],[4618,7],[4635,7]]},"389":{"position":[[76,11]]},"449":{"position":[[1045,5]]},"457":{"position":[[816,5],[963,5],[1106,5],[1250,5],[2287,5],[2569,5]]},"487":{"position":[[135,5],[225,5]]},"493":{"position":[[431,5]]}}}],["index.htm",{"_index":2978,"t":{"449":{"position":[[1062,10]]},"457":{"position":[[2586,10]]},"493":{"position":[[448,10]]}}}],["index.html",{"_index":2977,"t":{"449":{"position":[[1051,10]]},"457":{"position":[[822,11],[969,11],[1112,11],[1256,11],[2293,10],[2575,10],[2735,10],[2854,10]]},"487":{"position":[[141,11],[231,11]]},"493":{"position":[[437,10]]}}}],["index.jelly\").forward(req",{"_index":480,"t":{"83":{"position":[[456,27]]}}}],["index_togeth",{"_index":2340,"t":{"258":{"position":[[4571,14],[4647,14],[4662,23]]}}}],["info",{"_index":3725,"t":{"516":{"position":[[12636,4],[118010,5],[118320,5],[119013,4],[119025,4]]}}}],["ing",{"_index":3710,"t":{"516":{"position":[[12013,3],[104718,3],[104873,3],[106020,3],[106198,3]]},"599":{"position":[[35,3]]},"601":{"position":[[40,3]]},"612":{"position":[[35,3]]},"614":{"position":[[40,3]]}}}],["ingress",{"_index":3709,"t":{"516":{"position":[[12005,7],[101092,10],[101573,7],[101891,10],[101913,12],[101963,7],[102008,7],[102030,9],[102080,7],[102226,7],[102427,7],[102452,7],[102514,7],[102539,7],[102567,9],[102602,7],[102645,9],[102680,7],[102720,7],[102775,7],[102859,7],[102899,7],[102958,7],[104256,9],[104313,7],[104337,7],[104622,7],[104722,7],[104771,7],[104877,7],[105469,9],[105527,7],[105551,7],[105922,7],[106024,7],[106074,7],[106202,7]]},"595":{"position":[[205,9],[262,7],[286,7]]},"597":{"position":[[41,7]]},"599":{"position":[[39,7],[88,7]]},"601":{"position":[[44,7]]},"608":{"position":[[66,9],[124,7],[148,7]]},"610":{"position":[[41,7]]},"612":{"position":[[39,7],[89,7]]},"614":{"position":[[44,7]]}}}],["ingress.extensions/ingress",{"_index":4903,"t":{"516":{"position":[[104640,26],[105941,26]]},"597":{"position":[[59,26]]},"610":{"position":[[60,26]]}}}],["ingress控制器会将生成的nginx配置写入到一个运行着的nginx",{"_index":4870,"t":{"516":{"position":[[101800,45]]}}}],["ingress控制器动态感知ingress服务规则的变化，然后生成一段对应的nginx",{"_index":4869,"t":{"516":{"position":[[101750,49]]}}}],["ingress相当于一个7层的负载均衡器，是kubernetes对反向代理的一个抽象，它的工作原理类似于nginx，可以理解成在ingress里建立诸多映射规则，ingress",{"_index":4861,"t":{"516":{"position":[[101371,92]]}}}],["ingress规则，说明哪个域名对应kubernetes集群中的哪个servic",{"_index":4868,"t":{"516":{"position":[[101704,45]]}}}],["ingress（以nginx",{"_index":4867,"t":{"516":{"position":[[101678,25]]}}}],["ingress：kubernetes中的一个对象，作用是定义请求如何转发到servic",{"_index":4863,"t":{"516":{"position":[[101525,47]]}}}],["init",{"_index":3452,"t":{"516":{"position":[[2242,4],[2616,4],[7451,4],[38815,12]]},"518":{"position":[[77,4]]}}}],["init()、start",{"_index":523,"t":{"88":{"position":[[748,14]]}}}],["init:0/2",{"_index":4167,"t":{"516":{"position":[[41538,8]]}}}],["init:1/2",{"_index":4168,"t":{"516":{"position":[[41575,8],[41612,8]]}}}],["init_by_lua",{"_index":3384,"t":{"510":{"position":[[167,11]]}}}],["init_by_lua_fil",{"_index":3385,"t":{"510":{"position":[[179,16]]}}}],["init_worker_by_lua",{"_index":3387,"t":{"510":{"position":[[260,18]]}}}],["init_worker_by_lua_fil",{"_index":3388,"t":{"510":{"position":[[279,23]]}}}],["initcontain",{"_index":4159,"t":{"516":{"position":[[40377,13],[40511,15],[40889,13],[41001,13],[41167,13],[41461,13],[41520,13],[41557,13],[41594,13],[41631,13],[41675,13]]}}}],["initcontainer.yaml",{"_index":4158,"t":{"516":{"position":[[40307,24],[40862,18]]}}}],["initi",{"_index":522,"t":{"88":{"position":[[706,13]]},"168":{"position":[[32,7]]},"275":{"position":[[1289,8],[1427,8]]},"516":{"position":[[19069,11]]},"526":{"position":[[4014,11]]}}}],["initialdelaysecond",{"_index":4002,"t":{"516":{"position":[[29181,20],[47737,19],[48279,20]]}}}],["initializer(aft",{"_index":524,"t":{"88":{"position":[[790,18]]}}}],["initializer(befor",{"_index":526,"t":{"88":{"position":[[894,19]]}}}],["initialresources：为未设置资源请求与限制的pod",{"_index":5203,"t":{"516":{"position":[[128173,52]]}}}],["initmilestone.plugins_prepar",{"_index":525,"t":{"88":{"position":[[811,32]]}}}],["initmilestone.plugins_start",{"_index":527,"t":{"88":{"position":[[916,31]]}}}],["inlin",{"_index":1111,"t":{"173":{"position":[[63,7]]},"175":{"position":[[869,7]]}}}],["input",{"_index":2072,"t":{"252":{"position":[[614,6]]}}}],["input_formats=non",{"_index":1298,"t":{"184":{"position":[[2166,19],[2239,19],[2312,19]]}}}],["inputstream",{"_index":701,"t":{"110":{"position":[[1844,11]]}}}],["input：定义在stage部分，会暂停pipelin",{"_index":858,"t":{"135":{"position":[[220,37]]}}}],["insecur",{"_index":4570,"t":{"516":{"position":[[79966,8]]}}}],["insid",{"_index":757,"t":{"112":{"position":[[1610,6]]}}}],["inspect",{"_index":28,"t":{"19":{"position":[[239,7]]},"38":{"position":[[44,7],[239,7]]}}}],["instal",{"_index":118,"t":{"27":{"position":[[676,7],[699,7],[833,7],[1146,7]]},"34":{"position":[[1175,7],[1429,7]]},"42":{"position":[[786,7]]},"73":{"position":[[1343,9]]},"78":{"position":[[440,7],[540,7]]},"162":{"position":[[4,7]]},"180":{"position":[[10,7]]},"221":{"position":[[54,7]]},"230":{"position":[[13,7]]},"252":{"position":[[4688,7]]},"269":{"position":[[2193,7]]},"442":{"position":[[14,7]]},"504":{"position":[[398,7]]},"516":{"position":[[4873,7],[5650,7],[6525,7],[79542,7],[110117,7],[110485,7]]}}}],["installed_app",{"_index":1046,"t":{"164":{"position":[[42,14]]},"180":{"position":[[131,14]]},"221":{"position":[[93,14]]}}}],["instanc",{"_index":724,"t":{"112":{"position":[[496,8]]},"188":{"position":[[3837,9],[3864,26],[4166,8],[4390,9],[4417,26],[4735,8]]},"197":{"position":[[3272,9],[3977,9],[4053,8],[4583,9],[4680,8],[5034,9],[5457,9],[5516,8],[5653,10]]}}}],["instance._prefetched_objects_cach",{"_index":1715,"t":{"197":{"position":[[5044,34]]}}}],["instance.bcom",{"_index":1466,"t":{"188":{"position":[[4089,17],[4140,18],[4642,17],[4693,18]]}}}],["instance.bpub_d",{"_index":1462,"t":{"188":{"position":[[3955,18],[4008,19],[4508,18],[4561,19]]}}}],["instance.bread",{"_index":1464,"t":{"188":{"position":[[4028,14],[4073,15],[4581,14],[4626,15]]}}}],["instance.btitl",{"_index":1460,"t":{"188":{"position":[[3891,15],[3938,16],[4444,15],[4491,16]]}}}],["instance.delet",{"_index":1729,"t":{"197":{"position":[[5664,17]]}}}],["instance.getcomputer(inst",{"_index":727,"t":{"112":{"position":[[528,30]]}}}],["instance.sav",{"_index":1469,"t":{"188":{"position":[[4712,15]]}}}],["instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，upd",{"_index":1472,"t":{"188":{"position":[[4816,102]]}}}],["instead",{"_index":1421,"t":{"188":{"position":[[1134,8]]},"516":{"position":[[13223,8]]}}}],["insuffici",{"_index":4127,"t":{"516":{"position":[[38722,12]]}}}],["int",{"_index":2002,"t":{"238":{"position":[[68,3],[91,3]]},"418":{"position":[[58,4]]},"516":{"position":[[28363,3],[28389,3]]}}}],["int(comment_volume_from",{"_index":2373,"t":{"264":{"position":[[793,26]]}}}],["int(comment_volume_to",{"_index":2375,"t":{"264":{"position":[[916,24]]}}}],["int:nam",{"_index":1989,"t":{"236":{"position":[[479,10]]}}}],["integ",{"_index":4033,"t":{"516":{"position":[[30569,8],[30657,8],[36439,8],[47757,8],[47801,8],[47843,8],[47891,8],[47947,8]]}}}],["integerfield",{"_index":1284,"t":{"184":{"position":[[1841,12]]},"252":{"position":[[1788,12]]}}}],["integerfield(label",{"_index":1494,"t":{"190":{"position":[[713,25],[811,25],[2295,25],[2384,25]]}}}],["integerfield(label='id",{"_index":1491,"t":{"190":{"position":[[549,24],[2125,24]]}}}],["integerfield(max_value=non",{"_index":1285,"t":{"184":{"position":[[1854,28]]}}}],["interfac",{"_index":3306,"t":{"504":{"position":[[1151,9],[2200,9]]}}}],["intermediari",{"_index":1155,"t":{"175":{"position":[[722,12]]}}}],["interv",{"_index":3300,"t":{"504":{"position":[[971,8],[2020,8]]}}}],["invalid",{"_index":1434,"t":{"188":{"position":[[1598,8]]},"197":{"position":[[4997,10]]},"254":{"position":[[1124,8]]},"516":{"position":[[45642,8],[45739,8],[45802,8],[45868,8],[45886,9]]}}}],["invalid_choic",{"_index":2195,"t":{"254":{"position":[[1133,15]]}}}],["invit",{"_index":2247,"t":{"256":{"position":[[1836,7]]}}}],["invite_reason",{"_index":2249,"t":{"256":{"position":[[1936,13]]}}}],["io/flannel/tree/master/documentation/kub",{"_index":3614,"t":{"516":{"position":[[8437,41]]}}}],["iop",{"_index":5007,"t":{"516":{"position":[[112070,25]]}}}],["ip",{"_index":390,"t":{"73":{"position":[[651,2]]},"170":{"position":[[704,2]]},"217":{"position":[[20,21]]},"230":{"position":[[353,2]]},"303":{"position":[[1654,5]]},"455":{"position":[[314,2],[1577,2],[1588,2]]},"457":{"position":[[360,11]]},"459":{"position":[[103,2],[143,2],[218,2]]},"469":{"position":[[640,2],[654,2]]},"504":{"position":[[758,38],[1126,24],[1215,6],[1807,38],[2175,24],[2264,6],[4401,2]]},"506":{"position":[[250,28]]},"516":{"position":[[2660,5],[2975,4],[8790,2],[8810,2],[18525,3],[18541,4],[18546,3],[19948,2],[25543,14],[25562,2],[25583,2],[25586,20],[25979,2],[25991,2],[26714,2],[26726,2],[36506,20],[43052,2],[50446,2],[50922,2],[51806,2],[52288,2],[54712,2],[55616,2],[59886,2],[60770,2],[61973,2],[62402,2],[62863,2],[63741,2],[63906,2],[81603,2],[81615,2],[86214,2],[92491,2],[93119,3],[93559,2],[94045,9],[94958,2],[96013,2],[96025,2],[96362,3],[98448,5],[98545,2],[98557,2],[98843,3],[100101,2],[100113,2],[100678,10],[102931,2],[102943,2],[104115,2],[104127,2],[108142,2],[109488,2],[116537,2],[129628,2],[129640,2]]},"526":{"position":[[3470,3],[3486,4],[3491,3],[4893,2]]},"532":{"position":[[112,2]]},"541":{"position":[[112,2]]},"562":{"position":[[472,2]]},"567":{"position":[[115,2]]},"569":{"position":[[86,2]]},"571":{"position":[[86,2]]},"585":{"position":[[228,2],[240,2]]},"591":{"position":[[569,2],[1197,3],[1637,2],[2123,9]]},"595":{"position":[[64,2],[76,2]]},"630":{"position":[[86,2]]}}}],["ip(vip",{"_index":3321,"t":{"504":{"position":[[1540,21],[2588,21]]}}}],["ip6tabl",{"_index":3511,"t":{"516":{"position":[[4498,9]]}}}],["ip:31928",{"_index":3964,"t":{"516":{"position":[[26833,15]]}}}],["ip_hash",{"_index":1078,"t":{"170":{"position":[[328,8]]},"455":{"position":[[303,7],[1560,7],[1658,8]]}}}],["ip_v",{"_index":3524,"t":{"516":{"position":[[5007,5],[5314,5]]}}}],["ip_vs_rr",{"_index":3525,"t":{"516":{"position":[[5025,8]]}}}],["ip_vs_sh",{"_index":3527,"t":{"516":{"position":[[5068,8]]}}}],["ip_vs_wrr",{"_index":3526,"t":{"516":{"position":[[5046,9]]}}}],["ipaddressfield",{"_index":1281,"t":{"184":{"position":[[1764,14]]}}}],["ipaddressfield(protocol='both",{"_index":1282,"t":{"184":{"position":[[1779,31]]}}}],["ipset",{"_index":3521,"t":{"516":{"position":[[4881,5]]}}}],["iptabl",{"_index":3494,"t":{"516":{"position":[[3674,45],[3829,12],[3874,8],[3918,8],[4538,8],[93024,8]]},"591":{"position":[[1102,8]]}}}],["iptables模式下，kub",{"_index":4765,"t":{"516":{"position":[[93037,16]]},"591":{"position":[[1115,16]]}}}],["iptable和firewalld",{"_index":3492,"t":{"516":{"position":[[3633,22]]}}}],["ipv",{"_index":3518,"t":{"516":{"position":[[4727,9],[93229,4],[93363,6],[93445,6],[96512,11]]},"591":{"position":[[1307,4],[1441,6],[1523,6]]}}}],["ipvsadm",{"_index":4741,"t":{"516":{"position":[[92479,7],[93547,7],[96547,7],[97173,7],[97533,7]]},"591":{"position":[[557,7],[1625,7]]}}}],["ipvsadmin",{"_index":3522,"t":{"516":{"position":[[4887,9]]}}}],["ipvs内核模块，否则会降级为ipt",{"_index":4772,"t":{"516":{"position":[[93330,30]]},"591":{"position":[[1408,30]]}}}],["ipvs模式和iptables类似，kub",{"_index":4770,"t":{"516":{"position":[[93238,22]]},"591":{"position":[[1316,22]]}}}],["ipvs的映射规则【rr",{"_index":4813,"t":{"516":{"position":[[97131,14]]}}}],["ipvs规则【persist",{"_index":4815,"t":{"516":{"position":[[97484,19]]}}}],["ip地址，其它容器都此ip（pod",{"_index":3974,"t":{"516":{"position":[[27602,26]]}}}],["ip地址，可以为al",{"_index":2980,"t":{"449":{"position":[[1104,16],[1143,16]]}}}],["ip已经成功挂载，但另外一台机器192.168.12.130并不会挂载这个虚拟ip，只有当主机下线后，作为从机的192.168.12.130才会上线，接替vip。最后测试一下外网是否可以正常与vip通信，即在windows中直接p",{"_index":3349,"t":{"504":{"position":[[4409,130]]}}}],["ip或us",{"_index":1847,"t":{"217":{"position":[[182,25]]}}}],["ip改为虚拟ip",{"_index":3357,"t":{"506":{"position":[[203,16]]}}}],["ip数万\"do",{"_index":2599,"t":{"303":{"position":[[1529,9]]}}}],["ip的请求被iptables规则重定向到kub",{"_index":4759,"t":{"516":{"position":[[92833,24]]},"591":{"position":[[911,24]]}}}],["ip的请求重定向到一个pod",{"_index":4767,"t":{"516":{"position":[[93104,14]]},"591":{"position":[[1182,14]]}}}],["ip访问当前service对应的pod",{"_index":3951,"t":{"516":{"position":[[26142,25]]}}}],["ip），以实现pod",{"_index":3975,"t":{"516":{"position":[[27629,17]]}}}],["ip，即虚拟ip",{"_index":3275,"t":{"502":{"position":[[233,9]]}}}],["ip，如果想要访问service，只能通过servic",{"_index":4822,"t":{"516":{"position":[[98032,36]]}}}],["ip，这就是service的ip，在servic",{"_index":3950,"t":{"516":{"position":[[26097,42]]}}}],["is_act",{"_index":1147,"t":{"175":{"position":[[444,12],[955,12],[1269,12],[1442,12]]}}}],["is_arg",{"_index":3158,"t":{"459":{"position":[[433,7]]}}}],["is_staff",{"_index":1148,"t":{"175":{"position":[[457,11],[968,11],[1282,14],[1455,14]]}}}],["is_superus",{"_index":1146,"t":{"175":{"position":[[428,15],[939,15],[1252,16],[1425,16]]}}}],["is_valid()方法还可以在验证失败时抛出异常serializers.validationerror，可以通过传递raise_exception=true参数开启，rest",{"_index":1429,"t":{"188":{"position":[[1423,88]]}}}],["is_valid()方法进行验证，验证成功返回true，否则返回fals",{"_index":1407,"t":{"188":{"position":[[58,54]]}}}],["isadminus",{"_index":1818,"t":{"207":{"position":[[41,11]]}}}],["isauthent",{"_index":1816,"t":{"205":{"position":[[288,15],[394,18]]},"207":{"position":[[16,15]]},"209":{"position":[[103,15],[352,17]]},"211":{"position":[[484,17]]},"219":{"position":[[103,15],[407,17]]}}}],["isauthenticatedorreadonli",{"_index":1819,"t":{"207":{"position":[[60,25]]}}}],["isbusi",{"_index":728,"t":{"112":{"position":[[680,8]]}}}],["isinstance(exc",{"_index":1912,"t":{"227":{"position":[[829,15]]}}}],["iso",{"_index":3671,"t":{"516":{"position":[[10356,9],[10426,7]]}}}],["isunix",{"_index":717,"t":{"112":{"position":[[353,8]]}}}],["isunix：判断是否为类unix",{"_index":960,"t":{"149":{"position":[[271,20]]}}}],["item",{"_index":741,"t":{"112":{"position":[[995,5]]},"516":{"position":[[29967,6],[30066,6]]}}}],["item.getcurrentexecut",{"_index":745,"t":{"112":{"position":[[1149,27]]}}}],["item.getcurrentworkunit().work.getownertask",{"_index":748,"t":{"112":{"position":[[1237,45]]}}}],["item.isbusi",{"_index":743,"t":{"112":{"position":[[1034,15]]}}}],["item1",{"_index":2801,"t":{"409":{"position":[[47,5]]}}}],["item2",{"_index":2802,"t":{"409":{"position":[[53,5]]}}}],["itemn",{"_index":2803,"t":{"409":{"position":[[63,5]]}}}],["j",{"_index":2637,"t":{"311":{"position":[[111,1]]}}}],["j2gtj",{"_index":4545,"t":{"516":{"position":[[78214,5],[78853,5]]}}}],["j]enkins.war",{"_index":407,"t":{"73":{"position":[[1072,13]]}}}],["jack",{"_index":640,"t":{"107":{"position":[[462,6]]}}}],["jar",{"_index":399,"t":{"73":{"position":[[920,3]]}}}],["jar包地址：groovi",{"_index":828,"t":{"121":{"position":[[98,13]]}}}],["java",{"_index":366,"t":{"71":{"position":[[3,4],[8,4],[17,4]]},"73":{"position":[[416,6]]},"101":{"position":[[319,4],[410,5]]}}}],["java.util.collections$unmodifiablemap",{"_index":679,"t":{"110":{"position":[[1134,37]]}}}],["java_hom",{"_index":139,"t":{"27":{"position":[[1245,9]]}}}],["java_home/lib/dt.jar:$java_home/lib/tools.jar",{"_index":142,"t":{"27":{"position":[[1293,46]]}}}],["javascriptmethod",{"_index":502,"t":{"85":{"position":[[738,18]]},"88":{"position":[[530,18],[1105,18]]}}}],["java与tomcat",{"_index":132,"t":{"27":{"position":[[1019,19],[1222,18]]}}}],["jdk",{"_index":133,"t":{"27":{"position":[[1043,3]]}}}],["jelli",{"_index":515,"t":{"88":{"position":[[557,5],[1132,5]]}}}],["jelly脚本中被调用。用于实现ajax",{"_index":503,"t":{"85":{"position":[[757,30]]}}}],["jenkin",{"_index":13,"t":{"15":{"position":[[74,13]]},"50":{"position":[[3,7]]},"52":{"position":[[0,7]]},"66":{"position":[[7,7]]},"68":{"position":[[0,7]]},"73":{"position":[[220,8],[1111,9],[1167,7],[1412,7],[1448,7],[1482,7],[1520,7],[1559,7]]},"88":{"position":[[12,17],[371,7],[398,7],[434,7],[621,10],[720,15],[1020,14],[1218,7],[1239,7],[1355,7],[1393,7]]},"90":{"position":[[37,7],[104,7],[243,7],[251,16],[362,7],[439,7],[526,7],[600,7],[667,7],[740,7],[825,7],[902,7],[970,7],[1116,7],[1186,7],[1254,7],[1290,7],[1310,7],[1505,7],[1612,7]]},"94":{"position":[[6,7],[33,14],[60,17],[78,7],[107,7],[149,19]]},"97":{"position":[[8,7],[25,89]]},"99":{"position":[[49,7],[68,7]]},"103":{"position":[[35,7],[61,7],[511,7]]},"110":{"position":[[0,8],[813,7],[923,11]]},"112":{"position":[[1659,9]]},"126":{"position":[[0,7]]},"130":{"position":[[342,17]]},"135":{"position":[[0,29],[95,7],[531,53]]},"137":{"position":[[978,10]]},"141":{"position":[[0,8]]},"143":{"position":[[396,13]]},"149":{"position":[[836,12]]}}}],["jenkins.get",{"_index":725,"t":{"112":{"position":[[507,13]]}}}],["jenkins.get().getcomputer(env.node_nam",{"_index":705,"t":{"112":{"position":[[32,40],[568,40]]}}}],["jenkins.get().getcomputer(env['node_nam",{"_index":763,"t":{"112":{"position":[[1777,43]]}}}],["jenkins.model.jenkin",{"_index":642,"t":{"110":{"position":[[112,21]]}}}],["jenkins.servic",{"_index":410,"t":{"73":{"position":[[1124,17]]}}}],["jenkins.sh",{"_index":393,"t":{"73":{"position":[[699,11],[1029,10],[1315,10]]}}}],["jenkins.war",{"_index":375,"t":{"73":{"position":[[150,13]]}}}],["jenkins2.0以上的版本依赖jdk1.7以上，以及maven3.0.4以上（如果需要本地调试jenkins还需要安装node.j",{"_index":433,"t":{"78":{"position":[[96,69]]}}}],["jenkins_hom",{"_index":372,"t":{"73":{"position":[[82,12],[167,13],[714,13]]},"75":{"position":[[46,26]]}}}],["jenkins_home=/data/home/jenkins/.jenkin",{"_index":374,"t":{"73":{"position":[[102,40]]}}}],["jenkins_home=/data/jenkins_home/.jenkin",{"_index":378,"t":{"73":{"position":[[250,40]]}}}],["jenkins_home}/start",{"_index":418,"t":{"73":{"position":[[1293,21]]}}}],["jenkins_ip=0.0.0.0",{"_index":388,"t":{"73":{"position":[[623,18]]}}}],["jenkins_java",{"_index":398,"t":{"73":{"position":[[887,13]]}}}],["jenkins_java=/usr/bin/java",{"_index":381,"t":{"73":{"position":[[383,26]]}}}],["jenkins_javaopt",{"_index":382,"t":{"73":{"position":[[423,18],[901,17]]}}}],["jenkins_log",{"_index":403,"t":{"73":{"position":[[997,12]]}}}],["jenkins_log=/data/jenkins_home/jenkins.log",{"_index":380,"t":{"73":{"position":[[328,42]]}}}],["jenkins_port=8000",{"_index":391,"t":{"73":{"position":[[654,17]]}}}],["jenkins_url",{"_index":673,"t":{"110":{"position":[[911,11]]}}}],["jenkins_user=root",{"_index":379,"t":{"73":{"position":[[303,17]]}}}],["jenkins_war",{"_index":400,"t":{"73":{"position":[[924,12]]}}}],["jenkins_war=${jenkins_home}/jenkins.war",{"_index":397,"t":{"73":{"position":[[847,39]]}}}],["jenkinsfil",{"_index":588,"t":{"97":{"position":[[219,79]]},"107":{"position":[[324,15]]}}}],["jenkins→configur",{"_index":947,"t":{"143":{"position":[[661,17]]}}}],["jenkins中很多扩展点都依赖于describable接口和descriptor",{"_index":580,"t":{"92":{"position":[[1191,84]]}}}],["jenkins中，所有的http请求都通过stapler框架来处理。开发人员可以使用stapler框架来编写自己的插件，为jenkins添加新的功能或扩展现有功能。stapler框架的使用非常广泛，在jenkins中的几乎所有的插件都使用了stapler框架来处理http",{"_index":462,"t":{"81":{"position":[[419,140]]}}}],["jenkins就是这样做的，只需要对现有的插件进行一些修改，就可以在pipeline中被当成一个步骤使用。这样大大降低了从现有依赖于界面的插件过渡到pipelin",{"_index":840,"t":{"130":{"position":[[252,89]]}}}],["jenkins新增此pipeline后，至少要手动执行一次，它才会被jenkin",{"_index":927,"t":{"141":{"position":[[349,74]]}}}],["jenkins是jenkins中的一个中心类，可以通过这个类来操作jenkins的一些资源。通过jenkins.get()或jenkins.getinstanceornul",{"_index":641,"t":{"110":{"position":[[9,97]]}}}],["jenkins是一个比较大的项目，里面有非常多的依赖,因此最好使用一个国内的maven加速源进行加速,可以在.m2的settings.xml中配置mirror",{"_index":434,"t":{"78":{"position":[[171,79]]}}}],["jenkins的插件一样。如果现有的插件不用修改或者只需要简单修改，就能在jenkin",{"_index":839,"t":{"130":{"position":[[170,61]]}}}],["jenkins：hudson",{"_index":553,"t":{"90":{"position":[[1328,14]]}}}],["jetty:run",{"_index":450,"t":{"78":{"position":[[565,9]]}}}],["jhj49",{"_index":4695,"t":{"516":{"position":[[88720,5],[88913,5]]}}}],["job",{"_index":747,"t":{"112":{"position":[[1231,3]]},"155":{"position":[[340,4],[351,3]]},"516":{"position":[[11880,4],[86447,4],[86573,11],[86618,3],[86700,3],[86836,34],[87618,3],[87641,3],[87928,5],[88000,3],[88014,5],[88055,3],[88137,3],[88193,3],[88374,3],[88405,3],[88686,3],[88716,3],[88746,3],[88776,3],[88809,3],[88839,3],[88869,3],[88909,3],[88942,3],[88972,3],[89002,3],[89035,3],[89065,3],[89105,3],[89135,3],[89175,3],[89205,3],[89235,3],[89265,3],[89298,3],[89331,3],[89363,5],[89436,4],[90722,14],[91416,5],[91457,4]]}}}],["job.batch",{"_index":4700,"t":{"516":{"position":[[89422,9]]}}}],["job.batch/pc",{"_index":4685,"t":{"516":{"position":[[87987,12]]}}}],["job.yaml",{"_index":4683,"t":{"516":{"position":[[87576,14],[87978,8],[89413,8]]}}}],["job/<jobname>/api/json",{"_index":335,"t":{"58":{"position":[[315,23]]}}}],["job/<jobname>/config.xml",{"_index":333,"t":{"58":{"position":[[224,25],[255,26]]}}}],["job/<jobname>/dodelet",{"_index":336,"t":{"58":{"position":[[350,23]]}}}],["job/<jobname>/job/<branchname>/api/json",{"_index":337,"t":{"58":{"position":[[409,40]]}}}],["job/<jobname>/job/<branchname>/build",{"_index":341,"t":{"58":{"position":[[556,37]]}}}],["job/<jobname>/job/<branchname>/buildwithparamet",{"_index":342,"t":{"58":{"position":[[607,52]]}}}],["job/<jobname>/job/<branchname>/descript",{"_index":338,"t":{"58":{"position":[[463,43]]}}}],["job_base_nam",{"_index":668,"t":{"110":{"position":[[745,13]]}}}],["job_nam",{"_index":666,"t":{"110":{"position":[[706,8],[821,10]]}}}],["jobtempl",{"_index":4710,"t":{"516":{"position":[[90027,12],[90969,12]]}}}],["job创建的pod执行成功结束时，job将记录成功结束的pod",{"_index":4664,"t":{"516":{"position":[[86511,34]]}}}],["job在任一时刻应该并发运行pod",{"_index":4670,"t":{"516":{"position":[[86777,28]]}}}],["job失败后进行重试的次数。默认是6",{"_index":4673,"t":{"516":{"position":[[86889,20]]}}}],["job并发运行pods的数量为3",{"_index":4692,"t":{"516":{"position":[[88535,18]]}}}],["job控制器模板，用于为cronjob控制器生成job对象;下面其实就是job",{"_index":4711,"t":{"516":{"position":[[90042,42]]}}}],["job控制器资源为其管控对象，并借助它管理pod资源对象，job控制器定义的作业任务在其控制器资源创建之后便会立即执行，但cronjob可以以类似于linux操作系统的周期性任务作业计划的方式控制其运行时间点及重复运行的方式。也就是说，cronjob可以在特定的时间点(反复的)去运行job",{"_index":4703,"t":{"516":{"position":[[89478,148]]}}}],["job需要成功运行pod",{"_index":4668,"t":{"516":{"position":[[86734,23]]}}}],["job需要成功运行pods的次数为6",{"_index":4691,"t":{"516":{"position":[[88495,20]]}}}],["job（必填）：目标jenkin",{"_index":1013,"t":{"155":{"position":[[435,23]]}}}],["job，主要用于负责批量处理(一次要处理指定数量任务)短暂的一次性(每个任务仅运行一次就结束)任务。job",{"_index":4663,"t":{"516":{"position":[[86452,58]]}}}],["job，观察效果，此时会发现，job会每次运行3个pod，总共执行了6个pod",{"_index":4693,"t":{"516":{"position":[[88556,45]]}}}],["job：abstractproject",{"_index":560,"t":{"90":{"position":[[1659,19]]}}}],["job：它创建出来的pod",{"_index":4398,"t":{"516":{"position":[[64872,43]]}}}],["john!。当请求/myservice时，doindex方法会被调用，返回一个jelli",{"_index":486,"t":{"83":{"position":[[719,52]]}}}],["join",{"_index":3457,"t":{"516":{"position":[[2647,4],[7865,4],[9164,4]]}}}],["join([\"key_start",{"_index":2457,"t":{"271":{"position":[[897,22]]}}}],["join([a.nam",{"_index":1213,"t":{"177":{"position":[[1634,14]]}}}],["join，用于快速部署kubernet",{"_index":3453,"t":{"516":{"position":[[2256,21]]},"518":{"position":[[91,21]]}}}],["jpeg|jpg|png|svg",{"_index":3086,"t":{"457":{"position":[[2392,21]]}}}],["jre10",{"_index":4893,"t":{"516":{"position":[[103600,5]]}}}],["js",{"_index":889,"t":{"139":{"position":[[239,9]]}}}],["json",{"_index":209,"t":{"34":{"position":[[1927,4]]},"52":{"position":[[78,4],[108,5]]},"193":{"position":[[914,7]]},"277":{"position":[[351,6],[410,6]]},"457":{"position":[[4885,4]]},"516":{"position":[[10868,4]]}}}],["jsonfield",{"_index":2092,"t":{"252":{"position":[[2091,9]]}}}],["jsonfield(encoder=none,decoder=none,**options)。其中的encoder和decoder为可选的编码器和解码器，用于自定义编码和解码方式。如果为该字段提供default",{"_index":2094,"t":{"252":{"position":[[2131,131]]}}}],["jsonp",{"_index":313,"t":{"52":{"position":[[86,5],[144,5]]}}}],["jsonpars",{"_index":2546,"t":{"277":{"position":[[452,10]]}}}],["jsonrender",{"_index":2544,"t":{"277":{"position":[[395,12]]}}}],["json接口为主，xml",{"_index":321,"t":{"54":{"position":[[38,23]]}}}],["json类型字段。django3.1新增。签名为class",{"_index":2093,"t":{"252":{"position":[[2101,29]]}}}],["jxfjt",{"_index":3908,"t":{"516":{"position":[[23654,5]]}}}],["jxmdq",{"_index":4462,"t":{"516":{"position":[[71722,5],[72201,5]]}}}],["k",{"_index":2638,"t":{"311":{"position":[[115,1]]},"402":{"position":[[420,1],[469,1]]}}}],["k224w",{"_index":4659,"t":{"516":{"position":[[86290,5]]}}}],["k8",{"_index":3451,"t":{"516":{"position":[[2220,6],[80436,3],[80469,3],[80498,3],[93497,3],[129072,3],[129254,3]]},"518":{"position":[[55,6]]},"577":{"position":[[86,3],[119,3],[148,3]]},"591":{"position":[[1575,3]]}}}],["k8s.gcr.io/$imagenam",{"_index":3586,"t":{"516":{"position":[[7281,21]]}}}],["keepal",{"_index":3024,"t":{"455":{"position":[[191,9],[646,10],[690,9],[726,12],[1059,9]]}}}],["keepaliv",{"_index":3283,"t":{"504":{"position":[[212,10],[236,35],[293,10],[3567,44],[3919,38],[3986,10],[4242,12],[4291,12],[4332,17]]},"506":{"position":[[67,24]]}}}],["keepalive_request",{"_index":3025,"t":{"455":{"position":[[213,18],[743,19],[787,21],[817,22],[1073,18]]}}}],["keepalive_timeout",{"_index":2968,"t":{"449":{"position":[[700,17]]},"455":{"position":[[252,17],[858,18],[891,20],[918,21],[1096,17]]}}}],["keepalived.conf",{"_index":3288,"t":{"504":{"position":[[530,15],[546,31],[1581,45]]}}}],["keepalived.servic",{"_index":3335,"t":{"504":{"position":[[3294,18],[4077,18],[4130,18],[4173,18],[4221,18],[4270,18]]}}}],["keepalived、nginx服务，然后通过手动停止nginx的方式模拟了nginx宕机情况，过了片刻后再次查询后台进程，我们会发现nginx",{"_index":3358,"t":{"506":{"position":[[292,91]]}}}],["keepalived主机下线，将虚拟ip漂移给从机，从机上线接管nginx",{"_index":3334,"t":{"504":{"position":[[3238,40]]}}}],["keepalived到linux",{"_index":3277,"t":{"504":{"position":[[0,36]]}}}],["keepalived在之前单体架构开发时，是一个用的较为频繁的高可用技术，比如mysql、redis、mq、proxy、tomcat等各处都会通过keepalived提供的vip",{"_index":3276,"t":{"502":{"position":[[243,104]]}}}],["keepalived实现了nginx",{"_index":3354,"t":{"506":{"position":[[92,27]]}}}],["keepalived对nginx做了主从热备之后，无论是遇到线上宕机还是机房断电等各类故障时，都能够确保应用系统能够为用户提供7x24",{"_index":3362,"t":{"506":{"position":[[679,77]]}}}],["keepalived已经为我们实现了nginx",{"_index":3359,"t":{"506":{"position":[[384,66]]}}}],["keepalived服务模拟了机器断电、硬件损坏等情况（因为机器断电等情况=主机中的keepalived进程消失），然后再次查询了一下本机的ip信息，很明显会看到vip",{"_index":3360,"t":{"506":{"position":[[451,103]]}}}],["keepalived的vip",{"_index":3352,"t":{"506":{"position":[[0,45]]}}}],["keepalived的vip机制，实现nginx",{"_index":3273,"t":{"502":{"position":[[172,36]]}}}],["key",{"_index":219,"t":{"34":{"position":[[2611,5]]},"271":{"position":[[946,5]]},"455":{"position":[[1204,3],[1524,3]]},"477":{"position":[[8,3]]},"516":{"position":[[29976,4],[30075,4],[53444,3],[53692,3],[53812,4],[53866,4],[53955,4],[54421,4],[56103,4],[56986,3],[57211,3],[58266,4],[60381,4],[61458,3],[63522,4],[63535,10],[64069,3],[64129,3],[65371,5],[70093,5],[85366,5],[87079,5],[90257,5],[105442,3],[119097,3],[125121,3]]},"541":{"position":[[599,4]]},"545":{"position":[[702,3],[927,3]]},"549":{"position":[[471,4]]},"562":{"position":[[967,4]]},"571":{"position":[[249,3],[309,3]]},"608":{"position":[[39,3]]}}}],["key.gpg",{"_index":3561,"t":{"516":{"position":[[6401,7],[6466,7]]}}}],["key1>=<value1",{"_index":221,"t":{"34":{"position":[[2629,15]]}}}],["key2>=<value2",{"_index":222,"t":{"34":{"position":[[2645,18]]}}}],["key:effect",{"_index":4342,"t":{"516":{"position":[[61411,10]]}}}],["key=/etc/kubernetes/pki/devman.key",{"_index":5177,"t":{"516":{"position":[[125653,34]]}}}],["key=value:effect",{"_index":4337,"t":{"516":{"position":[[61048,26],[61361,16]]},"567":{"position":[[393,26]]}}}],["key>=<valu",{"_index":263,"t":{"34":{"position":[[5321,13],[5335,13],[5349,13]]}}}],["key_funct",{"_index":2451,"t":{"269":{"position":[[2497,15]]},"271":{"position":[[759,12],[834,15]]}}}],["key_prefix",{"_index":2455,"t":{"271":{"position":[[643,18],[868,11],[920,11]]}}}],["keyerror",{"_index":1689,"t":{"197":{"position":[[3786,10]]}}}],["keyout",{"_index":4918,"t":{"516":{"position":[[105322,6]]},"606":{"position":[[61,6]]}}}],["keys_zone=cache_zone:30m",{"_index":3228,"t":{"487":{"position":[[363,24]]}}}],["keys_zone=name:s",{"_index":3175,"t":{"475":{"position":[[77,19]]}}}],["keys_zone：指定一个共享内存空间来存储热点key(1m可存储8000个key",{"_index":3190,"t":{"475":{"position":[[452,44]]}}}],["key为nodeenv",{"_index":4286,"t":{"516":{"position":[[53827,21]]}}}],["key为nodeenv,且value大于\"xxx",{"_index":4289,"t":{"516":{"position":[[53970,33]]}}}],["key为nodeenv,且value是\"xxx\"或\"yyi",{"_index":4287,"t":{"516":{"position":[[53881,38]]}}}],["key为请求的uri",{"_index":3239,"t":{"487":{"position":[[697,15],[1280,15]]}}}],["key和value是污点的标签，effect",{"_index":4338,"t":{"516":{"position":[[61075,39]]},"567":{"position":[[420,39]]}}}],["key对应的valu",{"_index":2513,"t":{"275":{"position":[[619,42]]}}}],["key获取缓存，若不存在则返回默认值non",{"_index":2508,"t":{"275":{"position":[[380,24]]}}}],["kill",{"_index":74,"t":{"23":{"position":[[613,4]]},"73":{"position":[[1052,4]]},"446":{"position":[[344,4]]},"516":{"position":[[44512,7],[44766,40],[47169,7],[49270,7]]}}}],["kind",{"_index":3745,"t":{"516":{"position":[[13626,5],[13681,5],[16233,5],[16993,5],[20860,5],[22839,5],[25127,5],[27056,5],[27753,5],[30249,5],[30298,4],[30408,5],[30928,4],[31542,5],[31918,5],[32663,5],[34217,5],[35600,5],[36287,5],[36622,5],[37472,5],[40347,5],[42473,5],[43932,5],[45106,5],[46313,5],[48067,5],[48691,5],[50086,5],[51408,5],[54139,5],[55808,5],[57499,5],[57991,5],[60101,5],[63396,5],[65129,5],[65855,5],[69573,5],[70358,5],[80804,5],[81756,5],[81972,5],[84978,5],[85610,5],[86612,5],[87612,5],[89675,5],[90855,5],[93836,5],[94526,5],[95605,5],[98110,5],[99690,5],[100547,5],[103115,5],[103382,5],[103659,5],[103827,5],[104307,5],[105521,5],[107406,5],[108671,5],[110560,5],[111769,5],[113134,5],[113332,5],[113530,5],[114177,5],[114591,5],[114737,5],[114883,5],[115725,5],[116047,5],[117947,5],[118437,5],[119442,5],[119881,5],[122604,5],[122894,5],[123649,5],[123781,5],[123849,5],[123990,5],[124121,5],[124189,5],[124563,5],[124698,5],[124766,5],[126295,5],[126467,5],[126599,5],[126668,5],[129025,5]]},"522":{"position":[[80,5],[135,5]]},"526":{"position":[[1178,5],[1938,5],[5805,5]]},"541":{"position":[[304,5]]},"545":{"position":[[1215,5]]},"549":{"position":[[196,5]]},"562":{"position":[[687,5]]},"579":{"position":[[78,5]]},"585":{"position":[[381,5],[597,5]]},"591":{"position":[[1914,5]]},"595":{"position":[[256,5]]},"608":{"position":[[118,5]]},"620":{"position":[[317,5]]},"644":{"position":[[0,5]]},"646":{"position":[[0,5]]},"649":{"position":[[0,5]]}}}],["kube",{"_index":3574,"t":{"516":{"position":[[6963,4],[6986,4],[7018,4],[7041,4],[8358,10],[9040,4],[12903,4],[12930,4],[12953,4],[15616,4],[15667,4],[15719,4],[15903,4],[15930,4],[15953,4],[17299,4],[17352,4],[17408,4],[17464,4],[17507,4],[17519,4],[17560,4],[17572,4],[17622,4],[17634,4],[17681,4],[17693,4],[17740,4],[17752,4],[17788,4],[17800,4],[17836,4],[17848,4],[80260,4],[80572,4],[92384,4],[92737,4],[92919,9],[93123,8],[93409,4],[93423,4],[93519,4],[97010,14]]},"526":{"position":[[561,4],[612,4],[664,4],[848,4],[875,4],[898,4],[2244,4],[2297,4],[2353,4],[2409,4],[2452,4],[2464,4],[2505,4],[2517,4],[2567,4],[2579,4],[2626,4],[2638,4],[2685,4],[2697,4],[2733,4],[2745,4],[2781,4],[2793,4]]},"575":{"position":[[45,4]]},"577":{"position":[[222,4]]},"591":{"position":[[462,4],[815,4],[997,9],[1201,8],[1487,4],[1501,4],[1597,4]]}}}],["kube_proxy_mode=\"ipv",{"_index":3571,"t":{"516":{"position":[[6710,22]]}}}],["kubeadm",{"_index":3450,"t":{"516":{"position":[[2204,7],[2212,7],[2227,14],[2247,8],[2403,7],[2505,7],[2521,7],[2606,9],[2639,7],[2848,8],[6554,7],[6876,7],[7443,7],[7857,7],[8561,9],[8602,7],[9092,12],[9135,7]]},"518":{"position":[[39,7],[47,7],[62,14],[82,8],[238,7],[340,7],[356,7]]}}}],["kubeadm搭建的集群，默认就会给master节点添加一个污点标记,所以pod就不会调度到mast",{"_index":4373,"t":{"516":{"position":[[63064,58]]}}}],["kubectl",{"_index":3565,"t":{"516":{"position":[[6588,7],[8058,7],[9023,7],[9206,7],[9276,7],[9359,7],[10915,7],[11003,7],[11080,7],[11249,9],[11337,7],[11500,7],[11526,7],[11573,7],[11649,7],[12185,7],[12756,7],[12838,7],[13024,7],[13068,7],[13170,7],[13208,7],[13289,7],[13393,7],[13485,7],[13830,7],[13969,7],[14153,7],[14354,13],[14409,7],[14485,13],[14542,7],[14695,7],[14726,7],[14936,7],[14977,7],[15019,7],[15522,7],[15818,10],[15853,7],[15988,10],[16028,7],[16097,10],[16187,7],[16481,10],[16526,7],[16810,7],[16895,7],[17049,10],[17082,10],[17280,7],[17950,7],[18054,7],[18193,7],[18302,7],[19885,7],[20224,7],[20324,7],[20522,7],[20639,7],[20747,7],[21035,10],[21071,10],[22133,7],[22232,7],[22337,7],[22486,7],[22633,7],[22746,7],[23029,23],[23281,7],[23414,7],[23541,7],[23754,7],[23896,7],[24079,7],[25000,7],[25385,10],[25424,10],[25766,7],[25919,7],[26459,7],[26654,7],[26936,7],[27259,10],[27295,10],[30134,7],[30173,7],[30229,7],[30379,7],[30903,7],[30961,7],[31506,7],[32234,7],[32407,7],[32564,7],[33129,7],[33291,7],[34705,7],[34817,7],[34948,7],[35079,7],[35926,7],[36014,7],[36245,7],[36828,7],[36930,7],[37836,7],[37936,7],[38071,7],[38258,7],[38364,7],[38513,7],[40840,7],[40976,7],[41440,7],[42881,7],[42975,7],[44203,7],[44307,7],[44873,7],[45358,7],[45472,7],[46084,7],[46637,7],[46747,7],[47362,7],[47632,7],[48980,7],[49096,7],[49389,7],[50254,7],[50370,7],[50583,7],[50714,7],[50846,7],[51215,7],[51295,7],[51602,7],[51726,7],[51960,7],[52103,7],[52225,7],[52398,7],[54498,7],[54623,7],[54840,7],[55165,7],[55388,7],[55527,7],[56180,7],[56307,7],[57706,7],[57818,7],[58462,7],[58584,7],[58736,7],[59206,7],[59317,7],[59437,7],[59809,7],[60543,7],[60678,7],[61303,24],[61335,7],[61385,7],[61432,7],[61755,7],[61840,7],[61910,7],[62112,7],[62183,7],[62262,7],[62332,7],[62587,7],[62652,7],[62730,7],[62800,7],[63678,7],[63843,7],[64017,7],[66098,7],[66260,7],[66502,7],[66730,7],[66835,7],[67203,7],[67343,7],[67688,7],[67883,7],[67999,7],[68154,7],[68224,7],[68371,7],[68517,9],[68640,7],[68742,7],[68902,7],[69020,7],[69194,7],[70609,7],[70785,7],[70959,7],[71078,7],[71329,7],[71459,7],[71591,7],[71961,7],[72070,7],[72812,7],[72957,7],[73966,7],[74111,7],[75351,7],[75572,7],[75771,7],[75907,7],[76013,7],[76074,7],[76135,7],[76305,7],[76467,7],[76761,7],[77191,7],[77259,7],[77425,7],[77664,7],[77930,7],[78283,7],[78407,7],[78673,7],[78994,7],[79107,29],[80185,7],[80241,7],[80322,9],[80376,7],[80553,7],[81205,7],[81307,7],[81401,7],[82033,7],[82146,7],[82366,7],[82864,7],[83304,7],[85846,7],[85955,7],[86151,7],[86369,7],[87957,7],[88043,7],[88313,7],[88625,7],[89392,7],[91197,7],[91299,7],[91445,7],[91636,7],[91839,7],[93393,7],[93475,7],[94789,7],[94894,7],[95250,7],[95854,7],[95964,7],[96204,7],[97818,7],[98348,7],[98477,7],[98683,7],[99019,7],[99944,7],[100052,7],[100724,7],[102623,7],[102701,7],[102880,7],[104012,7],[104074,7],[104604,7],[104706,7],[104856,7],[105403,7],[105904,7],[106008,7],[106181,7],[107965,7],[108063,7],[108278,9],[108329,7],[109311,7],[109409,7],[109636,7],[111032,7],[111120,7],[113742,7],[113883,7],[115043,7],[115204,7],[115446,7],[116383,7],[116474,7],[116656,7],[116885,7],[118109,7],[118209,7],[118716,7],[118810,7],[118938,7],[119584,7],[119672,7],[120129,7],[120215,7],[120360,7],[125364,7],[125535,7],[125713,7],[125832,7],[125962,7],[126155,7],[126755,7],[126957,7],[127075,7],[127337,7],[129312,7],[129410,7],[129859,7],[129959,7],[130129,7],[130291,7]]},"522":{"position":[[284,7],[423,7],[607,7]]},"524":{"position":[[37,13],[92,7],[168,13],[225,7],[378,7],[409,7],[619,7],[660,7],[702,7]]},"526":{"position":[[467,7],[763,10],[798,7],[933,10],[973,7],[1042,10],[1132,7],[1426,10],[1471,7],[1755,7],[1840,7],[1994,10],[2027,10],[2225,7],[2895,7],[2999,7],[3138,7],[3247,7],[4830,7],[5169,7],[5269,7],[5467,7],[5584,7],[5692,7],[5980,10],[6016,10]]},"530":{"position":[[23,7]]},"532":{"position":[[23,7]]},"535":{"position":[[23,7],[348,7]]},"539":{"position":[[23,7]]},"541":{"position":[[23,7]]},"543":{"position":[[23,7]]},"545":{"position":[[23,7]]},"547":{"position":[[23,7]]},"549":{"position":[[23,7]]},"551":{"position":[[23,7]]},"553":{"position":[[23,7]]},"555":{"position":[[23,7]]},"560":{"position":[[23,7],[134,7]]},"562":{"position":[[23,7],[395,7]]},"564":{"position":[[23,7]]},"567":{"position":[[23,7]]},"569":{"position":[[23,7]]},"571":{"position":[[23,7],[197,7]]},"573":{"position":[[26,7]]},"575":{"position":[[26,7]]},"577":{"position":[[26,7],[203,7]]},"581":{"position":[[26,7]]},"583":{"position":[[26,7]]},"585":{"position":[[26,7]]},"587":{"position":[[26,7]]},"589":{"position":[[26,7],[246,7],[744,7],[1184,7]]},"591":{"position":[[1471,7],[1553,7]]},"593":{"position":[[23,7]]},"595":{"position":[[23,7]]},"597":{"position":[[23,7]]},"599":{"position":[[23,7]]},"601":{"position":[[23,7]]},"608":{"position":[[0,7]]},"610":{"position":[[23,7]]},"612":{"position":[[23,7]]},"614":{"position":[[23,7]]},"618":{"position":[[23,7]]},"620":{"position":[[23,7]]},"622":{"position":[[23,7]]},"624":{"position":[[23,7]]},"626":{"position":[[23,7]]},"628":{"position":[[23,7]]},"630":{"position":[[23,7]]},"632":{"position":[[23,7]]},"634":{"position":[[23,7]]},"638":{"position":[[23,7]]},"640":{"position":[[23,7]]},"642":{"position":[[23,7]]}}}],["kubectl可以在nod",{"_index":3757,"t":{"516":{"position":[[14740,23]]},"524":{"position":[[423,23]]}}}],["kubectl或其他api客户端提交需要创建的pod信息给apiserv",{"_index":4141,"t":{"516":{"position":[[39253,42]]}}}],["kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl",{"_index":3688,"t":{"516":{"position":[[11259,77]]}}}],["kubectl的运行是需要进行配置的，它的配置文件是$home/.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在mast",{"_index":3758,"t":{"516":{"position":[[14766,102]]},"524":{"position":[[449,102]]}}}],["kubelet",{"_index":3428,"t":{"516":{"position":[[1264,7],[6571,7],[6785,7],[8631,7],[8835,11],[8865,7],[8936,9],[8964,7],[19605,8],[19669,8],[19746,8],[19806,8],[33531,8],[33593,8],[33668,8],[33726,8],[33796,8],[33901,8],[33974,8],[41208,8],[41300,8],[41363,8],[44394,8],[44466,8],[44524,8],[44631,8],[45651,8],[45748,8],[45811,8],[45896,8],[46835,8],[46940,8],[47011,8],[47085,8],[47194,8],[49186,8],[49282,8],[79958,7],[79981,7]]},"526":{"position":[[4550,8],[4614,8],[4691,8],[4751,8]]}}}],["kubelet_cgroup_arg",{"_index":3568,"t":{"516":{"position":[[6664,21]]}}}],["kubelet和dock",{"_index":3629,"t":{"516":{"position":[[8916,17]]}}}],["kubelet在监控到pod对象转为terminating状态的同时启动pod",{"_index":4150,"t":{"516":{"position":[[39651,43]]}}}],["kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod",{"_index":3437,"t":{"516":{"position":[[1655,47]]}}}],["kubelet请求apiserver将此pod资源的宽限期设置为0从而完成删除操作，此时pod",{"_index":4154,"t":{"516":{"position":[[39859,55]]}}}],["kubeproxi",{"_index":3429,"t":{"516":{"position":[[1310,9]]}}}],["kubernet",{"_index":3419,"t":{"516":{"position":[[565,13],[579,49],[680,82],[950,13],[1822,13],[2147,17],[2176,16],[2366,32],[2411,54],[2529,26],[2556,31],[2680,18],[2857,12],[2886,12],[2940,18],[6099,15],[6203,12],[6810,48],[6912,41],[7562,10],[10885,29],[10968,34],[11611,37],[12143,26],[13546,37],[15744,29],[16437,10],[30875,27],[30933,27],[31082,31],[39977,51],[41956,34],[43183,78],[43265,39],[111687,15],[111985,43],[120676,24],[121801,39],[121880,47],[125391,10],[126182,10],[126230,11],[127364,10],[127412,11],[128992,12],[129081,10],[129108,10],[129140,10],[129263,10],[129433,10],[129908,10],[130152,10],[130347,10],[130413,10]]},"518":{"position":[[11,16],[201,32],[246,54],[364,26],[391,31]]},"522":{"position":[[0,37]]},"526":{"position":[[689,29],[1382,10]]},"642":{"position":[[339,24]]}}}],["kubernetes.io/hostnam",{"_index":4315,"t":{"516":{"position":[[58326,22],[60435,22]]},"549":{"position":[[531,22]]},"562":{"position":[[1021,22]]}}}],["kubernetes.io/hostname，那就是以nod",{"_index":4307,"t":{"516":{"position":[[57294,43]]},"545":{"position":[[1010,43]]}}}],["kubernetes.io/servic",{"_index":5240,"t":{"516":{"position":[[130224,21],[130461,21],[130513,21],[130591,21]]}}}],["kubernetes中pod控制器的种类有很多，本章节只介绍一种：deploy",{"_index":3903,"t":{"516":{"position":[[23215,45]]}}}],["kubernetes中service有两种带来模型，一种是基于iptables的，一种是基于ipvs的两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipv",{"_index":3519,"t":{"516":{"position":[[4737,94]]}}}],["kubernetes中基本所有资源的一级属性都是一样的，主要包含5",{"_index":4039,"t":{"516":{"position":[[30826,37]]}}}],["kubernetes中完成的所有操作都是通过命令行工具kubectl完成的。其实，为了提供更丰富的用户体验，kubernetes还开发了一个基于web的用户界面（dashboard）。用户可以使用dashboard部署容器化的应用，还可以监控应用的状态，执行故障排查以及管理kubernet",{"_index":5210,"t":{"516":{"position":[[128668,156]]},"651":{"position":[[0,156]]}}}],["kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味着不方便直接采用pod的ip",{"_index":4731,"t":{"516":{"position":[[91937,88]]},"591":{"position":[[15,88]]}}}],["kubernetes中，pod是最小的控制单元，但是kubernetes很少直接控制pod，一般都是通过pod控制器来完成的。pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障时，会尝试进行重启或重建pod",{"_index":3902,"t":{"516":{"position":[[23093,121]]}}}],["kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernet",{"_index":3644,"t":{"516":{"position":[[9422,49]]},"520":{"position":[[12,49]]}}}],["kubernetes中，有很多类型的pod",{"_index":4391,"t":{"516":{"position":[[64579,48]]}}}],["kubernetes中，还存在一种和configmap非常类似的对象，称为secret",{"_index":5087,"t":{"516":{"position":[[119170,72]]}}}],["kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对kubernet",{"_index":5101,"t":{"516":{"position":[[120577,90]]},"642":{"position":[[240,90]]}}}],["kubernetes删除rs前，会将rs的replicasclear调整为0，等待所有的pod被删除后，在执行r",{"_index":4431,"t":{"516":{"position":[[68553,63]]}}}],["kubernetes和dock",{"_index":3493,"t":{"516":{"position":[[3656,17]]}}}],["kubernetes在v1.2版本开始，引入了deployment控制器。值得一提的是，这种控制器并不直接管理pod，而是通过管理replicaset来简介管理pod，即：deployment管理replicaset，replicaset管理pod。所以deployment比replicaset",{"_index":4440,"t":{"516":{"position":[[69295,170]]}}}],["kubernetes在集群启动之后，会默认创建几个namespac",{"_index":3767,"t":{"516":{"position":[[15470,34]]},"526":{"position":[[415,34]]}}}],["kubernetes在集群启动之后，集群中的各个组件也都是以pod",{"_index":3802,"t":{"516":{"position":[[17212,50]]},"526":{"position":[[2157,50]]}}}],["kubernetes就会对容器所在的pod进行重启，其实这是由pod的重启策略决定的，pod",{"_index":4230,"t":{"516":{"position":[[48360,70]]}}}],["kubernetes引入pv和pvc",{"_index":4991,"t":{"516":{"position":[[111420,25]]}}}],["kubernetes引入了volum",{"_index":4929,"t":{"516":{"position":[[106595,115]]},"616":{"position":[[12,115]]}}}],["kubernetes提供了ingress资源对象，ingress只需要一个nodeport或者一个lb就可以满足暴露多个servic",{"_index":4860,"t":{"516":{"position":[[101280,90]]}}}],["kubernetes提供了service资源，service会对提供同一个服务的多个pod进行聚合，并且提供一个统一的入口地址。通过访问service的入口地址就能访问到后面的pod",{"_index":4732,"t":{"516":{"position":[[92026,103]]},"591":{"position":[[104,103]]}}}],["kubernetes支持的格式有很多，比较常见的是wide、json、yaml",{"_index":3772,"t":{"516":{"position":[[16130,39]]},"526":{"position":[[1075,39]]}}}],["kubernetes期望可以实现通过监测pod的使用情况，实现pod数量的自动调整，于是就产生了horizont",{"_index":4557,"t":{"516":{"position":[[79189,58]]}}}],["kubernetes根据pv",{"_index":5076,"t":{"516":{"position":[[117734,33]]}}}],["kubernetes没有提供单独运行pod的命令，都是通过pod",{"_index":3813,"t":{"516":{"position":[[17902,39]]},"526":{"position":[[2847,39]]}}}],["kubernetes环境启动之后，master和node都会将自身的信息存储到etcd",{"_index":3431,"t":{"516":{"position":[[1403,55]]}}}],["kubernetes的volum",{"_index":4931,"t":{"516":{"position":[[106879,35]]},"616":{"position":[[296,35]]}}}],["kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如cpu",{"_index":3766,"t":{"516":{"position":[[15343,126]]},"526":{"position":[[288,126]]}}}],["kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在pod中，而kubernetes一般也不会直接管理pod，而是通过pod控制器来管理pod",{"_index":3646,"t":{"516":{"position":[[9559,83]]},"520":{"position":[[149,83]]}}}],["kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernet",{"_index":3645,"t":{"516":{"position":[[9472,86]]},"520":{"position":[[62,86]]}}}],["kubernetes的核心，就是学习如何对集群上的pod、pod控制器、servic",{"_index":3649,"t":{"516":{"position":[[9742,57]]},"520":{"position":[[332,57]]}}}],["kubernetes要求集群中的节点时间必须精确一直，这里使用chronyd",{"_index":3488,"t":{"516":{"position":[[3442,47]]}}}],["kubernetes设计了servic",{"_index":3938,"t":{"516":{"position":[[25607,47]]}}}],["kubernetes还提供了一种亲和性调度（affinity）。它在nodeselector的基础之上的进行了扩展，可以通过配置的形式，实现优先选择满足条件的nod",{"_index":4265,"t":{"516":{"position":[[52745,125]]}}}],["kubernetes集群中的所有的pod都是可以相互访问的。但是在实际中，可能不想让两个pod之间进行互相的访问，那此时就可以将两个pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的namespac",{"_index":3765,"t":{"516":{"position":[[15181,161]]},"526":{"position":[[126,161]]}}}],["kubernetes集群中部署一个nginx",{"_index":3762,"t":{"516":{"position":[[15055,45]]},"526":{"position":[[0,45]]}}}],["kubernetes集群主要是由控制节点(master)、工作节点(nod",{"_index":3422,"t":{"516":{"position":[[964,59]]}}}],["kubernetes集群安全的最关键点在于如何识别并认证客户端身份，它提供了3",{"_index":5107,"t":{"516":{"position":[[121017,50]]}}}],["kubernetes集群要求centos版本要在7.5",{"_index":3478,"t":{"516":{"position":[[3165,36]]}}}],["kubernetes：googl",{"_index":3417,"t":{"516":{"position":[[533,27]]}}}],["kwarg",{"_index":1177,"t":{"177":{"position":[[409,10],[444,9]]},"184":{"position":[[3259,8]]},"197":{"position":[[1195,10],[2543,10],[3319,10],[3865,30],[4026,10],[4409,30],[4476,21],[4630,10],[5214,10],[5285,9],[5350,30],[5505,10]]},"344":{"position":[[141,10]]}}}],["kwargs)方法快速实现列表视图，返回200",{"_index":1659,"t":{"197":{"position":[[2396,29]]}}}],["kwargs)方法快速实现创建资源的视图，成功返回201",{"_index":1676,"t":{"197":{"position":[[3153,34]]}}}],["kwargs.pop('parti",{"_index":1703,"t":{"197":{"position":[[4651,21]]}}}],["kwargs['parti",{"_index":1718,"t":{"197":{"position":[[5225,17]]}}}],["k对应的v原本是1，使用该方法后变为2",{"_index":2522,"t":{"275":{"position":[[944,33]]}}}],["k对应的v原本是2，使用该方法后变为1",{"_index":2524,"t":{"275":{"position":[[1015,33]]}}}],["l",{"_index":68,"t":{"23":{"position":[[381,1]]},"294":{"position":[[277,17]]},"311":{"position":[[119,1]]},"322":{"position":[[42,5]]},"402":{"position":[[917,2]]},"504":{"position":[[2993,2],[3220,2]]},"516":{"position":[[22510,1],[22657,1],[93495,1]]},"591":{"position":[[1573,1]]}}}],["label",{"_index":261,"t":{"34":{"position":[[5260,5],[5276,5],[5315,5],[5393,5],[5440,5]]},"151":{"position":[[662,5],[802,5]]},"177":{"position":[[246,13]]},"184":{"position":[[3078,5]]},"186":{"position":[[1473,11]]},"190":{"position":[[675,13],[934,11],[2255,13]]},"258":{"position":[[5323,5],[5329,42]]},"516":{"position":[[12605,5],[16568,7],[18443,7],[21111,6],[21174,9],[21237,20],[21258,27],[21286,37],[21324,49],[21374,10],[21548,31],[21592,18],[21611,5],[21644,10],[21665,10],[21805,10],[21970,24],[22141,5],[22194,7],[22240,5],[22305,7],[22377,6],[22415,6],[22531,6],[22569,6],[22679,6],[22754,5],[22804,7],[22886,7],[24194,7],[24473,7],[25253,7],[27863,7],[30666,6],[31968,7],[51223,5],[51264,7],[51303,5],[51345,7],[57563,7],[59517,6],[59848,6],[59894,6],[65200,7],[65307,10],[65467,7],[65993,7],[69644,7],[70029,10],[70189,7],[70496,7],[80978,7],[85048,7],[85302,10],[85462,7],[85734,7],[86676,7],[87013,10],[87177,7],[87747,7],[89743,7],[90325,7],[90911,7],[94664,7],[94933,6],[94966,6],[96289,7],[98770,7],[103256,7],[103525,7],[114421,7],[118277,7],[119738,7],[129064,7],[130434,7]]},"526":{"position":[[1513,7],[3388,7],[6056,6],[6119,9]]},"545":{"position":[[1279,7]]},"562":{"position":[[103,6],[434,6],[480,6]]},"579":{"position":[[252,7]]}}}],["label_low",{"_index":2349,"t":{"258":{"position":[[5443,11]]}}}],["labelselector",{"_index":4305,"t":{"516":{"position":[[56927,13],[57180,13],[58203,14],[60321,14]]},"545":{"position":[[643,13],[896,13]]},"549":{"position":[[408,14]]},"562":{"position":[[907,14]]}}}],["label中key=\"name\"且value=\"slav",{"_index":3885,"t":{"516":{"position":[[21699,39]]}}}],["label中的key=\"env\"且value不等于\"product",{"_index":3886,"t":{"516":{"position":[[21758,46]]}}}],["label中的key=\"name\"且value=\"master\"或\"slav",{"_index":3887,"t":{"516":{"position":[[21850,49]]}}}],["label中的key=\"name\"且value不等于\"frontend",{"_index":3889,"t":{"516":{"position":[[21924,45]]}}}],["label会以key/value键值对的形式附加到各种对象上，如node、pod、servic",{"_index":3880,"t":{"516":{"position":[[21184,52]]}}}],["label是kubernet",{"_index":3879,"t":{"516":{"position":[[21118,55]]},"526":{"position":[[6063,55]]}}}],["label等同于app_label.object_name。例如polls.question，polls是应用名，quest",{"_index":2348,"t":{"258":{"position":[[5372,70]]}}}],["label：标签，用于对pod进行分类，同一类pod",{"_index":3447,"t":{"516":{"position":[[2081,34]]}}}],["lambda匿名函数也不可用于default的调用对象，因为匿名函数不能被migr",{"_index":2183,"t":{"254":{"position":[[364,122]]}}}],["largeresultssetpagin",{"_index":1880,"t":{"225":{"position":[[490,25]]}}}],["largeresultssetpagination(pagenumberpagin",{"_index":1875,"t":{"225":{"position":[[236,48]]}}}],["last",{"_index":3102,"t":{"457":{"position":[[3380,4]]},"516":{"position":[[91356,4]]}}}],["last_nam",{"_index":2332,"t":{"258":{"position":[[3807,9]]}}}],["latest",{"_index":1787,"t":{"199":{"position":[[2874,12]]}}}],["latest(self",{"_index":1780,"t":{"199":{"position":[[2377,12]]}}}],["lb方式的缺点是每个service需要一个lb，浪费、麻烦，并且需要kubernet",{"_index":4859,"t":{"516":{"position":[[101228,51]]}}}],["le",{"_index":2779,"t":{"394":{"position":[[346,2],[385,2]]}}}],["learn",{"_index":581,"t":{"94":{"position":[[0,5]]}}}],["leas",{"_index":3731,"t":{"516":{"position":[[12913,5],[15626,5],[15913,5]]},"526":{"position":[[571,5],[858,5]]}}}],["least_conn",{"_index":3026,"t":{"455":{"position":[[332,10],[1926,14],[2020,11]]}}}],["least_tim",{"_index":3027,"t":{"455":{"position":[[356,10]]}}}],["leav",{"_index":1161,"t":{"175":{"position":[[1083,5]]}}}],["length",{"_index":2749,"t":{"374":{"position":[[22,8],[65,6],[149,8],[192,6]]}}}],["lete",{"_index":4321,"t":{"516":{"position":[[59288,5]]},"560":{"position":[[105,5]]}}}],["level",{"_index":3188,"t":{"475":{"position":[[401,26]]}}}],["levels=2:2",{"_index":3227,"t":{"487":{"position":[[352,10]]}}}],["levels=level",{"_index":3173,"t":{"475":{"position":[[38,15]]}}}],["lh",{"_index":2614,"t":{"303":{"position":[[2241,2]]}}}],["lib@mast",{"_index":632,"t":{"107":{"position":[[353,12]]}}}],["libc6",{"_index":185,"t":{"34":{"position":[[1121,5]]}}}],["librari",{"_index":587,"t":{"97":{"position":[[197,14]]},"99":{"position":[[123,26]]},"105":{"position":[[32,23]]}}}],["library('mi",{"_index":631,"t":{"107":{"position":[[340,12]]}}}],["library('your",{"_index":590,"t":{"99":{"position":[[79,36]]}}}],["library/developer/commandlinetools/library/frameworks/python3.framework/versions/3.8/lib/python3.8/config",{"_index":2550,"t":{"277":{"position":[[631,106],[749,106]]}}}],["library/doc",{"_index":310,"t":{"48":{"position":[[241,12]]}}}],["libraryresourc",{"_index":608,"t":{"101":{"position":[[592,15]]}}}],["lifecycl",{"_index":3992,"t":{"516":{"position":[[28770,10],[42114,10],[42207,10],[42285,10],[42633,10]]}}}],["limit",{"_index":3988,"t":{"516":{"position":[[28553,7],[37597,7],[81071,7]]},"579":{"position":[[345,7]]}}}],["limit_query_param",{"_index":1892,"t":{"225":{"position":[[1301,17]]}}}],["limit_r",{"_index":3166,"t":{"459":{"position":[[797,10]]}}}],["limitoffsetpagin",{"_index":1898,"t":{"225":{"position":[[1443,21],[1604,21]]}}}],["limitrang",{"_index":3793,"t":{"516":{"position":[[16748,10]]},"526":{"position":[[1693,10]]}}}],["limitranger：用于资源限制管理，作用于namespace上，确保对pod",{"_index":5202,"t":{"516":{"position":[[128125,47]]}}}],["limitrange针对namespac",{"_index":3791,"t":{"516":{"position":[[16692,33]]},"526":{"position":[[1637,33]]}}}],["limits：用于限制运行时容器的最大占用资源，当容器占用资源超过limit",{"_index":4107,"t":{"516":{"position":[[37311,50]]}}}],["limit参数名，默认'limit",{"_index":1893,"t":{"225":{"position":[[1319,18]]}}}],["limit限制，默认non",{"_index":1897,"t":{"225":{"position":[[1388,16]]}}}],["line1",{"_index":3678,"t":{"516":{"position":[[10530,5]]}}}],["line2",{"_index":3679,"t":{"516":{"position":[[10536,5]]}}}],["link",{"_index":3627,"t":{"516":{"position":[[8793,4],[8813,4]]}}}],["linux",{"_index":135,"t":{"27":{"position":[[1053,5]]},"300":{"position":[[0,11],[12,13],[31,9],[46,5]]},"303":{"position":[[290,5],[343,20],[494,5]]},"317":{"position":[[115,23]]},"451":{"position":[[899,5],[1180,5]]},"516":{"position":[[298,33],[3250,5],[4044,19],[4279,19],[4384,13],[4400,27]]}}}],["linux中的pushd和popd",{"_index":2573,"t":{"300":{"position":[[57,17]]}}}],["lion",{"_index":2992,"t":{"451":{"position":[[78,5]]}}}],["lion.club",{"_index":3252,"t":{"493":{"position":[[140,10]]}}}],["list",{"_index":699,"t":{"110":{"position":[[1801,5]]},"112":{"position":[[315,4]]},"118":{"position":[[185,4],[284,5]]},"197":{"position":[[2491,4]]},"199":{"position":[[34,6],[156,6],[1721,10],[2801,10]]},"275":{"position":[[778,4]]},"516":{"position":[[5534,4],[6898,4],[10190,8],[122819,7],[123067,7],[123428,7],[126057,4],[126459,7]]}}}],["list(request",{"_index":1658,"t":{"197":{"position":[[2365,23]]}}}],["list(self",{"_index":1662,"t":{"197":{"position":[[2516,10]]},"199":{"position":[[268,10]]}}}],["list.add(it.hash",{"_index":821,"t":{"118":{"position":[[245,17]]}}}],["list<executor",{"_index":711,"t":{"112":{"position":[[209,14]]}}}],["list_display",{"_index":1113,"t":{"173":{"position":[[92,12]]},"175":{"position":[[897,12]]},"177":{"position":[[1133,12]]}}}],["list_filt",{"_index":1117,"t":{"173":{"position":[[199,11]]},"175":{"position":[[980,11]]},"177":{"position":[[1174,11]]}}}],["list_per_pag",{"_index":1121,"t":{"173":{"position":[[272,13]]},"175":{"position":[[1472,13]]},"177":{"position":[[1259,13]]}}}],["listen",{"_index":1080,"t":{"170":{"position":[[416,6],[976,6]]},"449":{"position":[[928,6]]},"455":{"position":[[1379,6],[1756,6],[2121,6]]},"457":{"position":[[711,6],[854,6],[1000,6],[1144,6],[2105,6],[3525,6],[4381,6],[4633,6]]},"487":{"position":[[76,6],[166,6],[518,6],[943,6]]},"493":{"position":[[74,6],[525,6]]},"506":{"position":[[190,6]]}}}],["listfield",{"_index":1315,"t":{"184":{"position":[[2652,9]]}}}],["listfield(child",{"_index":1316,"t":{"184":{"position":[[2662,17]]}}}],["listmodelmixin",{"_index":1670,"t":{"197":{"position":[[2911,14]]}}}],["listmodelmixin(object",{"_index":1661,"t":{"197":{"position":[[2463,23]]}}}],["live",{"_index":4131,"t":{"516":{"position":[[38901,17],[43305,8],[43855,11],[43898,8],[43962,8],[44225,8],[44252,8],[44333,8],[44562,8],[44646,8],[44894,8],[44950,8],[45067,8],[45136,8],[45380,8],[45412,8],[45498,8],[45600,8],[45911,8],[46105,8],[46166,8],[46276,8],[46343,8],[46659,8],[46689,8],[46772,8],[47100,8],[47232,8],[47382,8],[47441,8],[47525,15],[48030,8],[48097,8],[49201,8],[49320,8]]}}}],["livenessprob",{"_index":3995,"t":{"516":{"position":[[28868,14],[43419,13],[43538,14],[43646,14],[43745,14],[44087,14],[45266,14],[46471,14],[48225,14],[48846,14]]}}}],["ln",{"_index":2549,"t":{"277":{"position":[[625,2]]},"516":{"position":[[92488,2],[93556,2],[96556,2],[97182,2],[97542,2]]},"591":{"position":[[566,2],[1634,2]]}}}],["load",{"_index":2478,"t":{"273":{"position":[[789,4]]},"510":{"position":[[196,7]]}}}],["loadbalanc",{"_index":4785,"t":{"516":{"position":[[94309,47]]}}}],["loadbalancer和nodeport很相似，目的都是向外部暴露一个端口，区别在于loadbalanc",{"_index":4846,"t":{"516":{"position":[[100287,120]]}}}],["loadbalancer类型的servic",{"_index":4845,"t":{"516":{"position":[[100263,23]]}}}],["loader_files=numb",{"_index":3181,"t":{"475":{"position":[[198,21]]}}}],["loader_files：重启nginx载入缓存时，每次加载的个数，默认100",{"_index":3197,"t":{"475":{"position":[[730,40]]}}}],["loader_sleep=tim",{"_index":3182,"t":{"475":{"position":[[220,19]]}}}],["loader_sleep：每次载入时，允许的最大时间上限，默认200m",{"_index":3198,"t":{"475":{"position":[[771,37]]}}}],["loader_threshold=tim",{"_index":3183,"t":{"475":{"position":[[240,23]]}}}],["loader_threshold：一次载入后，停顿的时间间隔，默认50m",{"_index":3199,"t":{"475":{"position":[[809,38]]}}}],["local",{"_index":6,"t":{"15":{"position":[[0,13]]},"42":{"position":[[230,6]]},"88":{"position":[[1371,11]]},"264":{"position":[[2116,9],[2251,9]]},"328":{"position":[[158,13]]},"362":{"position":[[20,27],[59,12]]}}}],["localaddress:port",{"_index":4746,"t":{"516":{"position":[[92540,17],[93608,17]]},"591":{"position":[[618,17],[1686,17]]}}}],["localhost",{"_index":1081,"t":{"170":{"position":[[439,10],[1001,10]]},"449":{"position":[[961,10]]},"457":{"position":[[4406,10]]},"504":{"position":[[722,9],[1771,9]]}}}],["localhost:8080/imag",{"_index":3121,"t":{"457":{"position":[[4504,22]]}}}],["localize=false时，它在html表现为numberinput标签，否则是textinput类型。例子：储存最大不超过999，带有2位小数位精度的数，定义如下：models.decimalfield",{"_index":2080,"t":{"252":{"position":[[1257,110]]}}}],["locat",{"_index":1082,"t":{"170":{"position":[[450,8],[888,8],[1039,8],[1178,8]]},"197":{"position":[[3714,12]]},"267":{"position":[[132,11]]},"269":{"position":[[160,11],[419,11],[619,11],[655,8],[701,8],[1345,11],[1541,11],[1731,11],[1918,11],[2034,11],[2282,11]]},"449":{"position":[[982,13],[996,8],[1383,8]]},"455":{"position":[[1421,8],[1798,8],[2163,8]]},"457":{"position":[[803,8],[950,8],[1093,8],[1237,8],[1545,8],[1574,8],[1761,8],[1773,8],[1933,8],[1945,9],[1961,8],[2235,8],[2381,8],[2521,8],[2601,8],[2616,8],[2639,8],[2940,8],[3015,8],[3052,8],[3112,8],[3161,8],[3417,8],[3460,8],[3591,8],[3659,8],[3711,8],[3761,8],[3936,8],[3997,8],[4428,8],[4675,8],[5479,8],[5518,8],[5689,8],[5955,8],[6061,8],[6156,8],[6270,8]]},"487":{"position":[[122,8],[212,8],[558,8],[1091,8]]},"493":{"position":[[390,8]]},"508":{"position":[[188,35]]}}}],["location、if、limit_except",{"_index":3134,"t":{"457":{"position":[[5081,28]]}}}],["location为你的memecached守护进程所在的主机ip和进程端口，格式为ip:port的字符串。或者unix:path的形式，在unix",{"_index":2424,"t":{"269":{"position":[[1096,81]]}}}],["location请求地址重写阶段，当ngx_rewrite指令用于loc",{"_index":3369,"t":{"508":{"position":[[235,54]]}}}],["location，loc",{"_index":3403,"t":{"510":{"position":[[773,17]]}}}],["lock",{"_index":2647,"t":{"320":{"position":[[58,4]]}}}],["locmem",{"_index":2417,"t":{"269":{"position":[[685,6]]}}}],["locmem、filesystem",{"_index":2453,"t":{"271":{"position":[[255,17]]}}}],["log",{"_index":83,"t":{"25":{"position":[[7,4],[243,4]]},"510":{"position":[[1070,3],[1107,24]]},"516":{"position":[[12403,4],[107558,5],[107612,4],[107774,5],[107808,5],[107822,4],[107845,5],[107909,4],[108288,17],[108337,4],[108829,4],[108978,4],[109001,5],[109024,4],[109644,4],[110713,4],[110862,4],[110885,5],[110908,4]]}}}],["log.txt",{"_index":2591,"t":{"303":{"position":[[1226,8],[1291,14],[1306,7]]}}}],["log_by_lua",{"_index":3411,"t":{"510":{"position":[[1043,10]]}}}],["log_by_lua_fil",{"_index":3412,"t":{"510":{"position":[[1054,15]]}}}],["log_format",{"_index":2956,"t":{"449":{"position":[[411,10]]}}}],["logger.info(\"request_count_test",{"_index":2698,"t":{"344":{"position":[[152,31],[220,31]]}}}],["login",{"_index":788,"t":{"114":{"position":[[591,5]]}}}],["logrot",{"_index":509,"t":{"88":{"position":[[144,10]]}}}],["logs/access.log",{"_index":4943,"t":{"516":{"position":[[107720,18],[108937,18],[110821,18]]}}}],["long.valueof(s",{"_index":814,"t":{"116":{"position":[[527,18]]}}}],["lookups(self",{"_index":1189,"t":{"177":{"position":[[762,13]]}}}],["lru",{"_index":2418,"t":{"269":{"position":[[752,23]]}}}],["ls",{"_index":32,"t":{"21":{"position":[[47,2]]},"23":{"position":[[854,3]]},"38":{"position":[[63,2],[205,2]]},"303":{"position":[[2237,2]]},"432":{"position":[[205,2],[237,2],[288,2]]},"516":{"position":[[109776,2],[111265,2],[119010,2],[120407,2]]},"642":{"position":[[70,2]]}}}],["ls5lh",{"_index":3810,"t":{"516":{"position":[[17715,5]]},"526":{"position":[[2660,5]]}}}],["lsmod",{"_index":3516,"t":{"516":{"position":[[4695,5],[5297,5]]}}}],["lt",{"_index":2777,"t":{"394":{"position":[[233,2],[270,2]]},"396":{"position":[[141,2],[208,2]]},"398":{"position":[[69,2],[119,2]]},"427":{"position":[[731,2]]},"429":{"position":[[956,2]]},"516":{"position":[[53512,2],[53759,2]]}}}],["lua",{"_index":3386,"t":{"510":{"position":[[239,20]]}}}],["m",{"_index":51,"t":{"21":{"position":[[528,1]]},"62":{"position":[[222,1],[280,5],[295,1]]},"230":{"position":[[49,1],[226,1]]},"264":{"position":[[1082,2]]},"325":{"position":[[444,2],[454,1]]}}}],["m,n",{"_index":354,"t":{"62":{"position":[[206,6]]}}}],["m9gsj",{"_index":4642,"t":{"516":{"position":[[83690,5],[83900,5],[84132,5],[84569,5]]},"589":{"position":[[1570,5],[1780,5],[2012,5],[2449,5]]}}}],["m=\"packag",{"_index":49,"t":{"21":{"position":[[464,10]]}}}],["mac",{"_index":2773,"t":{"392":{"position":[[396,3]]}}}],["machin",{"_index":4069,"t":{"516":{"position":[[33861,7],[41273,7],[45716,7],[46900,7]]}}}],["maco",{"_index":3062,"t":{"457":{"position":[[325,5]]}}}],["mac下，默认安装的是python2.7，可能由于某些原因会找不到django",{"_index":1930,"t":{"230":{"position":[[152,44]]}}}],["mail",{"_index":938,"t":{"143":{"position":[[250,5]]}}}],["mail.nginx",{"_index":3065,"t":{"457":{"position":[[417,10],[1334,10]]}}}],["main",{"_index":2945,"t":{"449":{"position":[[2,9],[422,4],[610,5],[1255,4]]},"516":{"position":[[38841,10],[40432,4],[42554,4]]}}}],["maintain",{"_index":97,"t":{"27":{"position":[[25,10],[594,10],[912,10]]}}}],["make",{"_index":187,"t":{"34":{"position":[[1131,4],[1378,4],[1406,4]]},"249":{"position":[[439,4]]},"504":{"position":[[385,4],[393,4]]}}}],["make_key(key",{"_index":2456,"t":{"271":{"position":[[854,13]]}}}],["make_key.func",{"_index":2452,"t":{"269":{"position":[[2513,15]]}}}],["makemigr",{"_index":1950,"t":{"230":{"position":[[1033,14]]}}}],["male",{"_index":1381,"t":{"186":{"position":[[1290,7]]}}}],["manag",{"_index":570,"t":{"92":{"position":[[648,12]]},"258":{"position":[[1664,7]]},"516":{"position":[[17588,7]]},"526":{"position":[[2533,7]]}}}],["manage.pi",{"_index":1060,"t":{"168":{"position":[[7,9],[47,9]]},"170":{"position":[[266,9]]},"186":{"position":[[35,9]]},"190":{"position":[[366,9]]},"230":{"position":[[278,9],[596,9],[1023,9],[1096,9],[1140,9]]},"232":{"position":[[8,9],[229,10],[291,9],[306,9]]},"254":{"position":[[581,9]]},"269":{"position":[[51,9]]},"289":{"position":[[384,12]]}}}],["manage.py目录下运行命令，也可以有路径表示manage.py。python",{"_index":1935,"t":{"230":{"position":[[553,42]]}}}],["managedfield",{"_index":4037,"t":{"516":{"position":[[30692,13]]}}}],["manager:v1.17.4",{"_index":3576,"t":{"516":{"position":[[7002,15]]}}}],["manager_files=numb",{"_index":3178,"t":{"475":{"position":[[129,22]]}}}],["manager_files：manag",{"_index":3194,"t":{"475":{"position":[[613,37]]}}}],["manager_sleep=tim",{"_index":3179,"t":{"475":{"position":[[152,20]]}}}],["manager_sleep：manag",{"_index":3195,"t":{"475":{"position":[[651,37]]}}}],["manager_threshold=tim",{"_index":3180,"t":{"475":{"position":[[173,24]]}}}],["manager_threshold：manag",{"_index":3196,"t":{"475":{"position":[[689,40]]}}}],["manager去调度node节点安装nginx",{"_index":3436,"t":{"516":{"position":[[1629,25]]}}}],["manager的进程移除数据，也可以通过purg",{"_index":3193,"t":{"475":{"position":[[584,28]]}}}],["mandatory.yaml",{"_index":4878,"t":{"516":{"position":[[102381,22]]}}}],["mani",{"_index":1154,"t":{"175":{"position":[[709,4],[717,4]]},"186":{"position":[[2609,7]]}}}],["manualselector",{"_index":4674,"t":{"516":{"position":[[86910,15],[87666,15],[90173,15]]}}}],["many=tru",{"_index":1361,"t":{"186":{"position":[[523,10],[3308,10]]},"197":{"position":[[743,10],[2717,10],[2829,10]]},"199":{"position":[[359,10]]}}}],["manytomanyfield",{"_index":2226,"t":{"256":{"position":[[837,21]]}}}],["manytomanyfield(to",{"_index":2227,"t":{"256":{"position":[[865,19]]}}}],["manytomanyfield`的``through",{"_index":1151,"t":{"175":{"position":[[565,26]]}}}],["map",{"_index":3658,"t":{"516":{"position":[[10107,25],[31239,6]]}}}],["map<str",{"_index":709,"t":{"112":{"position":[[159,11]]}}}],["map[string]str",{"_index":4030,"t":{"516":{"position":[[30477,18],[30673,18]]}}}],["mapmyshopgoods.objects.filter(con",{"_index":2392,"t":{"264":{"position":[[1860,34]]}}}],["markdown",{"_index":606,"t":{"101":{"position":[[490,8]]}}}],["masq",{"_index":4752,"t":{"516":{"position":[[92670,4],[92698,4],[92726,4],[93738,4],[93766,4],[93794,4],[96598,4],[96626,4],[96654,4],[97224,4],[97252,4],[97280,4],[97601,4],[97629,4],[97657,4]]},"591":{"position":[[748,4],[776,4],[804,4],[1816,4],[1844,4],[1872,4]]}}}],["master",{"_index":722,"t":{"112":{"position":[[462,9],[1418,10]]},"139":{"position":[[555,8],[1106,8],[1243,8]]},"151":{"position":[[668,8]]},"451":{"position":[[118,6]]},"496":{"position":[[51,6],[97,6],[155,6],[183,6],[214,6]]},"498":{"position":[[20,6],[52,6],[73,6],[90,6],[124,6]]},"504":{"position":[[1117,6]]},"510":{"position":[[222,16]]},"516":{"position":[[1024,22],[2595,10],[2652,7],[2870,6],[3381,6],[7396,22],[8026,14],[8106,6],[8122,6],[8213,22],[8582,19],[17481,6],[17534,6],[17596,6],[17863,6],[21833,8],[80683,6]]},"526":{"position":[[2426,6],[2479,6],[2541,6],[2808,6]]},"577":{"position":[[333,6]]}}}],["master01",{"_index":3469,"t":{"516":{"position":[[2983,8],[30216,8],[30366,8],[31493,8],[32219,8],[32392,8],[32549,8],[33114,8],[33276,8],[34690,8],[34802,8],[35064,8],[35913,8],[36001,8],[36232,8],[36815,8],[36917,8],[37823,8],[37923,8],[38058,8],[38189,8],[38245,8],[38351,8],[38500,8],[40827,8],[40963,8],[41427,8],[41754,8],[41833,8],[42868,8],[42962,8],[43128,8],[44190,8],[44294,8],[44860,8],[45345,8],[45459,8],[46071,8],[46624,8],[46734,8],[47349,8],[47619,8],[48008,8],[48967,8],[49083,8],[49376,8],[50241,8],[50357,8],[50570,8],[50656,8],[50701,8],[50833,8],[51202,8],[51282,8],[51589,8],[51713,8],[51947,8],[52041,8],[52090,8],[52212,8],[52385,8],[54485,8],[54610,8],[54827,8],[55152,8],[55312,8],[55375,8],[55514,8],[56167,8],[56294,8],[57693,8],[57805,8],[58449,8],[58571,8],[58723,8],[59121,8],[59193,8],[59304,8],[59424,8],[59796,8],[60530,8],[60665,8],[61742,8],[61827,8],[61897,8],[62099,8],[62170,8],[62249,8],[62319,8],[62574,8],[62639,8],[62717,8],[62787,8],[63665,8],[63830,8],[64004,8],[66085,8],[66247,8],[66489,8],[66717,8],[66822,8],[67190,8],[67330,8],[67675,8],[67870,8],[67986,8],[68211,8],[68358,8],[68627,8],[68729,8],[68889,8],[69007,8],[69181,8],[70596,8],[70772,8],[70946,8],[71065,8],[71316,8],[71446,8],[71578,8],[71948,8],[72057,8],[72799,8],[72944,8],[73953,8],[74098,8],[75338,8],[75758,8],[75894,8],[76292,8],[76454,8],[76748,8],[77178,8],[77412,8],[77651,8],[77917,8],[78270,8],[78394,8],[78660,8],[78981,8],[79525,8],[79595,8],[79724,8],[79784,8],[80169,8],[80225,8],[80360,8],[80440,8],[80537,8],[81189,8],[81291,8],[81385,8],[82017,8],[82130,8],[82353,8],[82851,8],[83291,8],[85833,8],[85942,8],[86138,8],[86356,8],[87944,8],[88030,8],[88300,8],[88612,8],[89379,8],[91184,8],[91286,8],[91432,8],[91623,8],[91826,8],[93380,8],[93462,8],[94776,8],[94881,8],[95390,8],[95442,8],[95494,8],[95841,8],[95951,8],[96191,8],[96534,8],[96698,8],[97160,8],[97310,8],[97520,8],[97687,8],[97805,8],[98335,8],[98464,8],[98670,8],[99006,8],[99200,8],[99931,8],[100039,8],[100711,8],[100822,8],[101944,8],[101992,8],[102071,8],[102217,8],[102593,8],[102671,8],[102850,8],[103999,8],[104061,8],[104591,8],[104693,8],[104843,8],[105891,8],[105995,8],[106168,8],[107952,8],[108050,8],[108241,8],[108316,8],[109298,8],[109396,8],[109584,8],[109623,8],[110468,8],[111019,8],[111107,8],[111252,8],[113729,8],[113870,8],[115030,8],[115191,8],[115433,8],[116370,8],[116461,8],[116643,8],[116872,8],[118096,8],[118196,8],[118703,8],[118797,8],[118925,8],[119271,8],[119340,8],[119571,8],[119659,8],[120116,8],[120202,8],[120347,8],[124908,8],[124957,8],[125088,8],[125204,8],[125349,8],[125520,8],[125698,8],[125817,8],[125947,8],[126140,8],[126740,8],[126942,8],[127060,8],[127322,8],[128882,8],[129299,8],[129397,8],[129844,8],[129944,8],[130116,8],[130278,8]]},"530":{"position":[[10,8]]},"532":{"position":[[10,8]]},"535":{"position":[[10,8],[335,8]]},"537":{"position":[[10,8]]},"539":{"position":[[10,8]]},"541":{"position":[[10,8]]},"543":{"position":[[10,8]]},"545":{"position":[[10,8]]},"547":{"position":[[10,8]]},"549":{"position":[[10,8]]},"551":{"position":[[10,8]]},"553":{"position":[[10,8]]},"555":{"position":[[10,8]]},"558":{"position":[[10,8]]},"560":{"position":[[10,8],[121,8]]},"562":{"position":[[10,8],[382,8]]},"564":{"position":[[10,8]]},"567":{"position":[[10,8]]},"569":{"position":[[10,8]]},"571":{"position":[[10,8],[184,8]]},"573":{"position":[[10,8]]},"575":{"position":[[10,8]]},"577":{"position":[[10,8],[90,8],[187,8]]},"581":{"position":[[10,8]]},"583":{"position":[[10,8]]},"585":{"position":[[10,8]]},"587":{"position":[[10,8]]},"589":{"position":[[10,8],[233,8],[731,8],[1171,8]]},"591":{"position":[[1458,8],[1540,8]]},"593":{"position":[[10,8]]},"595":{"position":[[10,8]]},"597":{"position":[[10,8]]},"599":{"position":[[10,8]]},"601":{"position":[[10,8]]},"610":{"position":[[10,8]]},"612":{"position":[[10,8]]},"614":{"position":[[10,8]]},"618":{"position":[[10,8]]},"620":{"position":[[10,8]]},"622":{"position":[[10,8]]},"624":{"position":[[10,8]]},"626":{"position":[[10,8]]},"628":{"position":[[10,8]]},"630":{"position":[[10,8]]},"632":{"position":[[10,8]]},"634":{"position":[[10,8]]},"638":{"position":[[10,8]]},"640":{"position":[[10,8]]},"642":{"position":[[10,8]]}}}],["master为主机，backup",{"_index":3304,"t":{"504":{"position":[[1073,37],[2122,37]]}}}],["master主进程的的pid存放在nginx.pid",{"_index":2995,"t":{"451":{"position":[[174,29]]}}}],["master的计算资源。jenkins官方文档推荐，当文件大小为5∼100mb",{"_index":979,"t":{"151":{"position":[[174,54]]}}}],["master：集群控制节点，每个集群需要至少一个mast",{"_index":3442,"t":{"516":{"position":[[1836,39]]}}}],["match",{"_index":2659,"t":{"328":{"position":[[9,40]]},"457":{"position":[[795,7],[942,7],[1085,7],[1229,7]]},"516":{"position":[[52613,5],[54995,5],[55110,5],[58928,5]]},"535":{"position":[[178,5],[293,5]]},"555":{"position":[[215,5]]}}}],["match(pattern",{"_index":2660,"t":{"328":{"position":[[60,14]]}}}],["match:可选参数，一个正则表达式，用于过滤文件名。只匹配基本文件名，不匹配路径。例如foo.*\\.txt$，只匹配文件名foo23.txt，不匹配bar.txt与foo23.png",{"_index":2160,"t":{"252":{"position":[[5564,93]]}}}],["match=\"foo",{"_index":2166,"t":{"252":{"position":[[5903,14]]}}}],["match='hello",{"_index":2677,"t":{"328":{"position":[[494,12]]}}}],["match=non",{"_index":2154,"t":{"252":{"position":[[5342,11]]}}}],["match_al",{"_index":3083,"t":{"457":{"position":[[2246,11]]}}}],["matchexpress",{"_index":4278,"t":{"516":{"position":[[53405,16],[53653,16],[53794,17],[54373,17],[56047,17],[56947,16],[57061,24],[57194,16],[58218,17],[60336,17],[65333,17],[70055,17],[85328,17],[87041,17],[90234,17]]},"541":{"position":[[543,17]]},"545":{"position":[[663,16],[777,24],[910,16]]},"549":{"position":[[423,17]]},"562":{"position":[[922,17]]}}}],["matchfield",{"_index":4277,"t":{"516":{"position":[[53375,11],[53623,11]]}}}],["matchlabel",{"_index":3934,"t":{"516":{"position":[[25209,12],[57049,11],[57235,11],[65292,12],[65945,12],[70014,12],[70448,12],[80930,12],[85287,12],[85686,12],[86998,12],[87697,12],[90204,12],[94616,12],[103208,12],[103476,12]]},"545":{"position":[[765,11],[951,11]]},"579":{"position":[[204,12]]}}}],["math3:3.4.1",{"_index":768,"t":{"114":{"position":[[79,13]]}}}],["maven",{"_index":443,"t":{"78":{"position":[[473,12]]},"90":{"position":[[1679,32]]},"94":{"position":[[48,11]]}}}],["maven</nam",{"_index":438,"t":{"78":{"position":[[301,12]]}}}],["max",{"_index":3923,"t":{"516":{"position":[[24428,3],[24449,3]]}}}],["max_age=3600",{"_index":2489,"t":{"273":{"position":[[1551,13]]}}}],["max_connect",{"_index":2448,"t":{"269":{"position":[[2414,19]]}}}],["max_conns=1000",{"_index":3040,"t":{"455":{"position":[[1014,14]]}}}],["max_conns=numb",{"_index":3030,"t":{"455":{"position":[[501,16]]}}}],["max_digit",{"_index":1294,"t":{"184":{"position":[[2062,11]]}}}],["max_digits=5",{"_index":2081,"t":{"252":{"position":[[1368,13]]}}}],["max_entri",{"_index":2412,"t":{"269":{"position":[[241,14],[2440,14]]},"271":{"position":[[296,11],[355,11],[434,11],[503,11]]}}}],["max_fails=2",{"_index":3042,"t":{"455":{"position":[[1046,12]]}}}],["max_fails=num",{"_index":3032,"t":{"455":{"position":[[564,15]]}}}],["max_length",{"_index":1319,"t":{"184":{"position":[[2756,10]]}}}],["max_length=100",{"_index":1498,"t":{"190":{"position":[[946,15]]},"252":{"position":[[1653,15],[3005,15],[4375,15],[5410,15]]}}}],["max_length=20",{"_index":1240,"t":{"184":{"position":[[651,14]]},"186":{"position":[[1400,14],[2978,14]]},"188":{"position":[[498,14],[3060,14]]},"190":{"position":[[621,14],[2199,14]]}}}],["max_length=200",{"_index":1386,"t":{"186":{"position":[[1548,15]]}}}],["max_length=non",{"_index":1258,"t":{"184":{"position":[[1278,16],[2697,16]]}}}],["max_length参数，表示字符串长度不能超过该值。默认的表单标签是text",{"_index":2071,"t":{"252":{"position":[[555,58]]}}}],["max_length最大长度254位。使用这个字段的好处是，可以使用django内置的emailvalid",{"_index":2084,"t":{"252":{"position":[[1534,76]]}}}],["max_limit",{"_index":1896,"t":{"225":{"position":[[1378,9]]}}}],["max_page_s",{"_index":1878,"t":{"225":{"position":[[338,13],[757,13],[937,13]]}}}],["max_size=2g",{"_index":3229,"t":{"487":{"position":[[388,11]]}}}],["max_size=s",{"_index":3177,"t":{"475":{"position":[[113,15]]}}}],["max_size：允许缓存的最大存储空间，超出后会基于lru算法移除缓存，nginx会创建一个cach",{"_index":3192,"t":{"475":{"position":[[531,52]]}}}],["max_valu",{"_index":1323,"t":{"184":{"position":[[2832,9]]}}}],["max_value=2147483647",{"_index":1495,"t":{"190":{"position":[[739,21],[837,21],[2321,21],[2410,21]]}}}],["max_value=non",{"_index":1293,"t":{"184":{"position":[[2030,15]]}}}],["max_workers=50",{"_index":2714,"t":{"344":{"position":[[642,15]]}}}],["maxlin",{"_index":698,"t":{"110":{"position":[[1791,9]]}}}],["maxpod",{"_index":4611,"t":{"516":{"position":[[82200,7],[82423,7]]},"589":{"position":[[80,7],[303,7]]}}}],["maxreplica",{"_index":4605,"t":{"516":{"position":[[81854,12]]},"585":{"position":[[479,12]]}}}],["maxsurg",{"_index":4445,"t":{"516":{"position":[[69884,9],[72641,9],[73889,9]]}}}],["maxunavail",{"_index":4446,"t":{"516":{"position":[[69927,15],[73903,15],[85202,15]]}}}],["maxunavailable：用来指定在升级过程中不可用pod的最大数量，默认为25",{"_index":4474,"t":{"516":{"position":[[72596,44]]}}}],["mcast_src_ip",{"_index":3310,"t":{"504":{"position":[[1222,12],[2271,12]]}}}],["media_root/uploads/2015/01/30",{"_index":2119,"t":{"252":{"position":[[3339,46]]}}}],["media_root/uploads`目录，media_root由你在set",{"_index":2117,"t":{"252":{"position":[[3229,54]]}}}],["media_root/user_<id>/<filenam",{"_index":2123,"t":{"252":{"position":[[3563,40]]}}}],["member",{"_index":2239,"t":{"256":{"position":[[1558,7]]}}}],["membership(models.model",{"_index":2244,"t":{"256":{"position":[[1676,25]]}}}],["membership(models.model)定义了一个新的模型，用来保存person和group",{"_index":2251,"t":{"256":{"position":[[1999,82]]}}}],["memcach",{"_index":2419,"t":{"269":{"position":[[776,10],[1243,11],[1440,10],[2108,48]]},"271":{"position":[[572,9]]}}}],["memcached不是django",{"_index":2420,"t":{"269":{"position":[[801,49]]}}}],["memcached和pylibmc",{"_index":2422,"t":{"269":{"position":[[904,18]]}}}],["memcached安装好了后，还要安装python操作memcached的依赖库，最常用的是python",{"_index":2421,"t":{"269":{"position":[[851,52]]}}}],["memcached支持分布式服务，可能同时在几台机器上运行，将它们的ip地址都加入到loc",{"_index":2436,"t":{"269":{"position":[[1770,57]]}}}],["memcached运行在/tmp/memcached.sock，不带unix:/前缀，依赖pylibmc",{"_index":2433,"t":{"269":{"position":[[1585,57]]}}}],["memcached运行在localhost",{"_index":2425,"t":{"269":{"position":[[1178,31]]}}}],["memcached运行在本地的unix",{"_index":2430,"t":{"269":{"position":[[1380,22]]}}}],["memori",{"_index":3990,"t":{"516":{"position":[[28628,7],[28678,8],[28737,7],[37642,7],[37711,7],[37775,7],[38735,13],[80428,7]]},"577":{"position":[[78,7]]}}}],["memory(byt",{"_index":4578,"t":{"516":{"position":[[80414,13],[80600,13]]},"577":{"position":[[64,13],[250,13]]}}}],["mesos：apache的一个资源统一管控的工具，需要和marathon",{"_index":3416,"t":{"516":{"position":[[492,40]]}}}],["messag",{"_index":3845,"t":{"516":{"position":[[19444,7],[24844,7],[33375,7],[41060,7],[52481,7],[58826,7]]},"526":{"position":[[4389,7]]},"555":{"position":[[113,7]]}}}],["meta",{"_index":1142,"t":{"175":{"position":[[373,5]]},"177":{"position":[[345,5]]},"190":{"position":[[275,5],[1114,5],[1276,5],[1423,5],[1629,5],[1899,5]]},"258":{"position":[[225,5],[1090,5],[2055,5],[3858,5],[4834,5]]}}}],["metadata",{"_index":262,"t":{"34":{"position":[[5282,32]]},"516":{"position":[[13642,9],[13691,9],[16249,9],[17009,9],[20870,9],[22849,9],[25144,9],[25243,9],[27070,9],[27779,9],[30311,8],[30440,8],[30987,8],[31928,9],[32673,9],[34227,9],[35610,9],[36632,9],[37482,9],[40357,9],[42483,9],[43942,9],[45116,9],[46323,9],[48077,9],[48701,9],[50096,9],[51418,9],[54149,9],[55818,9],[57509,9],[58001,9],[60111,9],[63406,9],[65151,9],[65457,9],[65872,9],[65983,9],[69595,9],[70179,9],[70375,9],[70486,9],[80821,9],[80968,9],[81786,9],[84999,9],[85452,9],[85626,9],[85724,9],[86627,9],[87167,9],[87622,9],[87737,9],[89694,9],[90085,9],[90315,9],[90869,9],[90982,9],[93879,9],[94543,9],[94654,9],[95619,9],[98124,9],[99704,9],[100561,9],[103132,9],[103246,9],[103399,9],[103515,9],[103673,9],[103841,9],[104321,9],[105535,9],[107416,9],[108681,9],[110570,9],[111792,9],[113157,9],[113355,9],[113553,9],[114205,9],[114619,9],[114765,9],[114911,9],[115735,9],[116057,9],[117963,9],[118447,9],[119455,9],[119891,9],[122661,9],[122958,9],[123713,9],[124061,9],[124627,9],[126352,9],[126531,9],[129054,9]]},"522":{"position":[[96,9],[145,9]]},"526":{"position":[[1194,9],[1954,9],[5815,9]]},"541":{"position":[[314,9]]},"545":{"position":[[1225,9]]},"549":{"position":[[206,9]]},"562":{"position":[[697,9]]},"579":{"position":[[95,9],[242,9]]},"585":{"position":[[411,9]]},"591":{"position":[[1957,9]]},"595":{"position":[[270,9]]},"608":{"position":[[132,9]]},"620":{"position":[[345,9]]},"644":{"position":[[64,9]]},"646":{"position":[[71,9]]},"649":{"position":[[64,9]]}}}],["meta选项非常重要，和auth",{"_index":2312,"t":{"258":{"position":[[3131,30]]}}}],["meta，然后在这个meta",{"_index":2262,"t":{"258":{"position":[[52,77]]}}}],["method",{"_index":3018,"t":{"453":{"position":[[27,7],[55,6]]}}}],["methodnotallow",{"_index":1922,"t":{"227":{"position":[[1137,16]]}}}],["metric",{"_index":4561,"t":{"516":{"position":[[79458,9],[79476,7],[79559,9],[79804,7],[80142,9],[80272,7],[80704,10],[129499,7],[129673,7]]},"575":{"position":[[57,7]]}}}],["mib/gib，将用于dock",{"_index":3991,"t":{"516":{"position":[[28643,28]]}}}],["middlewar",{"_index":2481,"t":{"273":{"position":[[883,10]]}}}],["migrat",{"_index":1061,"t":{"168":{"position":[[17,7],[57,7]]},"230":{"position":[[1150,7]]},"232":{"position":[[115,11]]}}}],["migrate失败，此时可将none改为false或其它的值，只要不是non",{"_index":2187,"t":{"254":{"position":[[591,42]]}}}],["min_lenght",{"_index":1320,"t":{"184":{"position":[[2772,10]]}}}],["min_length=non",{"_index":1251,"t":{"184":{"position":[[1116,16],[1213,16],[1295,16],[1365,16],[1461,16],[2680,16]]}}}],["min_valu",{"_index":1324,"t":{"184":{"position":[[2846,9]]},"190":{"position":[[761,10],[859,10],[2008,13],[2056,13]]}}}],["min_value=0",{"_index":1506,"t":{"190":{"position":[[2343,12],[2432,12]]}}}],["min_value=non",{"_index":1286,"t":{"184":{"position":[[1883,15],[1937,15],[2046,15]]}}}],["mini",{"_index":2606,"t":{"303":{"position":[[2071,4]]}}}],["minimumreplicasavail",{"_index":3925,"t":{"516":{"position":[[24673,24]]}}}],["minpod",{"_index":4610,"t":{"516":{"position":[[82192,7],[82415,7]]},"589":{"position":[[72,7],[295,7]]}}}],["minreadysecond",{"_index":3920,"t":{"516":{"position":[[24382,16]]}}}],["minreplica",{"_index":4604,"t":{"516":{"position":[[81830,12]]},"585":{"position":[[455,12]]}}}],["minut",{"_index":1837,"t":{"215":{"position":[[317,7]]}}}],["mirror",{"_index":435,"t":{"78":{"position":[[251,9],[261,8],[407,9],[417,10]]},"516":{"position":[[5939,9]]}}}],["mirror.qiniu.com/kubernet",{"_index":4883,"t":{"516":{"position":[[102486,27]]}}}],["mirrorof>central</mirrorof",{"_index":440,"t":{"78":{"position":[[378,28]]}}}],["miss",{"_index":3214,"t":{"485":{"position":[[35,5]]}}}],["mixin",{"_index":1636,"t":{"197":{"position":[[1206,57],[1632,35]]},"199":{"position":[[1379,6],[2109,6]]}}}],["mixins.retrievemodelmixin",{"_index":1773,"t":{"199":{"position":[[1527,26],[2257,26]]}}}],["mixin扩展类使用，是列表视图与详情视图获取数据的基础，默认返回queryset",{"_index":1640,"t":{"197":{"position":[[1468,70]]}}}],["mixin的list",{"_index":1660,"t":{"197":{"position":[[2426,25]]}}}],["mkdir",{"_index":196,"t":{"34":{"position":[[1283,5]]},"46":{"position":[[939,5]]},"504":{"position":[[55,5],[2701,5],[3630,5]]},"516":{"position":[[5812,5],[7676,5],[101957,5],[110163,5],[112845,5]]}}}],["mktqv",{"_index":4464,"t":{"516":{"position":[[71771,5]]}}}],["mkyewbdlw",{"_index":5255,"t":{"516":{"position":[[131621,9]]}}}],["mm",{"_index":1423,"t":{"188":{"position":[[1149,3]]},"254":{"position":[[1312,2]]},"516":{"position":[[10379,2]]}}}],["mode",{"_index":4773,"t":{"516":{"position":[[93437,7],[113927,5],[115270,5],[115490,5],[116722,5],[116936,5]]},"591":{"position":[[1515,7]]},"620":{"position":[[67,5]]},"624":{"position":[[89,5]]},"626":{"position":[[67,5]]},"632":{"position":[[89,5]]},"634":{"position":[[74,5]]}}}],["model",{"_index":1137,"t":{"175":{"position":[[217,7],[379,5],[735,6],[746,5],[856,5]]},"177":{"position":[[137,7],[351,5]]},"190":{"position":[[281,5],[317,5],[1120,5],[1282,5],[1429,5],[1635,5],[1905,5]]},"197":{"position":[[3266,5],[3971,5],[4577,5],[5451,5]]},"230":{"position":[[690,6]]},"252":{"position":[[6083,6],[6333,6]]},"256":{"position":[[1417,6]]},"258":{"position":[[152,6],[967,6],[1881,6],[3724,6],[4763,6]]}}}],["model_admin",{"_index":1190,"t":{"177":{"position":[[785,13]]}}}],["model_name>_set，也就是源模型的名字+下划线+set",{"_index":2281,"t":{"258":{"position":[[837,66]]}}}],["modelform",{"_index":1136,"t":{"175":{"position":[[202,9]]}}}],["modelmultiplechoicefield",{"_index":1168,"t":{"177":{"position":[[83,25],[220,25]]}}}],["models.autofield(primary_key=true)。如果你为某个字段设置了primary_key=true，则当前字段变为主键，并关闭django自动生成id",{"_index":2203,"t":{"254":{"position":[[1434,94]]}}}],["models.autofield(primary_key=true)，这是一个自增字段，从1开始计数。如果你非要自己设置主键，那么请务必将字段设置为primary_key=true。django",{"_index":2062,"t":{"252":{"position":[[95,125]]}}}],["models.charfield(max_length=100",{"_index":2331,"t":{"258":{"position":[[3774,32],[3819,32]]}}}],["models.charfield(max_length=128",{"_index":2238,"t":{"256":{"position":[[1525,32]]}}}],["models.charfield(max_length=20",{"_index":1227,"t":{"184":{"position":[[159,31]]}}}],["models.charfield(max_length=200",{"_index":1941,"t":{"230":{"position":[[743,32],[933,32]]}}}],["models.charfield(max_length=50",{"_index":2236,"t":{"256":{"position":[[1459,31]]}}}],["models.charfield(max_length=64",{"_index":2250,"t":{"256":{"position":[[1952,31]]}}}],["models.checkconstraint(check=models.q(age__gte=18",{"_index":2342,"t":{"258":{"position":[[4856,51]]}}}],["models.datefield(auto_now_add=tru",{"_index":2077,"t":{"252":{"position":[[1001,45]]}}}],["models.datefield(verbose_nam",{"_index":1230,"t":{"184":{"position":[[222,37]]}}}],["models.datetimefield('d",{"_index":1943,"t":{"230":{"position":[[787,26]]}}}],["models.filefield(upload_to='upload",{"_index":2118,"t":{"252":{"position":[[3293,38]]}}}],["models.filefield(upload_to='uploads/%y/%m/%d",{"_index":2120,"t":{"252":{"position":[[3395,47]]}}}],["models.filefield(upload_to=user_directory_path",{"_index":2125,"t":{"252":{"position":[[3699,47]]}}}],["models.filepathfield(path=images_path",{"_index":2173,"t":{"252":{"position":[[6200,38]]}}}],["models.foreignkey",{"_index":2211,"t":{"256":{"position":[[298,18],[1846,18]]}}}],["models.foreignkey('self",{"_index":2209,"t":{"256":{"position":[[172,25]]}}}],["models.foreignkey(foo",{"_index":2284,"t":{"258":{"position":[[1035,22]]}}}],["models.foreignkey(group",{"_index":2245,"t":{"256":{"position":[[1724,24]]}}}],["models.foreignkey(person",{"_index":2246,"t":{"256":{"position":[[1784,25]]}}}],["models.foreignkey(quest",{"_index":1946,"t":{"230":{"position":[[865,27]]},"258":{"position":[[1989,27]]}}}],["models.imagefield(upload_to='booktest",{"_index":1234,"t":{"184":{"position":[[389,39]]}}}],["models.index(fields=['first_nam",{"_index":2334,"t":{"258":{"position":[[3926,35]]}}}],["models.index(fields=['last_nam",{"_index":2333,"t":{"258":{"position":[[3876,33]]}}}],["models.integerfield",{"_index":2265,"t":{"258":{"position":[[197,21],[4806,21]]}}}],["models.integerfield(default=0",{"_index":1232,"t":{"184":{"position":[[268,30],[330,30]]},"230":{"position":[[974,30]]}}}],["models.manytomanyfield",{"_index":2240,"t":{"256":{"position":[[1568,23]]}}}],["models.pi",{"_index":1963,"t":{"232":{"position":[[139,9]]}}}],["models.smallintegerfield(choic",{"_index":2189,"t":{"254":{"position":[[734,34]]}}}],["models.textfield",{"_index":2297,"t":{"258":{"position":[[1925,18]]}}}],["models.uuidfield(primary_key=tru",{"_index":2176,"t":{"252":{"position":[[6378,34]]}}}],["modelserializer与常规的seri",{"_index":1486,"t":{"190":{"position":[[82,37]]}}}],["modprob",{"_index":3514,"t":{"516":{"position":[[4639,8],[4995,8],[5013,8],[5034,8],[5056,8],[5077,8]]}}}],["module='common",{"_index":775,"t":{"114":{"position":[[266,15]]}}}],["month=3",{"_index":1994,"t":{"236":{"position":[[676,8],[990,8]]}}}],["more",{"_index":4228,"t":{"516":{"position":[[48021,4],[110271,4],[112901,4],[117164,4],[117218,4],[119020,4],[120448,4],[120487,4]]},"636":{"position":[[14,4],[68,4]]},"642":{"position":[[111,4],[150,4]]}}}],["mount",{"_index":270,"t":{"42":{"position":[[49,5],[55,14],[99,5],[132,5],[419,5],[480,5],[1140,5]]},"516":{"position":[[18961,7],[24579,7]]},"526":{"position":[[3906,7]]}}}],["mountpath",{"_index":3984,"t":{"516":{"position":[[28233,10],[107624,10],[107834,10],[108841,10],[108990,10],[110725,10],[110874,10],[115935,10],[116257,10],[118591,10],[120025,10]]}}}],["mount的绝对路径，应少于512",{"_index":3985,"t":{"516":{"position":[[28251,27]]}}}],["mtizndu2",{"_index":5089,"t":{"516":{"position":[[119391,8],[119541,8]]}}}],["multiplechoicefield",{"_index":1307,"t":{"184":{"position":[[2415,19]]}}}],["multiplechoicefield(choic",{"_index":1308,"t":{"184":{"position":[[2435,28]]}}}],["mvn",{"_index":444,"t":{"78":{"position":[[486,3],[553,3]]}}}],["my/demo",{"_index":60,"t":{"21":{"position":[[708,7]]}}}],["my_cache_t",{"_index":2410,"t":{"269":{"position":[[172,17]]}}}],["my_key",{"_index":2529,"t":{"275":{"position":[[1177,16]]}}}],["my_project.my_app.utils.custom_exception_handl",{"_index":1905,"t":{"227":{"position":[[380,50]]}}}],["my_view",{"_index":2473,"t":{"273":{"position":[[572,7]]}}}],["my_view(request",{"_index":2055,"t":{"249":{"position":[[371,17]]},"273":{"position":[[1431,17],[1569,17],[1864,17]]}}}],["myapp",{"_index":2270,"t":{"258":{"position":[[485,7]]}}}],["mycontrol",{"_index":469,"t":{"83":{"position":[[179,12],[494,39]]}}}],["mydata",{"_index":236,"t":{"34":{"position":[[3679,6]]}}}],["mydata:/data",{"_index":234,"t":{"34":{"position":[[3649,12]]}}}],["mydir",{"_index":172,"t":{"34":{"position":[[242,7],[264,7]]}}}],["mygoods(request",{"_index":2350,"t":{"264":{"position":[[16,16]]}}}],["mygoods_page_goods(request",{"_index":2395,"t":{"264":{"position":[[1929,27],[1990,27]]}}}],["mymodel(models.model",{"_index":2116,"t":{"252":{"position":[[3204,22],[3667,22],[6170,22]]}}}],["mypath",{"_index":114,"t":{"27":{"position":[[631,6],[657,7],[736,7],[1188,6],[1214,7]]}}}],["mypermiss",{"_index":1828,"t":{"211":{"position":[[502,13]]}}}],["mypermission(basepermiss",{"_index":1826,"t":{"211":{"position":[[224,29]]}}}],["myservice/something?name=john时，dosomething方法会被调用，返回一个文本响应hello",{"_index":485,"t":{"83":{"position":[[651,67]]}}}],["myservice/something请求，通过@queryparamet",{"_index":482,"t":{"83":{"position":[[547,61]]}}}],["myservice请求，返回一个jelli",{"_index":484,"t":{"83":{"position":[[618,32]]}}}],["mysit",{"_index":1955,"t":{"232":{"position":[[0,7],[18,7],[172,7],[327,7]]}}}],["mysite.url",{"_index":1966,"t":{"232":{"position":[[398,13]]}}}],["mysite/__init__.pi",{"_index":1967,"t":{"232":{"position":[[412,27]]}}}],["mysite/asgi.pi",{"_index":1970,"t":{"232":{"position":[[648,25]]}}}],["mysite/settings.py：django",{"_index":1968,"t":{"232":{"position":[[504,25]]}}}],["mysite/urls.py：django",{"_index":1969,"t":{"232":{"position":[[575,21]]}}}],["mysite/wsgi.pi",{"_index":1974,"t":{"232":{"position":[[719,25]]}}}],["mysql",{"_index":2324,"t":{"258":{"position":[[3565,6]]},"516":{"position":[[40540,5],[40641,9],[41338,5],[41401,5]]}}}],["mysql(192.168.90.14)和redis(192.168.90.15",{"_index":4157,"t":{"516":{"position":[[40241,59]]}}}],["mysql和mariadb数据库时，db_t",{"_index":2273,"t":{"258":{"position":[[612,39]]}}}],["mysshvolum",{"_index":293,"t":{"42":{"position":[[1001,11]]}}}],["myurl",{"_index":2731,"t":{"356":{"position":[[119,5]]}}}],["myurl=\"http://baidu.net/shel",{"_index":2730,"t":{"356":{"position":[[78,31]]}}}],["myuseradmin(useradmin",{"_index":1160,"t":{"175":{"position":[[832,23]]}}}],["myuuidmodel(models.model",{"_index":2175,"t":{"252":{"position":[[6346,26]]}}}],["myview(request",{"_index":2498,"t":{"273":{"position":[[2117,16]]}}}],["myview(view",{"_index":2472,"t":{"273":{"position":[[554,13]]}}}],["n",{"_index":69,"t":{"23":{"position":[[385,11],[398,1]]},"62":{"position":[[254,1],[332,5],[380,1],[425,4],[448,1]]},"186":{"position":[[669,4]]},"317":{"position":[[30,1],[57,1]]},"322":{"position":[[101,5]]},"325":{"position":[[178,2],[423,3],[427,12],[440,3],[450,1]]},"328":{"position":[[644,1]]},"369":{"position":[[72,13],[181,4]]},"400":{"position":[[198,1],[231,1]]},"420":{"position":[[32,2]]},"516":{"position":[[13062,1],[13306,1],[17297,1],[18211,1],[18330,1],[19903,1],[20250,1],[20342,1],[20542,1],[20668,1],[20765,1],[22174,1],[22273,1],[22364,1],[22503,1],[22650,1],[22784,1],[23477,1],[23559,1],[23774,1],[23916,1],[24110,1],[25029,1],[25857,1],[25947,1],[26549,1],[26682,1],[26968,1],[32424,1],[32595,1],[33333,1],[34847,1],[34968,1],[35105,1],[36036,1],[36957,1],[37967,1],[38395,1],[38549,1],[41016,1],[41476,1],[43007,1],[44348,1],[44909,1],[45518,1],[46125,1],[46790,1],[47400,1],[49137,1],[49425,1],[50401,1],[50877,1],[51761,1],[52243,1],[52438,1],[54667,1],[54888,1],[55571,1],[56351,1],[57859,1],[58627,1],[58784,1],[59480,1],[59827,1],[60725,1],[61881,1],[61928,1],[62303,1],[62357,1],[62771,1],[62818,1],[63696,1],[63861,1],[66290,1],[66519,1],[66761,1],[66853,1],[67248,1],[67361,1],[67706,1],[67914,1],[68015,1],[68189,1],[68279,1],[68387,1],[68673,1],[68759,1],[68935,1],[69038,1],[70819,1],[70975,1],[71096,1],[71378,1],[71493,1],[71609,1],[71996,1],[72088,1],[72875,1],[72975,1],[74029,1],[74129,1],[75367,1],[75816,1],[75953,1],[76368,1],[76487,1],[76777,1],[77250,1],[77307,1],[77470,1],[77680,1],[77948,1],[78328,1],[78423,1],[78691,1],[80258,1],[80570,1],[81265,1],[81366,1],[81433,1],[82163,1],[82383,1],[82888,1],[83322,1],[85971,1],[86169,1],[88060,1],[88331,1],[88643,1],[91321,1],[91463,1],[91654,1],[93421,1],[93517,1],[94912,1],[95299,1],[95981,1],[96244,1],[98513,1],[98724,1],[99068,1],[100069,1],[102718,1],[102897,1],[104091,1],[104736,1],[104891,1],[106039,1],[106217,1],[108097,1],[108362,1],[109443,1],[109669,1],[111149,1],[115221,1],[116492,1],[116673,1],[116901,1],[118240,1],[118841,1],[118970,1],[119290,1],[119359,1],[119704,1],[120243,1],[120397,1],[125980,1],[127093,1],[129431,1],[129906,1],[130150,1],[130345,1]]},"526":{"position":[[2242,1],[3156,1],[3275,1],[4848,1],[5195,1],[5287,1],[5487,1],[5613,1],[5710,1]]},"532":{"position":[[67,1]]},"535":{"position":[[71,1]]},"541":{"position":[[67,1]]},"545":{"position":[[67,1]]},"549":{"position":[[64,1]]},"553":{"position":[[66,1]]},"555":{"position":[[71,1]]},"562":{"position":[[66,1],[413,1]]},"567":{"position":[[70,1]]},"569":{"position":[[41,1]]},"571":{"position":[[41,1]]},"575":{"position":[[43,1]]},"577":{"position":[[220,1]]},"581":{"position":[[86,1]]},"583":{"position":[[85,1]]},"585":{"position":[[58,1]]},"589":{"position":[[43,1],[263,1],[768,1],[1202,1]]},"591":{"position":[[1499,1],[1595,1]]},"595":{"position":[[40,1]]},"599":{"position":[[53,1]]},"601":{"position":[[58,1]]},"612":{"position":[[54,1]]},"614":{"position":[[59,1]]},"624":{"position":[[40,1]]},"630":{"position":[[41,1]]},"632":{"position":[[40,1]]},"634":{"position":[[39,1]]},"640":{"position":[[51,1]]},"642":{"position":[[60,1]]}}}],["n,n+1",{"_index":364,"t":{"62":{"position":[[474,8]]}}}],["name",{"_index":57,"t":{"21":{"position":[[685,4]]},"23":{"position":[[97,12]]},"25":{"position":[[146,4]]},"42":{"position":[[1123,4]]},"83":{"position":[[282,5],[360,4]]},"107":{"position":[[81,9]]},"110":{"position":[[171,5],[213,5],[1037,5],[1060,9]]},"139":{"position":[[302,5],[1127,5]]},"141":{"position":[[147,5],[514,9]]},"151":{"position":[[245,24]]},"155":{"position":[[355,6]]},"168":{"position":[[93,6]]},"173":{"position":[[114,7]]},"175":{"position":[[401,8],[912,8],[1026,9],[1047,8],[1192,8],[1377,8]]},"240":{"position":[[125,4]]},"256":{"position":[[1452,4],[1518,4]]},"258":{"position":[[4273,9],[4519,8]]},"273":{"position":[[840,6]]},"364":{"position":[[58,4],[68,6]]},"444":{"position":[[13,4]]},"455":{"position":[[44,4]]},"516":{"position":[[8076,4],[11362,6],[11453,20],[12853,4],[13312,4],[13652,5],[13701,5],[13751,5],[13998,4],[14039,4],[15544,4],[15868,4],[16051,4],[16301,5],[16554,5],[17019,5],[17321,4],[18217,4],[18336,5],[19917,4],[20348,4],[20548,4],[20880,5],[20947,5],[20966,5],[21685,4],[21825,4],[21900,4],[22053,4],[22384,4],[22538,4],[22859,5],[22961,5],[22980,5],[23565,4],[23780,4],[23930,4],[24116,5],[25154,5],[25312,5],[25961,4],[26696,4],[27080,5],[27797,5],[27882,5],[27944,5],[28182,5],[28328,5],[28487,5],[29100,5],[29623,5],[29724,5],[30053,5],[30716,4],[31618,4],[31938,5],[32008,5],[32042,5],[32430,4],[32683,5],[32744,5],[32814,5],[34237,5],[34290,5],[34324,5],[34853,4],[35620,5],[35669,5],[35801,5],[35835,5],[36343,4],[36642,5],[36693,5],[36748,5],[37048,5],[37087,5],[37492,5],[37547,5],[37973,4],[38409,4],[40367,5],[40426,5],[40476,5],[40529,5],[40670,5],[41485,4],[42493,5],[42548,5],[42598,5],[43021,4],[43952,5],[44011,5],[44052,5],[44915,4],[45126,5],[45190,5],[45231,5],[46131,4],[46333,5],[46395,5],[46436,5],[47406,4],[48087,5],[48149,5],[48190,5],[48711,5],[48770,5],[48811,5],[49431,4],[50106,5],[50160,5],[50415,4],[50891,4],[51428,5],[51486,5],[51775,4],[52257,4],[54159,5],[54224,5],[54681,4],[55585,4],[55828,5],[55894,5],[56357,4],[57519,5],[57607,5],[57865,4],[58011,5],[58075,5],[58633,4],[59486,4],[59855,4],[60121,5],[60189,5],[60739,4],[61942,4],[62371,4],[62832,4],[63416,5],[63470,5],[63710,4],[63875,4],[65167,5],[65510,5],[65882,5],[66036,5],[66304,4],[66525,4],[66859,4],[67367,4],[67712,4],[68029,4],[68401,4],[69044,4],[69611,5],[70232,5],[70385,5],[70539,5],[70825,4],[70981,4],[71102,4],[71499,4],[71615,4],[72094,4],[72984,4],[74138,4],[75373,4],[76501,4],[76783,4],[77694,4],[77954,4],[78437,4],[78697,4],[80393,4],[80584,4],[80831,5],[81021,5],[81439,4],[81509,4],[81585,4],[81796,5],[81989,5],[82169,4],[82392,4],[82897,4],[83331,4],[85015,5],[85505,5],[85636,5],[85777,5],[85985,4],[86183,4],[86643,5],[87271,5],[87632,5],[87813,5],[88077,4],[88340,4],[88652,4],[89710,5],[90391,5],[90879,5],[91049,5],[91327,4],[91469,4],[93895,5],[94553,5],[94707,5],[94940,4],[95629,5],[95995,4],[96250,5],[98134,5],[98527,4],[98730,5],[99714,5],[100083,4],[100571,5],[102734,4],[102913,4],[103142,5],[103299,5],[103409,5],[103569,5],[103683,5],[103851,5],[104097,4],[104331,5],[104742,4],[105545,5],[106045,4],[107426,5],[107483,5],[107606,5],[107652,5],[107816,5],[107903,5],[108111,4],[108691,5],[108748,5],[108823,5],[108869,5],[108972,5],[109018,5],[109457,4],[110580,5],[110632,5],[110707,5],[110753,5],[110856,5],[110902,5],[111155,4],[111802,5],[113167,5],[113365,5],[113563,5],[113906,4],[114215,5],[114629,5],[114775,5],[114921,5],[115235,4],[115469,4],[115745,5],[115789,5],[115922,5],[115964,5],[116067,5],[116111,5],[116244,5],[116286,5],[116506,4],[116687,4],[116915,4],[117973,5],[118246,5],[118457,5],[118512,5],[118578,5],[118645,5],[118669,5],[118847,4],[119465,5],[119710,5],[119901,5],[119951,5],[120012,5],[120060,5],[120249,4],[122686,5],[122968,5],[123723,5],[123792,5],[123860,5],[124071,5],[124132,5],[124207,5],[124637,5],[124709,5],[124784,5],[126377,5],[126541,5],[126610,5],[126679,5],[127099,4],[129102,5],[129454,4],[129610,4],[130368,5]]},"522":{"position":[[106,5],[155,5],[205,5],[452,4],[493,4]]},"526":{"position":[[489,4],[813,4],[996,4],[1246,5],[1499,5],[1964,5],[2266,4],[3162,4],[3281,5],[4862,4],[5293,4],[5493,4],[5825,5],[5892,5],[5911,5]]},"532":{"position":[[81,4]]},"541":{"position":[[81,4],[324,5],[390,5]]},"545":{"position":[[73,4],[1235,5],[1323,5]]},"549":{"position":[[70,4],[216,5],[280,5]]},"553":{"position":[[72,4]]},"562":{"position":[[72,4],[441,4],[707,5],[775,5]]},"567":{"position":[[84,4]]},"569":{"position":[[55,4]]},"571":{"position":[[55,4]]},"577":{"position":[[43,4],[234,4]]},"579":{"position":[[105,5],[295,5]]},"585":{"position":[[64,4],[134,4],[210,4],[421,5],[614,5]]},"589":{"position":[[49,4],[272,4],[777,4],[1211,4]]},"591":{"position":[[1973,5]]},"595":{"position":[[46,4],[280,5]]},"599":{"position":[[59,4]]},"608":{"position":[[142,5]]},"612":{"position":[[60,4]]},"620":{"position":[[46,4],[355,5]]},"624":{"position":[[54,4]]},"626":{"position":[[46,4]]},"630":{"position":[[55,4]]},"632":{"position":[[54,4]]},"634":{"position":[[53,4]]},"640":{"position":[[57,4]]},"644":{"position":[[74,5]]},"646":{"position":[[81,5]]},"649":{"position":[[74,5]]}}}],["name1",{"_index":3053,"t":{"457":{"position":[[38,5]]}}}],["name2",{"_index":3054,"t":{"457":{"position":[[44,5]]}}}],["name3",{"_index":3055,"t":{"457":{"position":[[50,5]]}}}],["name=\"happi",{"_index":225,"t":{"34":{"position":[[2765,11]]}}}],["name=\"rivercentos001",{"_index":61,"t":{"23":{"position":[[45,21]]}}}],["name=\"shel",{"_index":2741,"t":{"372":{"position":[[68,12]]}}}],["name='age_gte_18",{"_index":2343,"t":{"258":{"position":[[4908,19]]}}}],["name='bothin",{"_index":627,"t":{"107":{"position":[[51,14]]}}}],["name='first_name_idx",{"_index":2335,"t":{"258":{"position":[[3962,23]]}}}],["name=kubernet",{"_index":3554,"t":{"516":{"position":[[6216,15]]}}}],["name=slave，env!=product",{"_index":3890,"t":{"516":{"position":[[22026,26]]}}}],["name=svc",{"_index":3941,"t":{"516":{"position":[[25796,8],[26489,8]]}}}],["name>aliyun",{"_index":437,"t":{"78":{"position":[[288,12]]}}}],["nameserv",{"_index":4827,"t":{"516":{"position":[[99107,10]]}}}],["namespac",{"_index":3693,"t":{"516":{"position":[[11726,10],[12685,14],[12725,13],[12771,9],[12809,11],[13453,14],[13507,9],[13632,9],[13716,10],[14185,9],[15105,10],[15534,9],[15774,21],[16239,9],[16672,17],[16781,11],[16866,11],[16917,9],[16999,9],[17311,9],[18015,9],[18025,11],[18105,9],[18348,10],[20797,10],[20892,10],[22712,10],[22871,10],[23375,9],[23385,11],[24128,10],[25166,10],[27096,10],[27820,10],[30729,9],[31953,10],[32709,10],[34255,10],[35634,10],[36658,10],[37512,10],[40391,10],[42513,10],[43976,10],[45155,10],[46360,10],[48114,10],[48735,10],[50125,10],[51451,10],[54191,10],[55861,10],[56878,10],[57157,10],[57548,10],[58042,10],[60156,10],[63437,10],[65180,10],[65902,10],[68191,9],[68799,10],[69624,10],[70405,10],[80843,10],[81809,10],[85028,10],[85655,10],[86656,10],[87645,10],[89723,10],[90896,10],[93916,10],[94573,10],[95653,10],[96274,10],[98159,10],[98755,10],[99737,10],[100598,10],[103165,10],[103433,10],[103703,10],[103872,10],[104350,10],[105565,10],[107448,10],[108713,10],[110597,10],[114225,10],[114640,10],[114786,10],[114932,10],[115756,10],[116078,10],[117989,10],[118262,10],[118477,10],[119478,10],[119723,10],[119918,10],[122671,10],[123756,10],[124673,10],[126101,9],[126362,10],[126574,10],[129129,10],[130402,10],[130637,10]]},"522":{"position":[[86,9],[170,10],[639,9]]},"526":{"position":[[50,10],[479,9],[719,21],[1184,9],[1617,17],[1726,11],[1811,11],[1862,9],[1944,9],[2256,9],[2960,9],[2970,11],[3050,9],[3293,10],[5742,10],[5837,10]]},"541":{"position":[[357,10]]},"545":{"position":[[594,10],[873,10],[1264,10]]},"549":{"position":[[247,10]]},"562":{"position":[[742,10]]},"579":{"position":[[117,10]]},"585":{"position":[[434,10]]},"591":{"position":[[1994,10]]},"595":{"position":[[299,10]]},"608":{"position":[[162,10]]},"620":{"position":[[365,10]]},"649":{"position":[[110,10]]}}}],["namespace/dev",{"_index":3727,"t":{"516":{"position":[[12785,13],[13862,13],[14014,13],[14440,13],[14573,13],[16832,13]]},"522":{"position":[[316,13],[468,13]]},"524":{"position":[[123,13],[256,13]]},"526":{"position":[[1777,13]]}}}],["namespacelifecycle：如果尝试在一个不存在的namespace中创建资源对象，则该创建请求将被拒绝。当删除一个namespace时，系统将会删除该namespac",{"_index":5204,"t":{"516":{"position":[[128226,96]]}}}],["namespace、pod、deployment、service资源的基本操作，有了这些操作，就可以在kubernetes集群中实现一个服务的简单部署和访问了，但是如果想要更好的使用kubernet",{"_index":3970,"t":{"516":{"position":[[27334,129]]}}}],["namespace下创建并运行一个nginx的pod",{"_index":3732,"t":{"516":{"position":[[12978,28]]}}}],["namespace下的kubernet",{"_index":5218,"t":{"516":{"position":[[129349,23]]}}}],["namespace下的pod",{"_index":3867,"t":{"516":{"position":[[20479,25]]},"526":{"position":[[5424,25]]}}}],["namespace和pod",{"_index":3752,"t":{"516":{"position":[[13905,30]]},"522":{"position":[[359,30]]}}}],["namespace是kubernet",{"_index":3764,"t":{"516":{"position":[[15116,64]]},"526":{"position":[[61,64]]}}}],["namespace的对象都会被分配在default",{"_index":3769,"t":{"516":{"position":[[15581,34]]},"526":{"position":[[526,34]]}}}],["namespace：命名空间，用来隔离pod",{"_index":3448,"t":{"516":{"position":[[2116,27]]}}}],["name、namespace、label",{"_index":4040,"t":{"516":{"position":[[30996,41]]}}}],["name为log",{"_index":4944,"t":{"516":{"position":[[107872,9]]}}}],["name参数，其他参数都是可选的。excludes和includes使用的是ant风格路径表达式。在3.7.5",{"_index":984,"t":{"151":{"position":[[448,71]]}}}],["name和s",{"_index":2151,"t":{"252":{"position":[[5124,29]]}}}],["name在pod",{"_index":4098,"t":{"516":{"position":[[36358,27]]}}}],["native.cgroupdriver=systemd",{"_index":3547,"t":{"516":{"position":[[5896,32]]}}}],["ne",{"_index":2775,"t":{"394":{"position":[[127,2],[159,2]]},"429":{"position":[[845,2],[876,2],[972,2],[999,2]]}}}],["need",{"_index":1711,"t":{"197":{"position":[[4978,4]]}}}],["net",{"_index":120,"t":{"27":{"position":[[707,3]]},"114":{"position":[[260,5],[282,5]]}}}],["net.bridge.bridg",{"_index":3509,"t":{"516":{"position":[[4472,17],[4512,17]]}}}],["net.ipv4.ip_forward",{"_index":3512,"t":{"516":{"position":[[4551,19]]}}}],["netmask",{"_index":4175,"t":{"516":{"position":[[41798,7],[41877,7]]}}}],["network",{"_index":3594,"t":{"516":{"position":[[7623,7]]}}}],["never",{"_index":4009,"t":{"516":{"position":[[29419,5],[32793,5],[32979,31],[48500,5],[48920,5],[48928,12],[87223,5],[87793,5],[90371,5],[91029,5]]}}}],["never_cach",{"_index":2496,"t":{"273":{"position":[[1886,17],[2088,11],[2100,12]]}}}],["never或者onfailur",{"_index":4677,"t":{"516":{"position":[[87231,25]]}}}],["never，则job会在pod出现故障时创建新的pod，并且故障pod不会消失，也不会重启，failed次数加1",{"_index":4681,"t":{"516":{"position":[[87451,61]]}}}],["new",{"_index":739,"t":{"112":{"position":[[977,3],[1724,3],[1828,3]]},"114":{"position":[[410,3],[522,3],[676,3]]},"275":{"position":[[1331,4]]},"516":{"position":[[77545,3],[125116,3]]}}}],["newcontainerperstag",{"_index":876,"t":{"137":{"position":[[699,22]]}}}],["newcontainerperstage：当agent为docker或dockerfile时，指定在同一个jenkins节点上，每个stage都分别运行在一个新的容器中，而不是所有stag",{"_index":875,"t":{"137":{"position":[[582,106]]}}}],["newkey",{"_index":4916,"t":{"516":{"position":[[105305,6]]},"606":{"position":[[44,6]]}}}],["newreplicaset",{"_index":3929,"t":{"516":{"position":[[24760,14]]}}}],["newreplicasetavail",{"_index":3927,"t":{"516":{"position":[[24715,22]]}}}],["newvalu",{"_index":660,"t":{"110":{"position":[[572,9]]}}}],["next",{"_index":1011,"t":{"155":{"position":[[345,5]]}}}],["nf",{"_index":3510,"t":{"516":{"position":[[4490,2],[4530,2],[109852,4],[110125,3],[110340,7],[110380,3],[110493,3],[110593,3],[110920,4],[110945,9],[111077,3],[111144,3],[111193,3],[111218,23],[111818,4],[112816,7],[113105,3],[113271,4],[113469,4],[113667,4],[117138,11]]}}}],["nf_conntrack_ipv4",{"_index":3528,"t":{"516":{"position":[[5089,17],[5323,17]]}}}],["nfs.yaml",{"_index":4984,"t":{"516":{"position":[[110536,8],[111057,8]]}}}],["nfs上安装nf",{"_index":4974,"t":{"516":{"position":[[110086,12]]}}}],["nfs作为存储，来演示pv的使用，创建3个pv，对应nfs中的3",{"_index":5018,"t":{"516":{"position":[[112774,41]]}}}],["nfs提供存储，此时就要求用户会搭建nfs系统，并且会在yaml配置nfs。由于kubernet",{"_index":4990,"t":{"516":{"position":[[111311,108]]}}}],["nfs是一个网络文件存储系统，可以搭建一台nfs服务器，然后将pod中的存储直接连接到nfs系统上，这样的话，无论pod在节点上怎么转移，只要node跟nf",{"_index":4972,"t":{"516":{"position":[[109946,96]]}}}],["nginx",{"_index":1108,"t":{"170":{"position":[[1264,5]]},"439":{"position":[[24,5]]},"442":{"position":[[22,5],[33,5],[57,5],[68,5],[84,5],[90,9],[133,5],[144,5],[159,9],[193,5],[286,8],[373,9],[692,11]]},"444":{"position":[[18,5],[140,5]]},"446":{"position":[[40,5],[73,5],[92,7],[116,5],[163,7],[186,5],[194,7],[220,5],[228,9],[255,5],[266,5],[294,5],[302,9],[326,5],[334,9],[397,5],[410,5],[450,5],[471,5],[477,5],[498,5],[528,5],[544,5],[556,5]]},"449":{"position":[[17,6],[26,22],[74,5],[143,5],[185,5],[618,13],[1284,5]]},"451":{"position":[[11,5],[72,5],[112,5],[475,5],[820,5],[845,5],[1251,5]]},"453":{"position":[[5,5],[37,17]]},"457":{"position":[[639,5],[734,7],[877,11],[2699,5],[2761,5],[2818,5],[5412,5],[5455,5],[5609,5],[5781,5]]},"459":{"position":[[0,5],[40,5],[536,5]]},"467":{"position":[[103,5],[135,5]]},"469":{"position":[[341,5],[448,5]]},"471":{"position":[[37,5],[88,5]]},"485":{"position":[[100,15]]},"487":{"position":[[724,5],[1307,5]]},"493":{"position":[[15,5]]},"496":{"position":[[6,5],[26,5]]},"498":{"position":[[197,5]]},"500":{"position":[[0,5],[6,70]]},"504":{"position":[[878,19],[1479,12],[1927,19],[2527,12],[2969,5],[2998,18],[3051,27],[3164,19],[3196,5]]},"508":{"position":[[105,33],[695,7]]},"510":{"position":[[216,5],[324,7]]},"512":{"position":[[15,5],[23,9],[41,9],[51,47]]},"516":{"position":[[1793,24],[9193,12],[9232,5],[9298,5],[10927,5],[11027,5],[11097,5],[13757,5],[18066,5],[18248,5],[18323,5],[18342,5],[18606,6],[19779,5],[19839,5],[19960,5],[20243,5],[20260,7],[20379,5],[20584,5],[20661,5],[20690,7],[20886,5],[20972,5],[22151,5],[22250,5],[22353,5],[22422,5],[22576,5],[22764,5],[22865,5],[22986,5],[23426,5],[23596,5],[23637,5],[23678,5],[23816,5],[23993,5],[24013,5],[24103,5],[24122,5],[24503,6],[24775,5],[24956,5],[25022,5],[25051,7],[25160,5],[25227,5],[25266,5],[25318,5],[25788,5],[26481,5],[26959,5],[26987,5],[27090,5],[27217,5],[32014,5],[32750,5],[33701,5],[33759,5],[34296,5],[36699,5],[36754,5],[37054,5],[37093,5],[37553,5],[40482,5],[42604,5],[42663,30],[42792,16],[44017,5],[44058,5],[44427,5],[44499,5],[44549,5],[44733,30],[45196,5],[45237,5],[45781,5],[45844,5],[46401,5],[46442,5],[46973,5],[47044,5],[47219,5],[48155,5],[48196,5],[48776,5],[48817,5],[49307,5],[50166,5],[51492,5],[54230,5],[55900,5],[57613,5],[58081,5],[60195,5],[63476,5],[65323,5],[65404,6],[65480,5],[65516,5],[65963,5],[66006,5],[66042,5],[66386,5],[68107,5],[68479,5],[70045,5],[70126,6],[70202,5],[70238,5],[70466,5],[70509,5],[70545,5],[76418,25],[76581,5],[77778,5],[77832,5],[77888,5],[78521,5],[78575,5],[78631,5],[80837,5],[80948,5],[80991,5],[81027,5],[81217,5],[81333,5],[81942,13],[81995,5],[82933,5],[82951,5],[82969,5],[82987,5],[83005,5],[83023,5],[83041,5],[83059,5],[83077,5],[83095,5],[83113,5],[83131,5],[83149,5],[83167,5],[83185,5],[83203,5],[83221,5],[83239,5],[83257,5],[83362,5],[83403,5],[83443,5],[83483,5],[83523,5],[83573,5],[83623,5],[83673,5],[83713,5],[83753,5],[83793,5],[83833,5],[83883,5],[83933,5],[83983,5],[84033,5],[84074,5],[84115,5],[84156,5],[84197,5],[84238,5],[84279,5],[84320,5],[84367,5],[84413,5],[84459,5],[84506,5],[84552,5],[84599,5],[85318,5],[85399,6],[85475,5],[85511,5],[85704,5],[85747,5],[85783,5],[86082,5],[93993,5],[94634,5],[94677,5],[94713,5],[95689,5],[98195,5],[99773,5],[101846,40],[102577,5],[102655,5],[102728,5],[102907,5],[102966,5],[103148,5],[103226,5],[103269,5],[103305,5],[103689,5],[103739,5],[104142,5],[104445,5],[104947,5],[105745,5],[106337,5],[107489,5],[108754,5],[109565,8],[110638,5],[118518,5],[119957,5],[127130,5],[127183,5],[127236,5]]},"522":{"position":[[211,5]]},"526":{"position":[[3011,5],[3193,5],[3268,5],[3287,5],[3551,6],[4724,5],[4784,5],[4905,5],[5188,5],[5205,7],[5324,5],[5529,5],[5606,5],[5635,7],[5831,5],[5917,5]]},"541":{"position":[[396,5]]},"545":{"position":[[1329,5]]},"549":{"position":[[286,5]]},"562":{"position":[[781,5]]},"579":{"position":[[111,5],[222,5],[265,5],[301,5]]},"581":{"position":[[38,5]]},"583":{"position":[[52,5]]},"585":{"position":[[567,13],[620,5]]},"589":{"position":[[813,5],[831,5],[849,5],[867,5],[885,5],[903,5],[921,5],[939,5],[957,5],[975,5],[993,5],[1011,5],[1029,5],[1047,5],[1065,5],[1083,5],[1101,5],[1119,5],[1137,5],[1242,5],[1283,5],[1323,5],[1363,5],[1403,5],[1453,5],[1503,5],[1553,5],[1593,5],[1633,5],[1673,5],[1713,5],[1763,5],[1813,5],[1863,5],[1913,5],[1954,5],[1995,5],[2036,5],[2077,5],[2118,5],[2159,5],[2200,5],[2247,5],[2293,5],[2339,5],[2386,5],[2432,5],[2479,5]]},"591":{"position":[[2071,5]]},"595":{"position":[[91,5]]},"601":{"position":[[114,5]]},"614":{"position":[[179,5]]}}}],["nginx!</h1",{"_index":3954,"t":{"516":{"position":[[26293,10]]}}}],["nginx!</titl",{"_index":3861,"t":{"516":{"position":[[20102,13],[26252,13]]},"526":{"position":[[5047,13]]}}}],["nginx.</em</p",{"_index":3863,"t":{"516":{"position":[[20154,13]]},"526":{"position":[[5099,13]]}}}],["nginx.com",{"_index":3057,"t":{"457":{"position":[[152,11]]}}}],["nginx.itheima.com",{"_index":4899,"t":{"516":{"position":[[104384,17],[104927,17],[105602,17],[105684,17],[106317,17]]},"601":{"position":[[94,17]]},"608":{"position":[[199,17]]},"614":{"position":[[159,17]]}}}],["nginx.itheima.com,tomcat.itheima.com",{"_index":4904,"t":{"516":{"position":[[104784,36],[106088,36],[106254,36]]},"599":{"position":[[101,36]]},"612":{"position":[[103,36]]},"614":{"position":[[96,36]]}}}],["nginx.itheima.com:32240",{"_index":4910,"t":{"516":{"position":[[105201,23]]}}}],["nginx.yaml",{"_index":3875,"t":{"516":{"position":[[20828,16],[21060,10],[21096,10],[23066,10],[25090,16],[25413,10],[25452,10],[27024,16],[27284,10],[27320,10],[103084,10],[104037,10]]},"526":{"position":[[5773,16],[6005,10],[6041,10]]},"593":{"position":[[48,10]]}}}],["nginx/nginx",{"_index":4875,"t":{"516":{"position":[[102159,11],[102305,11]]}}}],["nginx1",{"_index":3942,"t":{"516":{"position":[[25805,6],[25875,6],[25939,6],[26019,6]]}}}],["nginx2",{"_index":3958,"t":{"516":{"position":[[26498,6],[26567,6],[26674,6],[26754,6]]}}}],["nginx:1.17.1",{"_index":4048,"t":{"516":{"position":[[32027,12],[32763,12],[33248,17],[33560,14],[33634,14],[34309,12],[36712,12],[37005,12],[37566,12],[40454,12],[42576,12],[44030,12],[45209,12],[45682,14],[46414,12],[46866,14],[48168,12],[48789,12],[50179,12],[51505,12],[54243,12],[55913,12],[57626,12],[58094,12],[60208,12],[63489,12],[65529,12],[66055,12],[66392,12],[68485,12],[70251,12],[70558,12],[76587,12],[77784,12],[78527,12],[81040,12],[85524,12],[85796,12],[86088,12],[94726,12],[103318,12],[107502,12],[108767,12],[110651,12],[118531,12],[119970,12]]},"541":{"position":[[409,12]]},"545":{"position":[[1342,12]]},"549":{"position":[[299,12]]},"562":{"position":[[794,12]]},"579":{"position":[[314,12]]}}}],["nginx:1.17.2",{"_index":4426,"t":{"516":{"position":[[67847,12],[68113,12],[77838,12],[78581,12]]}}}],["nginx:1.17.4",{"_index":4536,"t":{"516":{"position":[[77894,12],[78637,12]]}}}],["nginx:latest",{"_index":3749,"t":{"516":{"position":[[13781,12],[18708,12],[19634,14],[19710,14],[20934,12],[22948,12],[24019,12],[24517,12],[25299,12]]},"522":{"position":[[235,12]]},"526":{"position":[[3653,12],[4579,14],[4655,14],[5879,12]]}}}],["nginx:v3",{"_index":165,"t":{"32":{"position":[[934,8]]}}}],["nginx;组是lion",{"_index":2993,"t":{"451":{"position":[[86,15]]}}}],["nginx=nginx:1.17.1",{"_index":4428,"t":{"516":{"position":[[68259,18]]}}}],["nginx=nginx:1.17.2",{"_index":4478,"t":{"516":{"position":[[72855,18]]}}}],["nginx=nginx:1.17.3",{"_index":4488,"t":{"516":{"position":[[74009,18]]}}}],["nginx=nginx:1.17.4",{"_index":4530,"t":{"516":{"position":[[77230,18]]}}}],["nginx_numb",{"_index":3330,"t":{"504":{"position":[[3022,13]]}}}],["nginx_number=`p",{"_index":3329,"t":{"504":{"position":[[2949,16]]}}}],["nginxpod",{"_index":3746,"t":{"516":{"position":[[13707,8],[14213,10]]},"522":{"position":[[161,8],[667,10]]}}}],["nginxpod.yaml",{"_index":3742,"t":{"516":{"position":[[13587,23],[13848,13],[13984,13],[14171,13],[14426,13],[14559,13]]},"522":{"position":[[41,23],[302,13],[438,13],[625,13]]},"524":{"position":[[109,13],[242,13]]}}}],["nginx变量，可以实现复杂的赋值逻辑；此处是阻塞的，lua",{"_index":3394,"t":{"510":{"position":[[483,41]]}}}],["nginx在处理每一个用户请求时，都是按照若干个不同的阶段依次处理的，与配置文件上的顺序没有关系，详细内容可以阅读《深入理解nginx",{"_index":3363,"t":{"508":{"position":[[0,91]]}}}],["nginx完成rewrite阶段所要求的内部跳转动作，如果rewrit",{"_index":3371,"t":{"508":{"position":[[306,58]]}}}],["nginx成功后，可以直接访问主机ip，此时会展示nginx",{"_index":2940,"t":{"446":{"position":[[124,36]]}}}],["nginx服务就运行了，如果需要访问nginx，就需要通过kub",{"_index":3439,"t":{"516":{"position":[[1739,35]]}}}],["nginx服务来说明kubernet",{"_index":3430,"t":{"516":{"position":[[1363,39]]}}}],["nginx服务的安装请求会首先被发送到master节点的apiserv",{"_index":3432,"t":{"516":{"position":[[1459,41]]}}}],["nginx的index.html页面（三台修改的ip",{"_index":4797,"t":{"516":{"position":[[95200,47]]}}}],["nginx的机器挂载了vip",{"_index":3353,"t":{"506":{"position":[[46,20]]}}}],["nginx进程号，杀死nginx",{"_index":2942,"t":{"446":{"position":[[358,27]]}}}],["nginx镜像有一步pul",{"_index":4061,"t":{"516":{"position":[[33216,25]]}}}],["nginx，但是要求在运行nginx之前先要能够连接上mysql和redi",{"_index":4156,"t":{"516":{"position":[[40187,53]]}}}],["nginx，本次案例使用的是0.30",{"_index":4873,"t":{"516":{"position":[[102040,20]]}}}],["nginx，难免会出现天灾人祸，比如系统异常、程序宕机、服务器断电、机房爆炸、地球毁灭....哈哈哈，夸张了。但实际生产环境中确实存在隐患问题，由于nginx作为整个系统的网关层接入外部流量，所以一旦nginx宕机，最终就会导致整个系统不可用，这无疑对于用户的体验感是极差的，因此也得保障nginx",{"_index":3272,"t":{"502":{"position":[[0,171]]}}}],["nginx：用1.17.1版本的nginx镜像创建，（nginx是一个轻量级web",{"_index":4050,"t":{"516":{"position":[[32103,44]]}}}],["ngx_access在这个阶段运行，配置指令多是执行访问控制相关的任务，如检查用户的访问权限，检查用户的来源ip",{"_index":3375,"t":{"508":{"position":[[486,68]]}}}],["ngx_limit_req和ngx_limit_zone在这个阶段运行，ngx_limit_req可以控制请求的访问频率，ngx_limit_zon",{"_index":3373,"t":{"508":{"position":[[378,97]]}}}],["ngx_lua属于nginx的一部分，它的执行指令都包含在nginx的11个步骤之中了，相应的处理阶段可以做插入式处理，即可插拔式架构，不过ngx_lua并不是所有阶段都会运行的；另外指令可以在http、server、serv",{"_index":3382,"t":{"510":{"position":[[0,115]]}}}],["nice",{"_index":3011,"t":{"451":{"position":[[807,4],[927,4],[970,4]]}}}],["nick",{"_index":298,"t":{"46":{"position":[[372,4],[480,11],[930,4],[1294,4]]}}}],["nick:nick",{"_index":302,"t":{"46":{"position":[[428,9],[988,9],[1349,9]]}}}],["nignx",{"_index":1075,"t":{"170":{"position":[[290,13]]}}}],["nignx，servic",{"_index":1107,"t":{"170":{"position":[[1248,15]]}}}],["nobodi",{"_index":257,"t":{"34":{"position":[[4975,6]]}}}],["node",{"_index":647,"t":{"110":{"position":[[219,4]]},"112":{"position":[[1620,4]]},"151":{"position":[[119,8]]},"516":{"position":[[1232,24],[2621,5],[7836,20],[8070,5],[11710,5],[12908,4],[15621,4],[15908,4],[18375,5],[19282,4],[19951,4],[38613,5],[38654,5],[43055,4],[50449,4],[50925,4],[51176,15],[51229,5],[51309,5],[51809,4],[52291,4],[52347,11],[52575,5],[52619,4],[53144,61],[53322,27],[53563,24],[54287,10],[54715,4],[54799,17],[54957,5],[55001,4],[55072,5],[55116,4],[55619,4],[55957,10],[58890,5],[59889,4],[60773,4],[61349,5],[61399,5],[61446,5],[61769,5],[61976,4],[62126,5],[62197,5],[62405,4],[62601,5],[62666,5],[62866,4],[63744,4],[63909,4],[80336,4],[80388,4],[86217,4],[94961,4],[105288,5],[108145,4],[109491,4],[116540,4]]},"526":{"position":[[566,4],[853,4],[3320,5],[4227,4],[4896,4]]},"532":{"position":[[115,4]]},"535":{"position":[[140,5],[184,4],[255,5],[299,4]]},"541":{"position":[[115,4],[453,10]]},"555":{"position":[[177,5]]},"562":{"position":[[475,4]]},"567":{"position":[[118,4]]},"569":{"position":[[89,4]]},"571":{"position":[[89,4]]},"577":{"position":[[38,4]]},"606":{"position":[[27,5]]},"630":{"position":[[89,4]]}}}],["node(",{"_index":4123,"t":{"516":{"position":[[38636,7],[52598,7],[54980,7],[55095,7],[58913,7],[58956,7]]},"535":{"position":[[163,7],[278,7]]},"555":{"position":[[200,7],[243,7]]}}}],["node('linux",{"_index":543,"t":{"90":{"position":[[774,11]]}}}],["node.kubernetes.io/not",{"_index":3841,"t":{"516":{"position":[[19317,22]]},"526":{"position":[[4262,22]]}}}],["node.kubernetes.io/unreachable:noexecut",{"_index":3843,"t":{"516":{"position":[[19365,40]]},"526":{"position":[[4310,40]]}}}],["node/node2",{"_index":4253,"t":{"516":{"position":[[51253,10],[51334,10]]}}}],["node01",{"_index":3472,"t":{"516":{"position":[[3035,6],[80473,6]]},"577":{"position":[[123,6]]}}}],["node02",{"_index":3474,"t":{"516":{"position":[[3085,6],[80502,6]]},"577":{"position":[[152,6]]}}}],["node1",{"_index":3485,"t":{"516":{"position":[[3403,5],[8140,5],[14887,6],[19578,5],[19614,5],[19678,5],[19755,5],[19815,5],[19997,5],[33506,5],[33540,5],[33602,5],[33677,5],[33735,5],[33805,5],[33910,5],[33983,5],[41184,5],[41217,5],[41309,5],[41372,5],[44403,5],[44475,5],[44533,5],[44640,5],[46844,5],[46949,5],[47020,5],[47094,5],[47203,5],[49195,5],[49291,5],[50202,5],[50210,13],[50504,5],[51235,5],[51868,5],[55687,5],[57649,5],[59958,5],[60025,5],[61355,5],[61405,5],[61452,5],[61511,15],[61574,17],[61641,17],[61775,5],[62037,5],[62132,5],[62203,5],[62466,5],[62607,5],[62672,5],[63968,5],[86271,5],[95028,5],[95178,5],[108201,5],[109552,5],[116580,5],[116621,5],[117192,5],[117198,5]]},"524":{"position":[[570,6]]},"526":{"position":[[4523,5],[4559,5],[4623,5],[4700,5],[4760,5],[4942,5]]},"541":{"position":[[183,5]]},"545":{"position":[[1365,5]]},"562":{"position":[[544,5],[611,5]]},"571":{"position":[[148,5]]},"630":{"position":[[129,5],[170,5]]},"636":{"position":[[42,5],[48,5]]}}}],["node1/192.168.5.4",{"_index":3816,"t":{"516":{"position":[[18381,17]]},"526":{"position":[[3326,17]]}}}],["node1节点上打上了noexecute的污点，此时pod",{"_index":4376,"t":{"516":{"position":[[63283,44]]}}}],["node1设置污点(prefernoschedul",{"_index":4350,"t":{"516":{"position":[[61703,28]]}}}],["node1设置污点(取消noschedule，设置noexecut",{"_index":4363,"t":{"516":{"position":[[62527,36]]}}}],["node1设置污点(取消prefernoschedule，设置noschedul",{"_index":4357,"t":{"516":{"position":[[62045,43]]}}}],["node1（为了演示效果更加明显，暂时停止node2",{"_index":4343,"t":{"516":{"position":[[61477,33]]}}}],["node2",{"_index":994,"t":{"151":{"position":[[808,7]]},"516":{"position":[[3424,5],[8173,5],[43104,5],[45622,5],[45660,5],[45757,5],[45820,5],[45905,5],[51315,5],[60642,12],[60840,5],[86326,5],[95103,5],[117246,5],[117252,5]]},"567":{"position":[[185,5]]},"636":{"position":[[96,5],[102,5]]}}}],["node3",{"_index":4249,"t":{"516":{"position":[[50973,5]]}}}],["node3节点调度，但是由于不存在node3节点，所以pod",{"_index":4248,"t":{"516":{"position":[[50775,47]]}}}],["node_label",{"_index":675,"t":{"110":{"position":[[952,11]]}}}],["node_nam",{"_index":674,"t":{"110":{"position":[[935,9]]},"112":{"position":[[1575,9]]}}}],["nodeaffin",{"_index":4273,"t":{"516":{"position":[[53206,12],[53219,24],[54097,12],[54169,12],[54273,13],[54520,12],[54555,12],[54644,12],[54731,12],[54865,12],[55187,12],[55223,12],[55333,12],[55410,12],[55445,12],[55548,12],[55635,12],[55765,12],[55838,12],[55943,13],[56202,12],[56238,12],[56327,12],[56392,12],[56433,22]]},"530":{"position":[[45,12],[80,12]]},"532":{"position":[[44,12],[131,12]]},"535":{"position":[[48,12],[370,12],[406,12]]},"537":{"position":[[31,12]]},"539":{"position":[[45,12],[80,12]]},"541":{"position":[[44,12],[131,12],[261,12],[334,12],[439,13]]},"543":{"position":[[45,12],[81,12]]},"545":{"position":[[43,12],[108,12],[149,22]]}}}],["nodeaffinity(nod",{"_index":4267,"t":{"516":{"position":[[52887,22]]}}}],["nodeaffinity、podaffinity、podantiaffin",{"_index":4239,"t":{"516":{"position":[[49743,46]]}}}],["nodeaffinity指定了多个nodeselectorterm",{"_index":4297,"t":{"516":{"position":[[56524,54]]},"545":{"position":[[240,54]]}}}],["nodeenv",{"_index":4256,"t":{"516":{"position":[[51532,8],[53817,7],[53871,7],[53960,7],[54426,7],[56108,7]]},"541":{"position":[[604,7]]}}}],["nodeenv=pro",{"_index":4252,"t":{"516":{"position":[[51241,11],[51547,24]]}}}],["nodeenv=test",{"_index":4254,"t":{"516":{"position":[[51321,12]]}}}],["nodeip的30002端口，即可访问到pod",{"_index":4843,"t":{"516":{"position":[[100208,48]]}}}],["nodenam",{"_index":4011,"t":{"516":{"position":[[29448,9],[31187,8],[49947,8],[50116,8],[50192,9],[50298,8],[50391,8],[50465,8],[50628,9],[50758,8],[50867,8],[50941,8],[57639,9]]},"545":{"position":[[1355,9]]}}}],["nodename.yaml",{"_index":4244,"t":{"516":{"position":[[50055,15],[50276,13],[50605,13],[50677,13],[50736,13]]}}}],["nodename、nodeselector",{"_index":4238,"t":{"516":{"position":[[49716,26]]}}}],["nodename用于强制约束将pod调度到指定的name的node节点上。这种方式，其实是直接跳过scheduler的调度逻辑，直接将pod",{"_index":4243,"t":{"516":{"position":[[49956,81]]}}}],["nodename的值将pod调度到指定的nod",{"_index":4041,"t":{"516":{"position":[[31196,29]]}}}],["nodename表示将该pod调度到指定到名称的nod",{"_index":4012,"t":{"516":{"position":[[29466,34]]}}}],["nodeport",{"_index":3960,"t":{"516":{"position":[[26761,8],[81644,8],[94183,9],[99728,8],[99789,8],[99828,9],[100000,8],[100141,8],[100150,8],[101178,49],[102972,8],[129173,8],[129223,9],[129761,8]]},"585":{"position":[[269,8]]},"591":{"position":[[2261,9]]}}}],["nodeport.yaml",{"_index":4837,"t":{"516":{"position":[[99661,13],[99970,13],[102365,13]]}}}],["nodeport类型的servic",{"_index":4835,"t":{"516":{"position":[[99462,19]]}}}],["nodeport类型的service，而且有一对port（80:31928/tc",{"_index":3959,"t":{"516":{"position":[[26584,52]]}}}],["nodeport：将service通过指定的nod",{"_index":4784,"t":{"516":{"position":[[94254,54]]}}}],["nodes\",\"rolebindings\",\"clusterroles\",\"daemonsets\",\"replicasets\",\"statefulset",{"_index":5138,"t":{"516":{"position":[[123258,80]]}}}],["nodeselector",{"_index":4013,"t":{"516":{"position":[[29501,13],[31226,12],[50986,12],[51438,12],[51518,13],[51650,12],[51747,12],[51825,12],[52009,13],[52151,12],[52300,12],[52424,12]]}}}],["nodeselector.yaml",{"_index":4258,"t":{"516":{"position":[[51624,17],[51982,17],[52062,17],[52125,17]]}}}],["nodeselector.yaml文件，并使用它创建pod",{"_index":4255,"t":{"516":{"position":[[51363,29]]}}}],["nodeselectorterm",{"_index":4276,"t":{"516":{"position":[[53350,17],[54352,18]]}}}],["nodeselectorterms中有多个matchexpress",{"_index":4298,"t":{"516":{"position":[[56581,41]]},"545":{"position":[[297,41]]}}}],["nodeselector中定义的信息选择将该pod调度到包含这些label的nod",{"_index":4042,"t":{"516":{"position":[[31246,44]]}}}],["nodeselector和nodeaffinity，那么必须两个条件都得到满足，pod才能运行在指定的nod",{"_index":4296,"t":{"516":{"position":[[56458,63]]},"545":{"position":[[174,63]]}}}],["nodeselector用于将pod调度到添加了指定标签的node节点上。它是通过kubernetes的label",{"_index":4250,"t":{"516":{"position":[[50999,57]]}}}],["nodeselector表示将该pod调度到包含这个label的nod",{"_index":4015,"t":{"516":{"position":[[29523,40]]}}}],["node上安装nf",{"_index":4982,"t":{"516":{"position":[[110436,21]]}}}],["node上添加污点用于拒绝pod调度上来，但是如果就是想将一个pod调度到一个有污点的nod",{"_index":4374,"t":{"516":{"position":[[63138,85]]}}}],["node为目标，解决pod可以调度到哪些nod",{"_index":4268,"t":{"516":{"position":[[52910,28]]}}}],["node的端口(默认的取值范围是：30000",{"_index":4839,"t":{"516":{"position":[[99846,27]]}}}],["node节点上的kubelet发现有pod调度过来，尝试调用docker启动容器，并将结果回送至apiserv",{"_index":4145,"t":{"516":{"position":[[39454,57]]}}}],["node被设置上污点之后就和pod之间存在了一种相斥的关系，进而拒绝pod调度进来，甚至可以将已经存在的pod",{"_index":4336,"t":{"516":{"position":[[60987,60]]},"567":{"position":[[332,60]]}}}],["node通过污点拒绝pod调度上去，pod",{"_index":4375,"t":{"516":{"position":[[63224,43]]}}}],["node，将节点加入kubernet",{"_index":3466,"t":{"516":{"position":[[2899,20]]}}}],["node，那么pod将不会被运行，即使在集群中还有可用nod",{"_index":4264,"t":{"516":{"position":[[52647,97]]}}}],["node：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的dock",{"_index":3443,"t":{"516":{"position":[[1876,59]]}}}],["node：是一种专用模式，用于对kubelet",{"_index":5121,"t":{"516":{"position":[[122196,34]]}}}],["noexecut",{"_index":4379,"t":{"516":{"position":[[63607,11]]}}}],["noexecute：kubernetes将不会把pod调度到具有该污点的node上，同时也会将node上已存在的pod",{"_index":4341,"t":{"516":{"position":[[61241,61]]}}}],["nohup",{"_index":2619,"t":{"305":{"position":[[153,34],[243,5],[363,5],[489,57]]}}}],["nohup：（no",{"_index":2616,"t":{"305":{"position":[[32,9]]}}}],["nomin",{"_index":4368,"t":{"516":{"position":[[62871,9],[63749,9],[63914,9]]},"569":{"position":[[94,9]]},"571":{"position":[[94,9]]}}}],["non_field_error",{"_index":1451,"t":{"188":{"position":[[2666,20]]}}}],["noncp",{"_index":825,"t":{"121":{"position":[[3,7],[69,7]]}}}],["none",{"_index":635,"t":{"107":{"position":[[414,4]]},"151":{"position":[[623,4]]},"186":{"position":[[391,5],[907,8],[2594,8],[3602,5]]},"197":{"position":[[2672,5],[4912,6]]},"225":{"position":[[560,4],[735,21]]},"227":{"position":[[249,5],[797,5]]},"271":{"position":[[117,26]]},"275":{"position":[[1218,4]]},"328":{"position":[[54,5]]},"516":{"position":[[8155,5],[8188,5],[16576,5],[16595,5],[18503,5],[18955,5],[19298,5],[24573,5],[24587,5],[24602,5],[24754,5],[26051,5],[26782,5],[50967,5],[52333,5],[52339,5],[54771,5],[54777,5],[59566,5],[59964,5],[62513,5],[62519,5],[62923,5],[62929,5],[62935,5],[62982,5],[62988,5],[62994,5],[63041,5],[63047,5],[63053,5],[63791,5],[63797,5],[63803,5],[63974,5],[81666,5],[91405,5],[96089,5],[96297,5],[96316,5],[96491,4],[96504,5],[98216,4],[98610,4],[98615,5],[98778,5],[98797,5],[98847,4],[98965,4],[98978,5],[100173,5],[102994,5],[103760,4],[103930,4],[104166,4],[104171,5],[104213,4],[104218,5],[118285,5],[118304,5],[118370,5],[119746,5],[119765,5],[129712,5],[129785,5],[130442,5]]},"526":{"position":[[1521,5],[1540,5],[3448,5],[3900,5],[4243,5]]},"532":{"position":[[171,5],[177,5]]},"562":{"position":[[152,5],[550,5]]},"569":{"position":[[136,5],[142,5],[148,5]]},"571":{"position":[[154,5]]},"585":{"position":[[291,5]]},"595":{"position":[[115,4],[120,5],[162,4],[167,5]]}}}],["none。在html表单中体现为checkboxinput标签。如果设置了参数null=true，则表现为nullbooleanselect选择框。可以提供default",{"_index":2070,"t":{"252":{"position":[[439,105]]}}}],["none，默认fals",{"_index":1329,"t":{"184":{"position":[[3003,23]]}}}],["nonu",{"_index":2630,"t":{"309":{"position":[[84,4]]}}}],["nopreempt",{"_index":3311,"t":{"504":{"position":[[1288,35],[1324,9],[2336,35],[2372,9]]}}}],["normal",{"_index":3846,"t":{"516":{"position":[[19482,6],[19584,6],[19649,6],[19725,6],[19785,6],[24882,6],[33413,6],[33512,6],[33575,6],[33649,6],[33707,6],[33765,6],[33869,6],[33942,6],[41098,6],[41190,6],[41281,6],[41344,6],[44361,6],[44433,6],[44505,6],[45531,6],[45628,6],[45724,6],[45787,6],[46804,6],[46908,6],[46979,6],[47162,6],[49263,6]]},"526":{"position":[[4427,6],[4529,6],[4594,6],[4670,6],[4730,6]]}}}],["noschedule：kubernetes将不会把pod调度到具有该污点的node上，但不会影响当前node上已存在的pod",{"_index":4340,"t":{"516":{"position":[[61178,62]]}}}],["notaccept",{"_index":1923,"t":{"227":{"position":[[1162,13]]}}}],["notauthent",{"_index":1919,"t":{"227":{"position":[[1080,16]]}}}],["note",{"_index":2928,"t":{"442":{"position":[[568,5]]}}}],["notfound",{"_index":1921,"t":{"227":{"position":[[1124,8]]}}}],["notification_email",{"_index":3291,"t":{"504":{"position":[[633,18],[1682,18]]}}}],["notification_email_from",{"_index":3292,"t":{"504":{"position":[[671,23],[1720,23]]}}}],["notin",{"_index":4282,"t":{"516":{"position":[[53501,6],[53726,6],[57020,6]]},"545":{"position":[[736,6]]}}}],["notreadi",{"_index":3606,"t":{"516":{"position":[[8113,8],[8146,8],[8179,8]]}}}],["now",{"_index":2057,"t":{"249":{"position":[[404,3]]}}}],["ns",{"_index":3694,"t":{"516":{"position":[[11737,2],[12850,2],[13500,2],[15810,7],[15833,2],[15865,2],[15980,7],[16003,2],[16006,4],[16040,2],[16112,2],[16115,4],[16199,2],[16474,6],[16501,2],[16504,4],[16543,2],[16825,2],[16910,2],[17070,2],[17103,2],[124670,2]]},"526":{"position":[[755,7],[778,2],[810,2],[925,7],[948,2],[951,4],[985,2],[1057,2],[1060,4],[1144,2],[1419,6],[1446,2],[1449,4],[1488,2],[1770,2],[1855,2],[2015,2],[2048,2]]},"649":{"position":[[107,2]]}}}],["nu",{"_index":2629,"t":{"309":{"position":[[71,2]]}}}],["null",{"_index":731,"t":{"112":{"position":[[743,21],[1553,5]]},"254":{"position":[[77,4],[209,5],[539,4],[1083,33]]},"516":{"position":[[10205,36],[10305,6],[10320,9]]}}}],["null=tru",{"_index":1235,"t":{"184":{"position":[[448,10]]},"256":{"position":[[362,10]]}}}],["nullbooleanfield",{"_index":1248,"t":{"184":{"position":[[1043,16],[1060,18]]}}}],["null参数对manytomanyfield多对多字段无效！设置null=tru",{"_index":2232,"t":{"256":{"position":[[1251,45]]}}}],["null；否则，所有的字符串都被当作tru",{"_index":898,"t":{"139":{"position":[[459,49]]}}}],["num",{"_index":2791,"t":{"404":{"position":[[32,4]]}}}],["num2=$[$num+1",{"_index":2789,"t":{"404":{"position":[[6,14]]}}}],["num3=`expr",{"_index":2790,"t":{"404":{"position":[[21,10]]}}}],["num4=$num+1",{"_index":2792,"t":{"404":{"position":[[46,11]]}}}],["num=1",{"_index":2788,"t":{"404":{"position":[[0,5]]}}}],["number",{"_index":3035,"t":{"455":{"position":[[809,7]]},"516":{"position":[[29050,6],[29174,6]]}}}],["n。n",{"_index":2736,"t":{"367":{"position":[[27,28]]}}}],["o",{"_index":192,"t":{"34":{"position":[[1208,1],[4842,1]]},"42":{"position":[[925,1],[975,1]]},"315":{"position":[[36,1],[56,1]]},"396":{"position":[[106,1],[148,1]]},"429":{"position":[[365,1]]},"516":{"position":[[5455,1],[11599,1],[16121,1],[16211,1],[19910,1],[23923,1],[25954,1],[26689,1],[36964,1],[38402,1],[43014,1],[50408,1],[50884,1],[51768,1],[52250,1],[54674,1],[55578,1],[59834,1],[60732,1],[61935,1],[62364,1],[62825,1],[63703,1],[63868,1],[66297,1],[68022,1],[68394,1],[68766,1],[76494,1],[77687,1],[78430,1],[85978,1],[86176,1],[88067,1],[94919,1],[95988,1],[98520,1],[100076,1],[108104,1],[109450,1],[113899,1],[115228,1],[115462,1],[116499,1],[116680,1],[116908,1]]},"526":{"position":[[1066,1],[1156,1],[4855,1]]},"532":{"position":[[74,1]]},"541":{"position":[[74,1]]},"562":{"position":[[420,1]]},"567":{"position":[[77,1]]},"569":{"position":[[48,1]]},"571":{"position":[[48,1]]},"620":{"position":[[39,1]]},"624":{"position":[[47,1]]},"626":{"position":[[39,1]]},"630":{"position":[[48,1]]},"632":{"position":[[47,1]]},"634":{"position":[[46,1]]}}}],["obeject",{"_index":4014,"t":{"516":{"position":[[29515,7]]}}}],["obj",{"_index":1124,"t":{"173":{"position":[[308,5],[385,5]]},"177":{"position":[[1324,4],[1372,4],[1618,5],[1710,5],[1746,4]]},"211":{"position":[[176,4],[205,8],[301,5],[307,33]]}}}],["obj.authors.al",{"_index":1214,"t":{"177":{"position":[[1658,19]]}}}],["obj.group.al",{"_index":1126,"t":{"173":{"position":[[352,16]]}}}],["obj.user.al",{"_index":1130,"t":{"173":{"position":[[432,15]]}}}],["object",{"_index":659,"t":{"110":{"position":[[565,6]]},"112":{"position":[[171,7]]},"118":{"position":[[199,7]]},"252":{"position":[[5093,30]]},"328":{"position":[[472,7]]},"516":{"position":[[30320,7],[30333,7],[30348,7],[30449,7],[30706,9],[30763,9],[31160,9],[31353,9],[31585,9],[31781,9],[31809,9],[31844,7],[36325,9],[47695,7],[47713,7],[47729,7]]}}}],["object.mug_shot.url",{"_index":2150,"t":{"252":{"position":[[5073,19]]}}}],["offset_query_param",{"_index":1894,"t":{"225":{"position":[[1338,18]]}}}],["offset参数名，默认'offset",{"_index":1895,"t":{"225":{"position":[[1357,20]]}}}],["off，以kb、mb、gb显示文件大小，默认为on，以byt",{"_index":3128,"t":{"457":{"position":[[4787,45]]}}}],["off，显示的⽂件时间为gmt",{"_index":3131,"t":{"457":{"position":[[4923,37]]}}}],["ok",{"_index":124,"t":{"27":{"position":[[775,3]]}}}],["older",{"_index":758,"t":{"112":{"position":[[1642,5]]}}}],["oldreplicaset",{"_index":3928,"t":{"516":{"position":[[24738,15]]}}}],["on",{"_index":1420,"t":{"188":{"position":[[1113,3]]}}}],["on_delet",{"_index":2207,"t":{"256":{"position":[[65,10],[2391,10]]}}}],["on_delete=models.cascad",{"_index":1947,"t":{"230":{"position":[[893,25]]},"256":{"position":[[198,25],[1749,25],[1810,25],[1873,25]]},"258":{"position":[[1058,25],[2017,25]]}}}],["on_delete=models.set_nul",{"_index":2212,"t":{"256":{"position":[[323,26]]}}}],["on_delete。在django2.0版本后，on_delet",{"_index":2208,"t":{"256":{"position":[[87,64]]}}}],["on_delete：当一个外键关联的对象被删除时，django将模仿on_delete参数定义的sql",{"_index":2210,"t":{"256":{"position":[[230,60]]}}}],["onbuild",{"_index":111,"t":{"27":{"position":[[510,7]]},"34":{"position":[[5061,7],[5078,10],[5097,7],[5228,7]]}}}],["onetoonefield",{"_index":2257,"t":{"256":{"position":[[2333,19]]}}}],["onetoonefield(to",{"_index":2258,"t":{"256":{"position":[[2373,17]]}}}],["onfailur",{"_index":4010,"t":{"516":{"position":[[29427,10],[48471,9]]}}}],["onfailure，则job会在pod出现故障时重启容器，而不是创建pod，fail",{"_index":4680,"t":{"516":{"position":[[87397,53]]}}}],["opaqu",{"_index":5091,"t":{"516":{"position":[[119499,6],[119777,6]]}}}],["open",{"_index":4203,"t":{"516":{"position":[[44680,4]]}}}],["openssl",{"_index":4912,"t":{"516":{"position":[[105261,7],[125103,7],[125219,7]]},"606":{"position":[[0,7]]}}}],["oper",{"_index":4285,"t":{"516":{"position":[[53707,8],[53849,9],[53920,9],[54004,9],[54434,9],[56116,9],[57001,8],[57226,8],[58278,9],[60393,9],[63546,9],[64118,8],[65382,9],[70104,9],[85377,9],[87090,9],[90268,9]]},"541":{"position":[[612,9]]},"545":{"position":[[717,8],[942,8]]},"549":{"position":[[483,9]]},"562":{"position":[[979,9]]},"571":{"position":[[298,8]]}}}],["operat",{"_index":4279,"t":{"516":{"position":[[53459,6]]}}}],["opt",{"_index":280,"t":{"42":{"position":[[400,3]]},"516":{"position":[[5889,6]]}}}],["opt/nginx/logs/nginx.pid",{"_index":2994,"t":{"451":{"position":[[146,25]]}}}],["opt/nginx/stat",{"_index":3077,"t":{"457":{"position":[[1597,18]]}}}],["opt/nginx/static/imag",{"_index":3080,"t":{"457":{"position":[[1797,25]]}}}],["opt/nginx/static/image/1.png",{"_index":3079,"t":{"457":{"position":[[1663,29],[1870,29]]}}}],["opt/nginx/tmp",{"_index":3004,"t":{"451":{"position":[[424,15]]}}}],["opt/sourc",{"_index":3126,"t":{"457":{"position":[[4702,12]]}}}],["opt/source/download",{"_index":3133,"t":{"457":{"position":[[4999,21]]}}}],["opt/xxxx",{"_index":164,"t":{"32":{"position":[[815,9]]}}}],["option",{"_index":869,"t":{"137":{"position":[[227,7],[408,7],[544,7],[689,7],[852,7],[1079,7]]},"184":{"position":[[1830,10]]},"252":{"position":[[683,10],[1669,24],[3021,10],[4391,10],[5426,10]]},"256":{"position":[[76,10],[885,10],[2421,10]]},"269":{"position":[[228,10],[2322,10]]},"271":{"position":[[168,7],[586,7]]},"294":{"position":[[6,9]]},"320":{"position":[[32,6]]},"516":{"position":[[19244,9]]},"526":{"position":[[4189,9]]}}}],["options),ipv4或者ipv6地址，字符串形式，例如192.0.2.30或者2a02:42fe::4。在html中表现为textinput标签。参数protocol默认值为‘both’，可选‘ipv4’或者‘ipv6’，表示你的ip",{"_index":2091,"t":{"252":{"position":[[1963,127]]}}}],["options指令用于配置整个jenkin",{"_index":866,"t":{"137":{"position":[[0,22]]}}}],["options：用于配置jenkin",{"_index":859,"t":{"135":{"position":[[258,19]]}}}],["oracl",{"_index":2325,"t":{"258":{"position":[[3572,7]]}}}],["order",{"_index":1120,"t":{"173":{"position":[[253,8]]},"175":{"position":[[1036,8]]},"177":{"position":[[1240,8]]},"258":{"position":[[249,8],[2692,8],[2866,8],[2914,8],[2963,8]]}}}],["order_d",{"_index":2291,"t":{"258":{"position":[[1544,12],[1559,16],[1606,13]]}}}],["order_with_respect_to",{"_index":2296,"t":{"258":{"position":[[1795,21],[2061,21]]}}}],["ordercommitseri",{"_index":1794,"t":{"199":{"position":[[3189,21]]}}}],["orderdataseri",{"_index":1795,"t":{"199":{"position":[[3224,19]]}}}],["ordereddict([('btitl",{"_index":1428,"t":{"188":{"position":[[1387,23]]}}}],["ordereddict([('id",{"_index":1362,"t":{"186":{"position":[[552,20],[674,19],[795,19],[916,19],[2489,19]]}}}],["ordering_field",{"_index":1868,"t":{"223":{"position":[[417,15]]}}}],["orderingfilt",{"_index":1867,"t":{"223":{"position":[[400,16]]}}}],["ordering参数的可选字段值需要在ordering_field",{"_index":1866,"t":{"223":{"position":[[227,45]]}}}],["org",{"_index":592,"t":{"101":{"position":[[82,3],[239,3]]}}}],["org.apache.commons.io.fileutils.sizeofdirectory(new",{"_index":808,"t":{"116":{"position":[[293,52]]}}}],["org.apache.commons.math3.primes.prim",{"_index":769,"t":{"114":{"position":[[100,38]]}}}],["org.apache.commons.net.ftp.ftpcli",{"_index":777,"t":{"114":{"position":[[310,36]]}}}],["org.foo.bar",{"_index":595,"t":{"101":{"position":[[117,11],[291,11]]}}}],["org.jenkinsci.plugins.scriptsecurity.scripts.scriptapprov",{"_index":817,"t":{"118":{"position":[[68,59]]}}}],["org.jenkinsci.plugins.workflow.cps.envactionimpl",{"_index":654,"t":{"110":{"position":[[405,48]]}}}],["org.jenkinsci.plugins.workflow.job.workflowjob",{"_index":746,"t":{"112":{"position":[[1180,46]]}}}],["org.jenkinsci.plugins.workflow.support.steps.build.runwrapp",{"_index":683,"t":{"110":{"position":[[1333,61]]}}}],["org.jenkinsci.plugins.workflow.support.steps.executorstepexecution.placeholdertask",{"_index":744,"t":{"112":{"position":[[1055,82]]}}}],["org.kohsuke.stapler.queryparamet",{"_index":466,"t":{"83":{"position":[[130,35]]}}}],["org.kohsuke.stapler.stapl",{"_index":465,"t":{"83":{"position":[[94,28]]}}}],["org.kohsuke.stapler.staplerrequest",{"_index":463,"t":{"83":{"position":[[7,35]]}}}],["org.kohsuke.stapler.staplerrespons",{"_index":464,"t":{"83":{"position":[[50,36]]}}}],["org.opencontainers.image.authors=\"yeasi",{"_index":264,"t":{"34":{"position":[[5399,40]]}}}],["org.opencontainers.image.documentation=\"https://yeasy.gitbooks.io",{"_index":265,"t":{"34":{"position":[[5446,66]]}}}],["origin",{"_index":3167,"t":{"463":{"position":[[0,28]]}}}],["os",{"_index":2169,"t":{"252":{"position":[[6025,2]]}}}],["os.path.join(base_dir",{"_index":1073,"t":{"170":{"position":[[202,22]]},"267":{"position":[[144,22]]},"269":{"position":[[431,22]]},"289":{"position":[[138,22]]}}}],["os.path.join(settings.local_file_dir",{"_index":2172,"t":{"252":{"position":[[6116,37]]}}}],["ostream",{"_index":795,"t":{"114":{"position":[[728,7],[763,7]]}}}],["out",{"_index":2692,"t":{"342":{"position":[[97,4]]},"344":{"position":[[351,15]]},"516":{"position":[[75869,3],[77536,3],[105338,3],[124999,3],[125137,3],[125294,3]]},"606":{"position":[[77,3]]}}}],["out.fil",{"_index":2624,"t":{"305":{"position":[[557,8]]}}}],["output",{"_index":3406,"t":{"510":{"position":[[859,6],[972,6]]}}}],["over",{"_index":4066,"t":{"516":{"position":[[33786,4],[33891,4],[33964,4],[44384,4],[44456,4],[44621,4],[45881,4],[46825,4],[46930,4],[47001,4],[47075,4],[47184,4],[49176,4]]}}}],["overwrit",{"_index":3895,"t":{"516":{"position":[[22281,9]]}}}],["ownerrefer",{"_index":4038,"t":{"516":{"position":[[30747,15]]}}}],["ox(models.model",{"_index":2263,"t":{"258":{"position":[[165,17]]}}}],["oxen",{"_index":2266,"t":{"258":{"position":[[298,6]]}}}],["p",{"_index":53,"t":{"21":{"position":[[573,1],[696,1]]},"23":{"position":[[204,5],[211,1],[220,5],[227,1]]},"34":{"position":[[1290,1],[3942,1],[3985,1],[4007,41]]},"177":{"position":[[858,1],[1489,1]]},"273":{"position":[[742,11],[760,6]]},"294":{"position":[[205,32]]},"315":{"position":[[20,1],[28,1]]},"322":{"position":[[90,5]]},"402":{"position":[[490,1],[526,1]]},"444":{"position":[[25,1]]},"516":{"position":[[4609,1],[7683,1]]}}}],["p.id",{"_index":1192,"t":{"177":{"position":[[839,6]]}}}],["p.name",{"_index":1193,"t":{"177":{"position":[[846,7]]}}}],["p<emthank",{"_index":3862,"t":{"516":{"position":[[20129,10]]},"526":{"position":[[5074,10]]}}}],["p<name>pattern",{"_index":2013,"t":{"240":{"position":[[103,17]]}}}],["p<year>[0",{"_index":2021,"t":{"240":{"position":[[808,11]]}}}],["packag",{"_index":618,"t":{"103":{"position":[[439,7]]},"107":{"position":[[169,7]]},"516":{"position":[[6458,7]]}}}],["package.json",{"_index":161,"t":{"32":{"position":[[598,14],[652,18],[689,17],[725,13],[786,15]]}}}],["page",{"_index":1664,"t":{"197":{"position":[[2617,4],[2660,4]]},"225":{"position":[[691,21]]},"457":{"position":[[3076,6]]}}}],["page_id",{"_index":2029,"t":{"242":{"position":[[378,12],[598,7]]}}}],["page_list",{"_index":2397,"t":{"264":{"position":[[1978,9]]}}}],["page_query_param",{"_index":1883,"t":{"225":{"position":[[674,16]]}}}],["page_s",{"_index":1872,"t":{"225":{"position":[[144,12],[285,9],[326,11],[659,9],[925,11],[1278,22]]}}}],["page_size_query_param",{"_index":1877,"t":{"225":{"position":[[302,21],[713,21],[901,21]]}}}],["page_slug",{"_index":2038,"t":{"242":{"position":[[588,9]]}}}],["pagenumberpagin",{"_index":1881,"t":{"225":{"position":[[574,20],[822,20]]}}}],["pagination_class",{"_index":1653,"t":{"197":{"position":[[2128,16]]},"225":{"position":[[471,16],[541,16],[1076,16],[1585,16]]}}}],["pagination类，来为视图添加不同分页行为。在视图中通过pagination_cla",{"_index":1874,"t":{"225":{"position":[[170,59]]}}}],["parallel",{"_index":4669,"t":{"516":{"position":[[86760,12],[88518,12],[90116,12]]}}}],["parallelize(int",{"_index":770,"t":{"114":{"position":[[144,15]]}}}],["parallel：并行执行多个step。在pipeline插件1.2版本后，parallel",{"_index":862,"t":{"135":{"position":[[362,62]]}}}],["param",{"_index":678,"t":{"110":{"position":[[1084,7],[1092,39]]},"116":{"position":[[173,6],[196,6]]}}}],["paramet",{"_index":919,"t":{"141":{"position":[[84,10]]},"155":{"position":[[362,11],[510,11]]},"455":{"position":[[435,12],[461,10]]}}}],["parameter_nam",{"_index":1188,"t":{"177":{"position":[[732,14]]}}}],["parameters（可选）：数组类型，传入目标pipelin",{"_index":1014,"t":{"155":{"position":[[459,50]]}}}],["parameters：与input不同，parameters是执行pipelin",{"_index":863,"t":{"135":{"position":[[425,50]]}}}],["params.boolean_param_nam",{"_index":680,"t":{"110":{"position":[[1180,27]]}}}],["params.getordefault('boolean_param_nam",{"_index":681,"t":{"110":{"position":[[1227,42]]}}}],["params.userflag",{"_index":925,"t":{"141":{"position":[[211,19]]}}}],["parent_link=fals",{"_index":2259,"t":{"256":{"position":[[2402,18]]}}}],["parseerror",{"_index":1917,"t":{"227":{"position":[[1038,10]]}}}],["parser解析器，在接收到请求后会自动根据cont",{"_index":1510,"t":{"193":{"position":[[134,32]]}}}],["partial",{"_index":1702,"t":{"197":{"position":[[4641,7]]}}}],["partial=parti",{"_index":1705,"t":{"197":{"position":[[4771,16]]}}}],["partial=tru",{"_index":1484,"t":{"188":{"position":[[5781,13]]}}}],["partial_update(request",{"_index":1699,"t":{"197":{"position":[[4440,28]]}}}],["partial_update(self",{"_index":1717,"t":{"197":{"position":[[5177,20]]}}}],["pass",{"_index":2059,"t":{"249":{"position":[[462,4]]},"258":{"position":[[999,4]]},"504":{"position":[[1410,4],[2458,4]]}}}],["password",{"_index":932,"t":{"141":{"position":[[585,14]]},"155":{"position":[[587,11]]},"175":{"position":[[353,9],[1219,14]]},"269":{"position":[[2462,11]]},"516":{"position":[[35841,10],[36099,9],[119379,11],[119531,9],[119794,9],[120426,8]]},"642":{"position":[[89,8]]}}}],["password(nam",{"_index":1016,"t":{"155":{"position":[[572,14]]}}}],["password:123456",{"_index":5082,"t":{"516":{"position":[[118033,15],[118346,15],[119045,15]]}}}],["password=yourpassword",{"_index":292,"t":{"42":{"position":[[977,21]]}}}],["patch",{"_index":1742,"t":{"197":{"position":[[5986,5]]},"516":{"position":[[12281,5],[14734,5],[123465,8]]},"524":{"position":[[417,5]]}}}],["path",{"_index":147,"t":{"27":{"position":[[1442,4]]},"112":{"position":[[1864,5]]},"114":{"position":[[375,5]]},"116":{"position":[[203,4],[264,5]]},"236":{"position":[[150,4]]},"238":{"position":[[284,4]]},"240":{"position":[[65,6],[209,5],[724,6]]},"242":{"position":[[105,4],[319,4]]},"244":{"position":[[43,35],[130,4]]},"277":{"position":[[69,4]]},"347":{"position":[[122,4],[184,4],[202,4]]},"457":{"position":[[1565,4]]},"475":{"position":[[33,4],[387,13]]},"516":{"position":[[29031,5],[29862,5],[29988,5],[30087,5],[42316,5],[43769,5],[46575,5],[47480,44],[48271,5],[48892,5],[104408,6],[104415,5],[104506,6],[104515,5],[104913,4],[105708,6],[105715,5],[105806,6],[105815,5],[106303,4],[109046,5],[110955,5],[113276,5],[113474,5],[113672,5]]},"601":{"position":[[80,4]]},"614":{"position":[[145,4]]}}}],["path('<page_slug",{"_index":2028,"t":{"242":{"position":[[360,17]]}}}],["path('admin",{"_index":1058,"t":{"166":{"position":[[119,13]]}}}],["path('articles/2003",{"_index":1981,"t":{"236":{"position":[[191,22]]},"240":{"position":[[259,22]]}}}],["path('articles/<int:year",{"_index":1983,"t":{"236":{"position":[[240,28]]}}}],["path('articles/<int:year>/<int:month",{"_index":1985,"t":{"236":{"position":[[290,40]]}}}],["path('articles/<int:year>/<int:month>/<slug:slug",{"_index":1987,"t":{"236":{"position":[[353,52]]}}}],["path('blog",{"_index":2041,"t":{"244":{"position":[[233,13]]}}}],["path('blog/<int:year",{"_index":2040,"t":{"244":{"position":[[171,24]]}}}],["path('commun",{"_index":2023,"t":{"242":{"position":[[141,18]]}}}],["path('contact",{"_index":2025,"t":{"242":{"position":[[189,16]]}}}],["path('discuss",{"_index":2034,"t":{"242":{"position":[[461,16]]}}}],["path('edit",{"_index":2032,"t":{"242":{"position":[[434,13]]}}}],["path('foo/<int:cod",{"_index":2469,"t":{"273":{"position":[[415,23],[650,23]]}}}],["path('histori",{"_index":2030,"t":{"242":{"position":[[401,16]]}}}],["path('permiss",{"_index":2036,"t":{"242":{"position":[[494,20]]}}}],["path()方法可以接收4个参数，其中前2个是必须的：route和view，以及2个可选的参数：kwargs和nam",{"_index":1979,"t":{"236":{"position":[[65,60]]}}}],["path:$java_home/bin:$catalina_home/lib:$catalina_home/bin",{"_index":148,"t":{"27":{"position":[[1447,58]]}}}],["path：必须指定的参数。表示一个系统绝对路径。path",{"_index":2159,"t":{"252":{"position":[[5511,52]]}}}],["pattern",{"_index":906,"t":{"139":{"position":[[790,8],[895,8],[970,8]]},"240":{"position":[[130,11]]},"328":{"position":[[92,13]]},"330":{"position":[[63,13]]},"333":{"position":[[74,13]]}}}],["paus",{"_index":4442,"t":{"516":{"position":[[69740,7],[75641,5],[77275,5],[77387,6],[77581,59]]}}}],["pause:3.1",{"_index":3579,"t":{"516":{"position":[[7060,9]]}}}],["pause容器，这是每个pod",{"_index":3973,"t":{"516":{"position":[[27547,33]]}}}],["pc",{"_index":4407,"t":{"516":{"position":[[65806,4],[65888,2],[66116,2],[66275,2],[66362,2],[66556,2],[66594,2],[66632,2],[66746,2],[66890,2],[66929,2],[66967,2],[67005,2],[67044,2],[67082,2],[67220,2],[67398,2],[67441,2],[67485,2],[67529,2],[67568,2],[67612,2],[67743,2],[67782,2],[67899,2],[68082,2],[68245,2],[68454,2],[68658,2],[68695,3],[68920,2],[68973,3],[69075,2],[69113,2],[69212,2],[69247,3],[70311,4],[70391,2],[70627,2],[70804,2],[70861,2],[71012,2],[71133,2],[71183,2],[71233,2],[71350,2],[71478,2],[71535,2],[71646,2],[71697,2],[71746,2],[71795,2],[71846,2],[71981,2],[72125,2],[72176,2],[72227,2],[72278,2],[72690,4],[72841,2],[73015,2],[73064,2],[73113,2],[73162,2],[73215,2],[73268,2],[73321,2],[73369,2],[73417,2],[73465,2],[73523,2],[73581,2],[73639,2],[73687,2],[73735,2],[73788,4],[73995,2],[74169,2],[74216,2],[74263,2],[74310,2],[74357,2],[74404,2],[74461,2],[74508,2],[74559,2],[74606,2],[74663,2],[74710,2],[74761,2],[74808,2],[74865,2],[74912,2],[74963,2],[75010,2],[75067,2],[75114,2],[75404,2],[75441,2],[75478,2],[75801,2],[75833,3],[75938,2],[76337,2],[76555,2],[76814,2],[76849,2],[76883,2],[77216,2],[77292,2],[77455,2],[77499,3],[77743,2],[77797,2],[77851,2],[77985,2],[78036,2],[78087,2],[78138,2],[78189,2],[78313,2],[78486,2],[78540,2],[78594,2],[78728,2],[78777,2],[78828,2],[78879,2],[79012,2],[79047,3],[80758,4],[81707,4],[81802,2],[82051,2],[82221,2],[82444,2],[82487,2],[82530,2],[82574,2],[82617,2],[82661,2],[82704,2],[82746,2],[82787,2],[85564,4],[85642,2],[85864,2],[86055,2],[86222,2],[86277,2],[86387,2],[86420,3],[87571,4],[87638,2],[87975,2],[88134,2],[88190,2],[88371,2],[88402,2],[88683,2],[88713,2],[88743,2],[88773,2],[88806,2],[88836,2],[88866,2],[88906,2],[88939,2],[88969,2],[88999,2],[89032,2],[89062,2],[89102,2],[89132,2],[89172,2],[89202,2],[89232,2],[89262,2],[89295,2],[89328,2],[89410,2],[89432,3],[90805,4],[90885,2],[91215,2],[91374,2],[91499,2],[91535,2],[91571,2],[91660,2],[91710,2],[91758,2],[91857,2],[91887,3],[94559,2],[94973,2],[95048,2],[95123,2],[95267,2],[99036,2]]},"579":{"position":[[32,4]]},"585":{"position":[[332,4],[427,2]]},"587":{"position":[[44,2]]},"589":{"position":[[101,2],[324,2],[367,2],[410,2],[454,2],[497,2],[541,2],[584,2],[626,2],[667,2]]}}}],["pcw7x",{"_index":3741,"t":{"516":{"position":[[13427,5]]}}}],["pend",{"_index":4119,"t":{"516":{"position":[[38458,7],[50954,7],[52317,7],[54757,7],[58693,7],[62499,7],[62909,7],[62968,7],[63028,7],[63778,7],[73356,7],[73404,7],[73452,7],[74391,7],[74593,7],[74795,7],[74997,7],[83430,7],[83470,7],[83510,7],[83700,7],[83740,7],[83780,7],[83820,7],[88823,7],[88853,7],[88956,7],[88986,7],[89049,7],[89119,7]]},"532":{"position":[[157,7]]},"553":{"position":[[132,7]]},"569":{"position":[[123,7]]},"589":{"position":[[1310,7],[1350,7],[1390,7],[1580,7],[1620,7],[1660,7],[1700,7]]}}}],["pending）：apiserver已经创建了pod",{"_index":4135,"t":{"516":{"position":[[38987,56]]}}}],["perform_create(self",{"_index":1683,"t":{"197":{"position":[[3613,20]]}}}],["perform_destroy(self",{"_index":1728,"t":{"197":{"position":[[5631,21]]}}}],["perform_update(self",{"_index":1716,"t":{"197":{"position":[[5121,20]]}}}],["periodsecond",{"_index":4004,"t":{"516":{"position":[[29272,14],[47829,13]]}}}],["perman",{"_index":3104,"t":{"457":{"position":[[3495,9]]}}}],["permiss",{"_index":290,"t":{"42":{"position":[[806,11]]},"201":{"position":[[517,10]]},"258":{"position":[[3043,11],[3162,11]]}}}],["permission_class",{"_index":1814,"t":{"205":{"position":[[211,37],[373,18]]},"209":{"position":[[331,18]]},"211":{"position":[[463,18]]},"219":{"position":[[386,18]]}}}],["permissiondeni",{"_index":1920,"t":{"227":{"position":[[1102,16]]}}}],["permissoin_class",{"_index":1616,"t":{"197":{"position":[[369,18]]}}}],["persist",{"_index":4816,"t":{"516":{"position":[[97567,10]]}}}],["persistentvolum",{"_index":3712,"t":{"516":{"position":[[12053,17],[111775,16],[113140,16],[113338,16],[113536,16]]}}}],["persistentvolume/pv1",{"_index":5029,"t":{"516":{"position":[[113768,20]]},"618":{"position":[[49,20]]}}}],["persistentvolume/pv2",{"_index":5030,"t":{"516":{"position":[[113797,20]]},"618":{"position":[[78,20]]}}}],["persistentvolume/pv3",{"_index":5031,"t":{"516":{"position":[[113826,20]]},"618":{"position":[[107,20]]}}}],["persistentvolumeclaim",{"_index":3714,"t":{"516":{"position":[[12077,22],[114183,21],[114597,21],[114743,21],[114889,21],[115977,22],[116299,22]]},"620":{"position":[[323,21]]}}}],["persistentvolumeclaim/pvc1",{"_index":5045,"t":{"516":{"position":[[115070,26]]},"622":{"position":[[50,26]]}}}],["persistentvolumeclaim/pvc2",{"_index":5046,"t":{"516":{"position":[[115105,26]]},"622":{"position":[[85,26]]}}}],["persistentvolumeclaim/pvc3",{"_index":5047,"t":{"516":{"position":[[115140,26]]},"622":{"position":[[120,26]]}}}],["persistentvolumereclaimpolici",{"_index":5005,"t":{"516":{"position":[[111928,30],[112279,35],[113233,30],[113431,30],[113629,30]]}}}],["person",{"_index":2241,"t":{"256":{"position":[[1592,7],[1657,10],[1775,6],[1865,7]]}}}],["person(models.model",{"_index":2235,"t":{"256":{"position":[[1430,21]]}}}],["pfcvh",{"_index":4696,"t":{"516":{"position":[[88750,5],[89006,5]]}}}],["phase",{"_index":3787,"t":{"516":{"position":[[16456,6]]},"526":{"position":[[1401,6]]}}}],["phone",{"_index":1145,"t":{"175":{"position":[[419,8],[930,8],[1210,8],[1395,11]]}}}],["photo",{"_index":3110,"t":{"457":{"position":[[3770,7],[3987,7]]}}}],["photos/$1",{"_index":3109,"t":{"457":{"position":[[3747,11]]}}}],["pic",{"_index":3108,"t":{"457":{"position":[[3720,5],[3736,10],[3929,4],[4480,6]]}}}],["pic/$1",{"_index":3100,"t":{"457":{"position":[[3334,8]]}}}],["pics/$1",{"_index":3107,"t":{"457":{"position":[[3699,9]]}}}],["pid",{"_index":2941,"t":{"446":{"position":[[352,3]]},"449":{"position":[[159,3],[198,3]]},"451":{"position":[[102,4],[130,3],[142,3]]}}}],["pillow",{"_index":2145,"t":{"252":{"position":[[4696,9]]}}}],["ping",{"_index":4160,"t":{"516":{"position":[[40595,4],[40736,4]]}}}],["pip",{"_index":1040,"t":{"162":{"position":[[0,3]]},"180":{"position":[[6,3]]},"221":{"position":[[50,3]]},"230":{"position":[[9,3]]}}}],["pipelin",{"_index":365,"t":{"64":{"position":[[0,8]]},"97":{"position":[[16,8],[161,8],[299,8]]},"103":{"position":[[69,8],[519,8]]},"105":{"position":[[23,8]]},"107":{"position":[[238,8],[397,8]]},"110":{"position":[[1552,8],[1618,8]]},"128":{"position":[[112,8],[194,28]]},"130":{"position":[[149,20],[232,19]]},"132":{"position":[[448,8]]},"135":{"position":[[78,16],[103,15]]},"137":{"position":[[831,8],[945,8],[989,28]]},"141":{"position":[[63,8]]},"151":{"position":[[606,8]]},"157":{"position":[[68,25]]}}}],["pipeline。jenkins对这个过程进行抽象，设计出一个基本的pipelin",{"_index":830,"t":{"128":{"position":[[0,111]]}}}],["pipeline中定义参数使用的是parameters指令，其只允许被放在pipelin",{"_index":918,"t":{"141":{"position":[[9,53]]}}}],["pipeline其实就是基于groovy语言实现的一种dsl",{"_index":829,"t":{"126":{"position":[[8,84]]}}}],["pipeline内置步骤可以通过http://<jenkins_url>/job/<job_name>/pipelin",{"_index":951,"t":{"147":{"position":[[0,60]]}}}],["pipeline内置环境变量可以通过http://<jenkins_url>/job/<job_name>/pipelin",{"_index":942,"t":{"143":{"position":[[410,62]]}}}],["pipeline呢？pipelin",{"_index":841,"t":{"130":{"position":[[360,18]]}}}],["pipeline基本结构决定的是pipeline整体流程，但是真正“做事”的还是pipeline中的每一个步骤。步骤是pipeline中已经不能再拆分的最小操作。前文中，我们只看到两个步骤：sh和echo。sh是指执行一条shell命令；echo是指执行echo命令。这两个步骤只是jenkin",{"_index":838,"t":{"130":{"position":[[0,148]]}}}],["pipeline工作在工作空间目录下，dir",{"_index":956,"t":{"149":{"position":[[85,46]]}}}],["pipeline或阶段的完成状态，post",{"_index":845,"t":{"132":{"position":[[80,36]]}}}],["pipeline执行完成后，并不会自动清理空间。如果需要（通常需要）清理工作空间，则可以通过workspac",{"_index":1029,"t":{"155":{"position":[[1080,59]]}}}],["pipeline时，可以在pipeline的开始阶段加一句：sh",{"_index":944,"t":{"143":{"position":[[495,35]]}}}],["pipeline本身的选项。根据具体的选项不同，可以将其放在pipeline块或stage块中。以下例子若没有特别说明，options被放在pipelin",{"_index":867,"t":{"137":{"position":[[23,81]]}}}],["pipeline本身的选项，比如opt",{"_index":860,"t":{"135":{"position":[[278,23]]}}}],["pipeline的参数后，如何使用呢？被传入的参数会放到一个名为params的对象中，在pipeline中可直接使用。params.userflag就是引用parameters指令中定义的userflag",{"_index":926,"t":{"141":{"position":[[239,109]]}}}],["pipeline的，比如pipelin",{"_index":934,"t":{"143":{"position":[[73,30]]}}}],["pipeline运行在一个类unix系统上，则返回tru",{"_index":961,"t":{"149":{"position":[[292,34]]}}}],["pipeline通过各种指令（directive）来丰富自己。指令可以被理解为对jenkin",{"_index":855,"t":{"135":{"position":[[30,47]]}}}],["pipeline，那么就表示可以在一个pipeline中“调用”另一个pipeline。在jenkinspipeline中可以使用build步骤实现此功能。build步骤是pipelin",{"_index":1007,"t":{"155":{"position":[[16,129]]}}}],["pipeline：nod",{"_index":998,"t":{"153":{"position":[[0,25]]}}}],["pipline类型流水线的实现为workflowrun",{"_index":693,"t":{"110":{"position":[[1656,38]]}}}],["pk",{"_index":1649,"t":{"197":{"position":[[1977,4],[4321,4]]},"199":{"position":[[2551,4]]}}}],["pk=none",{"_index":1756,"t":{"199":{"position":[[431,9]]}}}],["pki",{"_index":5154,"t":{"516":{"position":[[124917,5],[124966,5],[125097,5],[125213,5],[125358,5],[125529,5],[125707,5],[125826,5],[125956,5],[126149,5],[126749,5],[126951,5],[127069,5],[127331,5]]}}}],["pl",{"_index":445,"t":{"78":{"position":[[495,2],[558,2]]}}}],["plugin",{"_index":288,"t":{"42":{"position":[[779,6]]},"110":{"position":[[305,6]]}}}],["plugin/blob/master/compatibility.md）方便大家检索，如图3",{"_index":843,"t":{"130":{"position":[[440,46]]}}}],["pluginmanag",{"_index":649,"t":{"110":{"position":[[255,13]]}}}],["plugin的github仓库给出了一个列表（https：//github.com/jenkinsci/pipelin",{"_index":842,"t":{"130":{"position":[[379,60]]}}}],["po",{"_index":3695,"t":{"516":{"position":[[11757,2]]}}}],["pod",{"_index":3593,"t":{"516":{"position":[[7619,3],[9385,6],[10933,3],[11492,7],[11512,3],[11518,7],[11538,3],[11585,3],[11740,5],[11746,5],[11752,4],[11765,8],[11800,7],[11823,7],[11850,7],[11872,7],[11885,7],[11905,7],[11942,7],[11967,7],[11995,9],[12017,9],[12416,3],[12431,3],[12500,10],[12541,11],[12568,10],[12702,20],[13036,3],[13262,9],[13301,3],[13343,3],[13367,8],[13408,3],[13412,3],[13433,3],[13437,5],[13687,3],[14209,3],[17119,4],[17292,3],[17962,10],[17988,8],[18155,8],[18166,9],[18205,4],[18274,10],[18319,3],[18451,3],[19851,6],[19897,4],[20007,6],[20188,8],[20199,7],[20239,3],[20256,3],[20278,28],[20336,4],[20759,4],[20820,7],[20866,3],[20953,3],[21056,3],[21092,3],[22106,9],[22147,3],[22157,3],[22190,3],[22204,10],[22246,3],[22256,3],[22301,3],[22349,3],[22359,3],[22428,3],[22498,3],[22582,3],[22645,3],[22760,3],[22770,3],[22800,3],[22845,3],[22967,3],[23062,3],[23325,8],[23361,9],[23515,8],[23553,4],[24459,3],[25558,3],[25565,13],[25579,3],[27467,6],[27478,6],[27491,6],[27498,31],[27581,20],[27705,6],[27712,12],[27759,3],[27775,3],[27810,9],[27901,15],[27929,12],[28883,34],[29438,9],[29705,16],[30245,3],[30255,3],[30414,3],[31363,20],[31398,23],[31426,6],[31548,3],[31879,5],[31924,3],[31944,3],[32076,26],[32203,5],[32228,5],[32251,3],[32288,7],[32401,5],[32419,3],[32461,3],[32512,26],[32558,5],[32581,3],[32585,3],[32613,5],[32669,3],[32689,3],[33098,5],[33123,5],[33147,3],[33206,7],[33285,5],[33308,3],[33312,3],[34175,5],[34223,3],[34243,3],[34674,5],[34699,5],[34723,3],[34766,7],[34776,15],[34811,5],[34829,4],[34834,3],[34884,3],[34961,5],[35073,5],[35092,3],[35562,5],[35606,3],[35626,3],[35897,5],[35944,3],[36027,3],[36293,3],[36577,18],[36628,3],[36648,3],[36799,5],[36846,3],[36885,5],[36942,3],[36946,3],[37423,18],[37478,3],[37498,3],[37807,5],[37854,3],[37901,11],[37948,3],[37952,3],[38004,3],[38038,9],[38089,3],[38108,3],[38112,4],[38206,3],[38227,7],[38276,3],[38376,3],[38380,3],[38440,3],[38474,15],[38530,3],[38534,3],[38699,3],[38753,8],[38807,7],[38949,7],[39244,8],[39541,8],[39800,17],[39928,48],[40301,5],[40353,3],[40373,3],[40811,5],[40858,3],[40913,7],[40923,30],[40993,3],[40997,3],[41409,7],[41452,4],[41457,3],[41516,3],[41553,3],[41590,3],[41627,3],[41671,3],[42479,3],[42499,3],[42852,5],[42899,3],[42946,5],[42987,4],[42992,3],[43060,3],[43112,5],[43892,5],[43938,3],[43958,3],[44161,10],[44174,5],[44221,3],[44276,7],[44324,4],[44329,3],[44885,4],[44890,3],[44946,3],[45061,5],[45112,3],[45132,3],[45316,10],[45329,5],[45376,3],[45441,7],[45489,4],[45494,3],[46096,4],[46101,3],[46162,3],[46270,5],[46319,3],[46339,3],[46595,10],[46608,5],[46655,3],[46716,7],[46764,3],[46768,3],[47374,3],[47378,3],[47437,3],[48026,3],[48073,3],[48093,3],[48650,5],[48697,3],[48717,3],[48941,7],[48951,5],[48998,3],[49113,4],[49118,3],[49401,4],[49406,3],[49462,3],[49506,6],[50038,16],[50092,3],[50112,3],[50224,6],[50272,3],[50382,4],[50387,3],[50461,3],[50601,3],[50619,3],[50623,4],[50673,3],[50732,3],[50858,4],[50863,3],[50937,3],[51355,7],[51414,3],[51434,3],[51572,6],[51620,3],[51738,4],[51743,3],[51821,3],[51978,3],[52000,3],[52004,4],[52058,3],[52121,3],[52237,4],[52296,3],[52415,4],[52420,3],[54091,5],[54145,3],[54165,3],[54469,5],[54516,3],[54585,7],[54635,4],[54640,3],[54727,3],[54790,8],[54857,3],[54861,3],[55131,10],[55183,3],[55214,3],[55218,4],[55329,3],[55406,3],[55539,4],[55544,3],[55631,3],[55759,5],[55814,3],[55834,3],[56151,5],[56198,3],[56269,7],[56319,3],[56323,3],[56388,3],[57505,3],[57525,3],[57675,7],[57724,3],[57787,7],[57830,4],[57835,3],[57896,3],[57997,3],[58017,3],[58137,9],[58433,5],[58480,3],[58547,13],[58596,4],[58601,3],[58664,3],[58753,4],[58758,3],[58934,3],[58984,3],[59138,3],[59168,14],[59224,3],[59254,3],[59258,4],[59335,3],[59402,11],[59449,4],[59454,3],[59524,3],[59821,4],[59901,3],[59970,3],[60107,3],[60127,3],[60255,9],[60514,5],[60561,3],[60636,5],[60690,4],[60695,3],[60781,3],[61922,4],[62344,4],[62812,4],[63328,25],[63354,5],[63402,3],[63422,3],[63644,10],[63690,4],[63759,3],[63809,10],[63855,4],[63924,3],[64265,8],[64283,8],[64443,9],[64783,3],[65271,20],[65329,3],[65411,5],[65429,27],[65486,3],[65969,3],[66012,3],[66415,3],[66421,15],[66439,30],[66514,3],[66806,5],[66847,4],[67355,4],[67700,4],[68754,3],[69032,4],[69958,3],[69993,20],[70051,3],[70133,5],[70151,27],[70208,3],[70472,3],[70515,3],[70726,11],[70750,11],[71049,5],[71090,4],[71562,5],[71603,4],[72041,5],[72082,4],[72969,4],[74123,4],[77942,4],[78242,17],[78685,4],[79086,3],[79248,3],[80205,9],[80253,3],[80565,3],[80954,3],[80997,3],[81845,8],[81870,8],[83275,5],[83316,4],[84889,3],[84905,14],[85231,3],[85266,20],[85324,3],[85406,5],[85424,27],[85481,3],[85710,3],[85753,3],[86163,4],[86977,20],[87037,3],[87121,5],[87139,27],[87198,3],[87723,3],[87768,3],[88186,3],[88242,3],[88325,4],[88437,21],[88637,4],[90230,3],[90299,5],[90346,3],[91607,5],[91648,4],[92349,32],[93490,3],[94177,5],[94475,6],[94640,3],[94683,3],[94863,7],[94906,4],[95044,3],[95119,3],[95194,3],[95695,3],[95813,5],[96116,3],[96342,3],[97042,45],[98201,3],[98642,3],[98823,3],[99779,3],[100202,3],[102713,3],[103232,3],[103275,3],[103501,3],[103545,3],[103745,3],[103915,3],[107412,3],[107936,5],[108034,5],[108075,4],[108677,3],[109282,5],[109380,5],[109421,4],[109503,3],[110566,3],[111003,5],[111091,5],[111132,4],[115731,3],[116053,3],[116354,5],[116445,5],[116486,4],[118376,10],[118443,3],[118463,3],[118687,5],[118734,3],[118781,5],[118822,3],[118826,3],[118878,3],[118955,3],[119830,5],[119887,3],[119907,3],[120100,5],[120147,3],[120186,5],[120227,3],[120231,3],[120280,3],[120377,3],[122774,8],[123034,8],[125974,4],[126017,4],[126071,6],[126426,8],[127087,4],[131877,5],[131883,7],[131891,8],[131900,5]]},"522":{"position":[[141,3],[663,3]]},"526":{"position":[[2064,4],[2237,3],[2907,10],[2933,8],[3100,8],[3111,9],[3150,4],[3219,10],[3264,3],[3396,3],[4796,6],[4842,4],[4952,6],[5133,8],[5144,7],[5184,3],[5201,3],[5223,28],[5281,4],[5704,4],[5765,7],[5811,3],[5898,3],[6001,3],[6037,3]]},"528":{"position":[[4,6],[17,6],[24,31]]},"530":{"position":[[41,3]]},"532":{"position":[[35,4],[40,3],[127,3]]},"535":{"position":[[40,3],[44,3],[314,10],[366,3],[397,3],[401,4]]},"537":{"position":[[27,3]]},"539":{"position":[[41,3]]},"541":{"position":[[35,4],[40,3],[127,3],[255,5],[310,3],[330,3]]},"543":{"position":[[41,3]]},"545":{"position":[[35,3],[39,3],[104,3],[1221,3],[1241,3]]},"547":{"position":[[41,3]]},"549":{"position":[[35,4],[40,3],[101,3],[202,3],[222,3],[342,9]]},"551":{"position":[[41,3]]},"553":{"position":[[35,4],[40,3],[103,3]]},"555":{"position":[[40,4],[45,3],[221,3],[271,3]]},"558":{"position":[[27,3]]},"560":{"position":[[41,3],[71,3],[75,4],[152,3]]},"562":{"position":[[35,4],[40,3],[110,3],[407,4],[487,3],[556,3],[693,3],[713,3],[841,9]]},"564":{"position":[[41,3]]},"567":{"position":[[35,4],[40,3],[126,3]]},"569":{"position":[[35,4],[104,3]]},"571":{"position":[[35,4],[104,3],[445,8],[463,8]]},"575":{"position":[[38,3]]},"577":{"position":[[215,3]]},"579":{"position":[[228,3],[271,3]]},"585":{"position":[[470,8],[495,8]]},"589":{"position":[[1155,5],[1196,4]]},"591":{"position":[[427,32],[1568,3],[2255,5]]},"630":{"position":[[35,4]]},"638":{"position":[[41,3]]},"640":{"position":[[35,3],[39,3],[88,3]]},"642":{"position":[[40,3]]}}}],["pod,svc",{"_index":3642,"t":{"516":{"position":[[9371,7],[129422,7]]}}}],["pod,以yaml",{"_index":3692,"t":{"516":{"position":[[11553,19]]}}}],["pod,发现在每个node上都运行一个pod",{"_index":4656,"t":{"516":{"position":[[86103,24]]}}}],["pod.metadata",{"_index":4029,"t":{"516":{"position":[[30395,12]]}}}],["pod.spec.affinity.nodeaffin",{"_index":4274,"t":{"516":{"position":[[53244,30]]}}}],["pod.spec.affinity.podaffin",{"_index":4302,"t":{"516":{"position":[[56797,29]]},"545":{"position":[[513,29]]}}}],["pod.spec.contain",{"_index":4045,"t":{"516":{"position":[[31522,19]]}}}],["pod.spec.containers.livenessprob",{"_index":4224,"t":{"516":{"position":[[47648,33]]}}}],["pod.spec.containers.port",{"_index":4097,"t":{"516":{"position":[[36261,25]]}}}],["pod.spec.containers属性，这也是pod",{"_index":4044,"t":{"516":{"position":[[31433,49]]}}}],["pod.spec.toler",{"_index":4382,"t":{"516":{"position":[[64033,20]]},"571":{"position":[[213,20]]}}}],["pod.yaml",{"_index":3686,"t":{"516":{"position":[[11033,8],[11103,8],[80767,16]]},"579":{"position":[[41,16]]}}}],["pod/dashboard",{"_index":5219,"t":{"516":{"position":[[129485,13]]}}}],["pod/kubernet",{"_index":5224,"t":{"516":{"position":[[129550,14]]}}}],["pod/nginx",{"_index":3893,"t":{"516":{"position":[[22180,9],[22291,9],[22790,9],[81540,9],[102765,9]]},"585":{"position":[[165,9]]}}}],["pod/nginxpod",{"_index":3751,"t":{"516":{"position":[[13884,12],[14070,12],[14462,12],[14597,12]]},"522":{"position":[[338,12],[524,12]]},"524":{"position":[[145,12],[280,12]]}}}],["pod/pod",{"_index":4052,"t":{"516":{"position":[[32265,7],[33172,7],[34740,7],[35957,7],[36861,7],[37873,7],[38295,7],[40881,7],[42918,7],[44244,7],[45404,7],[46681,7],[49021,7],[50290,7],[50750,7],[51642,7],[52143,7],[54547,7],[55437,7],[56230,7],[57752,7],[58510,7],[59365,7],[60595,7],[118753,7],[120163,7]]},"530":{"position":[[72,7]]},"539":{"position":[[72,7]]},"543":{"position":[[73,7]]},"547":{"position":[[69,7]]},"551":{"position":[[71,7]]},"560":{"position":[[182,7]]},"564":{"position":[[75,7]]},"638":{"position":[[57,7]]}}}],["pod/pod1",{"_index":5057,"t":{"516":{"position":[[116411,8]]},"628":{"position":[[51,8]]}}}],["pod/pod2",{"_index":5058,"t":{"516":{"position":[[116428,8]]},"628":{"position":[[68,8]]}}}],["pod/v1",{"_index":3737,"t":{"516":{"position":[[13198,6]]}}}],["pod/volum",{"_index":4946,"t":{"516":{"position":[[108004,10],[109350,10],[111066,10]]}}}],["pod1",{"_index":4345,"t":{"516":{"position":[[61564,4],[61623,4],[61810,6],[115751,4],[115868,4],[116545,4]]},"630":{"position":[[94,4]]}}}],["pod2",{"_index":4347,"t":{"516":{"position":[[61631,4],[62232,6],[116073,4],[116190,4],[116586,4]]},"630":{"position":[[135,4]]}}}],["pod3",{"_index":4366,"t":{"516":{"position":[[62700,6]]}}}],["pod_nam",{"_index":3691,"t":{"516":{"position":[[11542,8],[11589,8]]}}}],["podaffin",{"_index":4300,"t":{"516":{"position":[[56703,15],[56771,25],[57459,11],[57529,11],[57728,11],[57760,11],[57839,11],[57900,11],[57944,11],[58021,11],[58124,12],[58484,11],[58518,11],[58605,11],[58668,11],[58762,11],[59142,11],[59228,11],[59263,11],[59339,11],[59373,11],[59458,11],[59528,11],[59572,16],[59905,11],[59974,11]]},"545":{"position":[[419,15],[487,25],[1175,11],[1245,11]]},"547":{"position":[[45,11],[77,11]]},"549":{"position":[[44,11],[105,11],[149,11],[226,11],[329,12]]},"551":{"position":[[45,11],[79,11]]},"553":{"position":[[44,11],[107,11]]},"555":{"position":[[49,11]]},"558":{"position":[[31,11]]},"560":{"position":[[45,11],[80,11],[156,11],[190,11]]},"562":{"position":[[44,11],[114,11],[158,16],[491,11],[560,11]]}}}],["podaffinity(pod",{"_index":4269,"t":{"516":{"position":[[52939,19]]}}}],["podaffinityterm",{"_index":4306,"t":{"516":{"position":[[57138,15]]},"545":{"position":[[854,15]]}}}],["podaffinity主要实现以运行的pod为参照，实现让新创建的pod跟参照pod",{"_index":4301,"t":{"516":{"position":[[56719,51]]},"545":{"position":[[435,51]]}}}],["podaffinti",{"_index":4324,"t":{"516":{"position":[[59723,45]]},"562":{"position":[[309,45]]}}}],["podantiaffin",{"_index":4322,"t":{"516":{"position":[[59647,19],[60050,15],[60131,15],[60238,16],[60565,15],[60603,15],[60699,15],[60785,15]]},"562":{"position":[[233,19],[636,15],[717,15],[824,16]]},"564":{"position":[[45,15],[83,15]]},"567":{"position":[[44,15],[130,15]]}}}],["podantiaffinity(pod",{"_index":4271,"t":{"516":{"position":[[53000,24]]}}}],["podantiaffinity主要实现以运行的pod为参照，让新创建的pod跟参照pod",{"_index":4323,"t":{"516":{"position":[[59667,55]]},"562":{"position":[[253,55]]}}}],["podenv",{"_index":4311,"t":{"516":{"position":[[57571,7],[58271,6],[60386,6]]},"545":{"position":[[1287,7]]},"549":{"position":[[476,6]]},"562":{"position":[[972,6]]}}}],["podenv=pro",{"_index":4330,"t":{"516":{"position":[[60031,10]]},"562":{"position":[[617,10]]}}}],["podenv的值在[\"pro",{"_index":4331,"t":{"516":{"position":[[60356,22]]},"562":{"position":[[942,22]]}}}],["podiniti",{"_index":4171,"t":{"516":{"position":[[41649,15]]}}}],["podip",{"_index":3855,"t":{"516":{"position":[[19860,7]]},"526":{"position":[[4805,7]]}}}],["podip:containerport",{"_index":4104,"t":{"516":{"position":[[37125,33]]}}}],["podip访问nginx",{"_index":4949,"t":{"516":{"position":[[108216,14]]}}}],["podpod",{"_index":3871,"t":{"516":{"position":[[20605,16]]},"526":{"position":[[5550,16]]}}}],["pods\",\"secrets\",\"configmaps\",\"crontabs\",\"deployments\",\"job",{"_index":5137,"t":{"516":{"position":[[123195,62]]}}}],["pods.yaml",{"_index":5054,"t":{"516":{"position":[[115692,12],[116401,9]]},"628":{"position":[[41,9]]}}}],["podschedul",{"_index":3834,"t":{"516":{"position":[[19118,12]]},"526":{"position":[[4063,12]]}}}],["podsecuritypolicy：这个插件用于在创建或修改pod时决定是否根据pod的secur",{"_index":5208,"t":{"516":{"position":[[128558,52]]}}}],["pod上声明nodename或者nodeselector，以此将pod调度到期望的node节点上。注意，这里的调度是强制的，这就意味着即使要调度的目标node不存在，也会向上面进行调度，只不过pod",{"_index":4242,"t":{"516":{"position":[[49829,117]]}}}],["pod中像volume一样使用pvc",{"_index":5072,"t":{"516":{"position":[[117550,27]]}}}],["pod中准备两个容器nginx和busybox，然后声明一个volume分别挂在到两个容器的目录中，然后nginx容器负责向volume中写日志，busybox",{"_index":4939,"t":{"516":{"position":[[107266,99]]}}}],["pod中有2个容器，其中1个准备就绪，1",{"_index":4054,"t":{"516":{"position":[[32310,28]]}}}],["pod中的busybox",{"_index":4080,"t":{"516":{"position":[[34914,23]]}}}],["pod中程序的数据需要持久化，kubernet",{"_index":3648,"t":{"516":{"position":[[9700,41]]},"520":{"position":[[290,41]]}}}],["pod中还存在仍在运行的进程，那么pod",{"_index":4153,"t":{"516":{"position":[[39818,40]]}}}],["pod为目标，解决pod不能和哪些已存在pod",{"_index":4272,"t":{"516":{"position":[[53027,37]]}}}],["pod为目标，解决pod可以和哪些已存在的pod",{"_index":4270,"t":{"516":{"position":[[52961,38]]}}}],["pod会出现5",{"_index":4134,"t":{"516":{"position":[[38957,29]]}}}],["pod使用volume的定义，将pvc",{"_index":5073,"t":{"516":{"position":[[117578,35]]}}}],["pod信息，就可以看到restarts不再是0",{"_index":4206,"t":{"516":{"position":[[44809,40],[46020,40],[47298,40]]}}}],["pod内个容器健康检查方式设置为tcpsocket",{"_index":4001,"t":{"516":{"position":[[29138,29]]}}}],["pod内个容器健康检查方法设置为httpget，需要制定path、port",{"_index":3998,"t":{"516":{"position":[[28991,39]]}}}],["pod内部的通讯，pod的之间的通讯采用虚拟二层网络技术来实现，我们当前环境用的是flannel",{"_index":3976,"t":{"516":{"position":[[27647,51]]}}}],["pod创建完毕，就版本的pod",{"_index":4501,"t":{"516":{"position":[[75167,26]]}}}],["pod可以提供服务之后，就要考虑如何访问pod中服务，kubernetes提供了servic",{"_index":3647,"t":{"516":{"position":[[9643,56]]},"520":{"position":[[233,56]]}}}],["pod可以认为是容器的封装，一个pod",{"_index":3801,"t":{"516":{"position":[[17178,33]]},"526":{"position":[[2123,33]]}}}],["pod名确指定到node1",{"_index":4312,"t":{"516":{"position":[[57657,17]]},"545":{"position":[[1373,17]]}}}],["pod在哪个node节点上运行，是由scheduler组件采用相应的算法计算出来的，这个过程是不受人工控制的。但是在实际使用中，这并不满足的需求，因为很多情况下，我们想控制某些pod到达某些节点上，那么应该怎么做呢？这就要求了解kubernetes对pod的调度规则，kubernet",{"_index":4237,"t":{"516":{"position":[[49513,164]]}}}],["pod定义的共享存储卷的名称，需用volum",{"_index":3983,"t":{"516":{"position":[[28195,37]]}}}],["pod容器内检查方式设置为exec",{"_index":3996,"t":{"516":{"position":[[28924,21]]}}}],["pod对象中的所有容器，首次需要重启的容器，将在其需要时立即进行重启，随后再次需要重启的操作将由kubelet延迟一段时间后进行，且反复的重启操作的延迟时长以此为10s、20s、40s、80s、160s和300s，300",{"_index":4231,"t":{"516":{"position":[[48523,126]]}}}],["pod对象从创建至终的这段时间范围称为pod",{"_index":4129,"t":{"516":{"position":[[38762,44]]}}}],["pod对象定义了prestop钩子处理器，则在其标记为termin",{"_index":4152,"t":{"516":{"position":[[39744,55]]}}}],["pod对象的关闭行为时将其从所有匹配到此端点的servic",{"_index":4151,"t":{"516":{"position":[[39695,48]]}}}],["pod必须要与拥有标签nodeenv=pro的pod不在同一nod",{"_index":4332,"t":{"516":{"position":[[60458,55]]},"562":{"position":[[1044,55]]}}}],["pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一nod",{"_index":4319,"t":{"516":{"position":[[59058,52]]}}}],["pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一node上，显然现在没有这样pod",{"_index":4316,"t":{"516":{"position":[[58349,83]]},"549":{"position":[[554,83]]}}}],["pod所在宿主机的目录，将被用于同期中mount",{"_index":4024,"t":{"516":{"position":[[29875,28]]}}}],["pod所在的node在pod运行期间其标签发生了改变，不再符合该pod",{"_index":4299,"t":{"516":{"position":[[56645,57]]},"545":{"position":[[361,57]]}}}],["pod所在的节点运行（案例中是node1",{"_index":4967,"t":{"516":{"position":[[109730,29]]}}}],["pod所属的命名空间,默认为\"default",{"_index":3978,"t":{"516":{"position":[[27838,24]]}}}],["pod控制器是管理pod的中间层，使用pod控制器之后，只需要告诉pod控制器，想要多少个什么样的pod就可以了，它会创建出满足条件的pod并确保每一个pod资源处于用户期望的目标状态。如果pod资源在运行中出现故障，它会基于指定策略重新编排pod",{"_index":4390,"t":{"516":{"position":[[64453,125]]}}}],["pod数量降为0，然后将回滚版本的pod",{"_index":4522,"t":{"516":{"position":[[76687,50]]}}}],["pod无法正常运行,node的值为non",{"_index":4261,"t":{"516":{"position":[[52172,29]]}}}],["pod是kubernetes的最小操作单元，容器必须跑在pod",{"_index":3438,"t":{"516":{"position":[[1703,35]]}}}],["pod是kubernetes的最小管理单元，在kubernetes中，按照pod",{"_index":4387,"t":{"516":{"position":[[64292,54]]},"571":{"position":[[472,54]]}}}],["pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于pod",{"_index":3800,"t":{"516":{"position":[[17124,53]]},"526":{"position":[[2069,53]]}}}],["pod是由pod控制器创建的，控制器会监控pod状况，一旦发现pod",{"_index":3865,"t":{"516":{"position":[[20405,48]]},"526":{"position":[[5350,48]]}}}],["pod标记为termin",{"_index":4149,"t":{"516":{"position":[[39630,20]]}}}],["pod模板上定义label，在控制器上定义选择器，就可以表明当前控制器能管理哪些pod",{"_index":4405,"t":{"516":{"position":[[65696,45]]}}}],["pod状态可以看到，pod在运行完毕任务后，就会变成complet",{"_index":4689,"t":{"516":{"position":[[88248,41]]}}}],["pod状态，发现pod",{"_index":4117,"t":{"516":{"position":[[38323,17]]}}}],["pod的namespac",{"_index":4303,"t":{"516":{"position":[[56889,17]]},"545":{"position":[[605,17]]}}}],["pod的最大数量，默认为25",{"_index":4475,"t":{"516":{"position":[[72651,33]]}}}],["pod的角度上，通过在pod上添加属性，来确定pod是否要调度到指定的node上，其实我们也可以站在node的角度上，通过在node上添加**污点**属性，来决定是否允许pod",{"_index":4335,"t":{"516":{"position":[[60882,104]]},"567":{"position":[[227,104]]}}}],["pod的重启次数，发现一直是0",{"_index":4234,"t":{"516":{"position":[[49337,28]]}}}],["pod详情，发现nginx",{"_index":4233,"t":{"516":{"position":[[49053,19]]}}}],["pod调度到node属性，确实是调度到了node1",{"_index":4245,"t":{"516":{"position":[[50315,31],[51671,31]]}}}],["pod调度到了node1",{"_index":4293,"t":{"516":{"position":[[55475,28]]}}}],["pod调度到相应的nod",{"_index":3425,"t":{"516":{"position":[[1118,35]]}}}],["pod资源创建完成后立即暂停更新过程，此时，仅存在一部分新版本的应用，主体部分还是旧的版本。然后，再筛选一小部分的用户请求路由到新版本的pod应用，继续观察能否稳定地按期望的方式运行。确定没问题之后再继续完成余下的pod",{"_index":4528,"t":{"516":{"position":[[76986,147]]}}}],["pod达到指定的数量时，job",{"_index":4665,"t":{"516":{"position":[[86546,26]]}}}],["pod都会分配一个单独的pod",{"_index":3937,"t":{"516":{"position":[[25523,19]]}}}],["pod，修改nodename的值为node3（并没有node3",{"_index":4247,"t":{"516":{"position":[[50519,40]]}}}],["pod，修改nodeselector的值为nodeenv",{"_index":4260,"t":{"516":{"position":[[51883,35]]}}}],["pod，修改resources.requests.memory的值为10gi",{"_index":4116,"t":{"516":{"position":[[38138,40]]}}}],["pod，发现pod",{"_index":3873,"t":{"516":{"position":[[20708,21]]},"526":{"position":[[5653,21]]}}}],["pod，可以对其执行日志（logs）、进入执行（exec",{"_index":5262,"t":{"516":{"position":[[131906,41]]}}}],["pod，必须删除pod",{"_index":3866,"t":{"516":{"position":[[20456,20]]},"526":{"position":[[5401,20]]}}}],["pod：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1",{"_index":3444,"t":{"516":{"position":[[1936,52]]}}}],["pod：kubernetes直接创建出来的pod，这种pod",{"_index":4388,"t":{"516":{"position":[[64347,46]]}}}],["pod：kubernetes通过控制器创建的pod，这种pod",{"_index":4389,"t":{"516":{"position":[[64394,48]]}}}],["polici",{"_index":5033,"t":{"516":{"position":[[113941,6],[115504,6],[116950,6]]},"620":{"position":[[81,6]]},"626":{"position":[[81,6]]},"634":{"position":[[88,6]]}}}],["poll",{"_index":1953,"t":{"230":{"position":[[1117,5]]},"232":{"position":[[79,6]]}}}],["popul",{"_index":3835,"t":{"516":{"position":[[19189,9]]},"526":{"position":[[4134,9]]}}}],["port",{"_index":392,"t":{"73":{"position":[[681,4]]},"269":{"position":[[1222,4]]},"516":{"position":[[18001,4],[18827,5],[18845,5],[20957,6],[20978,4],[22971,6],[22992,4],[23338,4],[24530,5],[24548,5],[25324,6],[27155,6],[27164,5],[28306,6],[29044,5],[29168,5],[31803,5],[36205,16],[36319,5],[36652,5],[36725,6],[36760,4],[36869,5],[36950,5],[37060,6],[37099,4],[40467,6],[40488,4],[42240,5],[42331,5],[42589,6],[42610,4],[43672,5],[43784,5],[44043,6],[44064,4],[45222,6],[45243,4],[45292,5],[46427,6],[46448,4],[46561,5],[48181,6],[48202,4],[48262,5],[48802,6],[48823,4],[48883,5],[65542,6],[70264,6],[85537,6],[94105,6],[94135,5],[94739,6],[95766,6],[95775,5],[96378,5],[98280,6],[98289,5],[98852,5],[99810,6],[99819,5],[103331,6],[103611,6],[103781,6],[103788,5],[103951,6],[103958,5],[104761,5],[106064,5],[107515,6],[108780,6],[110664,6],[129187,6],[129196,5]]},"526":{"position":[[2946,4],[3772,5],[3790,5],[5902,6],[5923,4]]},"591":{"position":[[2183,6],[2213,5]]},"599":{"position":[[78,5]]},"612":{"position":[[79,5]]}}}],["port(",{"_index":3946,"t":{"516":{"position":[[25994,7],[26729,7],[81618,7],[96028,7],[98560,7],[100116,7],[102946,7],[104130,7],[129643,7]]},"585":{"position":[[243,7]]},"595":{"position":[[79,7]]}}}],["port=80",{"_index":3639,"t":{"516":{"position":[[9306,7],[9323,7],[10960,7],[18095,7],[23455,7],[25831,7],[25848,7],[26523,7],[26540,7],[81357,7]]},"526":{"position":[[3040,7]]},"583":{"position":[[76,7]]}}}],["ports.yaml",{"_index":4103,"t":{"516":{"position":[[36596,10],[36850,10]]}}}],["posit",{"_index":521,"t":{"88":{"position":[[676,8]]}}}],["positivebigintegerfield",{"_index":2095,"t":{"252":{"position":[[2263,23]]}}}],["positiveintegerfield",{"_index":2097,"t":{"252":{"position":[[2315,20]]}}}],["positivesmallintegerfield",{"_index":2099,"t":{"252":{"position":[[2354,25]]}}}],["post",{"_index":325,"t":{"58":{"position":[[51,4],[144,4],[219,4],[250,4],[345,4],[404,4],[458,4],[551,4],[602,4]]},"60":{"position":[[231,4]]},"88":{"position":[[488,4],[1205,4]]},"132":{"position":[[524,5],[543,5],[584,5],[626,5],[668,5],[702,5],[729,4],[777,4],[826,4],[875,4]]},"155":{"position":[[1248,4]]},"197":{"position":[[459,7],[5720,4]]},"249":{"position":[[195,4],[358,8],[425,4]]},"516":{"position":[[38863,12],[41991,4]]}}}],["postgresql",{"_index":2323,"t":{"258":{"position":[[3553,11]]}}}],["postman请求后端接口，响应504",{"_index":2690,"t":{"342":{"position":[[62,21]]}}}],["poststart",{"_index":3993,"t":{"516":{"position":[[28789,10],[42125,10],[42218,10],[42296,10],[42644,10],[42727,12],[43158,12]]}}}],["post、put、patch",{"_index":1516,"t":{"193":{"position":[[407,28]]}}}],["post请求。如果使用其他http请求访问该方法，将返回一个405",{"_index":492,"t":{"85":{"position":[[371,36]]}}}],["post部分包含的是在整个pipeline或阶段完成后一些附加的步骤。post部分是可选的，所以并不包含在pipelin",{"_index":844,"t":{"132":{"position":[[0,79]]}}}],["post部分可以同时包含多种条件块。以下是post",{"_index":853,"t":{"132":{"position":[[414,33]]}}}],["practic",{"_index":308,"t":{"48":{"position":[[181,10]]}}}],["pre",{"_index":4179,"t":{"516":{"position":[[42022,3]]}}}],["prefer",{"_index":4284,"t":{"516":{"position":[[53593,10],[55851,9],[56035,11],[56251,9],[56340,9],[56405,9],[79989,9]]},"541":{"position":[[347,9],[531,11]]},"543":{"position":[[94,9]]},"545":{"position":[[56,9],[121,9]]}}}],["prefernoschedule：kubernetes将尽量避免把pod调度到具有该污点的nod",{"_index":4339,"t":{"516":{"position":[[61115,62]]}}}],["preferred.yaml",{"_index":4295,"t":{"516":{"position":[[55778,14],[56215,14]]},"541":{"position":[[274,14]]},"543":{"position":[[58,14]]}}}],["preferredduringschedulingignoredduringexecut",{"_index":4283,"t":{"516":{"position":[[53515,47],[55968,48],[57086,47],[59589,57]]},"541":{"position":[[464,48]]},"545":{"position":[[802,47]]},"562":{"position":[[175,57]]}}}],["prefetch",{"_index":1713,"t":{"197":{"position":[[5012,8]]}}}],["prefetch_rel",{"_index":1709,"t":{"197":{"position":[[4924,18]]}}}],["prefix=/soft/keepaliv",{"_index":3285,"t":{"504":{"position":[[342,24]]}}}],["present",{"_index":4068,"t":{"516":{"position":[[33850,7],[41262,7],[45705,7],[46889,7]]}}}],["prestop",{"_index":3994,"t":{"516":{"position":[[28833,8],[42775,8]]}}}],["primary_key",{"_index":2201,"t":{"254":{"position":[[1348,11]]}}}],["primarykeyrelatedfield",{"_index":1388,"t":{"186":{"position":[[1619,23],[2746,37]]}}}],["prime",{"_index":773,"t":{"114":{"position":[[223,6]]}}}],["primes.isprime(count",{"_index":772,"t":{"114":{"position":[[172,24]]}}}],["print",{"_index":409,"t":{"73":{"position":[[1095,5]]},"264":{"position":[[2149,11]]},"516":{"position":[[9158,5]]}}}],["print('[%",{"_index":1913,"t":{"227":{"position":[[861,12]]}}}],["print(f\"start",{"_index":2707,"t":{"344":{"position":[[454,13]]}}}],["print(gid",{"_index":2709,"t":{"344":{"position":[[500,10],[528,10]]}}}],["print(result",{"_index":2674,"t":{"328":{"position":[[446,13]]}}}],["print(result.group(1",{"_index":2678,"t":{"328":{"position":[[550,22]]}}}],["print(result.group(2",{"_index":2679,"t":{"328":{"position":[[579,22]]}}}],["print(result.span",{"_index":2681,"t":{"328":{"position":[[652,20]]}}}],["printenv'，将env",{"_index":945,"t":{"143":{"position":[[531,41]]}}}],["println",{"_index":630,"t":{"107":{"position":[[299,7]]},"110":{"position":[[1052,7]]},"112":{"position":[[1141,7]]},"114":{"position":[[788,9]]}}}],["println(\"about",{"_index":783,"t":{"114":{"position":[[489,14]]}}}],["println(\"nam",{"_index":779,"t":{"114":{"position":[[425,14]]}}}],["println(\"par",{"_index":781,"t":{"114":{"position":[[455,16]]}}}],["println(hash",{"_index":822,"t":{"118":{"position":[[292,13]]}}}],["prioriti",{"_index":2292,"t":{"258":{"position":[[1595,10]]},"504":{"position":[[1273,8],[2322,8]]},"516":{"position":[[18363,9]]},"526":{"position":[[3308,9]]}}}],["priority降序排列，如果发生同序，则接着使用order_d",{"_index":2293,"t":{"258":{"position":[[1622,41]]}}}],["privileg",{"_index":1139,"t":{"175":{"position":[[313,11]]},"516":{"position":[[29376,11]]}}}],["pro",{"_index":4257,"t":{"516":{"position":[[51541,3],[57579,3],[60414,7]]},"545":{"position":[[1295,3]]},"562":{"position":[[1000,7]]}}}],["pro\",\"yyi",{"_index":4292,"t":{"516":{"position":[[55288,13]]}}}],["probabl",{"_index":756,"t":{"112":{"position":[[1597,8]]}}}],["probe",{"_index":4133,"t":{"516":{"position":[[38942,6],[43867,15],[44571,6],[44655,5],[45920,5],[47109,5],[47128,5],[47241,6],[49210,5],[49229,5],[49329,5]]}}}],["probes：存活性探针，用于检测应用实例当前是否处于正常运行状态，如果不是，k8",{"_index":4191,"t":{"516":{"position":[[43314,47]]}}}],["probes：就绪性探针，用于检测应用实例当前是否可以接收请求，如果不能，k8",{"_index":4192,"t":{"516":{"position":[[43372,46]]}}}],["probe演示了三种探测方式，但是查看livenessprob",{"_index":4223,"t":{"516":{"position":[[47541,67]]}}}],["probe）、就绪性探测（readi",{"_index":4132,"t":{"516":{"position":[[38919,22]]}}}],["process",{"_index":3268,"t":{"496":{"position":[[58,7],[84,9],[104,7]]}}}],["processes=4",{"_index":2694,"t":{"344":{"position":[[25,11]]}}}],["processes插件提供的步骤。由于它是pipelin",{"_index":999,"t":{"153":{"position":[[30,49]]}}}],["prod",{"_index":1020,"t":{"155":{"position":[[655,8]]}}}],["prodsecret",{"_index":1017,"t":{"155":{"position":[[606,14]]}}}],["product",{"_index":892,"t":{"139":{"position":[[328,12],[1153,12]]},"516":{"position":[[21746,11]]}}}],["progress",{"_index":3926,"t":{"516":{"position":[[24698,11]]}}}],["progressdeadlinesecond",{"_index":4443,"t":{"516":{"position":[[69770,24]]}}}],["project",{"_index":591,"t":{"101":{"position":[[33,8]]}}}],["project_nam",{"_index":1929,"t":{"230":{"position":[[139,12],[248,12]]}}}],["projectadmin(admin.modeladmin",{"_index":1110,"t":{"173":{"position":[[31,31]]}}}],["projectnam",{"_index":498,"t":{"85":{"position":[[604,12]]}}}],["propagate（可选）：布尔类型，如果值为true，则只有当下游pipeline的最终构建状态为success时，上游pipeline才算成功；如果值为false，则不论下游pipeline的最终构建状态是什么，上游pipeline都忽略。默认值为tru",{"_index":1026,"t":{"155":{"position":[[796,131]]}}}],["properties页，勾选“environ",{"_index":949,"t":{"143":{"position":[[693,26]]}}}],["propertynam",{"_index":656,"t":{"110":{"position":[[489,13],[551,13]]}}}],["prot",{"_index":4745,"t":{"516":{"position":[[92535,4],[93603,4]]},"591":{"position":[[613,4],[1681,4]]}}}],["protect:阻止上面的删除操作，但是弹出protectederror",{"_index":2217,"t":{"256":{"position":[[471,38]]}}}],["proto",{"_index":1096,"t":{"170":{"position":[[779,5]]}}}],["protocol",{"_index":3877,"t":{"516":{"position":[[21001,9],[23015,9],[25351,9],[27173,9],[28424,9],[36527,8],[36783,9],[37104,9],[94121,9]]},"526":{"position":[[5946,9]]},"591":{"position":[[2199,9]]}}}],["proxi",{"_index":2317,"t":{"258":{"position":[[3369,5],[3375,10]]},"457":{"position":[[5964,7],[6070,7],[6165,7],[6279,7]]},"516":{"position":[[17757,5],[17805,5],[92742,16],[93414,5],[93510,5],[97025,16]]},"526":{"position":[[2702,5],[2750,5]]},"591":{"position":[[820,16],[1492,5],[1588,5]]}}}],["proxy:v1.17.4",{"_index":3578,"t":{"516":{"position":[[7046,13]]}}}],["proxy_add_x_forwarded_for",{"_index":1092,"t":{"170":{"position":[[651,27]]}}}],["proxy_cach",{"_index":3170,"t":{"473":{"position":[[65,14],[109,15]]},"487":{"position":[[571,11],[1166,11]]}}}],["proxy_cache_bypass",{"_index":3213,"t":{"483":{"position":[[23,21],[78,21]]}}}],["proxy_cache_key",{"_index":3204,"t":{"477":{"position":[[14,18],[33,19]]},"487":{"position":[[665,15],[1248,15]]}}}],["proxy_cache_path",{"_index":3172,"t":{"475":{"position":[[13,19],[347,20]]},"487":{"position":[[313,16]]}}}],["proxy_cache_valid",{"_index":3206,"t":{"479":{"position":[[21,20],[83,22]]},"487":{"position":[[616,17],[1199,17]]}}}],["proxy_no_cach",{"_index":3210,"t":{"481":{"position":[[51,17],[102,17]]},"487":{"position":[[1104,14]]}}}],["proxy_pass",{"_index":3050,"t":{"455":{"position":[[1442,10],[1819,10],[2184,10]]},"457":{"position":[[5039,11],[5062,13],[5114,10],[5147,10],[5289,10],[5327,10],[5534,10],[5705,10],[5974,10],[6080,10],[6175,10],[6289,10]]},"487":{"position":[[788,10],[1371,10]]}}}],["proxy_redirect",{"_index":1089,"t":{"170":{"position":[[597,14]]}}}],["proxy_set_head",{"_index":1090,"t":{"170":{"position":[[617,16],[679,16],[721,16],[750,16],[794,16]]}}}],["proxy_stor",{"_index":1088,"t":{"170":{"position":[[580,11]]}}}],["proxy不承担四层负责均衡器的角色，只负责创建iptables规则。该模式的优点是较userspace模式效率更高，但不能提供灵活的lb策略，当后端pod",{"_index":4768,"t":{"516":{"position":[[93132,90]]},"591":{"position":[[1210,90]]}}}],["proxy为service后端的每个pod创建对应的iptables规则，直接将发向clust",{"_index":4766,"t":{"516":{"position":[[93054,49]]},"591":{"position":[[1132,49]]}}}],["proxy会为每一个service创建一个监听端口，发向clust",{"_index":4758,"t":{"516":{"position":[[92797,35]]},"591":{"position":[[875,35]]}}}],["proxy会基于rr（轮询）的策略，将请求分发到其中一个pod",{"_index":4739,"t":{"516":{"position":[[92389,33]]},"591":{"position":[[467,33]]}}}],["proxy会基于监听的机制发现这种service的变动，然后它会将最新的servic",{"_index":4737,"t":{"516":{"position":[[92257,56]]},"591":{"position":[[335,56]]}}}],["proxy充当了一个四层负责均衡器的角色。由于kub",{"_index":4762,"t":{"516":{"position":[[92929,27]]},"591":{"position":[[1007,27]]}}}],["proxy服务进程。当创建service的时候会通过api",{"_index":4735,"t":{"516":{"position":[[92194,29]]},"591":{"position":[[272,29]]}}}],["proxy服务进程，每个node节点上都运行着一个kub",{"_index":4734,"t":{"516":{"position":[[92164,29]]},"591":{"position":[[242,29]]}}}],["proxy来对pod",{"_index":3440,"t":{"516":{"position":[[1775,17]]}}}],["proxy根据lb算法选择一个提供服务的pod并和其建立链接，以将请求转发到pod",{"_index":4761,"t":{"516":{"position":[[92875,43]]},"591":{"position":[[953,43]]}}}],["proxy监听的端口上，kub",{"_index":4760,"t":{"516":{"position":[[92858,16]]},"591":{"position":[[936,16]]}}}],["proxy监控pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高。除此以外，ipvs支持更多的lb",{"_index":4771,"t":{"516":{"position":[[93261,66]]},"591":{"position":[[1339,66]]}}}],["proxy运行在userspac",{"_index":4763,"t":{"516":{"position":[[92957,60]]},"591":{"position":[[1035,60]]}}}],["proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet",{"_index":3169,"t":{"465":{"position":[[14,108]]}}}],["prune",{"_index":268,"t":{"38":{"position":[[75,5]]}}}],["ps",{"_index":67,"t":{"23":{"position":[[336,2],[534,2],[750,2]]},"73":{"position":[[1057,3]]},"446":{"position":[[312,2]]},"504":{"position":[[3189,3]]}}}],["ps指令查询后台的nginx进程数，并将其保存在变量nginx_numb",{"_index":3328,"t":{"504":{"position":[[2907,41]]}}}],["pub_dat",{"_index":1942,"t":{"230":{"position":[[776,8]]},"258":{"position":[[2877,12],[2892,21],[2928,10],[2941,21],[2977,10]]}}}],["pub_date'字段进行降序排列，再按`author",{"_index":2311,"t":{"258":{"position":[[3000,42]]}}}],["public",{"_index":467,"t":{"83":{"position":[[166,6],[194,6],[375,6]]},"516":{"position":[[12935,6],[15672,6],[15935,6]]},"526":{"position":[[617,6],[880,6]]}}}],["publish",{"_index":576,"t":{"92":{"position":[[937,10]]},"230":{"position":[[814,11]]}}}],["publisher类是jenkins中用于发布构建结果的抽象类，也实现了describable接口，同时也有相应的descriptor",{"_index":577,"t":{"92":{"position":[[948,69]]}}}],["pull",{"_index":39,"t":{"21":{"position":[[190,4]]},"516":{"position":[[7139,4],[19591,7],[19620,7],[19656,6],[19697,6],[33519,7],[33546,7],[33582,6],[33621,6],[33772,6],[41197,6],[45635,6],[46811,6]]},"526":{"position":[[4536,7],[4565,7],[4601,6],[4642,6]]}}}],["pullable://nginx@sha256:485b610fefec7ff6c463ced9623314a04ed67e3945b9c08d7e53a47f6d108dc7",{"_index":3827,"t":{"516":{"position":[[18738,88]]},"526":{"position":[[3683,88]]}}}],["pull镜像时使用的secret名称，以key：secretkey",{"_index":4017,"t":{"516":{"position":[[29582,38]]}}}],["purg",{"_index":204,"t":{"34":{"position":[[1530,5]]}}}],["purger=on|off",{"_index":3184,"t":{"475":{"position":[[264,15]]}}}],["purger_fil",{"_index":3201,"t":{"475":{"position":[[872,26]]}}}],["purger_files=numb",{"_index":3185,"t":{"475":{"position":[[280,21]]}}}],["purger_sleep",{"_index":3202,"t":{"475":{"position":[[899,29]]}}}],["purger_sleep=tim",{"_index":3186,"t":{"475":{"position":[[302,19]]}}}],["purger_threshold",{"_index":3203,"t":{"475":{"position":[[929,33]]}}}],["purger_threshold=tim",{"_index":3187,"t":{"475":{"position":[[322,24]]}}}],["purger：是否开启purg",{"_index":3200,"t":{"475":{"position":[[848,23]]}}}],["put",{"_index":1741,"t":{"197":{"position":[[5980,3]]}}}],["put、delete等请求。如果一个方法被标注为@staplerrespond",{"_index":489,"t":{"85":{"position":[[168,63]]}}}],["pv",{"_index":3713,"t":{"516":{"position":[[12071,2],[110185,2],[111683,3],[111728,3],[111732,21],[111966,2],[112315,29],[112389,2],[112439,2],[112616,2],[112690,2],[112760,2],[112877,2],[113716,2],[113855,4],[113895,2],[114278,9],[115418,4],[115458,2],[115705,4],[116857,4],[116897,2],[117311,19]]},"620":{"position":[[35,2],[418,9]]},"626":{"position":[[35,2]]},"634":{"position":[[35,2]]}}}],["pv.yaml",{"_index":5023,"t":{"516":{"position":[[113109,9],[113760,7]]},"618":{"position":[[41,7]]}}}],["pv1",{"_index":5024,"t":{"516":{"position":[[113173,3],[113970,3],[115315,3],[115539,3],[116754,3],[116985,3]]},"620":{"position":[[110,3]]},"624":{"position":[[134,3]]},"626":{"position":[[116,3]]},"632":{"position":[[121,3]]},"634":{"position":[[123,3]]}}}],["pv2",{"_index":4999,"t":{"516":{"position":[[111808,3],[113371,3],[114014,3],[115353,3],[115590,3],[116792,3],[117036,3]]},"620":{"position":[[154,3]]},"624":{"position":[[172,3]]},"626":{"position":[[167,3]]},"632":{"position":[[159,3]]},"634":{"position":[[174,3]]}}}],["pv3",{"_index":5027,"t":{"516":{"position":[[113569,3],[114058,3],[115391,3],[115641,3],[116830,3],[117087,3]]},"620":{"position":[[198,3]]},"624":{"position":[[210,3]]},"626":{"position":[[218,3]]},"632":{"position":[[197,3]]},"634":{"position":[[225,3]]}}}],["pvc",{"_index":3715,"t":{"516":{"position":[[12100,3],[112668,3],[112697,3],[112722,3],[114113,3],[114117,44],[114221,3],[114354,3],[115014,5],[115175,5],[115216,3],[116627,5],[116668,3]]},"620":{"position":[[253,3],[257,44],[361,3],[494,3]]},"624":{"position":[[35,3]]},"632":{"position":[[35,3]]}}}],["pvc.yaml",{"_index":5044,"t":{"516":{"position":[[115061,8]]},"622":{"position":[[41,8]]}}}],["pvc.yaml，申请pv",{"_index":5040,"t":{"516":{"position":[[114560,15]]}}}],["pvc1",{"_index":5041,"t":{"516":{"position":[[114635,4],[115304,4],[116011,4],[116743,4]]},"624":{"position":[[123,4]]},"632":{"position":[[110,4]]}}}],["pvc2",{"_index":5042,"t":{"516":{"position":[[114781,4],[115342,4],[116333,4],[116781,4]]},"624":{"position":[[161,4]]},"632":{"position":[[148,4]]}}}],["pvc3",{"_index":5043,"t":{"516":{"position":[[114927,4],[115380,4],[116819,4]]},"624":{"position":[[199,4]]},"632":{"position":[[186,4]]}}}],["pvc之后，系统将根据pvc对存储资源的请求在已存在的pv",{"_index":5068,"t":{"516":{"position":[[117374,45]]}}}],["pvc则会无限期处于pending状态，直到等到系统管理员创建了一个符合其要求的pv",{"_index":5070,"t":{"516":{"position":[[117461,48]]}}}],["pvc和pv是一一对应的，pv和pvc",{"_index":5066,"t":{"516":{"position":[[117275,35]]},"636":{"position":[[125,35]]}}}],["pvc在定义时可以设定需要的后端存储的类别，只有设置了该class的pv",{"_index":5039,"t":{"516":{"position":[[114485,43]]}}}],["pvc来释放pv",{"_index":5074,"t":{"516":{"position":[[117614,17]]}}}],["pvc（persist",{"_index":4994,"t":{"516":{"position":[[111553,14]]}}}],["pvc，kubernetes负责根据pvc的声明去寻找pv",{"_index":5067,"t":{"516":{"position":[[117331,42]]}}}],["pvc，与该pvc绑定的pv将会被标记为“已释放”，但还不能立刻与其他pvc进行绑定。通过之前pvc写入的数据可能还被留在存储设备上，只有在清除之后该pv",{"_index":5075,"t":{"516":{"position":[[117632,101]]}}}],["pvc：kubernet",{"_index":4997,"t":{"516":{"position":[[111703,18]]}}}],["pv、pvc",{"_index":4933,"t":{"516":{"position":[[106942,11]]}}}],["pv一旦绑定到某个pvc上，就会被这个pvc独占，不能再与其他pvc",{"_index":5071,"t":{"516":{"position":[[117510,39]]}}}],["pv与用户定义的pvc进行绑定，用户的应用就可以使用这个pvc",{"_index":5069,"t":{"516":{"position":[[117420,40]]}}}],["pv则只能与不请求任何类别的pvc",{"_index":5016,"t":{"516":{"position":[[112574,27]]}}}],["pv只能与请求了该类别的pvc",{"_index":5015,"t":{"516":{"position":[[112547,26]]}}}],["pv可以通过storageclassnam",{"_index":5014,"t":{"516":{"position":[[112514,32]]}}}],["pv和pvc",{"_index":4996,"t":{"516":{"position":[[111646,25]]}}}],["pv（persist",{"_index":4992,"t":{"516":{"position":[[111446,13]]}}}],["pv，管理员可以设定回收策略，用于设置与之绑定的pvc释放资源之后如何处理遗留数据的问题。只有pv的存储空间完成回收，才能供新的pvc",{"_index":5077,"t":{"516":{"position":[[117768,74]]}}}],["pwd",{"_index":240,"t":{"34":{"position":[[4327,3],[4335,3]]},"149":{"position":[[327,11]]}}}],["pwd与linux的pwd",{"_index":962,"t":{"149":{"position":[[339,27]]}}}],["px48p",{"_index":4499,"t":{"516":{"position":[[74785,5],[74832,5],[74889,5]]}}}],["pycharm将应用拖入apps目录下时要注意去勾选search",{"_index":2564,"t":{"289":{"position":[[170,38]]}}}],["python",{"_index":319,"t":{"52":{"position":[[198,6],[274,8]]},"66":{"position":[[0,6]]},"168":{"position":[[0,6],[40,6]]},"170":{"position":[[259,6]]},"186":{"position":[[28,6]]},"188":{"position":[[1228,9],[1411,11],[2004,9],[3425,9]]},"190":{"position":[[354,11]]},"230":{"position":[[41,6],[218,6],[271,6],[1016,6],[1089,6],[1133,6]]},"232":{"position":[[350,6],[383,6],[440,6],[460,6],[474,6]]},"234":{"position":[[86,19]]},"240":{"position":[[76,6]]},"244":{"position":[[24,6]]},"247":{"position":[[18,6],[154,6]]},"252":{"position":[[4082,21],[6299,11]]},"269":{"position":[[44,6]]},"337":{"position":[[0,6]]}}}],["python3",{"_index":2570,"t":{"289":{"position":[[376,7]]}}}],["python中datetime.time的实例。接收同datefield",{"_index":2108,"t":{"252":{"position":[[2727,58]]}}}],["python中的datetime.date的实例。在html中表现为dateinput标签。在admin后台中，django会帮你自动添加一个js日历表和一个“today",{"_index":2075,"t":{"252":{"position":[[696,129]]}}}],["python中的timedelta。在不同的数据库实现中有不同的表示方法。常用于进行时间之间的加减运算。但是小心了，这里有坑，postgresql",{"_index":2083,"t":{"252":{"position":[[1415,107]]}}}],["python依赖库不同，将caches的backend设置为django.core.cache.backends.memcached.memcachedcache或者django.core.cache.backends.memcached.pylibmccach",{"_index":2423,"t":{"269":{"position":[[957,138]]}}}],["python的datetime.datetime的实例。与datefield",{"_index":2078,"t":{"252":{"position":[[1061,81]]}}}],["python的decimal实例，必须提供两个指定的参数！参数max_digit",{"_index":2079,"t":{"252":{"position":[[1156,74]]}}}],["python的float",{"_index":2087,"t":{"252":{"position":[[1733,30]]}}}],["q",{"_index":70,"t":{"23":{"position":[[416,1]]},"264":{"position":[[614,3],[623,3],[686,39],[1307,3]]},"309":{"position":[[8,2],[42,3]]}}}],["q1",{"_index":2369,"t":{"264":{"position":[[618,2]]}}}],["q1.children.append(('comment_volume__gt",{"_index":2372,"t":{"264":{"position":[[750,42]]}}}],["q1.children.append(('comment_volume__lt",{"_index":2374,"t":{"264":{"position":[[873,42]]}}}],["q1.children.append(('upload_date__gt",{"_index":2379,"t":{"264":{"position":[[1141,39]]}}}],["q1.connector",{"_index":2370,"t":{"264":{"position":[[627,12]]}}}],["q1和q2对象添加到总的q",{"_index":2387,"t":{"264":{"position":[[1671,16]]}}}],["q1对象表示‘and’关系，也就是说q1下的条件都要满足‘and",{"_index":2371,"t":{"264":{"position":[[650,33]]}}}],["q2",{"_index":2380,"t":{"264":{"position":[[1302,2]]}}}],["q2.children.append(('asin__contain",{"_index":2386,"t":{"264":{"position":[[1590,37]]}}}],["q2.children.append(('product_name__contain",{"_index":2385,"t":{"264":{"position":[[1528,45]]}}}],["q2.connector",{"_index":2381,"t":{"264":{"position":[[1311,12]]}}}],["q2对象表示‘or’关系，也就是说q2下的条件都要满足‘or",{"_index":2382,"t":{"264":{"position":[[1333,31]]}}}],["qa",{"_index":46,"t":{"21":{"position":[[364,2],[409,3]]},"23":{"position":[[538,3],[754,3]]}}}],["ql",{"_index":2914,"t":{"442":{"position":[[130,2]]}}}],["qo",{"_index":3837,"t":{"516":{"position":[[19260,3]]},"526":{"position":[[4205,3]]}}}],["qq",{"_index":2234,"t":{"256":{"position":[[1349,45]]}}}],["quay",{"_index":4882,"t":{"516":{"position":[[102480,5]]}}}],["quay.io/kubernet",{"_index":4879,"t":{"516":{"position":[[102406,20]]}}}],["query_str",{"_index":3159,"t":{"459":{"position":[[467,12]]}}}],["queryparamet",{"_index":474,"t":{"83":{"position":[[259,15]]},"85":{"position":[[408,16]]},"88":{"position":[[1267,16]]}}}],["queryparameter(\"id",{"_index":493,"t":{"85":{"position":[[425,38]]}}}],["queryset",{"_index":1195,"t":{"177":{"position":[[901,10],[1067,8]]},"186":{"position":[[1894,29]]},"197":{"position":[[1425,8],[1882,8],[2498,9],[2559,8],[2978,8],[4226,8],[4965,9]]},"199":{"position":[[1571,8],[2301,8]]},"209":{"position":[[210,8]]},"211":{"position":[[391,8]]},"219":{"position":[[265,8]]},"221":{"position":[[314,8]]},"223":{"position":[[310,8]]},"225":{"position":[[399,8],[989,8],[1498,8]]}}}],["queryset(self",{"_index":1194,"t":{"177":{"position":[[877,14]]}}}],["queryset.filter(id__in=list(id",{"_index":1198,"t":{"177":{"position":[[1026,33]]}}}],["queryset=author.objects.al",{"_index":1172,"t":{"177":{"position":[[260,30]]}}}],["queryset=bookinfo.objects.al",{"_index":1390,"t":{"186":{"position":[[1789,32]]}}}],["queryset后的列表内元素的顺序，切不可和前面的get_latest_bi",{"_index":2310,"t":{"258":{"position":[[2807,58]]}}}],["question",{"_index":1945,"t":{"230":{"position":[[854,8]]},"258":{"position":[[1978,8],[2085,10],[2299,8]]}}}],["question'，这样的话，django会自动提供两个api，get_related_order()和set_related_order()，其中的related用小写的模型名代替。假设现在有一个question对象，它关联着多个answer对象，下面的操作返回包含关联的anser对象的主键的列表[1,2,3",{"_index":2300,"t":{"258":{"position":[[2135,159]]}}}],["question(models.model",{"_index":1939,"t":{"230":{"position":[[703,23]]},"258":{"position":[[1894,23]]}}}],["question.get_answer_ord",{"_index":2302,"t":{"258":{"position":[[2341,27]]}}}],["question.objects.get(id=1",{"_index":2301,"t":{"258":{"position":[[2310,26]]}}}],["question.set_answer_order([3",{"_index":2304,"t":{"258":{"position":[[2424,29]]}}}],["question_text",{"_index":1940,"t":{"230":{"position":[[727,13]]}}}],["queue",{"_index":653,"t":{"110":{"position":[[336,5]]}}}],["queue.execut",{"_index":735,"t":{"112":{"position":[[834,16]]}}}],["queue/api/json",{"_index":349,"t":{"62":{"position":[[54,15]]}}}],["queue/api/json?tree=items[actions[causes[shortdescript",{"_index":351,"t":{"62":{"position":[[96,61]]}}}],["queueaction",{"_index":528,"t":{"88":{"position":[[1006,13]]}}}],["quietperiod（可选）：整型，触发下游pipeline后，下游pipeline等待多久执行。如果不设置此参数，则等待时长由下游pipelin",{"_index":1027,"t":{"155":{"position":[[928,83]]}}}],["quit",{"_index":2944,"t":{"446":{"position":[[507,4]]},"498":{"position":[[150,4]]}}}],["quota",{"_index":3792,"t":{"516":{"position":[[16738,6]]},"526":{"position":[[1683,6]]}}}],["q对象，把下边的q1，q2",{"_index":2367,"t":{"264":{"position":[[582,25]]}}}],["r",{"_index":203,"t":{"34":{"position":[[1500,1],[4555,1],[4575,1],[4785,1],[4805,1]]},"46":{"position":[[426,1],[986,1],[1347,1]]},"294":{"position":[[239,36],[319,1],[325,1]]},"311":{"position":[[95,1]]},"402":{"position":[[609,1],[642,1]]},"516":{"position":[[14874,1]]},"524":{"position":[[557,1]]}}}],["r5gv4",{"_index":4726,"t":{"516":{"position":[[91732,5]]}}}],["rais",{"_index":1440,"t":{"188":{"position":[[1867,5],[2397,5],[2843,5]]}}}],["ram，2",{"_index":3462,"t":{"516":{"position":[[2753,8]]}}}],["random",{"_index":3028,"t":{"455":{"position":[[381,6]]}}}],["rb",{"_index":5235,"t":{"516":{"position":[[130009,2]]}}}],["rbac(rol",{"_index":5123,"t":{"516":{"position":[[122265,9]]}}}],["rbac.authorization.k8s.io",{"_index":5144,"t":{"516":{"position":[[123814,25],[123895,25],[124154,25],[124249,25],[124731,25],[124826,25],[126633,25],[126704,25]]}}}],["rbac.authorization.k8s.io/v1beta1",{"_index":5129,"t":{"516":{"position":[[122627,33],[122924,33],[123679,33],[124027,33],[124593,33],[126318,33],[126497,33]]},"644":{"position":[[30,33]]},"646":{"position":[[37,33]]},"649":{"position":[[30,33]]}}}],["rbac引入了4",{"_index":5125,"t":{"516":{"position":[[122422,16]]}}}],["rbac：基于角色的访问控制（kubeadm",{"_index":5122,"t":{"516":{"position":[[122231,33]]}}}],["rc",{"_index":3697,"t":{"516":{"position":[[11797,2],[12590,2]]}}}],["re",{"_index":2688,"t":{"337":{"position":[[7,10]]},"344":{"position":[[476,3]]}}}],["re.",{"_index":2666,"t":{"328":{"position":[[200,4]]}}}],["re.dotal",{"_index":2651,"t":{"325":{"position":[[242,46]]}}}],["re.i",{"_index":2662,"t":{"328":{"position":[[137,4]]}}}],["re.l",{"_index":2663,"t":{"328":{"position":[[153,4]]}}}],["re.m",{"_index":2665,"t":{"328":{"position":[[181,4]]}}}],["re.match",{"_index":2658,"t":{"328":{"position":[[0,8],[462,9]]}}}],["re.match('^hello\\s(\\d+)\\s(\\d+).*demo",{"_index":2673,"t":{"328":{"position":[[385,39]]}}}],["re.search",{"_index":2683,"t":{"330":{"position":[[0,9]]}}}],["re.sub(pattern",{"_index":2685,"t":{"333":{"position":[[26,15]]}}}],["re.u",{"_index":2667,"t":{"328":{"position":[[223,4]]}}}],["re.x",{"_index":2669,"t":{"328":{"position":[[268,4]]}}}],["re_path",{"_index":2012,"t":{"240":{"position":[[51,9],[215,7],[735,9]]}}}],["re_path(r'^articles/(?p<year>[0",{"_index":2015,"t":{"240":{"position":[[308,31],[372,31],[457,31]]}}}],["read",{"_index":1790,"t":{"199":{"position":[[3041,10]]},"364":{"position":[[0,4],[53,4]]},"508":{"position":[[100,4]]}}}],["read(self",{"_index":1782,"t":{"199":{"position":[[2531,10]]}}}],["read_onli",{"_index":1325,"t":{"184":{"position":[[2874,9]]}}}],["read_only=tru",{"_index":1238,"t":{"184":{"position":[[592,15]]},"186":{"position":[[1342,15],[1716,15],[1859,34],[2919,15]]},"188":{"position":[[439,15],[3001,15]]},"190":{"position":[[574,15],[2150,15]]}}}],["read_only=true或者queryset",{"_index":1391,"t":{"186":{"position":[[1822,36]]}}}],["read_only_field",{"_index":1502,"t":{"190":{"position":[[1513,39],[1712,16]]}}}],["readfil",{"_index":967,"t":{"149":{"position":[[566,16],[600,15]]}}}],["readfile(\"a.txt",{"_index":996,"t":{"151":{"position":[[855,17]]}}}],["readfile(fil",{"_index":973,"t":{"149":{"position":[[769,14]]}}}],["readi",{"_index":3631,"t":{"516":{"position":[[9071,13],[13317,5],[14044,5],[17326,5],[18222,5],[18913,6],[19086,5],[19922,5],[20353,5],[20553,5],[22389,5],[22543,5],[23570,5],[23785,5],[23935,5],[32298,5],[32435,5],[34858,5],[37978,5],[38414,5],[41490,5],[43026,5],[43362,9],[44920,5],[46136,5],[47411,5],[49436,5],[50420,5],[50896,5],[51780,5],[52262,5],[54686,5],[55590,5],[56362,5],[57870,5],[58638,5],[59491,5],[59860,5],[60744,5],[61947,5],[62376,5],[62837,5],[63715,5],[63880,5],[66216,20],[66325,5],[66530,5],[66864,5],[67372,5],[67717,5],[68050,5],[68422,5],[69049,5],[70830,5],[71002,5],[71107,5],[71504,5],[71620,5],[72099,5],[72989,5],[74143,5],[75394,5],[76506,5],[76804,5],[77715,5],[77959,5],[78458,5],[78702,5],[81444,5],[81514,5],[82902,5],[83336,5],[86006,5],[86188,5],[88345,5],[88657,5],[94945,5],[102739,5],[108116,5],[109462,5],[111160,5],[116511,5],[118852,5],[120254,5],[127104,5],[129459,5]]},"522":{"position":[[498,5]]},"526":{"position":[[2271,5],[3167,5],[3858,6],[4031,5],[4867,5],[5298,5],[5498,5]]},"532":{"position":[[86,5]]},"541":{"position":[[86,5]]},"545":{"position":[[78,5]]},"549":{"position":[[75,5]]},"553":{"position":[[77,5]]},"562":{"position":[[77,5],[446,5]]},"567":{"position":[[89,5]]},"569":{"position":[[60,5]]},"571":{"position":[[60,5]]},"585":{"position":[[69,5],[139,5]]},"589":{"position":[[782,5],[1216,5]]},"630":{"position":[[60,5]]},"640":{"position":[[62,5]]}}}],["readinessprob",{"_index":4193,"t":{"516":{"position":[[43433,23]]}}}],["readl",{"_index":1093,"t":{"170":{"position":[[698,5]]}}}],["readonli",{"_index":279,"t":{"42":{"position":[[372,8]]},"356":{"position":[[3,8],[110,8]]},"516":{"position":[[28279,9],[116016,9],[116338,9]]}}}],["readonlymany（rox",{"_index":5009,"t":{"516":{"position":[[112183,18]]}}}],["readwritemani",{"_index":5026,"t":{"516":{"position":[[113219,13],[113417,13],[113615,13],[114674,13],[114820,13],[114966,13]]}}}],["readwritemany（rwx",{"_index":5010,"t":{"516":{"position":[[112217,33]]}}}],["readwriteonce（rwo",{"_index":5008,"t":{"516":{"position":[[112147,35]]}}}],["ready:noexecut",{"_index":3842,"t":{"516":{"position":[[19340,15]]},"526":{"position":[[4285,15]]}}}],["reason",{"_index":3844,"t":{"516":{"position":[[19428,6],[24632,6],[24828,6],[33359,6],[41044,6],[52465,6],[58810,6]]},"526":{"position":[[4373,6]]},"555":{"position":[[97,6]]}}}],["reclaim",{"_index":5032,"t":{"516":{"position":[[113933,7],[115496,7],[116942,7]]},"620":{"position":[[73,7]]},"626":{"position":[[73,7]]},"634":{"position":[[80,7]]}}}],["recommended.yaml",{"_index":5217,"t":{"516":{"position":[[129330,16]]}}}],["record=tru",{"_index":4449,"t":{"516":{"position":[[70648,11],[76060,11],[76121,11],[76182,11]]}}}],["recreat",{"_index":4477,"t":{"516":{"position":[[72753,8]]}}}],["recreate：在创建出新的pod之前会先杀掉所有已存在的pod",{"_index":4471,"t":{"516":{"position":[[72445,33]]}}}],["recursive:可选参数，只能是true或者false。默认为fals",{"_index":2161,"t":{"252":{"position":[[5658,60]]}}}],["recursive=fals",{"_index":2155,"t":{"252":{"position":[[5354,16]]}}}],["recursive=tru",{"_index":2167,"t":{"252":{"position":[[5918,15]]}}}],["recycl",{"_index":5012,"t":{"516":{"position":[[112374,11]]}}}],["redi",{"_index":245,"t":{"34":{"position":[[4557,5],[4580,5],[4586,5],[4597,5],[4609,6],[4742,5],[4787,5],[4810,5],[4816,5],[5028,8],[5037,6]]},"269":{"position":[[2157,10],[2208,5]]},"516":{"position":[[40681,5]]}}}],["redirect",{"_index":3103,"t":{"457":{"position":[[3474,8],[3647,9]]}}}],["redis.tar.gz",{"_index":193,"t":{"34":{"position":[[1210,12],[1321,12],[1478,12]]}}}],["redis://127.0.0.1:6379/1",{"_index":2444,"t":{"269":{"position":[[2294,27]]}}}],["redis缓存需求安装redis依赖，pip",{"_index":2442,"t":{"269":{"position":[[2168,24]]}}}],["refer",{"_index":4609,"t":{"516":{"position":[[82174,9],[82397,9]]},"589":{"position":[[54,9],[277,9]]}}}],["references，防止pycharm自动帮你在import语句那加上app",{"_index":2565,"t":{"289":{"position":[[213,43]]}}}],["refus",{"_index":4213,"t":{"516":{"position":[[45981,7]]}}}],["regex",{"_index":2672,"t":{"328":{"position":[[364,5],[532,5]]}}}],["regexfield",{"_index":1256,"t":{"184":{"position":[[1249,10]]}}}],["regexfield(regex",{"_index":1257,"t":{"184":{"position":[[1260,17]]}}}],["regexp",{"_index":912,"t":{"139":{"position":[[938,20],[1007,8]]}}}],["registri",{"_index":3548,"t":{"516":{"position":[[5929,9]]}}}],["registry.aliyuncs.com/google_contain",{"_index":3590,"t":{"516":{"position":[[7520,39]]}}}],["registry.cn",{"_index":3584,"t":{"516":{"position":[[7144,11],[7218,11],[7314,11],[79870,11]]}}}],["regression：上一次完成状态为成功，当前完成状态为失败、不稳定或中止（abort",{"_index":849,"t":{"132":{"position":[[217,51]]}}}],["reid",{"_index":4164,"t":{"516":{"position":[[40782,9]]}}}],["related_nam",{"_index":2224,"t":{"256":{"position":[[759,12]]}}}],["related_name=\"membership_invit",{"_index":2248,"t":{"256":{"position":[[1899,34]]}}}],["related_name、related_query_name、limit_choices_to",{"_index":2231,"t":{"256":{"position":[[1184,66]]}}}],["related_name参数，django",{"_index":2261,"t":{"256":{"position":[[2512,51]]}}}],["releas",{"_index":907,"t":{"139":{"position":[[799,8],[904,8],[979,8]]},"516":{"position":[[3235,7],[112704,14]]}}}],["reload",{"_index":25,"t":{"19":{"position":[[151,6]]},"170":{"position":[[1270,6]]},"446":{"position":[[248,6],[419,6]]},"498":{"position":[[0,6],[40,6]]},"504":{"position":[[4035,6]]}}}],["remot",{"_index":158,"t":{"32":{"position":[[105,6]]},"170":{"position":[[811,6]]}}}],["remote_addr",{"_index":1094,"t":{"170":{"position":[[707,13],[823,13]]},"449":{"position":[[427,13]]},"459":{"position":[[87,11]]}}}],["remote_port",{"_index":3148,"t":{"459":{"position":[[109,11]]}}}],["remote_us",{"_index":2957,"t":{"449":{"position":[[443,12]]}}}],["remoteaddress:port",{"_index":4747,"t":{"516":{"position":[[92576,18],[93644,18]]},"591":{"position":[[654,18],[1722,18]]}}}],["remotingdiagnostics.executegroovy()执行groovi",{"_index":802,"t":{"116":{"position":[[0,49]]}}}],["remotingdiagnostics.executegroovy(buildscript",{"_index":810,"t":{"116":{"position":[[382,46]]}}}],["remov",{"_index":206,"t":{"34":{"position":[[1546,6]]},"442":{"position":[[50,6]]},"516":{"position":[[13137,7]]}}}],["render",{"_index":1544,"t":{"193":{"position":[[1509,16]]}}}],["render(request",{"_index":2401,"t":{"264":{"position":[[2073,15],[2208,15]]}}}],["render(request,'index.html',context={'ctime':ctim",{"_index":2466,"t":{"273":{"position":[[179,52]]}}}],["reopen",{"_index":2943,"t":{"446":{"position":[[459,6]]}}}],["repl",{"_index":2686,"t":{"333":{"position":[[42,5],[88,15]]}}}],["replac",{"_index":4715,"t":{"516":{"position":[[90773,8]]}}}],["replica",{"_index":3905,"t":{"516":{"position":[[23352,8],[24282,9],[24797,8],[25187,9],[65240,9],[65923,9],[69688,9],[70426,9],[77549,8],[80908,9],[82208,8],[82431,8],[94594,9],[103186,9],[103454,9]]},"579":{"position":[[182,9]]},"589":{"position":[[88,8],[311,8]]}}}],["replicas=2",{"_index":4422,"t":{"516":{"position":[[67236,10]]}}}],["replicas=3",{"_index":3906,"t":{"516":{"position":[[23465,10]]}}}],["replicas=5",{"_index":4459,"t":{"516":{"position":[[71366,10]]}}}],["replicas=n",{"_index":4421,"t":{"516":{"position":[[67159,20]]}}}],["replicaset",{"_index":3698,"t":{"516":{"position":[[11808,11],[24945,10],[65084,18],[65135,10],[65793,12],[65861,10],[65891,10],[66154,10],[66278,10],[66365,10],[66559,10],[66597,10],[66635,10],[66749,10],[66786,10],[66893,10],[66932,10],[66970,10],[67008,10],[67047,10],[67085,10],[67223,10],[67273,10],[67401,10],[67444,10],[67488,10],[67532,10],[67571,10],[67615,10],[67746,10],[67785,10],[67902,10],[67939,10],[68085,10],[68248,10],[68304,10],[68457,10],[68502,12],[68661,10],[68699,11],[68923,10],[68977,11],[69078,10],[69116,10],[69251,11],[69487,17]]}}}],["replicaset(r",{"_index":4401,"t":{"516":{"position":[[64975,15]]}}}],["replicaset.app",{"_index":4432,"t":{"516":{"position":[[68679,15],[68957,15],[69231,15]]}}}],["replicaset.apps/pc",{"_index":4409,"t":{"516":{"position":[[66135,18],[66767,18],[67254,18],[67920,18],[68285,18]]}}}],["replicaset.yaml",{"_index":4408,"t":{"516":{"position":[[65811,23],[66119,15],[69215,15]]}}}],["replicaset/nginx",{"_index":3825,"t":{"516":{"position":[[18577,16]]},"526":{"position":[[3522,16]]}}}],["replicaset的主要作用是保证一定数量的pod正常运行，它会持续监听这些pod的运行状态，一旦pod发生故障，就会重启或重建。同时它还支持对pod",{"_index":4402,"t":{"516":{"position":[[64991,92]]}}}],["replicaset：保证副本数量一直维持在期望值，并支持pod",{"_index":4393,"t":{"516":{"position":[[64682,44]]}}}],["replicas：指定副本数量，其实就是当前rs创建出来的pod的数量，默认为1",{"_index":4403,"t":{"516":{"position":[[65597,40]]}}}],["replicationcontrol",{"_index":3696,"t":{"516":{"position":[[11774,22]]}}}],["replicationcontroller：比较原始的pod控制器，已经被废弃，由replicaset",{"_index":4392,"t":{"516":{"position":[[64628,53]]}}}],["repo_gpgcheck=0",{"_index":3559,"t":{"516":{"position":[[6329,15]]}}}],["repositori",{"_index":3589,"t":{"516":{"position":[[7509,10]]}}}],["req",{"_index":472,"t":{"83":{"position":[[233,4],[410,4]]},"516":{"position":[[105269,3],[125111,3],[125233,3]]},"606":{"position":[[8,3]]}}}],["req.getview(thi",{"_index":479,"t":{"83":{"position":[[438,17]]}}}],["request",{"_index":317,"t":{"52":{"position":[[173,9]]},"177":{"position":[[776,8],[892,8],[1315,8],[1701,8]]},"184":{"position":[[3449,9]]},"188":{"position":[[1547,10]]},"193":{"position":[[7,8],[229,36]]},"197":{"position":[[663,9],[1349,7],[1968,8],[2527,8],[3064,9],[3303,8],[4010,8],[4312,8],[4614,8],[5198,8],[5489,8]]},"199":{"position":[[279,9],[422,8],[2390,9],[2542,8]]},"211":{"position":[[94,8],[161,8],[286,8]]},"247":{"position":[[275,7]]},"249":{"position":[[430,8]]},"344":{"position":[[400,8]]},"449":{"position":[[470,10]]},"516":{"position":[[28687,9],[37362,8],[37664,9],[81116,9],[114331,9],[114699,9],[114845,9],[114991,9]]},"579":{"position":[[390,9]]},"620":{"position":[[471,9]]}}}],["request.data",{"_index":1513,"t":{"193":{"position":[[312,12]]}}}],["request.data.get('bread",{"_index":1784,"t":{"199":{"position":[[2613,25]]}}}],["request.fil",{"_index":1515,"t":{"193":{"position":[[365,24]]}}}],["request.get.get('comment_volume_from",{"_index":2358,"t":{"264":{"position":[[234,38]]}}}],["request.get.get('comment_volume_to",{"_index":2360,"t":{"264":{"position":[[293,36]]}}}],["request.get.get('search_amazon",{"_index":2366,"t":{"264":{"position":[[473,32]]}}}],["request.get.get('seller_volume_from",{"_index":2354,"t":{"264":{"position":[[108,37]]}}}],["request.get.get('seller_volume_to",{"_index":2356,"t":{"264":{"position":[[165,35]]}}}],["request.get.get('upload_date_from",{"_index":2362,"t":{"264":{"position":[[360,35]]}}}],["request.get.get('upload_date_to",{"_index":2364,"t":{"264":{"position":[[413,33]]}}}],["request.method",{"_index":2352,"t":{"264":{"position":[[46,14]]}}}],["request.query_params与django标准的request.get",{"_index":1519,"t":{"193":{"position":[[502,58]]}}}],["request_count_test",{"_index":2701,"t":{"344":{"position":[[284,19]]}}}],["request_count_test(request",{"_index":2697,"t":{"344":{"position":[[106,27]]}}}],["request_filenam",{"_index":3163,"t":{"459":{"position":[[719,16]]}}}],["request_length",{"_index":3156,"t":{"459":{"position":[[367,14]]}}}],["request_method",{"_index":3155,"t":{"459":{"position":[[347,14]]}}}],["request_tim",{"_index":3162,"t":{"459":{"position":[[661,12]]}}}],["request_uri",{"_index":3044,"t":{"455":{"position":[[1276,13],[1482,12],[1500,11]]},"459":{"position":[[298,11]]},"487":{"position":[[681,13],[1029,13],[1264,13]]}}}],["requests.get(url",{"_index":2708,"t":{"344":{"position":[[482,17]]}}}],["requests=cpu=100m",{"_index":4594,"t":{"516":{"position":[[81246,17]]},"581":{"position":[[67,17]]}}}],["request对象不再是django默认的httprequest对象，而是rest",{"_index":1508,"t":{"193":{"position":[[31,46]]}}}],["requir",{"_index":1327,"t":{"184":{"position":[[2940,8]]},"188":{"position":[[1021,11]]},"190":{"position":[[2025,11],[2073,11]]},"516":{"position":[[54182,8],[54568,8],[54657,8],[54744,8],[54878,8],[55236,9],[55458,8],[55561,8],[55648,8],[58033,8],[58530,8],[58617,8],[58680,8],[58774,8],[59275,9],[59385,8],[59470,8],[59540,8],[59917,8],[60147,8],[60619,8],[60715,8],[60801,8]]},"530":{"position":[[93,8]]},"532":{"position":[[57,8],[144,8]]},"535":{"position":[[61,8],[419,9]]},"539":{"position":[[93,8]]},"541":{"position":[[57,8],[144,8]]},"549":{"position":[[238,8]]},"551":{"position":[[91,8]]},"553":{"position":[[56,8],[119,8]]},"555":{"position":[[61,8]]},"560":{"position":[[92,9],[202,8]]},"562":{"position":[[56,8],[126,8],[503,8],[733,8]]},"564":{"position":[[99,8]]},"567":{"position":[[60,8],[146,8]]}}}],["require_get",{"_index":2048,"t":{"249":{"position":[[134,25]]}}}],["require_http_method",{"_index":2053,"t":{"249":{"position":[[307,20]]}}}],["require_http_methods([\"get",{"_index":2054,"t":{"249":{"position":[[328,29]]}}}],["require_http_methods(request_method_list",{"_index":2047,"t":{"249":{"position":[[76,41]]}}}],["require_post",{"_index":2049,"t":{"249":{"position":[[168,26]]}}}],["require_saf",{"_index":2050,"t":{"249":{"position":[[204,26]]}}}],["required.yaml",{"_index":4290,"t":{"516":{"position":[[54110,13],[54533,13],[55200,13],[55346,13],[55423,13],[57956,19],[58496,13],[59154,13],[59240,13],[59351,13],[60066,19],[60581,13]]},"530":{"position":[[58,13]]},"535":{"position":[[383,13]]},"537":{"position":[[44,13]]},"539":{"position":[[58,13]]},"549":{"position":[[161,19]]},"551":{"position":[[57,13]]},"558":{"position":[[43,13]]},"560":{"position":[[57,13],[168,13]]},"562":{"position":[[652,19]]},"564":{"position":[[61,13]]}}}],["required=fals",{"_index":1173,"t":{"177":{"position":[[291,15]]},"184":{"position":[[775,15],[840,15],[899,15]]},"186":{"position":[[1485,15],[1564,15],[3102,15],[3167,15],[3226,15]]},"188":{"position":[[622,15],[687,15],[746,15],[3211,15],[3276,15],[3335,15]]},"190":{"position":[[689,15],[784,15],[882,15],[962,15],[2269,15]]}}}],["required=tru",{"_index":1242,"t":{"184":{"position":[[714,14]]},"186":{"position":[[3041,14]]},"188":{"position":[[561,14],[3150,14]]},"190":{"position":[[2356,14],[2445,14]]}}}],["required_db_featur",{"_index":2319,"t":{"258":{"position":[[3437,20]]}}}],["required_db_vendor",{"_index":2321,"t":{"258":{"position":[[3505,18]]}}}],["requiredduringschedulingignoredduringexecut",{"_index":4275,"t":{"516":{"position":[[53275,46],[54031,57],[54298,47],[55700,56],[56827,46],[57384,56],[58147,47],[60265,47]]},"541":{"position":[[196,56]]},"545":{"position":[[543,46],[1100,56]]},"549":{"position":[[352,47]]},"562":{"position":[[851,47]]}}}],["requirepost",{"_index":491,"t":{"85":{"position":[[344,13]]},"88":{"position":[[460,13]]}}}],["requirepostwithjenkinssess",{"_index":530,"t":{"88":{"position":[[1159,31]]}}}],["res.status_cod",{"_index":2710,"t":{"344":{"position":[[511,16]]}}}],["res.text",{"_index":2711,"t":{"344":{"position":[[539,9]]}}}],["reset",{"_index":3619,"t":{"516":{"position":[[8571,10],[8610,5]]}}}],["resourc",{"_index":599,"t":{"101":{"position":[[216,9],[570,9]]},"516":{"position":[[11661,9],[16729,8],[16759,9],[20774,9],[22689,9],[28530,10],[30430,9],[30973,9],[31564,9],[31834,9],[36309,9],[37502,9],[37579,10],[37881,9],[37956,9],[38008,9],[38117,10],[38303,9],[38384,9],[38444,9],[38538,9],[68776,9],[81053,10],[114313,10],[114529,14],[114688,10],[114834,10],[114980,10],[122763,10],[123023,10],[123150,19],[126062,8],[126415,10]]},"526":{"position":[[1674,8],[1704,9],[5719,9]]},"579":{"position":[[327,10]]},"620":{"position":[[453,10]]}}}],["resourcequota",{"_index":3790,"t":{"516":{"position":[[16658,13]]},"526":{"position":[[1603,13]]}}}],["resourcequota：用于资源配额管理目的，观察所有请求，确保在namespac",{"_index":5201,"t":{"516":{"position":[[128072,52]]}}}],["resources.yaml",{"_index":4108,"t":{"516":{"position":[[37442,14],[37858,14],[38093,14],[38210,14],[38280,14]]}}}],["resourcevers",{"_index":3776,"t":{"516":{"position":[[16315,16],[30773,15]]},"526":{"position":[[1260,16]]}}}],["respons",{"_index":1433,"t":{"188":{"position":[[1573,8]]},"193":{"position":[[568,9]]},"197":{"position":[[561,8]]},"227":{"position":[[171,8],[233,8],[314,8],[735,8],[785,8],[893,8],[988,8]]}}}],["response(data",{"_index":1528,"t":{"193":{"position":[[991,14]]}}}],["response(serializer.data",{"_index":1626,"t":{"197":{"position":[[761,25],[2092,25],[2847,25],[3534,25],[4138,25],[5091,25]]},"199":{"position":[[377,25],[608,25],[2501,25],[2697,25]]}}}],["response(status=status.http_204_no_cont",{"_index":1727,"t":{"197":{"position":[[5583,43]]}}}],["response(status=status.http_404_not_found",{"_index":1759,"t":{"199":{"position":[[519,42]]}}}],["response({'detail",{"_index":1915,"t":{"227":{"position":[[904,19]]}}}],["response.data['status_cod",{"_index":1903,"t":{"227":{"position":[[255,28]]}}}],["response.status_cod",{"_index":1904,"t":{"227":{"position":[[286,20]]}}}],["response对象的序列化后，但尚未rend",{"_index":1541,"t":{"193":{"position":[[1443,32]]}}}],["rest",{"_index":156,"t":{"32":{"position":[[85,4]]},"50":{"position":[[11,4]]},"64":{"position":[[9,4]]},"182":{"position":[[40,4]]},"184":{"position":[[19,4]]},"193":{"position":[[16,4],[119,4],[436,7],[611,4],[689,4],[1538,14]]},"195":{"position":[[0,4],[70,4],[138,4]]},"197":{"position":[[125,14],[186,12]]},"199":{"position":[[3280,4]]},"223":{"position":[[0,11]]},"225":{"position":[[0,4]]},"227":{"position":[[0,4],[134,7],[997,4]]}}}],["rest_framework",{"_index":1219,"t":{"180":{"position":[[38,18],[154,17]]},"193":{"position":[[812,14]]},"199":{"position":[[1357,14],[2087,14]]},"201":{"position":[[20,14]]},"205":{"position":[[21,14]]},"215":{"position":[[68,14]]},"217":{"position":[[404,14]]},"221":{"position":[[146,14]]},"225":{"position":[[47,14]]},"227":{"position":[[340,14],[451,14],[633,14]]},"277":{"position":[[315,14]]}}}],["rest_framework.authent",{"_index":1802,"t":{"201":{"position":[[253,29]]},"209":{"position":[[5,29]]},"219":{"position":[[5,29]]}}}],["rest_framework.authentication.basicauthent",{"_index":1799,"t":{"201":{"position":[[75,52]]}}}],["rest_framework.authentication.sessionauthent",{"_index":1800,"t":{"201":{"position":[[135,54]]}}}],["rest_framework.decor",{"_index":1771,"t":{"199":{"position":[[1442,25],[2172,25]]}}}],["rest_framework.gener",{"_index":1820,"t":{"209":{"position":[[124,23]]},"219":{"position":[[124,23]]},"277":{"position":[[596,23]]}}}],["rest_framework.generics.genericapiview",{"_index":1628,"t":{"197":{"position":[[805,38]]}}}],["rest_framework.mixin",{"_index":1669,"t":{"197":{"position":[[2882,21]]},"277":{"position":[[560,21]]}}}],["rest_framework.pagin",{"_index":1884,"t":{"225":{"position":[[789,25],[1410,25]]}}}],["rest_framework.pagination.pagenumberpagin",{"_index":1871,"t":{"225":{"position":[[94,49]]}}}],["rest_framework.pars",{"_index":2545,"t":{"277":{"position":[[422,22]]}}}],["rest_framework.permiss",{"_index":1815,"t":{"205":{"position":[[254,26]]},"209":{"position":[[69,26]]},"219":{"position":[[69,26]]}}}],["rest_framework.permissions.allowani",{"_index":1813,"t":{"205":{"position":[[170,38]]}}}],["rest_framework.permissions.basepermiss",{"_index":1823,"t":{"211":{"position":[[0,71]]}}}],["rest_framework.permissions.isauthent",{"_index":1812,"t":{"205":{"position":[[72,45]]}}}],["rest_framework.render",{"_index":2543,"t":{"277":{"position":[[363,24]]}}}],["rest_framework.renderers.browsableapirender",{"_index":1527,"t":{"193":{"position":[[922,48]]}}}],["rest_framework.renderers.jsonrender",{"_index":1526,"t":{"193":{"position":[[871,40]]}}}],["rest_framework.request",{"_index":2548,"t":{"277":{"position":[[499,22]]}}}],["rest_framework.respons",{"_index":1621,"t":{"197":{"position":[[530,23]]},"277":{"position":[[529,23]]}}}],["rest_framework.response.respons",{"_index":1521,"t":{"193":{"position":[[578,32]]}}}],["rest_framework.statu",{"_index":2547,"t":{"277":{"position":[[470,21]]}}}],["rest_framework.throttl",{"_index":1840,"t":{"215":{"position":[[382,25]]},"219":{"position":[[176,25]]}}}],["rest_framework.throttling.anonratethrottl",{"_index":1831,"t":{"215":{"position":[[117,45]]}}}],["rest_framework.throttling.scopedratethrottl",{"_index":1854,"t":{"217":{"position":[[453,47]]}}}],["rest_framework.throttling.userratethrottl",{"_index":1832,"t":{"215":{"position":[[163,44]]}}}],["rest_framework.view",{"_index":1619,"t":{"197":{"position":[[489,20]]},"201":{"position":[[338,20]]},"205":{"position":[[309,20]]},"215":{"position":[[437,20]]},"227":{"position":[[42,20],[557,20]]}}}],["rest_framework.views.apiview",{"_index":1607,"t":{"197":{"position":[[24,28]]}}}],["rest_framework.views.exception_handl",{"_index":1906,"t":{"227":{"position":[[491,40]]}}}],["rest_framework.viewset",{"_index":1769,"t":{"199":{"position":[[1391,23],[2121,23]]}}}],["restart",{"_index":22,"t":{"19":{"position":[[104,7],[173,7]]},"23":{"position":[[554,7]]},"446":{"position":[[212,7]]},"504":{"position":[[4213,7]]},"516":{"position":[[6036,7],[8857,7],[8894,7],[8956,7],[8993,7],[13330,8],[14057,8],[17339,8],[18235,8],[18925,7],[19935,8],[20366,8],[22402,8],[22556,8],[23583,8],[32341,8],[32448,8],[34871,8],[37991,8],[38427,8],[41503,8],[43039,8],[44586,9],[44933,8],[46149,8],[47256,9],[47424,8],[49449,8],[50433,8],[50909,8],[51793,8],[52275,8],[54699,8],[55603,8],[56375,8],[57883,8],[58651,8],[59504,8],[59873,8],[60757,8],[61960,8],[62389,8],[62850,8],[63728,8],[63893,8],[66543,8],[66877,8],[67385,8],[67730,8],[69062,8],[71120,8],[71633,8],[72112,8],[73002,8],[74156,8],[75677,7],[77972,8],[78715,8],[81527,8],[83349,8],[86201,8],[88358,8],[88670,8],[102752,8],[108129,8],[109475,8],[110372,7],[111173,8],[113097,7],[116524,8],[118865,8],[120267,8],[127117,8],[129472,8]]},"522":{"position":[[511,8]]},"526":{"position":[[2284,8],[3180,8],[3870,7],[4880,8],[5311,8]]},"532":{"position":[[99,8]]},"541":{"position":[[99,8]]},"545":{"position":[[91,8]]},"549":{"position":[[88,8]]},"553":{"position":[[90,8]]},"562":{"position":[[90,8],[459,8]]},"567":{"position":[[102,8]]},"569":{"position":[[73,8]]},"571":{"position":[[73,8]]},"585":{"position":[[152,8]]},"589":{"position":[[1229,8]]},"630":{"position":[[73,8]]},"640":{"position":[[75,8]]}}}],["restart=alway",{"_index":55,"t":{"21":{"position":[[637,14],[668,14]]}}}],["restart=on",{"_index":419,"t":{"73":{"position":[[1326,10]]}}}],["restartpolici",{"_index":4008,"t":{"516":{"position":[[29394,14],[31384,13],[48721,13],[48905,14],[49029,13],[49122,13],[49410,13],[49466,13],[87208,14],[87778,14],[90356,14],[91014,14]]}}}],["restartpolicy.yaml",{"_index":4232,"t":{"516":{"position":[[48656,19],[49002,18]]}}}],["result",{"_index":704,"t":{"110":{"position":[[1931,6]]},"116":{"position":[[373,6],[463,8]]},"328":{"position":[[376,6]]}}}],["result.group(n",{"_index":2680,"t":{"328":{"position":[[611,28]]}}}],["result.replace(\"result",{"_index":813,"t":{"116":{"position":[[489,23]]}}}],["resum",{"_index":4509,"t":{"516":{"position":[[75656,6],[78299,6],[78364,7]]}}}],["retain",{"_index":5011,"t":{"516":{"position":[[112345,6],[113264,6],[113462,6],[113660,6],[113982,6],[114026,6],[114070,6],[115551,6],[115602,6],[115653,6],[116997,6],[117048,6],[117099,6]]},"620":{"position":[[122,6],[166,6],[210,6]]},"626":{"position":[[128,6],[179,6],[230,6]]},"634":{"position":[[135,6],[186,6],[237,6]]}}}],["retriev",{"_index":363,"t":{"62":{"position":[[435,8]]},"197":{"position":[[3960,8]]},"199":{"position":[[48,10],[785,12],[1799,14],[2954,14]]}}}],["retrieve(request",{"_index":1691,"t":{"197":{"position":[[3830,27]]}}}],["retrieve(self",{"_index":1693,"t":{"197":{"position":[[3995,14]]},"199":{"position":[[407,14]]}}}],["retrieveapiview",{"_index":1821,"t":{"209":{"position":[[155,15]]},"219":{"position":[[155,15]]}}}],["retrievefil",{"_index":796,"t":{"114":{"position":[[739,12]]}}}],["retrievemodelmixin",{"_index":1690,"t":{"197":{"position":[[3810,19]]}}}],["retrievemodelmixin(object",{"_index":1692,"t":{"197":{"position":[[3928,27]]}}}],["retry(4",{"_index":878,"t":{"137":{"position":[[862,8]]}}}],["retry（3）}指当pipeline失败时再重试2次。options指令可定义在stage或pipelin",{"_index":861,"t":{"135":{"position":[[302,59]]}}}],["retry：当发生失败时进行重试，可以指定整个pipeline的重试次数。需要注意的是，这个次数是指总次数，包括第1次失败。以下例子总共会执行4次。当使用retry选项时，options可以被放在stag",{"_index":877,"t":{"137":{"position":[[724,106]]}}}],["return",{"_index":726,"t":{"112":{"position":[[521,6],[561,6],[851,7],[1326,6],[1717,6],[1821,6]]},"116":{"position":[[216,7],[520,6]]},"139":{"position":[[529,6]]},"173":{"position":[[328,6],[405,6]]},"177":{"position":[[830,6],[1019,6],[1060,6],[1624,6]]},"188":{"position":[[1560,6],[1918,6],[2443,6],[3786,6],[4159,6],[4324,6],[4728,6]]},"197":{"position":[[754,6],[1108,6],[1137,6],[1588,6],[2085,6],[2728,6],[2840,6],[3074,6],[3527,6],[3707,6],[3797,6],[4131,6],[4326,6],[5084,6],[5250,6],[5576,6]]},"199":{"position":[[370,6],[512,6],[601,6],[2494,6],[2690,6],[3182,6],[3217,6]]},"211":{"position":[[341,6]]},"227":{"position":[[307,6],[981,6]]},"252":{"position":[[3604,6],[6109,6]]},"264":{"position":[[2066,6],[2201,6]]},"271":{"position":[[890,6]]},"273":{"position":[[172,6]]},"344":{"position":[[258,6]]},"418":{"position":[[50,7]]},"457":{"position":[[2890,7],[2928,6],[2962,6],[2982,6],[2999,6],[3028,6],[3065,6],[3125,6],[3174,6]]}}}],["returnstatus与returnstdout参数一般不会同时使用，因为返回值只能有一个。如果同时使用，则只有returnstatu",{"_index":1004,"t":{"153":{"position":[[391,74]]}}}],["returnstatus：布尔类型，默认脚本返回的是状态码，如果是一个非零的状态码，则会引发pipeline执行失败。如果returnstatus参数为true，则不论状态码是什么，pipelin",{"_index":1002,"t":{"153":{"position":[[185,109]]}}}],["returnstdout：布尔类型，如果为true，则任务的标准输出将作为步骤的返回值，而不是打印到构建日志中（如果有错误，则依然会打印到日志中）。除了script",{"_index":1003,"t":{"153":{"position":[[295,95]]}}}],["return后跟数值n(0",{"_index":2816,"t":{"418":{"position":[[162,13]]}}}],["revalidd",{"_index":3218,"t":{"485":{"position":[[86,13]]}}}],["revers",{"_index":3168,"t":{"465":{"position":[[0,13]]}}}],["revis",{"_index":4511,"t":{"516":{"position":[[75717,16],[75989,8]]}}}],["revision=1",{"_index":4516,"t":{"516":{"position":[[76356,10]]}}}],["revision=1回滚到了1",{"_index":4515,"t":{"516":{"position":[[76238,18]]}}}],["revisionhistorylimit",{"_index":4441,"t":{"516":{"position":[[69707,21],[85095,21]]}}}],["rewirt",{"_index":3098,"t":{"457":{"position":[[3304,10]]}}}],["rewrit",{"_index":3096,"t":{"457":{"position":[[3217,8],[3249,10],[3610,7],[3678,7],[3728,7],[4126,7],[4467,7],[4543,7]]},"493":{"position":[[611,7]]},"508":{"position":[[149,7],[298,7]]},"510":{"position":[[437,7],[560,7]]}}}],["rewrite_by_lua",{"_index":3395,"t":{"510":{"position":[[525,14]]}}}],["rewrite_by_lua_fil",{"_index":3396,"t":{"510":{"position":[[540,19]]}}}],["rf",{"_index":201,"t":{"34":{"position":[[1446,2]]},"516":{"position":[[8665,2],[8686,2],[8712,2],[112409,2]]}}}],["rf84v",{"_index":4552,"t":{"516":{"position":[[78904,5]]}}}],["river",{"_index":95,"t":{"25":{"position":[[264,5]]}}}],["rivertomcat",{"_index":78,"t":{"23":{"position":[[886,11]]}}}],["rj8sq",{"_index":4537,"t":{"516":{"position":[[78010,5]]}}}],["rm",{"_index":75,"t":{"23":{"position":[[654,2],[695,2],[735,2]]},"34":{"position":[[1442,2],[1475,2],[1496,2]]},"38":{"position":[[108,2]]},"516":{"position":[[8661,2],[8682,2],[8708,2],[112405,2]]}}}],["rmi",{"_index":41,"t":{"21":{"position":[[244,3],[283,3],[315,3],[385,3]]},"516":{"position":[[7310,3]]}}}],["ro",{"_index":64,"t":{"23":{"position":[[239,15],[258,22]]},"516":{"position":[[19040,4]]},"526":{"position":[[3985,4]]}}}],["role",{"_index":9,"t":{"15":{"position":[[40,4]]},"516":{"position":[[8088,5],[122610,4],[122706,4],[123743,4],[123855,4],[123880,4],[124657,4],[126301,4],[126387,4],[126561,4],[126674,4],[126689,4],[126822,4],[126887,4]]},"649":{"position":[[94,4]]}}}],["role.kubernetes.io/mast",{"_index":4125,"t":{"516":{"position":[[38660,26]]}}}],["role.rbac.authorization.k8s.io/dev",{"_index":5186,"t":{"516":{"position":[[126787,34]]}}}],["role.yaml",{"_index":5185,"t":{"516":{"position":[[126777,9]]}}}],["rolebind",{"_index":5142,"t":{"516":{"position":[[123655,11],[124569,11],[126473,11]]},"649":{"position":[[6,11]]}}}],["rolebinding.rbac.authorization.k8s.io/author",{"_index":5187,"t":{"516":{"position":[[126835,51]]}}}],["rolebinding、clusterrolebind",{"_index":5127,"t":{"516":{"position":[[122468,50],[123491,30]]}}}],["rolebinding可以将同一namespace中的subject绑定到某个role下，则此subject即具有该rol",{"_index":5141,"t":{"516":{"position":[[123581,67]]}}}],["rolebinding可以引用clusterrole，对属于同一命名空间内clusterrol",{"_index":5149,"t":{"516":{"position":[[124308,60]]}}}],["rolebinding引用clusterrol",{"_index":5148,"t":{"516":{"position":[[124275,32]]}}}],["roleref",{"_index":5145,"t":{"516":{"position":[[123840,8],[124180,8],[124757,8],[126659,8]]}}}],["role、clusterrol",{"_index":5126,"t":{"516":{"position":[[122439,28],[122519,16]]}}}],["role只能对命名空间内的资源进行授权，需要指定nameapc",{"_index":5128,"t":{"516":{"position":[[122571,32]]}}}],["role和rolebinding，为devman",{"_index":5184,"t":{"516":{"position":[[126264,30]]}}}],["roll",{"_index":4512,"t":{"516":{"position":[[75862,6],[76404,6]]}}}],["rollingupd",{"_index":3919,"t":{"516":{"position":[[24368,13],[69839,13],[69862,14],[73851,13],[73874,14],[80885,13],[85157,13],[85180,14]]},"579":{"position":[[159,13]]}}}],["rollingupdatestrategi",{"_index":3921,"t":{"516":{"position":[[24401,22]]}}}],["rollingupdate：当type为rollingupdate时生效，用于为rollingupd",{"_index":4473,"t":{"516":{"position":[[72530,65]]}}}],["rollingupdate：滚动更新，就是杀死一部分，就启动一部分，在更新过程中，存在两个版本pod",{"_index":4472,"t":{"516":{"position":[[72479,50]]}}}],["rollout",{"_index":3721,"t":{"516":{"position":[[12511,7],[75580,8],[75779,7],[75915,7],[76313,7],[77267,7],[77433,7],[77515,7],[78291,7]]}}}],["root",{"_index":249,"t":{"34":{"position":[[4630,4]]},"101":{"position":[[42,5]]},"449":{"position":[[1009,4]]},"457":{"position":[[752,4],[900,4],[1041,4],[1187,4],[1506,5],[1560,4],[1592,4],[1698,4],[2260,4],[2416,4],[2541,4],[3580,4],[4417,4],[4697,4],[5865,4]]},"487":{"position":[[89,4],[179,4]]},"493":{"position":[[403,4]]},"516":{"position":[[115946,6],[116268,6]]}}}],["root/alia",{"_index":3165,"t":{"459":{"position":[[775,10]]}}}],["root/data",{"_index":4988,"t":{"516":{"position":[[111268,11]]}}}],["root/data/nf",{"_index":4977,"t":{"516":{"position":[[110169,14],[110289,14],[110961,14]]}}}],["root/data/pv1",{"_index":5020,"t":{"516":{"position":[[112919,14],[113282,14]]}}}],["root/data/pv1/out.txt",{"_index":5063,"t":{"516":{"position":[[117169,22]]},"636":{"position":[[19,22]]}}}],["root/data/pv2",{"_index":5021,"t":{"516":{"position":[[112968,14],[113480,14]]}}}],["root/data/pv2/out.txt",{"_index":5064,"t":{"516":{"position":[[117223,22]]},"636":{"position":[[73,22]]}}}],["root/data/pv3",{"_index":5022,"t":{"516":{"position":[[113017,14],[113678,14]]}}}],["root/data/{pv1,pv2,pv3",{"_index":5019,"t":{"516":{"position":[[112851,24]]}}}],["root/log",{"_index":4960,"t":{"516":{"position":[[109052,10],[109779,11]]}}}],["root/metr",{"_index":4565,"t":{"516":{"position":[[79740,13]]}}}],["root/out.txt",{"_index":5055,"t":{"516":{"position":[[115873,14],[116195,14]]}}}],["root@cento",{"_index":2892,"t":{"432":{"position":[[2465,12],[2499,12],[2539,12],[2578,12],[2618,12],[2659,12],[2697,12],[2743,12]]}}}],["root@k8",{"_index":4028,"t":{"516":{"position":[[30206,9],[30356,9],[31483,9],[32209,9],[32382,9],[32539,9],[33104,9],[33266,9],[34680,9],[34792,9],[35054,9],[35903,9],[35991,9],[36222,9],[36805,9],[36907,9],[37813,9],[37913,9],[38048,9],[38179,9],[38235,9],[38341,9],[38490,9],[40817,9],[40954,8],[41417,9],[41744,9],[41823,9],[42858,9],[42952,9],[43118,9],[44180,9],[44284,9],[44850,9],[45335,9],[45449,9],[46061,9],[46614,9],[46724,9],[47339,9],[47609,9],[47998,9],[48957,9],[49073,9],[49366,9],[50231,9],[50347,9],[50560,9],[50646,9],[50691,9],[50823,9],[51192,9],[51272,9],[51579,9],[51703,9],[51937,9],[52031,9],[52080,9],[52202,9],[52375,9],[54475,9],[54600,9],[54817,9],[55142,9],[55302,9],[55365,9],[55504,9],[56157,9],[56284,9],[57683,9],[57795,9],[58439,9],[58561,9],[58713,9],[59111,9],[59183,9],[59294,9],[59414,9],[59786,9],[60520,9],[60655,9],[61732,9],[61817,9],[61887,9],[62089,9],[62160,9],[62239,9],[62309,9],[62564,9],[62629,9],[62707,9],[62777,9],[63655,9],[63820,9],[63994,9],[66075,9],[66237,9],[66479,9],[66707,9],[66812,9],[67180,9],[67320,9],[67665,9],[67860,9],[67976,9],[68201,9],[68348,9],[68617,9],[68719,9],[68879,9],[68997,9],[69171,9],[70586,9],[70762,9],[70936,9],[71055,9],[71306,9],[71436,9],[71568,9],[71938,9],[72047,9],[72789,9],[72934,9],[73943,9],[74088,9],[75328,9],[75748,9],[75884,9],[76282,9],[76444,9],[76738,9],[77168,9],[77402,9],[77641,9],[77907,9],[78260,9],[78384,9],[78650,9],[78971,9],[79515,9],[79585,9],[79714,9],[79774,9],[80159,9],[80215,9],[80350,9],[80527,9],[81179,9],[81281,9],[81375,9],[82007,9],[82120,9],[82343,9],[82841,9],[83281,9],[85823,9],[85932,9],[86128,9],[86346,9],[87934,9],[88020,9],[88290,9],[88602,9],[89369,9],[91174,9],[91276,9],[91422,9],[91613,9],[91816,9],[93370,9],[93452,9],[94766,9],[94871,9],[95380,9],[95432,9],[95484,9],[95831,9],[95941,9],[96181,9],[96524,9],[96688,9],[97150,9],[97300,9],[97510,9],[97677,9],[97795,9],[98325,9],[98454,9],[98660,9],[98996,9],[99190,9],[99921,9],[100029,9],[100701,9],[100812,9],[101934,9],[101982,9],[102061,9],[102207,9],[102583,9],[102661,9],[102840,9],[103989,9],[104051,9],[104581,9],[104683,9],[104833,9],[105881,9],[105985,9],[106158,9],[107942,9],[108040,9],[108231,9],[108306,9],[109288,9],[109386,9],[109574,9],[109613,9],[110458,9],[111009,9],[111097,9],[111242,9],[113719,9],[113860,9],[115020,9],[115181,9],[115423,9],[116360,9],[116451,9],[116633,9],[116862,9],[118086,9],[118186,9],[118693,9],[118787,9],[118915,9],[119261,9],[119330,9],[119561,9],[119649,9],[120106,9],[120192,9],[120337,9],[124898,9],[124947,9],[125078,9],[125194,9],[125339,9],[125510,9],[125688,9],[125807,9],[125937,9],[126130,9],[126730,9],[126932,9],[127050,9],[127312,9],[128872,9],[129289,9],[129387,9],[129834,9],[129934,9],[130106,9],[130268,9]]},"530":{"position":[[0,9]]},"532":{"position":[[0,9]]},"535":{"position":[[0,9],[325,9]]},"537":{"position":[[0,9]]},"539":{"position":[[0,9]]},"541":{"position":[[0,9]]},"543":{"position":[[0,9]]},"545":{"position":[[0,9]]},"547":{"position":[[0,9]]},"549":{"position":[[0,9]]},"551":{"position":[[0,9]]},"553":{"position":[[0,9]]},"555":{"position":[[0,9]]},"558":{"position":[[0,9]]},"560":{"position":[[0,9],[111,9]]},"562":{"position":[[0,9],[372,9]]},"564":{"position":[[0,9]]},"567":{"position":[[0,9]]},"569":{"position":[[0,9]]},"571":{"position":[[0,9],[174,9]]},"573":{"position":[[0,9]]},"575":{"position":[[0,9]]},"577":{"position":[[0,9],[177,9]]},"581":{"position":[[0,9]]},"583":{"position":[[0,9]]},"585":{"position":[[0,9]]},"587":{"position":[[0,9]]},"589":{"position":[[0,9],[223,9],[721,9],[1161,9]]},"591":{"position":[[1448,9],[1530,9]]},"593":{"position":[[0,9]]},"595":{"position":[[0,9]]},"597":{"position":[[0,9]]},"599":{"position":[[0,9]]},"601":{"position":[[0,9]]},"610":{"position":[[0,9]]},"612":{"position":[[0,9]]},"614":{"position":[[0,9]]},"618":{"position":[[0,9]]},"620":{"position":[[0,9]]},"622":{"position":[[0,9]]},"624":{"position":[[0,9]]},"626":{"position":[[0,9]]},"628":{"position":[[0,9]]},"630":{"position":[[0,9]]},"632":{"position":[[0,9]]},"634":{"position":[[0,9]]},"638":{"position":[[0,9]]},"640":{"position":[[0,9]]},"642":{"position":[[0,9]]}}}],["root@localhost",{"_index":3278,"t":{"504":{"position":[[37,17],[101,17],[184,17],[272,17],[310,17],[367,17],[455,17],[509,17],[654,14],[695,14],[1703,14],[1744,14],[2683,17],[2746,17],[2822,17],[3354,17],[3488,17],[3612,17],[3653,17],[3739,17],[3840,17],[3958,17],[4000,17],[4042,17],[4096,17],[4383,17]]}}}],["root@mast",{"_index":3479,"t":{"516":{"position":[[3202,12],[3522,12],[3563,12],[3605,12],[3738,12],[3780,12],[3842,12],[3883,12],[4584,12],[4622,12],[4678,12],[4852,12],[4920,12],[5125,12],[5198,12],[5280,12],[5367,12],[5513,12],[5629,12],[5795,12],[5830,12],[6009,12],[6051,12],[6504,12],[6751,12],[6859,12],[7426,12],[7659,12],[7697,12],[7771,12],[8041,12],[9118,12],[12739,12],[12821,12],[13007,12],[13272,12],[13376,12],[13468,12],[13813,12],[13952,12],[14136,12],[14392,12],[14525,12],[15505,12],[15836,12],[16011,12],[16170,12],[16509,12],[16793,12],[16878,12],[17263,12],[18037,12],[18176,12],[18285,12],[19868,12],[20014,12],[20207,12],[20307,12],[20505,12],[20622,12],[20730,12],[22116,12],[22215,12],[22320,12],[22469,12],[22616,12],[22729,12],[23397,12],[23524,12],[23737,12],[23879,12],[24062,12],[24983,12],[25749,12],[25902,12],[26168,12],[26442,12],[26637,12],[26919,12]]},"522":{"position":[[267,12],[406,12],[590,12]]},"524":{"position":[[75,12],[208,12]]},"526":{"position":[[450,12],[781,12],[956,12],[1115,12],[1454,12],[1738,12],[1823,12],[2208,12],[2982,12],[3121,12],[3230,12],[4813,12],[4959,12],[5152,12],[5252,12],[5450,12],[5567,12],[5675,12]]}}}],["root@nf",{"_index":4975,"t":{"516":{"position":[[110099,9],[110149,9],[110226,9],[110257,9],[110348,9],[112831,9],[112887,9],[113073,9],[117150,9],[117204,9]]},"636":{"position":[[0,9],[54,9]]}}}],["root@node1",{"_index":4740,"t":{"516":{"position":[[92463,11],[93531,11],[109760,11]]},"591":{"position":[[541,11],[1609,11]]}}}],["root@server1",{"_index":214,"t":{"34":{"position":[[2461,13]]}}}],["router_id",{"_index":3295,"t":{"504":{"position":[[797,9],[1846,9]]}}}],["rpm",{"_index":2913,"t":{"442":{"position":[[125,3]]}}}],["rr",{"_index":4750,"t":{"516":{"position":[[92650,2],[93718,2],[96578,2],[97204,2],[97564,2]]},"591":{"position":[[728,2],[1796,2]]}}}],["rr9bn",{"_index":4641,"t":{"516":{"position":[[83500,5],[83640,5],[84091,5],[84523,5]]},"589":{"position":[[1380,5],[1520,5],[1971,5],[2403,5]]}}}],["rrewrit",{"_index":3398,"t":{"510":{"position":[[606,29]]}}}],["rrqcn",{"_index":4494,"t":{"516":{"position":[[74333,5],[75137,5]]}}}],["rs",{"_index":3699,"t":{"516":{"position":[[11820,2],[65175,4],[65224,2],[66070,4],[66175,4],[66272,2],[66743,2],[67217,2],[67828,9],[67896,2],[68011,2],[68172,2],[68175,4],[68242,2],[68383,2],[68655,2],[68917,2],[69619,4],[70889,4],[70971,2],[75226,10],[75363,2],[76773,2],[77676,2],[78419,2],[85023,4],[86651,4],[89718,4]]}}}],["rs,发现原来的rs的依旧存在，只是pod数量变为了0，而后又新产生了一个rs，pod数量为4",{"_index":4502,"t":{"516":{"position":[[75239,49]]}}}],["rsa:2048",{"_index":4917,"t":{"516":{"position":[[105312,8]]},"606":{"position":[[51,8]]}}}],["rsp",{"_index":473,"t":{"83":{"position":[[254,4],[431,4],[484,5]]}}}],["rsp.getwriter().println(\"hello",{"_index":477,"t":{"83":{"position":[[324,31]]}}}],["rsp.setcontenttype(\"text/plain",{"_index":476,"t":{"83":{"position":[[290,33]]}}}],["rs对象（保留pod），可以使用kubectl",{"_index":4433,"t":{"516":{"position":[[68812,31]]}}}],["rs的副本数量，修改spec:replica",{"_index":4416,"t":{"516":{"position":[[66676,26]]}}}],["rs的名称是在原来deployment的名字后面添加了一个10",{"_index":4451,"t":{"516":{"position":[[70896,39]]}}}],["rs，发现第一个rs中有4个pod运行，后面两个版本的rs中pod",{"_index":4520,"t":{"516":{"position":[[76602,38]]}}}],["rule",{"_index":4317,"t":{"516":{"position":[[58947,6],[104371,6],[104901,6],[105671,6],[106291,6],[122711,6],[123000,6],[123075,19],[126392,6]]},"555":{"position":[[234,6]]},"595":{"position":[[320,6]]},"601":{"position":[[68,6]]},"608":{"position":[[268,6]]},"614":{"position":[[133,6]]},"644":{"position":[[106,6]]}}}],["run",{"_index":52,"t":{"21":{"position":[[564,3],[659,3]]},"23":{"position":[[35,3]]},"25":{"position":[[137,3]]},"27":{"position":[[51,3],[665,3],[688,3],[825,3],[1135,3]]},"32":{"position":[[304,3]]},"34":{"position":[[809,3],[819,3],[823,28],[884,6],[932,3],[951,6],[1094,3],[1593,3],[2107,3],[2225,3],[2451,9],[2696,30],[3251,3],[3639,3],[3937,3],[4323,3],[4331,3],[4464,4],[4541,3],[4603,3],[4771,3],[4832,3],[5128,4]]},"42":{"position":[[470,3],[1111,3]]},"46":{"position":[[360,3],[390,3],[415,3],[918,3],[935,3],[975,3],[1184,3],[1282,3]]},"110":{"position":[[1646,4]]},"112":{"position":[[894,8],[1631,7]]},"444":{"position":[[7,3]]},"516":{"position":[[10923,3],[12338,3],[13032,3],[13076,3],[13178,3],[13351,7],[14087,7],[17393,7],[17449,7],[17492,7],[17545,7],[17607,7],[17666,7],[17725,7],[17773,7],[17821,7],[17874,7],[17958,3],[18062,3],[18258,7],[18517,7],[18864,7],[19970,7],[20389,7],[22436,7],[22590,7],[23422,3],[23623,7],[23664,7],[23705,7],[25222,4],[25261,4],[27212,4],[28609,3],[28672,3],[32474,7],[38022,7],[41693,7],[43078,7],[47462,7],[49484,7],[50478,7],[51842,7],[55661,7],[56419,7],[57923,7],[59553,7],[59930,7],[59997,7],[60814,7],[61848,3],[62009,7],[62270,3],[62438,7],[62738,3],[63943,7],[66580,7],[66618,7],[66656,7],[66914,7],[66953,7],[66991,7],[67029,7],[67068,7],[67106,7],[67553,7],[67636,7],[67767,7],[67806,7],[69099,7],[69137,7],[71168,7],[71218,7],[71268,7],[71681,7],[71732,7],[71781,7],[71830,7],[71881,7],[72160,7],[72211,7],[72262,7],[72313,7],[73050,7],[73099,7],[73148,7],[73674,7],[73722,7],[73770,7],[74202,7],[74249,7],[74296,7],[74343,7],[74495,7],[74697,7],[74899,7],[75101,7],[78020,7],[78071,7],[78122,7],[78173,7],[78224,7],[78763,7],[78812,7],[78863,7],[78914,7],[80308,7],[81213,3],[81571,7],[83389,7],[84060,7],[84101,7],[84142,7],[84183,7],[84224,7],[84265,7],[84306,7],[86245,7],[86300,7],[88388,7],[88700,7],[88730,7],[88760,7],[89189,7],[89219,7],[89249,7],[91790,7],[95008,7],[95083,7],[95158,7],[102814,7],[108177,7],[109527,7],[111201,7],[116554,7],[116595,7],[118896,7],[120295,7],[127168,7],[127221,7],[127274,7],[129535,7],[129595,7]]},"522":{"position":[[541,7]]},"526":{"position":[[2338,7],[2394,7],[2437,7],[2490,7],[2552,7],[2611,7],[2670,7],[2718,7],[2766,7],[2819,7],[2903,3],[3007,3],[3203,7],[3462,7],[3809,7],[4915,7],[5334,7]]},"541":{"position":[[157,7]]},"545":{"position":[[135,7]]},"549":{"position":[[128,7]]},"562":{"position":[[139,7],[516,7],[583,7]]},"567":{"position":[[159,7]]},"571":{"position":[[123,7]]},"575":{"position":[[93,7]]},"581":{"position":[[34,3]]},"585":{"position":[[196,7]]},"589":{"position":[[1269,7],[1940,7],[1981,7],[2022,7],[2063,7],[2104,7],[2145,7],[2186,7]]},"630":{"position":[[103,7],[144,7]]},"640":{"position":[[103,7]]}}}],["run=nginx",{"_index":3823,"t":{"516":{"position":[[18480,9],[24032,9],[24202,9],[24272,9],[24481,9],[26070,9],[26804,9]]},"526":{"position":[[3425,9]]}}}],["rune",{"_index":4078,"t":{"516":{"position":[[34900,6]]}}}],["runningpipelin",{"_index":738,"t":{"112":{"position":[[959,15],[1333,15]]}}}],["runningpipeline.add(job.getfullnam",{"_index":749,"t":{"112":{"position":[[1283,38]]}}}],["running）：pod已经被调度至某节点，并且所有容器都已经被kubelet",{"_index":4136,"t":{"516":{"position":[[39044,47]]}}}],["runserv",{"_index":1931,"t":{"230":{"position":[[288,9]]}}}],["run镜像的时候追回了命令,cmd会用追回的覆盖掉旧的,entrypoint",{"_index":110,"t":{"27":{"position":[[459,50]]}}}],["run：jenkin",{"_index":554,"t":{"90":{"position":[[1361,11]]}}}],["rwx",{"_index":2783,"t":{"402":{"position":[[68,3]]},"516":{"position":[[113978,3],[114022,3],[114066,3],[115323,3],[115361,3],[115399,3],[115547,3],[115598,3],[115649,3],[116762,3],[116800,3],[116838,3],[116993,3],[117044,3],[117095,3]]},"620":{"position":[[118,3],[162,3],[206,3]]},"624":{"position":[[142,3],[180,3],[218,3]]},"626":{"position":[[124,3],[175,3],[226,3]]},"632":{"position":[[129,3],[167,3],[205,3]]},"634":{"position":[[131,3],[182,3],[233,3]]}}}],["rxg96",{"_index":4690,"t":{"516":{"position":[[88378,5],[88409,5]]}}}],["s",{"_index":37,"t":{"21":{"position":[[139,1]]},"27":{"position":[[865,3]]},"188":{"position":[[2600,1]]},"227":{"position":[[874,3]]},"277":{"position":[[629,1]]},"311":{"position":[[134,1]]},"325":{"position":[[37,2],[65,2]]},"328":{"position":[[443,2]]},"402":{"position":[[769,1],[811,1],[897,2]]},"446":{"position":[[417,1],[457,1],[484,1],[505,1]]}}}],["s\",\"quit",{"_index":4187,"t":{"516":{"position":[[42839,10]]}}}],["s.error",{"_index":1450,"t":{"188":{"position":[[2655,8]]}}}],["s.is_valid",{"_index":1449,"t":{"188":{"position":[[2634,12]]}}}],["s2whj",{"_index":4420,"t":{"516":{"position":[[67058,5],[67582,5]]}}}],["s3",{"_index":286,"t":{"42":{"position":[[665,3]]}}}],["same",{"_index":361,"t":{"62":{"position":[[410,4],[466,4]]}}}],["satrtup",{"_index":413,"t":{"73":{"position":[[1185,7]]}}}],["save",{"_index":1470,"t":{"188":{"position":[[4744,46]]}}}],["save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data",{"_index":1478,"t":{"188":{"position":[[5385,72]]}}}],["save=tru",{"_index":2135,"t":{"252":{"position":[[4158,11]]}}}],["save_model(self",{"_index":1204,"t":{"177":{"position":[[1298,16]]}}}],["sayhi",{"_index":639,"t":{"107":{"position":[[456,5]]}}}],["sbin",{"_index":2717,"t":{"347":{"position":[[155,6]]}}}],["scale",{"_index":3722,"t":{"516":{"position":[[12532,5],[24935,6],[67139,15],[67211,5],[67284,6],[71337,5],[71414,6]]}}}],["scaletargetref",{"_index":4607,"t":{"516":{"position":[[81924,15]]},"585":{"position":[[549,15]]}}}],["scale命令实现pod扩容或缩容，但是这显然不符合kubernet",{"_index":4556,"t":{"516":{"position":[[79137,41]]}}}],["scalingreplicaset",{"_index":3930,"t":{"516":{"position":[[24889,17]]}}}],["schedul",{"_index":3424,"t":{"516":{"position":[[1106,9],[17853,9],[19489,9],[19516,9],[33420,9],[33447,9],[38599,9],[41105,9],[41127,9],[45538,9],[45560,9],[49678,37],[52561,9],[54943,9],[55058,9],[58876,9],[89788,9],[90518,9],[90945,9],[91332,8],[91361,8],[92558,9],[93626,9]]},"526":{"position":[[2798,9],[4434,9],[4461,9]]},"535":{"position":[[126,9],[241,9]]},"555":{"position":[[163,9]]},"591":{"position":[[636,9],[1704,9]]}}}],["schedulebuildaction、causeact",{"_index":529,"t":{"88":{"position":[[1046,31]]}}}],["scheduler:v1.17.4",{"_index":3577,"t":{"516":{"position":[[7023,17]]}}}],["scheduler发现有新的pod对象要创建，开始为pod分配主机并将结果信息更新至apiserv",{"_index":4144,"t":{"516":{"position":[[39402,51]]}}}],["scheme",{"_index":1097,"t":{"170":{"position":[[785,8]]},"459":{"position":[[322,6]]},"516":{"position":[[29070,7],[42369,7],[43820,7],[46529,7],[48249,7],[48870,7]]}}}],["scheme$proxy_host$request_uri",{"_index":3205,"t":{"477":{"position":[[53,31]]}}}],["scm",{"_index":506,"t":{"88":{"position":[[40,34]]},"90":{"position":[[268,29],[1638,3]]}}}],["scm类是jenkins中用于管理源代码控制系统的抽象类，该类实现了describable接口，并且提供了一个descriptor",{"_index":571,"t":{"92":{"position":[[661,67]]}}}],["scm（sourc",{"_index":568,"t":{"92":{"position":[[629,10]]}}}],["scp",{"_index":3759,"t":{"516":{"position":[[14869,3]]},"524":{"position":[[552,3]]}}}],["scraper",{"_index":5220,"t":{"516":{"position":[[129507,7],[129681,7]]}}}],["scretnam",{"_index":4026,"t":{"516":{"position":[[29949,10]]}}}],["script",{"_index":638,"t":{"107":{"position":[[447,6]]},"116":{"position":[[71,7]]},"149":{"position":[[672,6]]},"504":{"position":[[898,6],[1947,6]]}}}],["scriptapprov",{"_index":818,"t":{"118":{"position":[[128,14],[143,14]]}}}],["scriptapproval.approvescript(hash",{"_index":823,"t":{"118":{"position":[[306,35]]}}}],["scriptapproval.get",{"_index":819,"t":{"118":{"position":[[160,20]]}}}],["scriptapproval.pendingscript",{"_index":820,"t":{"118":{"position":[[212,30]]}}}],["scriptapproval.sav",{"_index":824,"t":{"118":{"position":[[342,21]]}}}],["scripts目录并编写nginx的重启脚本，check_nginx_pid_restart.sh",{"_index":3325,"t":{"504":{"position":[[2629,53]]}}}],["script：将要执行的shell脚本，通常在类unix",{"_index":1001,"t":{"153":{"position":[[106,39]]}}}],["search",{"_index":35,"t":{"21":{"position":[[92,6],[131,6]]},"457":{"position":[[3600,7]]},"516":{"position":[[99129,6]]}}}],["search(pattern",{"_index":2684,"t":{"330":{"position":[[30,15]]}}}],["search_amazon",{"_index":2365,"t":{"264":{"position":[[457,13],[1368,14],[1383,13],[1574,15],[1628,15],[1650,13]]}}}],["search_amazon.strip",{"_index":2383,"t":{"264":{"position":[[1399,21]]}}}],["search_field",{"_index":1119,"t":{"173":{"position":[[229,13]]},"175":{"position":[[1010,13]]},"177":{"position":[[1213,13]]}}}],["second",{"_index":1836,"t":{"215":{"position":[[309,7]]}}}],["seconds（秒）、minutes（分钟）为单位。当使用timeout选项时，options可以被放在stag",{"_index":880,"t":{"137":{"position":[[1018,60]]}}}],["secret",{"_index":3718,"t":{"516":{"position":[[12129,7],[19172,6],[19204,7],[29904,7],[105418,6],[105433,6],[105657,6],[106236,6],[119162,7],[119448,6],[119471,6],[119552,8],[119638,10],[119689,6],[119696,6],[119716,6],[119911,6],[119999,12],[120073,7],[120093,6],[120171,6],[120235,6],[120284,6],[120311,25],[120381,6],[120523,25],[130141,7],[130308,7]]},"526":{"position":[[4117,6],[4149,7]]},"608":{"position":[[15,6],[30,6],[254,6]]},"614":{"position":[[78,6]]},"638":{"position":[[65,6]]},"640":{"position":[[43,6],[92,6]]},"642":{"position":[[44,6],[186,25]]}}}],["secret.yaml",{"_index":5092,"t":{"516":{"position":[[119602,11],[120151,11]]},"638":{"position":[[45,11]]}}}],["secret.yaml，将上面创建的secret",{"_index":5095,"t":{"516":{"position":[[119836,29]]}}}],["secret.yaml，并创建secret",{"_index":5090,"t":{"516":{"position":[[119400,26]]}}}],["secret/config",{"_index":5096,"t":{"516":{"position":[[120036,14],[120410,15]]},"642":{"position":[[73,15]]}}}],["secret/config/password",{"_index":5099,"t":{"516":{"position":[[120492,23]]},"642":{"position":[[155,23]]}}}],["secret/config/usernam",{"_index":5098,"t":{"516":{"position":[[120453,23]]},"642":{"position":[[116,23]]}}}],["secret/secret",{"_index":5093,"t":{"516":{"position":[[119614,13]]}}}],["secretnam",{"_index":3836,"t":{"516":{"position":[[19212,11],[105641,11],[120081,11]]},"526":{"position":[[4157,11]]},"608":{"position":[[238,11]]}}}],["secret的存储卷，挂载集群与定义的secret",{"_index":4025,"t":{"516":{"position":[[29912,36]]}}}],["section）都是必需的，少一个，jenkin",{"_index":837,"t":{"128":{"position":[[495,38]]}}}],["secur",{"_index":316,"t":{"52":{"position":[[150,22]]}}}],["securitycontext",{"_index":4007,"t":{"516":{"position":[[29359,16]]}}}],["securitycontextdeny：这个插件将使用securitycontext的pod",{"_index":5200,"t":{"516":{"position":[[128017,54]]}}}],["select_on_sav",{"_index":2326,"t":{"258":{"position":[[3580,14]]}}}],["selector",{"_index":3839,"t":{"516":{"position":[[19287,10],[21580,11],[21617,26],[21655,9],[21676,8],[21816,8],[21995,30],[23984,8],[24262,9],[25199,9],[26006,8],[26741,8],[27202,9],[52359,15],[52624,9],[55006,9],[55121,9],[65259,9],[65685,10],[65935,9],[66353,8],[69981,9],[70438,9],[80920,9],[85254,9],[85676,9],[86965,9],[87687,9],[88125,8],[90194,9],[93949,9],[94606,9],[95674,9],[96040,8],[96322,9],[98180,9],[98572,8],[98803,9],[99758,9],[100124,8],[103198,9],[103466,9],[103724,9],[103893,9],[114266,9],[114406,14],[129244,9]]},"526":{"position":[[4232,10]]},"535":{"position":[[189,9],[304,9]]},"579":{"position":[[194,9]]},"591":{"position":[[2027,9]]},"620":{"position":[[406,9]]}}}],["selector机制实现的，也就是说，在pod创建之前，会由scheduler使用matchnodeselector调度策略进行label匹配，找出目标node，然后将pod",{"_index":4251,"t":{"516":{"position":[[51057,106]]}}}],["selector的设置，可使pvc对于系统中己存在的pv",{"_index":5038,"t":{"516":{"position":[[114429,32]]}}}],["selector选择器选择pod，默认是fals",{"_index":4675,"t":{"516":{"position":[[86933,31]]}}}],["selector：选择器，它的作用是建立pod控制器和pod之间的关联关系，采用的label",{"_index":4404,"t":{"516":{"position":[[65638,46]]}}}],["select、poll、kqueue、epoll、/dev/poll、eventport",{"_index":3019,"t":{"453":{"position":[[62,49]]}}}],["self",{"_index":2228,"t":{"256":{"position":[[951,32]]}}}],["self.act",{"_index":1793,"t":{"199":{"position":[[3157,11]]}}}],["self.filter_queryset(self.get_queryset",{"_index":1663,"t":{"197":{"position":[[2570,41]]}}}],["self.get_object",{"_index":1650,"t":{"197":{"position":[[1989,17],[4064,17],[4691,17],[5527,17]]},"199":{"position":[[2582,17]]}}}],["self.get_paginated_response(serializer.data",{"_index":1667,"t":{"197":{"position":[[2735,44]]}}}],["self.get_serializer(book",{"_index":1652,"t":{"197":{"position":[[2059,25]]},"199":{"position":[[2468,25],[2664,25]]}}}],["self.get_serializer(data=request.data",{"_index":1678,"t":{"197":{"position":[[3352,38]]}}}],["self.get_serializer(inst",{"_index":1694,"t":{"197":{"position":[[4101,29],[4722,29]]}}}],["self.get_serializer(pag",{"_index":1666,"t":{"197":{"position":[[2691,25]]}}}],["self.get_serializer(queryset",{"_index":1668,"t":{"197":{"position":[[2799,29]]}}}],["self.get_success_headers(serializer.data",{"_index":1680,"t":{"197":{"position":[[3485,41]]}}}],["self.initial[\"author",{"_index":1184,"t":{"177":{"position":[[627,23]]}}}],["self.instance.pk",{"_index":1179,"t":{"177":{"position":[[457,17]]}}}],["self.list(request",{"_index":1673,"t":{"197":{"position":[[3081,18]]}}}],["self.paginate_queryset(queryset",{"_index":1665,"t":{"197":{"position":[[2624,32]]}}}],["self.perform_create(seri",{"_index":1679,"t":{"197":{"position":[[3443,31]]}}}],["self.perform_destroy(inst",{"_index":1726,"t":{"197":{"position":[[5545,30]]}}}],["self.perform_update(seri",{"_index":1706,"t":{"197":{"position":[[4830,31]]}}}],["self.request.us",{"_index":1641,"t":{"197":{"position":[[1570,17]]}}}],["self.request.user.is_staff",{"_index":1632,"t":{"197":{"position":[[1080,27]]}}}],["self.retrieve(request",{"_index":1696,"t":{"197":{"position":[[4333,22]]}}}],["self.update(request",{"_index":1719,"t":{"197":{"position":[[5257,20]]}}}],["self.valu",{"_index":1196,"t":{"177":{"position":[[915,13]]}}}],["selflink",{"_index":3778,"t":{"516":{"position":[[16338,9],[30797,8]]},"526":{"position":[[1283,9]]}}}],["selinux",{"_index":3497,"t":{"516":{"position":[[3933,10]]}}}],["selinux=dis",{"_index":3501,"t":{"516":{"position":[[4064,16]]}}}],["selinux是linux",{"_index":3498,"t":{"516":{"position":[[3944,49]]}}}],["selinux的值为dis",{"_index":3500,"t":{"516":{"position":[[4019,22]]}}}],["seller_volume_from",{"_index":2353,"t":{"264":{"position":[[87,18]]}}}],["seller_volume_to",{"_index":2355,"t":{"264":{"position":[[146,16]]}}}],["sendfil",{"_index":2965,"t":{"449":{"position":[[632,8]]}}}],["seq",{"_index":2831,"t":{"427":{"position":[[664,3]]},"429":{"position":[[1057,5],[1093,4]]}}}],["sequenc",{"_index":3660,"t":{"516":{"position":[[10159,28]]}}}],["serial",{"_index":1335,"t":{"184":{"position":[[3151,15],[3203,17],[3389,10]]},"186":{"position":[[212,10],[482,10],[2053,10],[3453,10]]},"188":{"position":[[880,10],[1264,10],[2014,10],[3435,10],[5016,10],[5242,10],[5579,10],[5701,10]]},"190":{"position":[[473,10],[511,10]]},"197":{"position":[[704,10],[2046,10],[2678,10],[2786,10],[3339,10],[3634,12],[4088,10],[4709,10],[5142,12]]},"199":{"position":[[320,10],[562,10],[2455,10],[2651,10]]},"277":{"position":[[337,11]]}}}],["serializer(instance=non",{"_index":1337,"t":{"184":{"position":[[3221,25]]}}}],["serializer.data",{"_index":1351,"t":{"186":{"position":[[280,15],[534,15],[2091,15],[3491,15]]}}}],["serializer.error",{"_index":1414,"t":{"188":{"position":[[955,17],[1336,17],[2087,17],[3508,17]]}}}],["serializer.is_valid",{"_index":1413,"t":{"188":{"position":[[923,21],[1307,21],[2057,21],[3478,21],[5059,21],[5291,21]]}}}],["serializer.is_valid(raise_exception=tru",{"_index":1435,"t":{"188":{"position":[[1607,41]]},"197":{"position":[[3396,41],[4788,41]]}}}],["serializer.sav",{"_index":1471,"t":{"188":{"position":[[4798,17],[5088,17],[5320,17]]},"197":{"position":[[3647,17],[5155,17]]}}}],["serializer.save(owner=request.us",{"_index":1479,"t":{"188":{"position":[[5458,35]]}}}],["serializer.validated_data",{"_index":1426,"t":{"188":{"position":[[1179,25],[1359,25]]}}}],["serializer_class",{"_index":1630,"t":{"197":{"position":[[947,16],[1007,37],[1916,16],[3012,16],[4260,16]]},"199":{"position":[[1605,16],[2335,16]]},"209":{"position":[[244,16]]},"211":{"position":[[425,16]]},"219":{"position":[[299,16]]},"221":{"position":[[348,16]]},"223":{"position":[[344,16]]},"225":{"position":[[433,16],[1038,16],[1547,16]]}}}],["serializers.charfield(label",{"_index":1239,"t":{"184":{"position":[[617,33]]},"186":{"position":[[1366,33],[1512,35],[2944,33]]},"188":{"position":[[464,33],[3026,33]]}}}],["serializers.choicefield(choices=gender_choic",{"_index":1384,"t":{"186":{"position":[[1425,47]]}}}],["serializers.datefield(label",{"_index":1241,"t":{"184":{"position":[[678,35]]},"186":{"position":[[3005,35]]},"188":{"position":[[525,35],[3114,35]]}}}],["serializers.imagefield(label",{"_index":1244,"t":{"184":{"position":[[864,34]]},"186":{"position":[[3191,34]]},"188":{"position":[[711,34],[3300,34]]}}}],["serializers.integerfield(label",{"_index":1243,"t":{"184":{"position":[[737,37],[802,37]]},"186":{"position":[[3064,37],[3129,37]]},"188":{"position":[[584,37],[649,37],[3173,37],[3238,37]]}}}],["serializers.integerfield(label='id",{"_index":1237,"t":{"184":{"position":[[555,36]]},"186":{"position":[[1305,36],[2882,36]]},"188":{"position":[[402,36],[2964,36]]}}}],["serializers.primarykeyrelatedfield(label",{"_index":1389,"t":{"186":{"position":[[1669,46],[1742,46]]}}}],["serializers.primarykeyrelatedfield(read_only=tru",{"_index":1405,"t":{"186":{"position":[[3257,50]]}}}],["serializers.stringrelatedfield(label",{"_index":1400,"t":{"186":{"position":[[2246,42]]}}}],["serializers.validationerror",{"_index":1448,"t":{"188":{"position":[[2403,39]]}}}],["serializers.validationerror(\"图书不是关于django",{"_index":1441,"t":{"188":{"position":[[1873,44],[2849,44]]}}}],["serializer不是只能为数据库模型类定义，也可以为非数据库模型类的数据定义。seri",{"_index":1245,"t":{"184":{"position":[[915,67]]}}}],["serializer类后，就可以创建seri",{"_index":1336,"t":{"184":{"position":[[3167,35]]}}}],["server",{"_index":248,"t":{"34":{"position":[[4616,7],[5044,7]]},"73":{"position":[[1175,6]]},"143":{"position":[[256,7]]},"170":{"position":[[337,6],[407,6],[967,6]]},"449":{"position":[[907,11],[919,6],[1338,6],[1373,6]]},"455":{"position":[[96,6],[145,6],[398,7],[417,9],[983,6],[1290,6],[1316,6],[1342,6],[1370,6],[1667,6],[1693,6],[1719,6],[1747,6],[2032,6],[2058,6],[2084,6],[2112,6]]},"457":{"position":[[702,6],[845,6],[991,6],[1135,6],[1536,6],[2096,6],[3405,6],[3517,7],[4372,6],[4624,6]]},"463":{"position":[[29,80]]},"487":{"position":[[67,6],[157,6],[455,6],[481,6],[509,6],[934,6]]},"493":{"position":[[65,6],[500,6]]},"508":{"position":[[157,15]]},"516":{"position":[[79468,7],[79484,22],[79569,7],[79676,6],[79812,6],[79930,6],[80152,6],[80280,6],[80715,10],[92502,6],[93570,6],[110925,7],[113297,7],[113495,7],[113693,7],[122029,19],[125997,6],[127528,26]]},"575":{"position":[[65,6]]},"591":{"position":[[580,6],[1648,6]]}}}],["server,serv",{"_index":3392,"t":{"510":{"position":[[445,13]]}}}],["server/deploy/1.8",{"_index":4566,"t":{"516":{"position":[[79754,19]]}}}],["server=https://192.168.109.100:6443",{"_index":5173,"t":{"516":{"position":[[125474,35]]}}}],["server_addr",{"_index":3149,"t":{"459":{"position":[[127,11]]}}}],["server_nam",{"_index":937,"t":{"143":{"position":[[236,11],[308,15]]},"170":{"position":[[427,11],[989,11]]},"449":{"position":[[949,11]]},"455":{"position":[[1390,11],[1767,11],[2132,11]]},"457":{"position":[[0,11],[26,11],[62,11],[106,11],[140,11],[172,11],[204,11],[276,11],[722,11],[865,11],[1011,11],[1155,11],[2116,11],[3536,11],[4394,11],[4644,11]]},"459":{"position":[[547,11]]},"487":{"position":[[529,11],[954,11]]},"493":{"position":[[128,11],[555,11]]},"506":{"position":[[220,11]]}}}],["server_name配置的是当前机器的ip，所以需稍微更改一下nginx.conf",{"_index":3355,"t":{"506":{"position":[[120,62]]}}}],["server_port",{"_index":3150,"t":{"459":{"position":[[149,11]]}}}],["server_protocol",{"_index":3151,"t":{"459":{"position":[[167,15]]}}}],["server、loc",{"_index":3117,"t":{"457":{"position":[[4071,19]]}}}],["server、location、if",{"_index":3097,"t":{"457":{"position":[[3281,22]]}}}],["server向etcd写入创建的service的信息，而kub",{"_index":4736,"t":{"516":{"position":[[92224,32]]},"591":{"position":[[302,32]]}}}],["server和cli",{"_index":3726,"t":{"516":{"position":[[12664,20]]}}}],["server接到token后会跟服务器中保存的token",{"_index":5112,"t":{"516":{"position":[[121331,47]]}}}],["servic",{"_index":19,"t":{"19":{"position":[[16,7],[53,7],[89,7]]},"73":{"position":[[1214,9]]},"516":{"position":[[7591,7],[11982,8],[12369,12],[25467,8],[25718,18],[25739,9],[25892,9],[26332,19],[26908,10],[26974,7],[27062,7],[81271,9],[91911,10],[91926,10],[92331,15],[93809,10],[93820,15],[93842,7],[93901,7],[94148,9],[94395,10],[95563,9],[95611,7],[95635,7],[95786,9],[95821,9],[95872,7],[95931,9],[96049,7],[96122,14],[96225,7],[96256,7],[97785,9],[97836,7],[97859,7],[97867,8],[98069,9],[98116,7],[98140,7],[98256,7],[98315,9],[98366,7],[98427,10],[98493,7],[98581,7],[98648,11],[98704,7],[98736,7],[99229,7],[99270,7],[99332,7],[99394,7],[99651,9],[99696,7],[99720,7],[99800,9],[99911,9],[99962,7],[100019,9],[100133,7],[100553,7],[100577,7],[100640,9],[100691,9],[100742,7],[100851,7],[100894,7],[102830,9],[103665,7],[103695,7],[103833,7],[103864,7],[104148,7],[104195,7],[104451,7],[104552,7],[105751,7],[105852,7],[120746,7],[123170,11],[127978,7],[129031,7]]},"591":{"position":[[4,10],[409,15],[1887,10],[1898,15],[1920,7],[1979,7],[2226,9]]},"595":{"position":[[97,7],[144,7]]}}}],["service/dashboard",{"_index":5227,"t":{"516":{"position":[[129655,17]]}}}],["service/kubernet",{"_index":5230,"t":{"516":{"position":[[129732,18]]}}}],["service/nginx",{"_index":4598,"t":{"516":{"position":[[81630,13]]},"585":{"position":[[255,13]]}}}],["service/servic",{"_index":4803,"t":{"516":{"position":[[95895,15],[98390,15],[99984,15],[100768,15]]}}}],["service/svc",{"_index":3944,"t":{"516":{"position":[[25863,11],[26555,11]]}}}],["service:80",{"_index":4905,"t":{"516":{"position":[[104953,10],[106343,10]]},"601":{"position":[[120,10]]},"614":{"position":[[185,10]]}}}],["service:8080(10.244.1.94:8080,10.244.1.95:8080,10.244.2.111:8080",{"_index":4907,"t":{"516":{"position":[[105040,65]]},"601":{"position":[[207,65]]}}}],["service:8080(10.244.1.99:8080,10.244.2.117:8080,10.244.2.120:8080",{"_index":4926,"t":{"516":{"position":[[106430,66]]},"614":{"position":[[272,66]]}}}],["serviceaccount",{"_index":5234,"t":{"516":{"position":[[129874,14]]}}}],["serviceaccount=kubernet",{"_index":5237,"t":{"516":{"position":[[130042,25]]}}}],["servicenam",{"_index":4900,"t":{"516":{"position":[[104432,12],[104532,12],[105732,12],[105832,12]]}}}],["serviceport",{"_index":4901,"t":{"516":{"position":[[104459,12],[104560,12],[105759,12],[105860,12]]}}}],["service之前，首先利用deployment创建出3个pod，注意要为pod设置app=nginx",{"_index":4789,"t":{"516":{"position":[[94420,54]]}}}],["service代理哪些pod",{"_index":4776,"t":{"516":{"position":[[93961,26]]},"591":{"position":[[2039,26]]}}}],["service可以看作是一组同类pod对外的访问接口。借助servic",{"_index":3939,"t":{"516":{"position":[[25655,56]]}}}],["service和pod",{"_index":4891,"t":{"516":{"position":[[103037,14]]}}}],["service在很多情况下只是一个概念，真正起作用的其实是kub",{"_index":4733,"t":{"516":{"position":[[92130,33]]},"591":{"position":[[208,33]]}}}],["service地址`192.168.5.4:31830`进行压测，然后通过控制台查看hpa和pod",{"_index":4616,"t":{"516":{"position":[[82277,59]]},"589":{"position":[[157,59]]}}}],["service对集群之外暴露服务的主要方式有两种：noteport和loadbalanc",{"_index":4858,"t":{"516":{"position":[[101103,74]]}}}],["service提供的负载均衡功能，而希望自己来控制负载均衡策略，针对这种情况，kubernetes提供了headli",{"_index":4820,"t":{"516":{"position":[[97923,79]]}}}],["service由一组pod组成，这些pod通过endpoints暴露出来，endpoints是实现实际服务的端点集合。换句话说，service和pod之间的联系是通过endpoint",{"_index":4810,"t":{"516":{"position":[[96854,98]]}}}],["service的ip",{"_index":4802,"t":{"516":{"position":[[95724,25]]}}}],["service的ip地址只有集群内部才可以访问，如果希望将service暴露给集群外部使用，那么就要使用到另外一种类型的service，称为nodeport类型。nodeport的工作原理其实就是将service的端口映射到node的一个端口上，然后就可以通过nodeip:nodeport来访问servic",{"_index":4836,"t":{"516":{"position":[[99482,168]]}}}],["service的type类型为clusterip，这个ip",{"_index":3956,"t":{"516":{"position":[[26354,45]]}}}],["service的访问被分发到了后端的pod上去，目前kubernet",{"_index":4811,"t":{"516":{"position":[[96960,49]]}}}],["service类型，指定servic",{"_index":4777,"t":{"516":{"position":[[94007,24]]},"591":{"position":[[2085,24]]}}}],["service，这类service不会分配clust",{"_index":4821,"t":{"516":{"position":[[98003,28]]}}}],["service，需要修改type为nodeport",{"_index":3957,"t":{"516":{"position":[[26402,39]]}}}],["service：pod对外服务的统一入口，下面可以维护者同一类的多个pod",{"_index":3446,"t":{"516":{"position":[[2043,37]]}}}],["servlet规范，使用反射机制将http请求映射到java",{"_index":454,"t":{"81":{"position":[[112,52]]}}}],["session",{"_index":531,"t":{"88":{"position":[[1226,12],[1247,19]]},"201":{"position":[[192,9]]},"455":{"position":[[1620,7]]},"469":{"position":[[684,7]]},"516":{"position":[[96473,7],[98947,7]]}}}],["sessionaffin",{"_index":4778,"t":{"516":{"position":[[94055,16]]},"591":{"position":[[2133,16]]}}}],["sessionaffinity:clientip",{"_index":4814,"t":{"516":{"position":[[97457,24]]}}}],["sessionauthent",{"_index":1803,"t":{"201":{"position":[[290,22],[427,23]]},"209":{"position":[[42,21],[307,23]]},"219":{"position":[[42,21],[362,23]]}}}],["session亲和性，支持clientip、non",{"_index":4779,"t":{"516":{"position":[[94074,30]]},"591":{"position":[[2152,30]]}}}],["set",{"_index":182,"t":{"34":{"position":[[1098,3],[3255,3]]},"73":{"position":[[763,8],[776,3]]},"112":{"position":[[1592,4]]},"252":{"position":[[6052,8]]},"275":{"position":[[1369,32]]},"277":{"position":[[111,8]]},"309":{"position":[[66,4],[79,4],[124,4]]},"487":{"position":[[1062,3]]},"504":{"position":[[3427,4],[3467,4]]},"516":{"position":[[68162,3],[68232,3],[72820,3],[73974,3],[77199,3],[125379,3],[125550,3],[125728,3]]}}}],["set()：设置为一个传递给set",{"_index":2221,"t":{"256":{"position":[[624,40]]}}}],["set_by_lua",{"_index":3390,"t":{"510":{"position":[[410,10]]}}}],["set_by_lua_fil",{"_index":3391,"t":{"510":{"position":[[421,15]]}}}],["set_default:将外键字段设为默认值。只有当字段设置了default",{"_index":2219,"t":{"256":{"position":[[558,47]]}}}],["set_null：将外键字段设为null，只有当字段设置了null=tru",{"_index":2218,"t":{"256":{"position":[[510,47]]}}}],["set_related_ord",{"_index":2303,"t":{"258":{"position":[[2379,40]]}}}],["setopt=obsoletes=0",{"_index":3540,"t":{"516":{"position":[[5660,18],[6535,18]]}}}],["setopt=obsoletes=0，否则yum",{"_index":3539,"t":{"516":{"position":[[5595,33]]}}}],["setproperty(str",{"_index":658,"t":{"110":{"position":[[532,18]]}}}],["setter",{"_index":501,"t":{"85":{"position":[[696,41]]},"88":{"position":[[301,6]]}}}],["settings.pi",{"_index":1957,"t":{"232":{"position":[[38,11]]},"289":{"position":[[76,20]]}}}],["settings.py中的引入应用installed_apps，加上前缀apps.（其实这里的配置如果采用简写形式配置的话，应该要和类xxxconfig中的nam",{"_index":2559,"t":{"287":{"position":[[124,105]]}}}],["settings.py中设置static_root",{"_index":1071,"t":{"170":{"position":[[161,26]]}}}],["settings.py中配置一个名为cach",{"_index":2405,"t":{"267":{"position":[[0,41]]}}}],["settings文件中，配置media_root，作为你上传文件在服务器中的基本路径（为了性能考虑，这些文件不会被储存在数据库中）。再配置个media_url，作为公用url，指向上传文件的基本路径。请确保web",{"_index":2147,"t":{"252":{"position":[[4739,126]]}}}],["set相同，当缓存已存在时，将不会更新，而set",{"_index":2510,"t":{"275":{"position":[[463,31]]}}}],["sever",{"_index":3356,"t":{"506":{"position":[[183,6]]}}}],["sgid",{"_index":2784,"t":{"402":{"position":[[375,4]]}}}],["sh",{"_index":210,"t":{"34":{"position":[[1985,2],[2042,5]]},"153":{"position":[[94,11]]},"305":{"position":[[191,2],[204,3],[249,2],[260,3],[369,2],[382,3]]},"516":{"position":[[34537,8],[40575,6],[40716,6]]}}}],["sh(\"mv",{"_index":800,"t":{"114":{"position":[[824,6]]}}}],["sha256",{"_index":4914,"t":{"516":{"position":[[105280,6]]},"606":{"position":[[19,6]]}}}],["sha256:a94fa09562466d32d29523ab6cff122186f1127599fa4dcd5fa0152694f17117",{"_index":3605,"t":{"516":{"position":[[7954,71]]}}}],["share",{"_index":586,"t":{"97":{"position":[[186,10]]},"99":{"position":[[116,6]]},"516":{"position":[[28619,8]]}}}],["shell",{"_index":179,"t":{"34":{"position":[[878,5],[1023,5],[1608,5],[1963,5],[2130,5]]},"90":{"position":[[1531,5]]},"186":{"position":[[10,17],[45,5]]},"303":{"position":[[666,5],[1138,5],[1660,5],[2192,22]]},"322":{"position":[[0,9],[34,7]]},"347":{"position":[[289,5]]},"350":{"position":[[7,5],[68,5],[116,5]]},"360":{"position":[[0,5]]},"362":{"position":[[0,5],[82,5],[120,35],[156,5],[294,5]]},"364":{"position":[[34,5]]},"367":{"position":[[0,20],[21,5]]},"372":{"position":[[2,5]]},"379":{"position":[[0,5]]},"389":{"position":[[2,5]]},"392":{"position":[[402,5]]},"398":{"position":[[5,5]]},"420":{"position":[[0,31]]},"424":{"position":[[0,13],[52,5]]},"427":{"position":[[12,91]]},"429":{"position":[[568,69]]},"432":{"position":[[366,98]]}}}],["shell中查看自动生成的bookinfoseri",{"_index":1490,"t":{"190":{"position":[[376,36]]}}}],["shell使用的当前选项，与set",{"_index":2738,"t":{"369":{"position":[[200,26]]}}}],["shell在variable中查找，看它是否一给的模式pattern开始，如果是，就从命令行把vari",{"_index":2871,"t":{"432":{"position":[[1474,76]]}}}],["shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把vari",{"_index":2873,"t":{"432":{"position":[[1579,76]]}}}],["shell支持for",{"_index":2800,"t":{"409":{"position":[[0,23]]}}}],["shell清空一行【⌃+u",{"_index":2648,"t":{"322":{"position":[[48,14]]}}}],["shell顺序执行命令cmd1,cmd2,cmd3",{"_index":2910,"t":{"437":{"position":[[32,31],[118,29]]}}}],["shell，为当前服务器新增两个ip，观察pod",{"_index":4173,"t":{"516":{"position":[[41709,34]]}}}],["shift",{"_index":2645,"t":{"320":{"position":[[43,5]]}}}],["shop=shop_id",{"_index":2393,"t":{"264":{"position":[[1895,13]]}}}],["shop_id",{"_index":2351,"t":{"264":{"position":[[33,9]]}}}],["shortnam",{"_index":651,"t":{"110":{"position":[[294,10]]}}}],["show",{"_index":3896,"t":{"516":{"position":[[22372,4],[22526,4],[22674,4],[59843,4],[94928,4]]},"562":{"position":[[429,4]]}}}],["showdupl",{"_index":3537,"t":{"516":{"position":[[5551,14]]}}}],["sh：执行shell",{"_index":1000,"t":{"153":{"position":[[80,13]]}}}],["simpleui",{"_index":1043,"t":{"164":{"position":[[0,10],[63,10],[80,11]]},"170":{"position":[[873,14],[1163,14]]}}}],["simpleui==2021.10.15",{"_index":1042,"t":{"162":{"position":[[19,20]]}}}],["simplifi",{"_index":8,"t":{"15":{"position":[[22,12]]}}}],["site",{"_index":1998,"t":{"236":{"position":[[913,5],[1023,6]]},"238":{"position":[[165,4]]}}}],["size",{"_index":812,"t":{"116":{"position":[[482,4]]}}}],["size=4096",{"_index":4744,"t":{"516":{"position":[[92523,11],[93591,11]]},"591":{"position":[[601,11],[1669,11]]}}}],["sizeofdirectory(comput",{"_index":806,"t":{"116":{"position":[[231,25]]}}}],["skill=\"java",{"_index":2728,"t":{"352":{"position":[[72,12]]}}}],["skill}script",{"_index":2729,"t":{"352":{"position":[[104,15]]}}}],["sl9c6",{"_index":4644,"t":{"516":{"position":[[83770,5],[83950,5],[84214,5],[84616,5]]},"589":{"position":[[1650,5],[1830,5],[2094,5],[2496,5]]}}}],["slave",{"_index":645,"t":{"110":{"position":[[186,11]]},"516":{"position":[[21692,6],[21842,7]]}}}],["sleep",{"_index":3333,"t":{"504":{"position":[[3154,5]]},"516":{"position":[[34457,5],[34642,5],[40651,5],[40792,5],[97358,5],[97732,5],[115888,5],[116210,5]]}}}],["slim",{"_index":4894,"t":{"516":{"position":[[103606,4]]}}}],["slug",{"_index":2003,"t":{"238":{"position":[[97,4]]}}}],["slug=\"build",{"_index":2001,"t":{"236":{"position":[[999,14]]}}}],["slugfield",{"_index":1259,"t":{"184":{"position":[[1331,9]]},"252":{"position":[[2396,9]]}}}],["slugfield(maxlength=50",{"_index":1260,"t":{"184":{"position":[[1341,23]]}}}],["slug是一个新闻行业的术语。一个slug就是一个某种东西的简短标签，包含字母、数字、下划线或者连接线，通常用于urls中。可以设置max_length参数，默认为50",{"_index":2101,"t":{"252":{"position":[[2406,85]]}}}],["smallautofield",{"_index":2102,"t":{"252":{"position":[[2492,14]]}}}],["smallintegerfield",{"_index":2104,"t":{"252":{"position":[[2545,17]]}}}],["smpvp",{"_index":4456,"t":{"516":{"position":[[71208,5],[71820,5],[72252,5]]}}}],["smtp",{"_index":3290,"t":{"504":{"position":[[594,38],[1643,38]]}}}],["smtp_connect_timeout",{"_index":3294,"t":{"504":{"position":[[732,20],[1781,20]]}}}],["smtp_server",{"_index":3293,"t":{"504":{"position":[[710,11],[1759,11]]}}}],["snip",{"_index":2022,"t":{"242":{"position":[[132,4],[238,4]]}}}],["snowflak",{"_index":2416,"t":{"269":{"position":[[639,11]]}}}],["snp_list",{"_index":1207,"t":{"177":{"position":[[1430,8]]}}}],["snrk2",{"_index":4415,"t":{"516":{"position":[[66646,5],[67096,5],[67626,5],[67796,5]]}}}],["socket",{"_index":389,"t":{"73":{"position":[[644,6],[674,6]]},"170":{"position":[[1093,8]]},"402":{"position":[[908,7]]},"516":{"position":[[109221,6]]}}}],["socket上：/tmp/memcached.sock，依赖python",{"_index":2431,"t":{"269":{"position":[[1403,36]]}}}],["soft/keepaliv",{"_index":3279,"t":{"504":{"position":[[61,16],[84,16]]}}}],["soft/keepalived/etc/keepaliv",{"_index":3286,"t":{"504":{"position":[[406,48],[476,32]]}}}],["soft/keepalived/etc/keepalived/keepalived.conf",{"_index":3339,"t":{"504":{"position":[[3674,47]]}}}],["soft/keepalived/etc/sysconfig/keepaliv",{"_index":3343,"t":{"504":{"position":[[3861,41]]}}}],["soft/keepalived/keepaliv",{"_index":3340,"t":{"504":{"position":[[3760,27]]}}}],["soft/nginx/conf/nginx.conf",{"_index":3332,"t":{"504":{"position":[[3105,27]]}}}],["soft/nginx/sbin/nginx",{"_index":3331,"t":{"504":{"position":[[3079,22]]}}}],["soft/script",{"_index":3326,"t":{"504":{"position":[[2707,13]]}}}],["soft/scripts/keepaliv",{"_index":3327,"t":{"504":{"position":[[2721,24]]}}}],["soft/scripts/keepalived/check_nginx_pid_restart.sh",{"_index":3299,"t":{"504":{"position":[[905,53],[1954,53],[2770,51],[2843,51],[3375,51],[3515,51]]}}}],["someth",{"_index":614,"t":{"103":{"position":[[258,9]]}}}],["sourc",{"_index":274,"t":{"42":{"position":[[237,6],[285,13]]},"101":{"position":[[64,6]]},"294":{"position":[[16,6]]},"424":{"position":[[104,6]]}}}],["span=(0",{"_index":2675,"t":{"328":{"position":[[480,8]]}}}],["spec",{"_index":3747,"t":{"516":{"position":[[13731,5],[16417,5],[20907,5],[22921,5],[25181,5],[25272,5],[27111,5],[27895,5],[30328,4],[31038,4],[31114,34],[31988,5],[32724,5],[34270,5],[35649,5],[36673,5],[36978,5],[37527,5],[40406,5],[42528,5],[43991,5],[45170,5],[46375,5],[48129,5],[48750,5],[50140,5],[51466,5],[54206,5],[55876,5],[57589,5],[58057,5],[60171,5],[63452,5],[65227,5],[65490,5],[65569,27],[65917,5],[66016,5],[69675,5],[70212,5],[70420,5],[70519,5],[72726,5],[73824,5],[80858,5],[81001,5],[81824,5],[85082,5],[85485,5],[85670,5],[85757,5],[86704,5],[87202,5],[87660,5],[87772,5],[88459,16],[89775,5],[90095,5],[90350,5],[90939,5],[90992,5],[91008,5],[93938,5],[94588,5],[94687,5],[95668,5],[98174,5],[99752,5],[100613,5],[103180,5],[103279,5],[103448,5],[103549,5],[103718,5],[103887,5],[104365,5],[105580,5],[107463,5],[108728,5],[110612,5],[111812,5],[113177,5],[113375,5],[113573,5],[114240,5],[114655,5],[114801,5],[114947,5],[115771,5],[116093,5],[118492,5],[119933,5],[129161,5]]},"522":{"position":[[185,5]]},"526":{"position":[[1362,5],[5852,5]]},"541":{"position":[[372,5]]},"545":{"position":[[1305,5]]},"549":{"position":[[262,5]]},"562":{"position":[[757,5]]},"579":{"position":[[132,5],[275,5]]},"585":{"position":[[449,5]]},"591":{"position":[[2016,5]]},"595":{"position":[[314,5]]},"608":{"position":[[177,5]]},"620":{"position":[[380,5]]}}}],["spec中添加sessionaffinity:clientip",{"_index":4812,"t":{"516":{"position":[[97088,40]]}}}],["sqlmigrat",{"_index":1952,"t":{"230":{"position":[[1106,10]]}}}],["sql语言或者python",{"_index":2271,"t":{"258":{"position":[[502,49]]}}}],["sql，先看看在迁移的时候实际执行的sql",{"_index":1951,"t":{"230":{"position":[[1059,29]]}}}],["src",{"_index":275,"t":{"42":{"position":[[299,4]]},"101":{"position":[[51,3],[303,3]]}}}],["src/com/bothin/globalvars.groovi",{"_index":628,"t":{"107":{"position":[[100,32]]}}}],["src/your/package/nam",{"_index":616,"t":{"103":{"position":[[331,21]]}}}],["sshcmd=nick@10.32.2.134:/home/nick/sshvolum",{"_index":291,"t":{"42":{"position":[[927,44]]}}}],["ssl",{"_index":3249,"t":{"493":{"position":[[85,3],[113,3]]}}}],["ssl_certif",{"_index":3253,"t":{"493":{"position":[[173,15]]}}}],["ssl_certificate_key",{"_index":3255,"t":{"493":{"position":[[235,19]]}}}],["ssl_protocol",{"_index":3258,"t":{"493":{"position":[[319,13]]}}}],["ssl_session_timeout",{"_index":3257,"t":{"493":{"position":[[294,19]]}}}],["ssl协议版本，默认为后三个，主流版本是[tlsv1.2",{"_index":3262,"t":{"493":{"position":[[358,31]]}}}],["st",{"_index":3707,"t":{"516":{"position":[[11963,3]]}}}],["stabl",{"_index":431,"t":{"78":{"position":[[83,6]]}}}],["stage",{"_index":636,"t":{"107":{"position":[[419,5]]},"128":{"position":[[133,6]]},"132":{"position":[[469,6]]},"137":{"position":[[873,6]]},"139":{"position":[[1259,9]]},"141":{"position":[[167,6]]},"151":{"position":[[628,6]]}}}],["stage(\"foo",{"_index":923,"t":{"141":{"position":[[176,12]]}}}],["stage('build",{"_index":831,"t":{"128":{"position":[[142,14]]},"132":{"position":[[478,14]]},"137":{"position":[[882,14]]}}}],["stage('stash",{"_index":987,"t":{"151":{"position":[[637,14]]}}}],["stage('unstash",{"_index":993,"t":{"151":{"position":[[775,16]]}}}],["stage_nam",{"_index":664,"t":{"110":{"position":[[671,10]]}}}],["stages部分：流水线中多个stage的容器。stages部分至少包含一个stag",{"_index":833,"t":{"128":{"position":[[273,44]]}}}],["stage部分：阶段，代表流水线的阶段。每个阶段都必须有名称。本例中，build",{"_index":832,"t":{"128":{"position":[[223,49]]}}}],["stale",{"_index":3217,"t":{"485":{"position":[[71,6]]}}}],["standardpagenumberpagin",{"_index":1887,"t":{"225":{"position":[[1095,28]]}}}],["standardpagenumberpagination(pagenumberpagin",{"_index":1885,"t":{"225":{"position":[[849,51]]}}}],["stapler",{"_index":458,"t":{"81":{"position":[[263,32],[386,8]]},"85":{"position":[[0,19]]},"94":{"position":[[132,7]]}}}],["staplerdispatch",{"_index":455,"t":{"81":{"position":[[165,21]]},"85":{"position":[[20,21]]}}}],["staplerfallback",{"_index":457,"t":{"81":{"position":[[232,17]]},"85":{"position":[[232,17]]}}}],["staplerrequest",{"_index":459,"t":{"81":{"position":[[296,15]]}}}],["staplerrespond",{"_index":456,"t":{"81":{"position":[[200,18]]},"85":{"position":[[126,18]]}}}],["staplerrespons",{"_index":461,"t":{"81":{"position":[[340,16]]},"83":{"position":[[238,15],[415,15]]}}}],["stapler框架中常用的注解，通过它们可以方便地处理http",{"_index":504,"t":{"85":{"position":[[788,52]]}}}],["stapler框架中，我们可以使用注解来声明一个方法可以处理http请求，并且可以获取请求参数、请求头等信息。通过staplerresponse类，我们可以设置响应头、响应状态码等信息，并且返回一个文本响应、jelli",{"_index":487,"t":{"83":{"position":[[772,119]]}}}],["stapler框架基于java",{"_index":453,"t":{"81":{"position":[[96,15]]}}}],["stapler框架是jenkins中用于处理http请求的框架。它是一个轻量级的mvc框架，提供了处理http请求的标准化方法，使得开发人员可以轻松地构建restful风格的web",{"_index":452,"t":{"81":{"position":[[0,95]]}}}],["start",{"_index":20,"t":{"19":{"position":[[31,5]]},"23":{"position":[[486,5],[519,5]]},"73":{"position":[[693,5],[1406,5]]},"344":{"position":[[184,7]]},"374":{"position":[[16,5],[48,5],[87,6],[111,5],[143,5],[175,5],[216,6],[240,5]]},"446":{"position":[[110,5]]},"504":{"position":[[4124,5]]},"510":{"position":[[303,8]]},"516":{"position":[[3549,5],[18399,5],[18872,8],[19792,7],[19821,7],[33714,7],[33741,7],[33949,7],[33989,7],[41351,7],[41378,7],[41996,25],[44440,7],[44481,7],[45794,7],[45826,7],[46986,7],[47026,7]]},"526":{"position":[[3344,5],[3817,8],[4737,7],[4766,7]]}}}],["startapp",{"_index":1936,"t":{"230":{"position":[[606,8]]},"289":{"position":[[397,8]]}}}],["startingdeadlinesecond",{"_index":4709,"t":{"516":{"position":[[89988,24]]}}}],["startproject",{"_index":1928,"t":{"230":{"position":[[126,12],[235,12]]}}}],["start）、容器终止前钩子（pr",{"_index":4130,"t":{"516":{"position":[[38876,18]]}}}],["star大于50",{"_index":36,"t":{"21":{"position":[[108,15]]}}}],["stash",{"_index":976,"t":{"151":{"position":[[0,13],[229,15]]}}}],["stash(nam",{"_index":989,"t":{"151":{"position":[[733,11]]}}}],["stash步骤会将文件存储在tar文件中，对于大文件的stash操作将会消耗jenkin",{"_index":978,"t":{"151":{"position":[[128,45]]}}}],["stash步骤可以将一些文件保存起来，以便被同一次构建的其他步骤或阶段使用。如果整个pipeline的所有阶段在同一台机器上执行，则stash步骤是多余的。所以，通常需要stash的文件都是要跨jenkin",{"_index":977,"t":{"151":{"position":[[14,104]]}}}],["stash步骤在master节点上执行，而unstash步骤在node2",{"_index":997,"t":{"151":{"position":[[899,42]]}}}],["state",{"_index":3305,"t":{"504":{"position":[[1111,5],[2160,5]]},"516":{"position":[[18857,6]]},"526":{"position":[[3802,6]]}}}],["statefulset",{"_index":3706,"t":{"516":{"position":[[11950,12],[64951,19]]}}}],["static",{"_index":601,"t":{"101":{"position":[[268,6]]},"103":{"position":[[477,6]]},"107":{"position":[[207,6]]},"170":{"position":[[225,9]]}}}],["static_root",{"_index":1072,"t":{"170":{"position":[[188,11]]}}}],["statu",{"_index":423,"t":{"73":{"position":[[1441,6]]},"193":{"position":[[1269,7]]},"227":{"position":[[655,6]]},"446":{"position":[[287,6]]},"449":{"position":[[483,8]]},"487":{"position":[[736,6],[1319,6]]},"516":{"position":[[8081,6],[12858,6],[13323,6],[14003,6],[14050,6],[15549,6],[15873,6],[16056,6],[16448,7],[16601,7],[17332,6],[18228,6],[18509,7],[19062,6],[19928,6],[20359,6],[22395,6],[22549,6],[23576,6],[24625,6],[30341,6],[31075,6],[32441,6],[34864,6],[37984,6],[38420,6],[41496,6],[43032,6],[44926,6],[46142,6],[47417,6],[49442,6],[50426,6],[50902,6],[51786,6],[52268,6],[54692,6],[55596,6],[56368,6],[57876,6],[58644,6],[59497,6],[59866,6],[60750,6],[61953,6],[62382,6],[62843,6],[63721,6],[63886,6],[66536,6],[66870,6],[67378,6],[67723,6],[69055,6],[71113,6],[71626,6],[72105,6],[72995,6],[74149,6],[75607,6],[75787,6],[77441,6],[77965,6],[78708,6],[81520,6],[83342,6],[86194,6],[88351,6],[88663,6],[94951,6],[102745,6],[108122,6],[109468,6],[111166,6],[112602,10],[113948,6],[115240,6],[115511,6],[116517,6],[116692,6],[116957,6],[118858,6],[120260,6],[127110,6],[129465,6]]},"522":{"position":[[457,6],[504,6]]},"526":{"position":[[494,6],[818,6],[1001,6],[1393,7],[1546,7],[2277,6],[3173,6],[3454,7],[4007,6],[4873,6],[5304,6]]},"532":{"position":[[92,6]]},"541":{"position":[[92,6]]},"545":{"position":[[84,6]]},"549":{"position":[[81,6]]},"553":{"position":[[83,6]]},"562":{"position":[[83,6],[452,6]]},"567":{"position":[[95,6]]},"569":{"position":[[66,6]]},"571":{"position":[[66,6]]},"585":{"position":[[145,6]]},"589":{"position":[[1222,6]]},"620":{"position":[[88,6]]},"624":{"position":[[59,6]]},"626":{"position":[[88,6]]},"630":{"position":[[66,6]]},"632":{"position":[[59,6]]},"634":{"position":[[95,6]]},"640":{"position":[[68,6]]}}}],["status=non",{"_index":1529,"t":{"193":{"position":[[1006,12]]}}}],["status=status.http_201_cr",{"_index":1681,"t":{"197":{"position":[[3560,31]]}}}],["status=status.http_507_insufficient_storag",{"_index":1916,"t":{"227":{"position":[[936,44]]}}}],["statuscod",{"_index":4221,"t":{"516":{"position":[[47146,11],[49247,11]]}}}],["stcase",{"_index":2881,"t":{"432":{"position":[[1918,6],[1943,6]]}}}],["stderr",{"_index":2577,"t":{"303":{"position":[[474,6]]}}}],["stdin",{"_index":2575,"t":{"303":{"position":[[436,5]]}}}],["stdin、stdout、stderr",{"_index":2580,"t":{"303":{"position":[[607,19]]}}}],["stdout",{"_index":2576,"t":{"303":{"position":[[454,6]]}}}],["step",{"_index":609,"t":{"103":{"position":[[18,8],[27,5],[88,6],[110,4]]},"107":{"position":[[439,5]]},"128":{"position":[[159,5]]},"132":{"position":[[495,5]]},"137":{"position":[[899,5]]},"141":{"position":[[191,5]]},"151":{"position":[[679,5],[818,5]]},"155":{"position":[[307,17],[325,5]]}}}],["steps部分：代表阶段中的一个或多个具体步骤（step）的容器。steps部分至少包含一个步骤，本例中，echo就是一个步骤。在一个stage中有且只有一个step",{"_index":834,"t":{"128":{"position":[[318,85]]}}}],["sticki",{"_index":2785,"t":{"402":{"position":[[427,19]]}}}],["stop",{"_index":21,"t":{"19":{"position":[[68,4]]},"23":{"position":[[584,4]]},"73":{"position":[[1024,4],[1477,4]]},"446":{"position":[[181,4],[486,4]]},"504":{"position":[[3289,4],[4265,4]]},"516":{"position":[[3765,4],[3869,4],[8626,4],[8649,4],[38895,5],[42026,4]]}}}],["storag",{"_index":5001,"t":{"516":{"position":[[111870,8],[113193,8],[113391,8],[113589,8],[114341,8],[114709,8],[114855,8],[115001,8]]},"620":{"position":[[481,8]]}}}],["storage=1gi",{"_index":5006,"t":{"516":{"position":[[112058,11]]}}}],["storageclass",{"_index":5048,"t":{"516":{"position":[[115276,12]]},"624":{"position":[[95,12]]}}}],["storageclassnam",{"_index":5004,"t":{"516":{"position":[[111903,17],[114288,17],[114462,22]]},"620":{"position":[[428,17]]}}}],["storg",{"_index":284,"t":{"42":{"position":[[650,6]]}}}],["stori",{"_index":2345,"t":{"258":{"position":[[5038,7],[5214,9]]}}}],["str",{"_index":1399,"t":{"186":{"position":[[2204,33]]},"238":{"position":[[20,3],[332,3]]},"303":{"position":[[1479,3],[1544,4]]},"374":{"position":[[646,5]]}}}],["str%%aa",{"_index":2759,"t":{"374":{"position":[[701,11]]}}}],["str%aa",{"_index":2757,"t":{"374":{"position":[[671,10]]}}}],["str(data[api_settings.url_field_nam",{"_index":1686,"t":{"197":{"position":[[3727,39]]}}}],["str(e.__traceback__.tb_lineno",{"_index":2404,"t":{"264":{"position":[[2169,31]]}}}],["str(version",{"_index":2458,"t":{"271":{"position":[[932,13]]}}}],["str1=$name$url",{"_index":2743,"t":{"372":{"position":[[117,14]]}}}],["str2=\"$name",{"_index":2744,"t":{"372":{"position":[[141,11]]}}}],["str3=$name",{"_index":2745,"t":{"372":{"position":[[179,12]]}}}],["str4=\"$name",{"_index":2746,"t":{"372":{"position":[[211,12]]}}}],["str5=\"${name}script",{"_index":2747,"t":{"372":{"position":[[238,20]]}}}],["strategi",{"_index":12,"t":{"15":{"position":[[65,8]]},"516":{"position":[[69818,9],[72732,9],[73830,9],[80864,9]]},"579":{"position":[[138,9]]}}}],["strategytyp",{"_index":3918,"t":{"516":{"position":[[24354,13]]}}}],["strategy：指定新的pod替换旧的pod",{"_index":4470,"t":{"516":{"position":[[72390,27]]}}}],["stream",{"_index":2975,"t":{"449":{"position":[[845,7]]}}}],["string",{"_index":475,"t":{"83":{"position":[[275,6]]},"85":{"position":[[464,6],[527,6],[597,6]]},"103":{"position":[[484,6]]},"107":{"position":[[214,6]]},"110":{"position":[[503,6],[1419,6],[1444,6],[1478,6],[1522,6],[1591,6],[1730,6],[1752,6],[1807,7]]},"112":{"position":[[125,6],[404,6]]},"114":{"position":[[381,6]]},"116":{"position":[[257,6],[272,6],[366,6]]},"118":{"position":[[269,7]]},"141":{"position":[[524,13]]},"328":{"position":[[75,7],[106,13]]},"330":{"position":[[46,7],[77,13]]},"333":{"position":[[48,7],[104,13]]},"374":{"position":[[6,9],[33,6],[77,9],[96,6],[131,9],[160,6],[204,9],[225,6],[279,6],[345,6],[411,6],[477,6]]},"376":{"position":[[19,10]]},"432":{"position":[[1036,50]]},"481":{"position":[[69,7]]},"483":{"position":[[45,7]]},"516":{"position":[[27803,6],[27831,6],[27888,6],[27950,6],[27973,6],[28057,8],[28101,8],[28135,6],[28188,6],[28244,6],[28334,6],[28434,6],[28493,6],[28515,6],[28575,6],[28636,6],[28711,6],[28745,6],[28955,8],[29037,6],[29063,6],[29078,6],[29106,6],[29120,6],[29458,7],[29629,6],[29730,6],[29822,6],[29868,6],[29960,6],[29981,6],[29994,6],[30059,6],[30080,6],[30093,6],[30290,7],[30303,7],[30508,7],[30534,7],[30596,7],[30615,9],[30638,7],[30721,7],[30739,7],[30789,7],[30806,7],[30818,7],[31623,7],[31644,7],[31680,7],[31705,9],[31750,9],[36348,7],[36496,7],[36536,7]]}}}],["string##*char",{"_index":2752,"t":{"374":{"position":[[325,17]]}}}],["string#*char",{"_index":2750,"t":{"374":{"position":[[260,16]]}}}],["string%%*char",{"_index":2754,"t":{"374":{"position":[[457,17]]}}}],["string%*char",{"_index":2753,"t":{"374":{"position":[[392,16]]}}}],["string(nam",{"_index":1018,"t":{"155":{"position":[[621,12],[711,12]]}}}],["string=\"abcd",{"_index":2760,"t":{"376":{"position":[[0,13]]}}}],["stringrelatedfield",{"_index":1398,"t":{"186":{"position":[[2184,19]]}}}],["string},${var:+string},${var:=string},${var:?str",{"_index":2858,"t":{"432":{"position":[[484,52]]}}}],["string}和${var:=string}:若变量var为空，则用在命令行中用string来替换${var",{"_index":2859,"t":{"432":{"position":[[546,55]]}}}],["string}是一样的，所不同之处是${var:=string}若var为空时，用string替换${var:=string}的同时，把string赋给变量var",{"_index":2862,"t":{"432":{"position":[[678,82]]}}}],["string}，否则变量var不为空时，则用变量var的值来替换${var",{"_index":2860,"t":{"432":{"position":[[602,38]]}}}],["string}；对于${var:=string}的替换规则和${var",{"_index":2861,"t":{"432":{"position":[[641,36]]}}}],["strip",{"_index":199,"t":{"34":{"position":[[1354,5]]}}}],["str转date",{"_index":2376,"t":{"264":{"position":[[972,29]]}}}],["su",{"_index":250,"t":{"34":{"position":[[4683,2]]}}}],["subj",{"_index":4921,"t":{"516":{"position":[[105351,4],[125153,4]]},"606":{"position":[[90,4]]}}}],["subject",{"_index":5143,"t":{"516":{"position":[[123771,9],[124111,9],[124688,9],[126589,9]]},"646":{"position":[[121,9]]},"649":{"position":[[125,9]]}}}],["succeeded）：pod",{"_index":4137,"t":{"516":{"position":[[39092,37]]}}}],["success",{"_index":123,"t":{"27":{"position":[[753,8]]},"132":{"position":[[324,21],[570,8],[601,8],[755,8],[793,8]]},"344":{"position":[[304,9]]}}}],["successfuljobhistorylimit",{"_index":4708,"t":{"516":{"position":[[89937,26]]}}}],["successfulli",{"_index":3847,"t":{"516":{"position":[[19526,12],[19684,12],[33457,12],[33608,12],[41137,12],[45570,12],[75849,12]]},"526":{"position":[[4471,12],[4629,12]]}}}],["successthreshold",{"_index":4005,"t":{"516":{"position":[[29319,17],[47930,16]]}}}],["such",{"_index":669,"t":{"110":{"position":[[759,10]]},"516":{"position":[[44708,4]]}}}],["sudo",{"_index":18,"t":{"19":{"position":[[11,4],[48,4],[84,4],[129,4],[158,4]]},"34":{"position":[[4689,21]]},"73":{"position":[[1391,4],[1426,4],[1462,4],[1498,4],[1536,4]]},"277":{"position":[[620,4]]},"442":{"position":[[2,4],[41,4]]},"516":{"position":[[7714,4],[7788,4]]}}}],["suid",{"_index":2787,"t":{"402":{"position":[[564,4]]}}}],["super().__init__(*arg",{"_index":1178,"t":{"177":{"position":[[420,23]]}}}],["super().delete_model(request",{"_index":1216,"t":{"177":{"position":[[1716,29]]}}}],["super().save_model(request",{"_index":1205,"t":{"177":{"position":[[1344,27]]}}}],["suppressfbwarn",{"_index":517,"t":{"88":{"position":[[584,20]]}}}],["surg",{"_index":3924,"t":{"516":{"position":[[24453,5]]}}}],["suspend",{"_index":4718,"t":{"516":{"position":[[91341,7]]}}}],["svc",{"_index":3708,"t":{"516":{"position":[[11991,3],[25931,3],[25935,3],[26015,3],[26666,3],[26670,3],[26750,3],[26951,3],[26955,3],[26982,4],[27016,7],[27086,3],[27280,3],[27316,3],[95976,3],[96221,3],[98489,3],[98700,3],[100064,3],[102892,3],[104086,3]]},"595":{"position":[[35,3]]}}}],["svc.cluster.loc",{"_index":4830,"t":{"516":{"position":[[99158,17]]}}}],["svc的内网ip",{"_index":3968,"t":{"516":{"position":[[27143,11]]}}}],["swap",{"_index":3464,"t":{"516":{"position":[[2813,6],[4087,9],[4337,4],[4342,4],[4368,4],[4373,4]]}}}],["swap分区指的是虚拟内存分区，它的作用是物理内存使用完，之后将磁盘空间虚拟成内存来使用，启用swap设备会对系统的性能产生非常负面的影响，因此kubernetes要求每个节点都要禁用swap设备，但是如果因为某些原因确实不能关闭swap",{"_index":3503,"t":{"516":{"position":[[4097,146]]}}}],["swarm：dock",{"_index":3415,"t":{"516":{"position":[[470,21]]}}}],["switch",{"_index":2807,"t":{"415":{"position":[[29,6]]},"516":{"position":[[125877,8],[126210,8],[127002,8],[127392,8]]}}}],["sy",{"_index":2562,"t":{"289":{"position":[[115,3]]}}}],["symbol",{"_index":507,"t":{"88":{"position":[[75,8]]}}}],["syntax",{"_index":2631,"t":{"309":{"position":[[95,7]]}}}],["syntax/globalsenv",{"_index":943,"t":{"143":{"position":[[473,21]]}}}],["syntax/html",{"_index":952,"t":{"147":{"position":[[61,15]]}}}],["sys.path.insert(0",{"_index":2563,"t":{"289":{"position":[[119,18]]}}}],["sysconfig",{"_index":395,"t":{"73":{"position":[[753,9]]}}}],["sysctl",{"_index":3513,"t":{"516":{"position":[[4601,6]]}}}],["system",{"_index":26,"t":{"19":{"position":[[195,6]]},"73":{"position":[[229,6]]},"516":{"position":[[12958,6],[15724,6],[15958,6],[17304,6],[17357,6],[17413,6],[17469,6],[17512,6],[17565,6],[17627,6],[17686,6],[17745,6],[17793,6],[17841,6],[80265,6],[80577,6],[93428,6],[93524,6]]},"526":{"position":[[669,6],[903,6],[2249,6],[2302,6],[2358,6],[2414,6],[2457,6],[2510,6],[2572,6],[2631,6],[2690,6],[2738,6],[2786,6]]},"575":{"position":[[50,6]]},"577":{"position":[[227,6]]},"591":{"position":[[1506,6],[1602,6]]}}}],["systemctl",{"_index":23,"t":{"19":{"position":[[134,9],[163,9]]},"73":{"position":[[1396,9],[1431,9],[1467,9],[1503,9],[1541,9]]},"446":{"position":[[0,9],[23,9],[55,9],[100,9],[171,9],[202,9],[238,9],[277,9]]},"504":{"position":[[3279,9],[4018,9],[4060,9],[4114,9],[4155,9],[4203,9],[4255,9]]},"516":{"position":[[3539,9],[3580,9],[3755,9],[3797,9],[3859,9],[3900,9],[6026,9],[6068,9],[6768,9],[8616,9],[8639,9],[8847,9],[8884,9],[8946,9],[8983,9],[110362,9],[113087,9]]}}}],["system→glob",{"_index":948,"t":{"143":{"position":[[679,13]]}}}],["s），默认是600",{"_index":4444,"t":{"516":{"position":[[69801,16]]}}}],["t",{"_index":63,"t":{"23":{"position":[[157,6],[193,1],[842,1]]},"25":{"position":[[16,1],[48,1],[252,1]]},"32":{"position":[[932,1]]},"313":{"position":[[264,2]]},"325":{"position":[[189,2]]},"446":{"position":[[535,1],[563,1]]},"516":{"position":[[34436,4],[34621,4]]}}}],["t);sleep",{"_index":4092,"t":{"516":{"position":[[35760,10]]}}}],["t\\n\\r\\f",{"_index":2649,"t":{"325":{"position":[[53,11]]}}}],["tab",{"_index":2725,"t":{"350":{"position":[[240,17]]},"516":{"position":[[10018,17]]}}}],["tag",{"_index":905,"t":{"139":{"position":[[786,3],[891,3],[966,3]]},"273":{"position":[[722,19]]},"516":{"position":[[7214,3],[33027,14],[63527,5]]}}}],["tag:noschedul",{"_index":4364,"t":{"516":{"position":[[62613,14]]}}}],["tag:prefernoschedul",{"_index":4358,"t":{"516":{"position":[[62138,20]]}}}],["tag=heima:noexecut",{"_index":4365,"t":{"516":{"position":[[62678,19]]}}}],["tag=heima:noexecute；然后创建pod3",{"_index":4348,"t":{"516":{"position":[[61659,28]]}}}],["tag=heima:noschedul",{"_index":4359,"t":{"516":{"position":[[62209,20]]}}}],["tag=heima:noschedule；然后创建pod2",{"_index":4346,"t":{"516":{"position":[[61592,30]]}}}],["tag=heima:prefernoschedul",{"_index":4351,"t":{"516":{"position":[[61781,26]]}}}],["tag=heima:prefernoschedule；然后创建pod1",{"_index":4344,"t":{"516":{"position":[[61527,36]]}}}],["tage",{"_index":2477,"t":{"273":{"position":[[776,6]]}}}],["tag为：latest",{"_index":4060,"t":{"516":{"position":[[33061,21]]}}}],["tag的参数为空，即tag（），则表示不论tag名称是什么都执行，与buildingtag的效果相同。tag条件支持compar",{"_index":904,"t":{"139":{"position":[[682,80]]}}}],["tag：如果pipeline所执行的代码被打了tag，且tag",{"_index":903,"t":{"139":{"position":[[640,41]]}}}],["tail",{"_index":84,"t":{"25":{"position":[[20,4],[79,4],[256,4]]},"27":{"position":[[1723,4]]},"504":{"position":[[4304,4]]},"510":{"position":[[568,4],[676,4]]},"516":{"position":[[35138,4]]}}}],["taint",{"_index":4124,"t":{"516":{"position":[[38648,5],[58968,6],[60867,14],[61343,5],[61393,5],[61440,5],[61763,5],[62120,5],[62191,5],[62595,5],[62660,5]]},"555":{"position":[[255,6]]},"567":{"position":[[212,14]]}}}],["taint1",{"_index":4352,"t":{"516":{"position":[[61852,6],[61981,6],[62410,6],[62881,6]]}}}],["taint2",{"_index":4360,"t":{"516":{"position":[[62274,6],[62349,6],[62472,6],[62941,6]]}}}],["taint3",{"_index":4367,"t":{"516":{"position":[[62742,6],[63000,6]]}}}],["taints、toler",{"_index":4240,"t":{"516":{"position":[[49790,26]]}}}],["tar",{"_index":154,"t":{"30":{"position":[[58,3]]},"34":{"position":[[605,3],[1312,3]]},"504":{"position":[[202,3]]}}}],["target",{"_index":278,"t":{"42":{"position":[[364,7]]},"114":{"position":[[388,7],[844,11],[884,11]]},"516":{"position":[[9316,6],[25841,6],[26533,6],[57541,6],[57772,6],[57851,6],[57912,6],[59986,6],[82184,7],[82407,7]]},"545":{"position":[[1257,6]]},"547":{"position":[[89,6]]},"549":{"position":[[56,6],[117,6]]},"562":{"position":[[572,6]]},"589":{"position":[[64,7],[287,7]]}}}],["target.yaml",{"_index":4310,"t":{"516":{"position":[[57471,12],[57740,11]]},"545":{"position":[[1187,12]]},"547":{"position":[[57,11]]}}}],["targetcpuutilizationpercentag",{"_index":4606,"t":{"516":{"position":[[81879,31]]},"585":{"position":[[504,31]]}}}],["targetport",{"_index":3969,"t":{"516":{"position":[[27187,11],[94158,11],[95796,11],[96398,11],[98298,11],[98872,11],[99894,11],[103797,11],[103969,11],[129206,11]]},"591":{"position":[[2236,11]]}}}],["tcp",{"_index":3153,"t":{"459":{"position":[[235,3],[267,3]]},"516":{"position":[[21011,3],[23025,3],[25361,3],[27183,3],[36793,3],[37114,3],[45939,3],[92631,3],[93699,3],[94131,3],[96559,3],[97185,3],[97545,3]]},"526":{"position":[[5956,3]]},"591":{"position":[[709,3],[1777,3],[2209,3]]}}}],["tcp_nodelay",{"_index":2967,"t":{"449":{"position":[[684,11]]}}}],["tcp_nopush",{"_index":2966,"t":{"449":{"position":[[656,10]]}}}],["tcpsocket",{"_index":4000,"t":{"516":{"position":[[29127,10],[42229,10],[43592,50],[43661,10],[45047,13],[45145,9],[45281,10],[45421,9],[45507,9],[45609,9],[46114,9],[46175,9],[47703,9]]}}}],["tcpsocket.yaml",{"_index":4209,"t":{"516":{"position":[[45076,14],[45389,14]]}}}],["tcpsocket：在当前容器尝试访问指定的socket",{"_index":4181,"t":{"516":{"position":[[42175,28]]}}}],["tcp和udp，默认tcp",{"_index":3987,"t":{"516":{"position":[[28441,21]]}}}],["tcsh",{"_index":2904,"t":{"435":{"position":[[99,6]]}}}],["te",{"_index":1401,"t":{"186":{"position":[[2524,11]]},"432":{"position":[[1898,2]]}}}],["templat",{"_index":3821,"t":{"516":{"position":[[18455,8],[24463,9],[25233,9],[65417,9],[65973,9],[70139,9],[70476,9],[80958,9],[85412,9],[85714,9],[87127,9],[87727,9],[90305,9],[90998,9],[94644,9],[103236,9],[103505,9]]},"526":{"position":[[3400,8]]},"579":{"position":[[232,9]]}}}],["template_nam",{"_index":1537,"t":{"193":{"position":[[1288,14]]}}}],["template_name=non",{"_index":1530,"t":{"193":{"position":[[1019,19]]}}}],["template：模板，就是当前控制器创建pod所使用的模板板，里面其实就是前一章学过的pod",{"_index":4406,"t":{"516":{"position":[[65742,50]]}}}],["termin",{"_index":3789,"t":{"516":{"position":[[16635,11],[67422,11],[67465,11],[67509,11],[67592,11],[73197,11],[73250,11],[73303,11],[74541,11],[74743,11],[74945,11],[75147,11],[84347,11],[84394,11],[84440,11],[84486,11],[84533,11],[84579,11],[84626,11],[106243,10]]},"526":{"position":[[1580,11]]},"589":{"position":[[2227,11],[2274,11],[2320,11],[2366,11],[2413,11],[2459,11],[2506,11]]},"614":{"position":[[85,10]]}}}],["test",{"_index":689,"t":{"110":{"position":[[1561,4],[1627,4]]},"303":{"position":[[2076,4]]},"364":{"position":[[83,5]]},"429":{"position":[[191,54],[373,49]]},"455":{"position":[[1987,4]]},"457":{"position":[[889,10],[1033,7],[2625,5],[2648,6],[2711,4],[2725,4],[2752,4],[2774,4],[2830,4],[2844,4],[2881,4]]},"516":{"position":[[22914,6],[40535,4],[40676,4],[41333,4],[41396,4]]}}}],["test.club",{"_index":3070,"t":{"457":{"position":[[554,9],[1483,9],[4664,10]]}}}],["test.cn",{"_index":3068,"t":{"457":{"position":[[524,7],[1450,7]]}}}],["test.com",{"_index":3064,"t":{"457":{"position":[[395,8],[428,8],[492,8],[742,9],[1177,9],[1293,8],[1345,8],[1415,8],[2138,9]]}}}],["test.com/1.jpg",{"_index":3084,"t":{"457":{"position":[[2322,14]]}}}],["test.com/bb",{"_index":3088,"t":{"457":{"position":[[2464,13]]}}}],["test.com/match_al",{"_index":3081,"t":{"457":{"position":[[2166,19]]}}}],["test.com/test",{"_index":3091,"t":{"457":{"position":[[2682,13],[2801,13]]}}}],["test.org",{"_index":3066,"t":{"457":{"position":[[460,8],[1380,8]]}}}],["test.php",{"_index":2720,"t":{"347":{"position":[[330,8]]}}}],["test.sh",{"_index":2620,"t":{"305":{"position":[[194,7],[208,13],[252,7],[372,7]]},"347":{"position":[[17,9],[38,9],[63,13],[77,25],[135,7],[214,7],[234,9],[313,7]]},"369":{"position":[[573,7],[583,9]]}}}],["test.sh任务放到后台，但是依然可以使用标准输入，终端能够接收任何输入，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前sess",{"_index":2623,"t":{"305":{"position":[[386,96]]}}}],["test.sh任务放到后台，关闭标准输入，终端不再能够接收任何输入（标准输入），重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前sess",{"_index":2622,"t":{"305":{"position":[[264,98]]}}}],["test.sh，linux",{"_index":2715,"t":{"347":{"position":[[103,13]]}}}],["test.txt",{"_index":303,"t":{"46":{"position":[[525,12],[538,8]]}}}],["test/al",{"_index":3076,"t":{"457":{"position":[[1220,8]]}}}],["test/left",{"_index":3073,"t":{"457":{"position":[[785,9]]}}}],["test/reg",{"_index":3074,"t":{"457":{"position":[[933,8]]}}}],["test/right",{"_index":3075,"t":{"457":{"position":[[1074,10]]}}}],["test_cache(request",{"_index":2463,"t":{"273":{"position":[[86,20]]}}}],["test_request_count",{"_index":2703,"t":{"344":{"position":[[371,21]]}}}],["testca",{"_index":2878,"t":{"432":{"position":[[1851,6]]}}}],["testcas",{"_index":2876,"t":{"432":{"position":[[1824,8],[1870,8]]}}}],["testcon",{"_index":295,"t":{"42":{"position":[[1128,7]]}}}],["testmethod",{"_index":827,"t":{"121":{"position":[[81,12]]}}}],["tests.pi",{"_index":1964,"t":{"232":{"position":[[149,8]]}}}],["test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if/test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if/test结构中并不是必须右中括号，但是新版的bash",{"_index":2835,"t":{"429":{"position":[[17,171]]}}}],["text",{"_index":965,"t":{"149":{"position":[[482,14],[709,5]]},"258":{"position":[[1918,4]]},"457":{"position":[[2974,7]]},"487":{"position":[[1001,5]]}}}],["text(nam",{"_index":1021,"t":{"155":{"position":[[664,10]]}}}],["textfield",{"_index":2106,"t":{"252":{"position":[[2583,9]]}}}],["text，多行文本类型，换行使用\\n",{"_index":930,"t":{"141":{"position":[[538,19]]}}}],["th",{"_index":355,"t":{"62":{"position":[[224,2],[256,2],[297,2],[382,2],[450,2]]}}}],["thevolum",{"_index":5013,"t":{"516":{"position":[[112412,12]]}}}],["thfck",{"_index":5191,"t":{"516":{"position":[[127264,5]]}}}],["thinbackup",{"_index":426,"t":{"75":{"position":[[76,16],[93,17]]}}}],["threads=8",{"_index":2695,"t":{"344":{"position":[[37,9]]}}}],["throttl",{"_index":1924,"t":{"227":{"position":[[1188,9]]}}}],["throttle_class",{"_index":1617,"t":{"197":{"position":[[400,16]]},"215":{"position":[[501,16]]},"219":{"position":[[425,16]]}}}],["throttle_classess",{"_index":1839,"t":{"215":{"position":[[341,35]]}}}],["throttle_scop",{"_index":1849,"t":{"217":{"position":[[248,14],[314,14],[373,14]]}}}],["through",{"_index":2233,"t":{"256":{"position":[[1297,7]]}}}],["through='membership",{"_index":2242,"t":{"256":{"position":[[1600,21]]}}}],["through_field",{"_index":2252,"t":{"256":{"position":[[2082,14]]}}}],["through_fields=('group",{"_index":2243,"t":{"256":{"position":[[1632,24]]}}}],["through_fields参数指定从中间表模型membership",{"_index":2253,"t":{"256":{"position":[[2097,52]]}}}],["through_fields参数接收一个二元元组('field1",{"_index":2254,"t":{"256":{"position":[[2150,34]]}}}],["tier\":\"frontend\"，\"tier\":\"backend",{"_index":3884,"t":{"516":{"position":[[21508,39]]}}}],["time",{"_index":2464,"t":{"273":{"position":[[149,4]]},"342":{"position":[[92,4]]},"344":{"position":[[199,4],[346,4]]},"455":{"position":[[912,5]]},"479":{"position":[[52,5]]},"516":{"position":[[18405,5]]},"526":{"position":[[3350,5]]}}}],["time.sleep(300",{"_index":2699,"t":{"344":{"position":[[204,15]]}}}],["time_loc",{"_index":2958,"t":{"449":{"position":[[456,13]]}}}],["timefield",{"_index":1301,"t":{"184":{"position":[[2259,9]]},"252":{"position":[[2717,9]]}}}],["timefield(format=api_settings.time_format",{"_index":1302,"t":{"184":{"position":[[2269,42]]}}}],["timeout",{"_index":879,"t":{"137":{"position":[[934,10],[970,7]]},"269":{"position":[[190,10]]},"271":{"position":[[55,7],[105,7]]}}}],["timeout(tim",{"_index":881,"t":{"137":{"position":[[1089,13]]}}}],["timeoutsecond",{"_index":4003,"t":{"516":{"position":[[29225,15],[47786,14],[48318,15]]}}}],["timer_resolut",{"_index":3016,"t":{"451":{"position":[[1075,17],[1154,16]]}}}],["titl",{"_index":1187,"t":{"177":{"position":[[719,5],[1148,9],[1229,10]]}}}],["titlewelcom",{"_index":3860,"t":{"516":{"position":[[20085,13],[26235,13]]},"526":{"position":[[5030,13]]}}}],["tktkq",{"_index":4372,"t":{"516":{"position":[[63018,5]]}}}],["tl",{"_index":4571,"t":{"516":{"position":[[79975,3],[105425,3],[105429,3],[105586,4],[105653,3],[106227,4],[106232,3]]},"608":{"position":[[22,3],[26,3],[183,4],[250,3]]},"614":{"position":[[69,4],[74,3]]}}}],["tls.crt",{"_index":4920,"t":{"516":{"position":[[105342,7],[105461,7]]},"606":{"position":[[81,7]]},"608":{"position":[[58,7]]}}}],["tls.key",{"_index":4919,"t":{"516":{"position":[[105329,7],[105446,7]]},"606":{"position":[[68,7]]},"608":{"position":[[43,7]]}}}],["tlsv1",{"_index":3259,"t":{"493":{"position":[[333,5]]}}}],["tlsv1.1",{"_index":3260,"t":{"493":{"position":[[339,7]]}}}],["tlsv1.2",{"_index":3261,"t":{"493":{"position":[[347,8]]}}}],["tmp/healthi",{"_index":4180,"t":{"516":{"position":[[42159,12],[43576,12]]}}}],["tmp/hello.txt",{"_index":4075,"t":{"516":{"position":[[34441,15],[34552,15],[34568,18],[34626,15],[35146,14],[44995,51]]}}}],["tmp/hello.txt;whil",{"_index":4074,"t":{"516":{"position":[[34390,20]]}}}],["tmp/hello11.txt",{"_index":4204,"t":{"516":{"position":[[44685,19]]}}}],["tmp/memcached.sock",{"_index":2435,"t":{"269":{"position":[[1743,22]]}}}],["tmpf",{"_index":272,"t":{"42":{"position":[[191,6]]}}}],["tmp，如果参数值为true",{"_index":963,"t":{"149":{"position":[[367,47]]}}}],["to_field",{"_index":2222,"t":{"256":{"position":[[665,8]]}}}],["token",{"_index":3601,"t":{"516":{"position":[[7891,5],[7935,5],[9110,7],[9143,5],[19028,5],[19153,5],[19232,5],[130096,9],[130212,5],[130254,5],[130332,5],[130390,5],[130621,5],[130657,6],[131672,16]]},"526":{"position":[[3973,5],[4098,5],[4177,5]]}}}],["token来表明客户身份的一种方式。每个token对应一个用户名，当客户端发起api调用请求时，需要在http",{"_index":5110,"t":{"516":{"position":[[121256,55]]}}}],["token认证：通过一个token",{"_index":5109,"t":{"516":{"position":[[121207,24]]}}}],["toler",{"_index":3840,"t":{"516":{"position":[[19304,12],[38710,9],[58995,9],[63123,14],[63426,10],[63502,12],[63763,10],[63928,10]]},"526":{"position":[[4249,12]]},"555":{"position":[[282,9]]},"569":{"position":[[108,10]]},"571":{"position":[[108,10]]}}}],["toleration.yaml",{"_index":4377,"t":{"516":{"position":[[63360,20]]}}}],["tolerationsecond",{"_index":4384,"t":{"516":{"position":[[64194,17]]},"571":{"position":[[374,17]]}}}],["tolerations并具有notready:noexecute和unreachable:noexecute两种taints的pod设置默认的“容忍”时间，为5min",{"_index":5207,"t":{"516":{"position":[[128474,83]]}}}],["tomcat",{"_index":34,"t":{"21":{"position":[[70,14],[99,6],[144,6],[171,11],[225,11],[432,6],[478,7],[550,6]]},"25":{"position":[[151,6]]},"27":{"position":[[888,11],[1093,6],[1376,6],[1425,6],[1530,12],[1576,6],[1633,6],[1692,6],[1749,6]]},"516":{"position":[[103075,8],[103415,6],[103494,6],[103538,6],[103575,6],[103857,6],[103908,6],[104030,6],[104188,6],[104545,6],[105033,6],[105845,6],[106423,6]]},"593":{"position":[[41,6]]},"595":{"position":[[137,6]]},"601":{"position":[[200,6]]},"614":{"position":[[265,6]]}}}],["tomcat.itheima.com",{"_index":4902,"t":{"516":{"position":[[104481,18],[105012,18],[105622,18],[105781,18],[106402,18]]},"601":{"position":[[179,18]]},"608":{"position":[[219,18]]},"614":{"position":[[244,18]]}}}],["tomcat.itheima.com:32240",{"_index":4909,"t":{"516":{"position":[[105164,34]]}}}],["tomcat:/aaa/a.txt",{"_index":82,"t":{"23":{"position":[[1004,17]]}}}],["tomcat:8.5",{"_index":4892,"t":{"516":{"position":[[103589,10]]}}}],["tomcat[:vers",{"_index":40,"t":{"21":{"position":[[195,16],[248,16]]}}}],["tomcat的aaa文件夹下的a.txt",{"_index":81,"t":{"23":{"position":[[957,36]]}}}],["tool",{"_index":121,"t":{"27":{"position":[[711,5]]}}}],["tools/kubeadm/kubeadm",{"_index":3455,"t":{"516":{"position":[[2330,22]]},"518":{"position":[[165,22]]}}}],["tools：可定义在pipeline或stage部分。它会自动下载并安装我们指定的工具，并将其加入path",{"_index":857,"t":{"135":{"position":[[162,57]]}}}],["top",{"_index":96,"t":{"25":{"position":[[287,3]]},"516":{"position":[[80332,3],[80384,3],[80561,3]]},"577":{"position":[[34,3],[211,3]]}}}],["topologykey",{"_index":4304,"t":{"516":{"position":[[56907,11],[57168,11],[57268,25],[58313,12],[60422,12]]},"545":{"position":[[623,11],[884,11],[984,25]]},"549":{"position":[[518,12]]},"562":{"position":[[1008,12]]}}}],["total",{"_index":3916,"t":{"516":{"position":[[24318,5]]}}}],["touch",{"_index":299,"t":{"46":{"position":[[394,5],[954,5],[1316,5]]},"432":{"position":[[95,5]]},"504":{"position":[[2764,5]]},"516":{"position":[[34546,5]]}}}],["track_script",{"_index":3319,"t":{"504":{"position":[[1462,12],[2510,12]]}}}],["track_script块加入inst",{"_index":3318,"t":{"504":{"position":[[1434,27],[2482,27]]}}}],["transform",{"_index":607,"t":{"101":{"position":[[550,15]]}}}],["tree=arrs[attr1",{"_index":352,"t":{"62":{"position":[[176,16]]}}}],["tree参数进行数组过滤，eg",{"_index":350,"t":{"62":{"position":[[75,16]]}}}],["tri",{"_index":1685,"t":{"197":{"position":[[3702,4]]},"199":{"position":[[441,4]]},"264":{"position":[[71,4]]}}}],["trigger",{"_index":578,"t":{"92":{"position":[[1067,8]]}}}],["triggers：用于定义执行pipelin",{"_index":864,"t":{"135":{"position":[[476,28]]}}}],["trigger类是jenkins中用于触发构建过程的抽象类，同样实现了describable接口并提供相应的descriptor",{"_index":579,"t":{"92":{"position":[[1076,66]]}}}],["trim_whitespac",{"_index":1322,"t":{"184":{"position":[[2807,15]]}}}],["trim_whitespace=tru",{"_index":1253,"t":{"184":{"position":[[1152,21]]}}}],["true",{"_index":258,"t":{"34":{"position":[[4982,4]]},"110":{"position":[[1270,6]]},"141":{"position":[[124,5]]},"155":{"position":[[565,6]]},"184":{"position":[[2949,22]]},"188":{"position":[[1331,4],[5083,4],[5315,4]]},"190":{"position":[[2037,6],[2085,6]]},"197":{"position":[[5245,4]]},"254":{"position":[[955,30]]},"392":{"position":[[224,5],[276,5],[298,5]]},"394":{"position":[[96,5],[147,5],[170,5],[202,5],[258,5],[281,5],[315,5],[373,5],[396,5]]},"396":{"position":[[58,4],[78,5],[99,5],[120,4],[129,5],[166,5],[187,4],[196,5]]},"398":{"position":[[146,4]]},"400":{"position":[[73,5],[123,5],[145,5],[171,5],[222,5],[243,5],[267,5],[283,5]]},"402":{"position":[[143,5],[202,5],[257,5],[329,5],[351,5],[390,5],[460,5],[517,5],[579,5],[633,5],[655,5],[686,5],[708,5],[740,5],[762,5],[802,5],[824,5],[861,5],[883,5]]},"413":{"position":[[21,4]]},"516":{"position":[[10255,4],[10260,8],[18920,4],[19081,4],[19092,4],[19113,4],[19131,4],[24668,4],[24710,4],[79858,4],[86926,4],[87682,4],[90189,4]]},"526":{"position":[[3865,4],[4026,4],[4037,4],[4058,4],[4076,4]]}}}],["true;do",{"_index":90,"t":{"25":{"position":[[183,7]]},"516":{"position":[[34411,7],[34596,7],[35735,7],[97329,7],[97706,7],[115855,7],[116177,7]]}}}],["true或者false。默认为fals",{"_index":2164,"t":{"252":{"position":[[5819,44]]}}}],["true时，django在数据库用null保存空值。默认值为false。对于保存字符串类型数据的字段，请尽量避免将此参数设为true，那样会导致两种‘没有数据’的情况，一种是null，另一种是空字符串''。django",{"_index":2180,"t":{"254":{"position":[[82,112]]}}}],["true时，字段可以为空。默认false。和null参数不同的是，null是纯数据库层面的，而blank是验证相关的，它与表单验证是否允许输入框内为空有关，与数据库无关。所以要小心一个null为false，blank为true的字段接收到一个空值可能会出bug",{"_index":2182,"t":{"254":{"position":[[221,134]]}}}],["true，django将自动创建一个autofield自增字段，名为‘id’，并设置为主键。也就是id",{"_index":2202,"t":{"254":{"position":[[1360,71]]}}}],["true，表示django",{"_index":2294,"t":{"258":{"position":[[1672,42]]}}}],["true，表示使用代理模式的模型继承方式。具体内容与abstract",{"_index":2318,"t":{"258":{"position":[[3388,48]]}}}],["trunc",{"_index":30,"t":{"19":{"position":[[330,5]]},"23":{"position":[[431,5]]}}}],["try_fil",{"_index":3379,"t":{"508":{"position":[[595,17]]}}}],["tti",{"_index":251,"t":{"34":{"position":[[4711,3]]}}}],["ttwgg",{"_index":4539,"t":{"516":{"position":[[78061,5]]}}}],["tupl",{"_index":1118,"t":{"173":{"position":[[213,7]]},"175":{"position":[[994,7]]}}}],["txt",{"_index":604,"t":{"101":{"position":[[440,6],[504,3]]},"487":{"position":[[994,4]]},"516":{"position":[[35038,15]]}}}],["txt|text",{"_index":3243,"t":{"487":{"position":[[1045,14]]}}}],["type",{"_index":271,"t":{"42":{"position":[[149,4]]},"58":{"position":[[99,5]]},"516":{"position":[[11355,6],[19057,4],[19166,5],[19423,4],[24620,4],[24823,4],[25966,4],[26701,4],[27223,5],[33354,4],[41039,4],[52460,4],[58805,4],[69833,5],[72426,18],[72747,5],[73845,5],[80879,5],[81590,4],[85151,5],[93999,5],[95750,5],[96000,4],[96346,5],[98264,5],[98532,4],[98827,5],[99783,5],[100088,4],[100619,5],[102918,4],[103765,5],[103935,5],[104102,4],[109063,5],[109108,14],[119493,5],[119771,5],[129167,5],[129615,4],[130585,5]]},"526":{"position":[[4002,4],[4111,5],[4368,4]]},"555":{"position":[[92,4]]},"579":{"position":[[153,5]]},"585":{"position":[[215,4]]},"591":{"position":[[2077,5]]},"595":{"position":[[51,4]]}}}],["type=clusterip",{"_index":3943,"t":{"516":{"position":[[25814,14]]}}}],["type=nodeport",{"_index":3640,"t":{"516":{"position":[[9333,13],[26507,13],[81341,13]]},"583":{"position":[[60,13]]}}}],["type=volume,source=hello,target=/world",{"_index":281,"t":{"42":{"position":[[486,38]]}}}],["type=volume,volum",{"_index":296,"t":{"42":{"position":[[1146,18]]}}}],["typeerror",{"_index":1688,"t":{"197":{"position":[[3774,11]]}}}],["types=internalip,hostname,internaldns,externaldns,externalip",{"_index":4572,"t":{"516":{"position":[[80007,60]]}}}],["types_hash_max_s",{"_index":2970,"t":{"449":{"position":[[743,19]]}}}],["type指明的请求数据类型（如json、表单等）将请求数据进行parse解析，解析为类字典对象保存到request",{"_index":1511,"t":{"193":{"position":[[167,61]]}}}],["type，通常此参数无需传递，rest",{"_index":1540,"t":{"193":{"position":[[1381,19]]}}}],["type：指定资源类型，比如deployment、pod、servic",{"_index":3690,"t":{"516":{"position":[[11416,36]]}}}],["tzpdlpsyrfegtjzl6ynsgyavkc9id",{"_index":5253,"t":{"516":{"position":[[131486,29]]}}}],["u",{"_index":1129,"t":{"173":{"position":[[427,1]]},"311":{"position":[[83,1],[246,3]]},"402":{"position":[[547,1],[588,1]]}}}],["u):$(id",{"_index":3599,"t":{"516":{"position":[[7805,7]]}}}],["u.name_ch",{"_index":1128,"t":{"173":{"position":[[412,10]]}}}],["ubuntu",{"_index":282,"t":{"42":{"position":[[525,6],[1219,6]]},"46":{"position":[[353,6],[911,6],[1275,6]]}}}],["udp、tcp或sctp。默认为“tcp",{"_index":4102,"t":{"516":{"position":[[36546,30]]}}}],["uf",{"_index":266,"t":{"36":{"position":[[28,16]]}}}],["uid",{"_index":3780,"t":{"516":{"position":[[16375,4],[30814,3]]},"526":{"position":[[1320,4]]}}}],["ui风格太过于古老，因此simpleui",{"_index":1038,"t":{"160":{"position":[[15,34]]}}}],["umask",{"_index":5156,"t":{"516":{"position":[[124972,6]]}}}],["unauthor",{"_index":1807,"t":{"201":{"position":[[496,12]]}}}],["unavail",{"_index":3917,"t":{"516":{"position":[[24342,11],[24432,12]]}}}],["unchang",{"_index":3755,"t":{"516":{"position":[[14587,9],[14610,9]]},"524":{"position":[[270,9],[293,9]]}}}],["undo",{"_index":4510,"t":{"516":{"position":[[75694,4],[76321,4]]}}}],["unhealthi",{"_index":4199,"t":{"516":{"position":[[44604,9],[45858,9],[47058,9],[49158,9]]}}}],["unicod",{"_index":2668,"t":{"328":{"position":[[228,23]]}}}],["uniqu",{"_index":2111,"t":{"252":{"position":[[2858,6]]},"269":{"position":[[631,7]]}}}],["unique=tru",{"_index":2260,"t":{"256":{"position":[[2432,79]]}}}],["unique_togeth",{"_index":2336,"t":{"258":{"position":[[3988,15],[4224,26],[4255,15],[4409,91],[4501,15],[4586,28]]}}}],["unique和unique_for_d",{"_index":2196,"t":{"254":{"position":[[1149,28]]}}}],["unit",{"_index":411,"t":{"73":{"position":[[1142,6]]},"137":{"position":[[1107,5]]}}}],["univers",{"_index":2110,"t":{"252":{"position":[[2834,23]]}}}],["unix",{"_index":719,"t":{"112":{"position":[[370,11]]},"402":{"position":[[12,4]]},"516":{"position":[[109228,11]]}}}],["unix:/deploy/release/web_app/app.sock",{"_index":1079,"t":{"170":{"position":[[344,38],[1113,38]]}}}],["unix:/tmp/memcached.sock",{"_index":2432,"t":{"269":{"position":[[1553,27]]}}}],["unknown",{"_index":1064,"t":{"168":{"position":[[77,8]]},"516":{"position":[[19499,8],[33430,8],[52544,8],[54926,8],[55041,8],[58859,8]]},"526":{"position":[[4444,8]]},"535":{"position":[[109,8],[224,8]]},"555":{"position":[[146,8]]}}}],["unknown）：apiserver无法正常获取到pod",{"_index":4139,"t":{"516":{"position":[[39179,51]]}}}],["unpack_ipv4=fals",{"_index":1283,"t":{"184":{"position":[[1811,18]]},"252":{"position":[[1944,18]]}}}],["unset",{"_index":2732,"t":{"358":{"position":[[3,5],[22,5],[42,18]]},"389":{"position":[[13,5],[38,5],[114,5]]},"516":{"position":[[96384,6],[98858,6]]}}}],["unstabl",{"_index":851,"t":{"132":{"position":[[346,23]]}}}],["unstash(\"abc",{"_index":995,"t":{"151":{"position":[[826,14]]}}}],["unstash步骤只有一个name参数，即stash时的唯一标识。通常stash与unstash",{"_index":986,"t":{"151":{"position":[[542,63]]}}}],["unstash：取出之前stash",{"_index":985,"t":{"151":{"position":[[520,21]]}}}],["until",{"_index":2804,"t":{"413":{"position":[[0,5],[31,5],[75,5],[81,25],[115,5],[127,5]]},"516":{"position":[[40588,6],[40729,6]]}}}],["up",{"_index":3868,"t":{"516":{"position":[[20559,2],[23791,2],[23838,2],[23941,2],[24942,2],[41820,2],[41899,2],[70715,2],[70836,2],[71510,2],[76512,2],[81450,2],[82908,2],[86012,2]]},"526":{"position":[[5504,2]]},"585":{"position":[[75,2]]},"589":{"position":[[788,2]]}}}],["updat",{"_index":190,"t":{"34":{"position":[[1155,6]]},"197":{"position":[[4568,6]]},"199":{"position":[[80,8]]},"485":{"position":[[116,9]]},"516":{"position":[[24306,7],[68321,7],[72917,7],[74071,7],[77349,7],[77568,10],[123455,9]]}}}],["update(request",{"_index":1698,"t":{"197":{"position":[[4376,25]]}}}],["update(self",{"_index":1459,"t":{"188":{"position":[[3824,12],[4377,12]]},"197":{"position":[[4601,12]]}}}],["updatemodelmixin(object",{"_index":1701,"t":{"197":{"position":[[4538,25]]}}}],["updatestrategi",{"_index":4653,"t":{"516":{"position":[[85128,15]]}}}],["update中间件必须放在列表的开始位置，而fectch",{"_index":2484,"t":{"273":{"position":[[1037,39]]}}}],["upgrad",{"_index":2918,"t":{"442":{"position":[[260,7]]}}}],["upload",{"_index":1853,"t":{"217":{"position":[[390,9],[556,10]]},"252":{"position":[[3284,6],[3386,6],[3690,6]]}}}],["upload_date_from",{"_index":2361,"t":{"264":{"position":[[341,16],[1005,17],[1023,16],[1090,16],[1181,18],[1206,16]]}}}],["upload_date_to",{"_index":2363,"t":{"264":{"position":[[396,14]]}}}],["upload_to",{"_index":2115,"t":{"252":{"position":[[3162,35],[3476,41]]}}}],["uploadview(apiview",{"_index":1852,"t":{"217":{"position":[[352,20]]}}}],["upstream",{"_index":1076,"t":{"170":{"position":[[304,8]]},"449":{"position":[[1406,8]]},"455":{"position":[[32,11],[70,8],[127,8],[448,12],[713,12],[845,12],[945,12],[964,8],[1142,8],[1248,8],[1635,8],[1941,13],[1959,8]]},"487":{"position":[[432,8]]}}}],["upstream_cache_statu",{"_index":3241,"t":{"487":{"position":[[743,22],[1326,22]]}}}],["up）不挂断的运行，注意并没有后台运行的功能，就是指用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开ssh连接都不会影响他的运行，注意了nohup",{"_index":2618,"t":{"305":{"position":[[47,105]]}}}],["uri",{"_index":2990,"t":{"449":{"position":[[1400,3]]},"455":{"position":[[1536,3]]},"457":{"position":[[1711,3],[1990,3],[4446,4],[5242,3]]},"459":{"position":[[281,3],[769,3]]},"487":{"position":[[985,3]]},"516":{"position":[[42324,6],[43777,6],[46588,6]]}}}],["url",{"_index":155,"t":{"30":{"position":[[84,11]]},"199":{"position":[[1643,6],[2723,6]]},"232":{"position":[[601,3],[622,6],[639,3]]},"234":{"position":[[77,8],[140,14]]},"236":{"position":[[438,3],[540,3],[611,3],[843,33],[923,3]]},"238":{"position":[[201,3],[321,3],[341,3]]},"240":{"position":[[20,3],[606,4]]},"242":{"position":[[44,14],[59,8]]},"252":{"position":[[4042,12]]},"273":{"position":[[333,12]]},"350":{"position":[[417,6],[461,6]]},"372":{"position":[[153,5],[192,5],[224,5]]},"374":{"position":[[581,9],[624,10]]},"457":{"position":[[2920,3],[2994,4],[3006,4],[3243,3],[3390,3],[3448,3],[3895,3],[3951,3],[5076,4],[5186,3],[5195,3],[5220,3],[5233,3],[5260,3],[5281,3],[5425,3],[5467,3],[5491,3],[5499,3],[5579,3],[5617,3],[5655,3],[5751,3],[5789,3],[5827,3]]},"459":{"position":[[285,12],[310,11],[441,3]]}}}],["url(r'^book",{"_index":1622,"t":{"197":{"position":[[572,16]]},"199":{"position":[[666,16],[1666,16],[2746,16]]}}}],["url(r'^books/(?p<pk>\\d",{"_index":1646,"t":{"197":{"position":[[1782,28]]},"199":{"position":[[724,28],[1732,28],[2887,28]]}}}],["url(r'^books/(?p<pk>\\d+)/read",{"_index":1788,"t":{"199":{"position":[[2969,33]]}}}],["url(r'^books/latest",{"_index":1786,"t":{"199":{"position":[[2812,23]]}}}],["url:www.runoob.com",{"_index":2740,"t":{"369":{"position":[[424,18]]},"422":{"position":[[28,18]]}}}],["url=\"http://c.baidu.net",{"_index":2726,"t":{"350":{"position":[[387,24]]}}}],["url=\"http://c.baidu.net/shel",{"_index":2727,"t":{"350":{"position":[[424,31]]}}}],["url=\"http://c.biancheng.net/index.html",{"_index":2755,"t":{"374":{"position":[[536,39]]}}}],["url=\"http://c.biancheng.net/shel",{"_index":2742,"t":{"372":{"position":[[81,35]]}}}],["url>http://maven.aliyun.com/nexus/content/groups/public/</url",{"_index":439,"t":{"78":{"position":[[314,63]]}}}],["urlconf",{"_index":2014,"t":{"240":{"position":[[157,7]]},"242":{"position":[[34,9],[542,11],[554,13]]},"244":{"position":[[0,8]]}}}],["urlconf(url",{"_index":1976,"t":{"234":{"position":[[27,19]]}}}],["urlfield",{"_index":1264,"t":{"184":{"position":[[1427,8]]},"252":{"position":[[2786,8]]}}}],["urlfield(max_length=200",{"_index":1265,"t":{"184":{"position":[[1436,24]]}}}],["urlpattern",{"_index":1057,"t":{"166":{"position":[[96,11]]},"199":{"position":[[650,11],[1650,11],[2730,11]]},"236":{"position":[[175,11]]},"240":{"position":[[243,11]]},"242":{"position":[[8,11],[110,11],[344,11]]},"244":{"position":[[155,11]]},"273":{"position":[[399,11],[634,11]]}}}],["urlpatterns列表，列表的每个元素都是一项path，每一项path都是以path",{"_index":1978,"t":{"236":{"position":[[0,64]]}}}],["urls.pi",{"_index":1958,"t":{"232":{"position":[[50,7]]},"273":{"position":[[622,11]]},"277":{"position":[[17,7]]}}}],["urls.py要改变的依赖要改变，要在所有依赖前加上app",{"_index":2557,"t":{"287":{"position":[[44,36]]}}}],["url}index.html",{"_index":2748,"t":{"372":{"position":[[259,17]]}}}],["url中的祖先节点。例如：@ancestorinpath",{"_index":497,"t":{"85":{"position":[[557,39]]}}}],["url前缀被重复使用时，可以使用includ",{"_index":2027,"t":{"242":{"position":[[249,36]]}}}],["url地址的字符串类型，默认最大长度200",{"_index":2109,"t":{"252":{"position":[[2795,28]]}}}],["url对应的方法，就会调用标注了@staplerfallback的方法。如果没有标注@staplerfallback的方法，则会返回404",{"_index":490,"t":{"85":{"position":[[250,93]]}}}],["url属性，在django的模板中方便的访问这些文件。例如，假设你有一个imagefield字段，名叫mug_shot，那么在django模板的html",{"_index":2149,"t":{"252":{"position":[[4950,122]]}}}],["url，你需要创建一个python",{"_index":1975,"t":{"234":{"position":[[0,26]]}}}],["url：http://127.0.0.1/aaa/test.html",{"_index":3146,"t":{"457":{"position":[[6211,37]]}}}],["url：http://127.0.0.1/aaatest.html",{"_index":3147,"t":{"457":{"position":[[6324,36]]}}}],["url：http://127.0.0.1/proxy/test.html",{"_index":3144,"t":{"457":{"position":[[6111,39]]}}}],["url：http://127.0.0.1/test.html",{"_index":3143,"t":{"457":{"position":[[6006,33]]}}}],["urn:uuid:5ce0e9a5",{"_index":1280,"t":{"184":{"position":[[1716,18]]}}}],["us",{"_index":1419,"t":{"188":{"position":[[1109,3]]},"254":{"position":[[1277,3]]},"449":{"position":[[230,3]]},"453":{"position":[[0,4],[23,3]]},"516":{"position":[[13166,3],[20148,5],[125847,3],[126170,3],[126972,3],[127352,3]]},"526":{"position":[[5093,5]]}}}],["use_temp_path",{"_index":3189,"t":{"475":{"position":[[428,23]]}}}],["use_temp_path=off",{"_index":3231,"t":{"487":{"position":[[413,18]]}}}],["use_temp_path=on|off",{"_index":3174,"t":{"475":{"position":[[54,22]]}}}],["use_url=uploaded_files_use_url",{"_index":1312,"t":{"184":{"position":[[2525,31],[2620,31]]}}}],["usedefaultexcludes：布尔类型，如果为true，则代表使用",{"_index":983,"t":{"151":{"position":[[394,53]]}}}],["user",{"_index":243,"t":{"34":{"position":[[4361,4],[4374,7],[4396,4],[4440,12],[4496,7],[4592,4]]},"173":{"position":[[143,8]]},"175":{"position":[[232,4],[299,5],[387,4],[864,4]]},"197":{"position":[[1563,4]]},"215":{"position":[[258,7]]},"217":{"position":[[100,13]]},"256":{"position":[[291,4],[317,5]]},"449":{"position":[[12,4]]},"451":{"position":[[0,5],[45,4],[67,4]]},"516":{"position":[[31976,5],[120701,4],[123787,4],[124127,4],[124704,4],[126036,4],[126605,4]]}}}],["user.accounts.al",{"_index":1642,"t":{"197":{"position":[[1595,19]]}}}],["user.target",{"_index":422,"t":{"73":{"position":[[1368,11]]}}}],["user=devman",{"_index":5180,"t":{"516":{"position":[[125781,11]]}}}],["user=root",{"_index":415,"t":{"73":{"position":[[1224,9]]}}}],["user_directory_path(inst",{"_index":2121,"t":{"252":{"position":[[3522,29]]}}}],["user_directory_path这种回调函数，必须接收两个参数，然后返回一个unix风格的路径字符串。参数instace代表一个定义了filefield的模型的实例，说白了就是当前数据记录。filenam",{"_index":2126,"t":{"252":{"position":[[3747,118]]}}}],["user_permiss",{"_index":1163,"t":{"175":{"position":[[1128,18]]}}}],["user_{0}/{1}'.format(instance.user.id",{"_index":2124,"t":{"252":{"position":[[3611,39]]}}}],["useradd",{"_index":246,"t":{"34":{"position":[[4566,7],[4796,7]]},"46":{"position":[[364,7],[922,7],[1286,7]]}}}],["useradmin",{"_index":1131,"t":{"175":{"position":[[34,9],[115,9]]}}}],["userflag",{"_index":922,"t":{"141":{"position":[[153,11]]},"155":{"position":[[395,11]]}}}],["usernam",{"_index":1141,"t":{"175":{"position":[[340,8],[485,12]]},"451":{"position":[[50,8]]},"516":{"position":[[35807,10],[36074,9],[119309,11],[119512,9],[119812,9],[120435,8]]},"642":{"position":[[98,8]]}}}],["username:admin",{"_index":5081,"t":{"516":{"position":[[118018,14],[118331,14],[119030,14]]}}}],["usernamefield",{"_index":1134,"t":{"175":{"position":[[163,13],[498,14]]}}}],["userratethrottl",{"_index":1841,"t":{"215":{"position":[[415,16],[520,19]]},"219":{"position":[[209,16],[444,19]]}}}],["users(self",{"_index":1127,"t":{"173":{"position":[[373,11]]}}}],["usership",{"_index":1156,"t":{"175":{"position":[[754,8]]}}}],["usershipinlin",{"_index":1112,"t":{"173":{"position":[[73,16]]},"175":{"position":[[879,17]]}}}],["usershipinline(admin.tabularinlin",{"_index":1150,"t":{"175":{"position":[[519,36]]}}}],["userspac",{"_index":4756,"t":{"516":{"position":[[92765,9]]},"591":{"position":[[843,9]]}}}],["userspace模式下，kub",{"_index":4757,"t":{"516":{"position":[[92779,17]]},"591":{"position":[[857,17]]}}}],["user、groups、serviceaccount",{"_index":5124,"t":{"516":{"position":[[122345,29]]}}}],["user、group或者serviceaccount",{"_index":5140,"t":{"516":{"position":[[123522,56]]}}}],["usr/bin/env",{"_index":612,"t":{"103":{"position":[[189,14],[384,14]]},"107":{"position":[[147,14]]}}}],["usr/bin/nginx",{"_index":2917,"t":{"442":{"position":[[245,14]]}}}],["usr/bin，/usr/sbin",{"_index":2718,"t":{"347":{"position":[[162,18]]}}}],["usr/lib/systemd/system/nginx.servic",{"_index":2920,"t":{"442":{"position":[[295,37]]}}}],["usr/lib64/nginx/modul",{"_index":2921,"t":{"442":{"position":[[346,24]]}}}],["usr/loc",{"_index":115,"t":{"27":{"position":[[638,10],[1070,11],[1113,11],[1195,10]]}}}],["usr/local/apach",{"_index":144,"t":{"27":{"position":[[1358,17],[1407,17],[1556,19],[1613,19],[1674,17],[1731,17]]}}}],["usr/local/bin/gosu",{"_index":253,"t":{"34":{"position":[[4844,19],[4945,19]]}}}],["usr/local/cincontainer.txt",{"_index":131,"t":{"27":{"position":[[991,27]]}}}],["usr/local/jdk1.8.0_171",{"_index":140,"t":{"27":{"position":[[1255,23]]}}}],["usr/sbin/nginx",{"_index":2919,"t":{"442":{"position":[[268,15]]},"516":{"position":[[42818,20]]}}}],["usr/share/doc/nginx",{"_index":2922,"t":{"442":{"position":[[390,20],[418,20],[454,20],[489,20],[532,20]]}}}],["usr/share/nginx/html",{"_index":2936,"t":{"442":{"position":[[809,22]]},"449":{"position":[[1014,22]]},"457":{"position":[[2265,21],[2546,22]]},"493":{"position":[[408,22]]}}}],["usr/share/nginx/html/1010",{"_index":3222,"t":{"487":{"position":[[94,27]]}}}],["usr/share/nginx/html/1020",{"_index":3224,"t":{"487":{"position":[[184,27]]}}}],["usr/share/nginx/html/404.html",{"_index":2931,"t":{"442":{"position":[[595,30]]}}}],["usr/share/nginx/html/50x.html",{"_index":2932,"t":{"442":{"position":[[626,30]]}}}],["usr/share/nginx/html/bbs/index.html",{"_index":3089,"t":{"457":{"position":[[2484,36]]}}}],["usr/share/nginx/html/index.html",{"_index":2933,"t":{"442":{"position":[[657,32]]},"516":{"position":[[42740,34],[95334,32]]}}}],["usr/share/nginx/html/match_all/index.html",{"_index":3082,"t":{"457":{"position":[[2186,48]]}}}],["usr/share/nginx/html/nginx",{"_index":3072,"t":{"457":{"position":[[757,27],[905,27],[1046,27],[1192,27]]}}}],["usr/share/nginx/imag",{"_index":3087,"t":{"457":{"position":[[2421,24]]}}}],["usr/share/nginx/images/1.jpg",{"_index":3085,"t":{"457":{"position":[[2344,29]]}}}],["usr/src/redi",{"_index":197,"t":{"34":{"position":[[1292,14],[1337,14],[1386,14],[1414,14],[1502,14]]}}}],["utf",{"_index":974,"t":{"149":{"position":[[806,4]]}}}],["util",{"_index":4976,"t":{"516":{"position":[[110129,5],[110497,5]]}}}],["utils.run_async_tasks(get",{"_index":2713,"t":{"344":{"position":[[609,26]]}}}],["uuid",{"_index":2006,"t":{"238":{"position":[[172,4],[188,4],[275,4]]},"252":{"position":[[6292,4]]},"344":{"position":[[416,4]]}}}],["uuid.uuid4",{"_index":2706,"t":{"344":{"position":[[441,12]]}}}],["uuidfield",{"_index":1266,"t":{"184":{"position":[[1497,9]]},"252":{"position":[[2824,9],[6242,9]]}}}],["uuidfield(format='hex_verbos",{"_index":1267,"t":{"184":{"position":[[1507,31]]}}}],["uuid，因此需要如下使用default",{"_index":2174,"t":{"252":{"position":[[6252,32]]}}}],["uwsgi",{"_index":2693,"t":{"344":{"position":[[13,11]]}}}],["uwsgi_connect_timeout",{"_index":1085,"t":{"170":{"position":[[496,21]]}}}],["uwsgi_param",{"_index":1105,"t":{"170":{"position":[[1060,13]]}}}],["uwsgi_pass",{"_index":1098,"t":{"170":{"position":[[837,10],[1102,10]]}}}],["uwsgi_read_timeout",{"_index":1086,"t":{"170":{"position":[[523,18]]}}}],["uwsgi_send_timeout",{"_index":1083,"t":{"170":{"position":[[472,18]]}}}],["uwsgi运行的django",{"_index":1106,"t":{"170":{"position":[[1076,16]]}}}],["v",{"_index":65,"t":{"23":{"position":[[256,1]]},"34":{"position":[[3647,1]]},"42":{"position":[[17,2]]},"313":{"position":[[72,1],[128,1]]},"444":{"position":[[36,1],[91,1]]}}}],["v0.3.6",{"_index":4562,"t":{"516":{"position":[[79621,6]]}}}],["v1",{"_index":3744,"t":{"516":{"position":[[13623,2],[13678,2],[16230,2],[16990,2],[20857,2],[22836,2],[27053,2],[27737,2],[27740,12],[30268,2],[30427,2],[31561,2],[31915,2],[32660,2],[34214,2],[35597,2],[36306,2],[36619,2],[37469,2],[40344,2],[42470,2],[43929,2],[45103,2],[46310,2],[48064,2],[48688,2],[50083,2],[51405,2],[54136,2],[55805,2],[57496,2],[57988,2],[60098,2],[63393,2],[81968,3],[93869,2],[95602,2],[98107,2],[99687,2],[100544,2],[103656,2],[103824,2],[107403,2],[108668,2],[110557,2],[111766,2],[113131,2],[113329,2],[113527,2],[114174,2],[114588,2],[114734,2],[114880,2],[115722,2],[116044,2],[117944,2],[118434,2],[119439,2],[119878,2],[129051,2]]},"522":{"position":[[77,2],[132,2]]},"526":{"position":[[1175,2],[1935,2],[5802,2]]},"541":{"position":[[301,2]]},"545":{"position":[[1212,2]]},"549":{"position":[[193,2]]},"562":{"position":[[684,2]]},"585":{"position":[[593,3]]},"591":{"position":[[1947,2]]},"620":{"position":[[314,2]]}}}],["v1.13",{"_index":3770,"t":{"516":{"position":[[15645,21]]},"526":{"position":[[590,21]]}}}],["v1.17.4",{"_index":3608,"t":{"516":{"position":[[8132,7],[8165,7],[8198,7]]}}}],["v4wvc",{"_index":4541,"t":{"516":{"position":[[78112,5]]}}}],["v6jqw",{"_index":3909,"t":{"516":{"position":[[23695,5]]}}}],["v7rhr",{"_index":4697,"t":{"516":{"position":[[88813,5],[88843,5],[88873,5],[89209,5],[89302,5]]}}}],["valid",{"_index":1330,"t":{"184":{"position":[[3027,10]]},"188":{"position":[[2185,42],[2751,32]]},"254":{"position":[[1693,10]]},"277":{"position":[[209,10]]}}}],["validate(self",{"_index":1444,"t":{"188":{"position":[[2301,14]]}}}],["validate_btitle(self",{"_index":1438,"t":{"188":{"position":[[1803,21]]}}}],["validated_data",{"_index":1410,"t":{"188":{"position":[[227,37],[3760,16],[3847,16],[4298,16],[4400,16]]}}}],["validated_data.get('bcom",{"_index":1467,"t":{"188":{"position":[[4109,30],[4662,30]]}}}],["validated_data.get('bpub_d",{"_index":1463,"t":{"188":{"position":[[3976,31],[4529,31]]}}}],["validated_data.get('bread",{"_index":1465,"t":{"188":{"position":[[4045,27],[4598,27]]}}}],["validated_data.get('btitl",{"_index":1461,"t":{"188":{"position":[[3909,28],[4462,28]]}}}],["validated_data完成数据对象的创建，可以通过实现create()和upd",{"_index":1456,"t":{"188":{"position":[[3605,68]]}}}],["validationerror",{"_index":1925,"t":{"227":{"position":[[1205,15]]}}}],["validators=[about_django",{"_index":1455,"t":{"188":{"position":[[3075,26]]}}}],["valu",{"_index":220,"t":{"34":{"position":[[2617,7]]},"110":{"position":[[1043,5],[1070,9]]},"139":{"position":[[321,6],[1146,6]]},"155":{"position":[[407,7],[558,6],[599,6],[648,6],[690,6],[735,6]]},"188":{"position":[[1825,7],[1925,5]]},"275":{"position":[[1298,7],[1336,7],[1436,6]]},"350":{"position":[[212,10],[234,5],[276,5]]},"516":{"position":[[28508,6],[29113,6],[35818,6],[35852,6],[53450,6],[53698,6],[53933,7],[54017,7],[54447,7],[55254,13],[56129,7],[56992,6],[57217,6],[58291,7],[59011,7],[60406,7],[63570,6],[63587,11],[64098,5],[65396,7],[70118,7],[85391,7],[87104,7],[90282,7],[119106,5]]},"541":{"position":[[625,7]]},"545":{"position":[[708,6],[933,6]]},"549":{"position":[[496,7]]},"562":{"position":[[992,7]]},"571":{"position":[[278,5]]}}}],["value.low",{"_index":1439,"t":{"188":{"position":[[1852,14],[2828,14]]}}}],["value2",{"_index":2762,"t":{"379":{"position":[[55,6]]}}}],["valuen",{"_index":2763,"t":{"379":{"position":[[66,7]]}}}],["values:[\"pro\",\"yyi",{"_index":4318,"t":{"516":{"position":[[59037,20]]}}}],["value的运算符，支持equal和exist",{"_index":4383,"t":{"516":{"position":[[64133,28]]},"571":{"position":[[313,28]]}}}],["var",{"_index":596,"t":{"101":{"position":[[138,4],[351,4]]},"409":{"position":[[40,3]]},"432":{"position":[[477,6],[539,6],[1819,4],[1865,4],[2521,4],[2600,6],[2640,7]]}}}],["var##*",{"_index":2883,"t":{"432":{"position":[[1957,10],[1975,10]]}}}],["var##?",{"_index":2882,"t":{"432":{"position":[[1932,10]]}}}],["var##test",{"_index":2884,"t":{"432":{"position":[[1995,12]]}}}],["var#?",{"_index":2880,"t":{"432":{"position":[[1908,9]]}}}],["var%%s*",{"_index":2879,"t":{"432":{"position":[[1886,11]]}}}],["var%pattern},${var%%pattern},${var#pattern},${var##pattern",{"_index":2867,"t":{"432":{"position":[[1178,61]]}}}],["var%s*",{"_index":2877,"t":{"432":{"position":[[1840,10]]}}}],["var//o/h",{"_index":2899,"t":{"432":{"position":[[2765,11]]}}}],["var//pattern/pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern",{"_index":2891,"t":{"432":{"position":[[2397,67]]}}}],["var/lib/apt/list",{"_index":202,"t":{"34":{"position":[[1449,20]]}}}],["var/lib/cni",{"_index":3620,"t":{"516":{"position":[[8668,13]]}}}],["var/lib/kubelet",{"_index":3621,"t":{"516":{"position":[[8689,18]]}}}],["var/log/messag",{"_index":3346,"t":{"504":{"position":[[4312,17]]}}}],["var/log/nginx",{"_index":2934,"t":{"442":{"position":[[704,14]]},"516":{"position":[[107589,14],[107635,14],[108852,14],[110736,14]]}}}],["var/log/nginx/access.log",{"_index":2964,"t":{"449":{"position":[[584,25]]}}}],["var/log/nginx/error.log",{"_index":2948,"t":{"449":{"position":[[110,24]]}}}],["var/o/h",{"_index":2897,"t":{"432":{"position":[[2719,10]]}}}],["var/pattern/pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern",{"_index":2890,"t":{"432":{"position":[[2331,65]]}}}],["var/run/nginx.pid",{"_index":2950,"t":{"449":{"position":[[163,19]]}}}],["var/run/secrets/kubernetes.io/serviceaccount",{"_index":3831,"t":{"516":{"position":[[18969,45]]},"526":{"position":[[3914,45]]}}}],["var/test.sh",{"_index":2782,"t":{"402":{"position":[[39,18]]}}}],["var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var",{"_index":2864,"t":{"432":{"position":[[814,70]]}}}],["var:1:4",{"_index":2896,"t":{"432":{"position":[[2681,10]]}}}],["var:5",{"_index":2895,"t":{"432":{"position":[[2561,8]]}}}],["var:=str",{"_index":2863,"t":{"432":{"position":[[761,50]]}}}],["var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把str",{"_index":2866,"t":{"432":{"position":[[923,112]]}}}],["var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2",{"_index":2889,"t":{"432":{"position":[[2249,81]]}}}],["var:num},${var:num1:num2},${var/pattern/pattern},${var//pattern/pattern",{"_index":2885,"t":{"432":{"position":[[2024,74]]}}}],["var:num}，这种模式时，shell在var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var",{"_index":2886,"t":{"432":{"position":[[2099,121]]}}}],["var=/home/cento",{"_index":2893,"t":{"432":{"position":[[2482,16]]}}}],["var=testcas",{"_index":2875,"t":{"432":{"position":[[1799,12]]}}}],["variabl",{"_index":2724,"t":{"350":{"position":[[203,8]]},"362":{"position":[[48,10],[109,10],[206,10]]},"457":{"position":[[4176,9]]}}}],["variable##pattern",{"_index":2872,"t":{"432":{"position":[[1558,20]]}}}],["variable#pattern",{"_index":2870,"t":{"432":{"position":[[1448,25]]}}}],["variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把vari",{"_index":2869,"t":{"432":{"position":[[1350,97]]}}}],["variable%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把vari",{"_index":2868,"t":{"432":{"position":[[1240,102]]}}}],["variable=\"valu",{"_index":2723,"t":{"350":{"position":[[186,16]]}}}],["variable=$(command",{"_index":2735,"t":{"360":{"position":[[54,19]]}}}],["variable='valu",{"_index":2722,"t":{"350":{"position":[[169,16]]}}}],["variable=`command",{"_index":2734,"t":{"360":{"position":[[35,18]]}}}],["variable=valu",{"_index":2721,"t":{"350":{"position":[[137,14]]}}}],["variable_nam",{"_index":2733,"t":{"358":{"position":[[28,13]]}}}],["variables”复选框，单击“add",{"_index":950,"t":{"143":{"position":[[720,40]]}}}],["variable的值，其中，只有在pattern中使用了匹配符号时，%和%%，#和##才有区别。结构中的pattern",{"_index":2874,"t":{"432":{"position":[[1656,140]]}}}],["vars/sayhi.groovi",{"_index":625,"t":{"107":{"position":[[17,17]]}}}],["vars/yourstepname.groovi",{"_index":610,"t":{"103":{"position":[[142,24],[214,24]]}}}],["vars目录下新建一个step",{"_index":624,"t":{"107":{"position":[[0,16]]}}}],["vary_on_head",{"_index":2490,"t":{"273":{"position":[[1593,17],[1803,15]]}}}],["vary_on_headers('us",{"_index":2495,"t":{"273":{"position":[[1819,22]]}}}],["vary头部通知缓存机制需要考虑请求头里的cooki",{"_index":2493,"t":{"273":{"position":[[1722,39]]}}}],["var的值，即空值。(因为变量var",{"_index":2865,"t":{"432":{"position":[[885,35]]}}}],["vcwr5",{"_index":4589,"t":{"516":{"position":[[80665,5]]},"577":{"position":[[315,5]]}}}],["verb",{"_index":5131,"t":{"516":{"position":[[122795,6],[123043,6],[123402,18],[126435,6]]}}}],["verbose_nam",{"_index":1228,"t":{"184":{"position":[[191,18],[299,19],[361,19],[429,18]]},"254":{"position":[[1529,12]]},"258":{"position":[[4954,12],[5023,12],[5046,12],[5273,12]]}}}],["verbose_name_plur",{"_index":1158,"t":{"175":{"position":[[773,19]]},"258":{"position":[[276,19],[5098,19],[5192,19],[5224,19],[5251,19]]}}}],["verbose_name加上‘",{"_index":2347,"t":{"258":{"position":[[5286,36]]}}}],["verison}.jar",{"_index":940,"t":{"143":{"position":[[324,15]]}}}],["version",{"_index":759,"t":{"112":{"position":[[1648,7]]},"143":{"position":[[264,7]]},"230":{"position":[[60,7]]},"271":{"position":[[710,7],[880,9]]},"516":{"position":[[8098,7],[12653,7],[13157,8],[22774,7],[22894,8],[30259,8],[30418,8],[30915,8],[31552,8],[36297,8],[92509,7],[93577,7]]},"591":{"position":[[587,7],[1655,7]]}}}],["version!=2.0",{"_index":3898,"t":{"516":{"position":[[22659,12]]}}}],["version\":\"releas",{"_index":3881,"t":{"516":{"position":[[21391,25]]}}}],["version\":\"st",{"_index":3882,"t":{"516":{"position":[[21417,24]]}}}],["version='2.0",{"_index":776,"t":{"114":{"position":[[288,14]]}}}],["version=1.0",{"_index":223,"t":{"34":{"position":[[2742,11]]},"516":{"position":[[22161,11]]}}}],["version=2.0",{"_index":3894,"t":{"516":{"position":[[22260,11],[22450,11],[22512,11],[22604,11]]}}}],["version=v1.17.4",{"_index":3591,"t":{"516":{"position":[[7573,15]]}}}],["vgroup",{"_index":3543,"t":{"516":{"position":[[5730,14]]}}}],["vi",{"_index":3287,"t":{"504":{"position":[[527,2],[2840,2],[3372,2],[3450,16]]}}}],["vi_1",{"_index":3302,"t":{"504":{"position":[[1021,28],[1064,4],[2070,28],[2113,4]]}}}],["vieux/sshf",{"_index":287,"t":{"42":{"position":[[693,11],[737,11],[818,11],[835,11],[910,11]]}}}],["view",{"_index":1638,"t":{"197":{"position":[[1367,4]]},"211":{"position":[[103,5],[119,12],[170,5],[193,11],[295,5]]},"227":{"position":[[803,4],[880,6]]},"236":{"position":[[169,5]]},"240":{"position":[[237,5]]},"242":{"position":[[338,5]]},"244":{"position":[[149,5]]}}}],["views.article_detail",{"_index":1988,"t":{"236":{"position":[[406,22]]},"240":{"position":[[537,22]]}}}],["views.article_detail(request",{"_index":1999,"t":{"236":{"position":[[949,29]]}}}],["views.bookdetailview.as_view",{"_index":1647,"t":{"197":{"position":[[1811,32]]}}}],["views.bookinfoviewset.as_view({'get",{"_index":1774,"t":{"199":{"position":[[1683,37],[1761,37],[2763,37],[2836,37],[2916,37]]}}}],["views.bookinfoviewset.as_view({'put",{"_index":1789,"t":{"199":{"position":[[3003,37]]}}}],["views.booklistview.as_view",{"_index":1623,"t":{"197":{"position":[[589,30]]}}}],["views.discuss",{"_index":2035,"t":{"242":{"position":[[478,15]]}}}],["views.edit",{"_index":2033,"t":{"242":{"position":[[448,12]]}}}],["views.histori",{"_index":2031,"t":{"242":{"position":[[418,15]]}}}],["views.month_arch",{"_index":1986,"t":{"236":{"position":[[331,21]]},"240":{"position":[[435,21]]}}}],["views.month_archive(request",{"_index":1992,"t":{"236":{"position":[[636,28]]}}}],["views.permiss",{"_index":2037,"t":{"242":{"position":[[515,19]]}}}],["views.pi",{"_index":1965,"t":{"232":{"position":[[158,8]]},"247":{"position":[[208,8]]},"273":{"position":[[535,12]]},"277":{"position":[[122,8]]}}}],["views.special_case_2003",{"_index":1982,"t":{"236":{"position":[[214,25]]},"240":{"position":[[282,25]]}}}],["views.year_arch",{"_index":1984,"t":{"236":{"position":[[269,20]]},"240":{"position":[[351,20]]},"244":{"position":[[196,19]]}}}],["viewset",{"_index":1750,"t":{"199":{"position":[[0,33],[819,7]]}}}],["viewset中，没有提供任何动作action方法，需要我们自己实现act",{"_index":1765,"t":{"199":{"position":[[958,44]]}}}],["viewset主要通过继承viewsetmixin来实现在调用as_view()时传入字典（如{'get':'list",{"_index":1764,"t":{"199":{"position":[[887,70]]}}}],["viewset视图集类不再实现get()、post",{"_index":1752,"t":{"199":{"position":[[109,37]]}}}],["viewset通常并不方便，因为list、retrieve、create、update、destory等方法都需要自己编写，而这些方法与前面讲过的mixin扩展类提供的方法同名，所以我们可以通过继承mixin扩展类来复用这些方法而无需自己编写。但是mixin扩展类依赖与genericapiview，所以还需要继承genericapiview",{"_index":1767,"t":{"199":{"position":[[1020,174]]}}}],["vim",{"_index":119,"t":{"27":{"position":[[684,3],[1125,9],[1154,3]]},"34":{"position":[[2484,3]]},"457":{"position":[[308,3],[645,4]]},"516":{"position":[[4299,3],[38202,3],[50669,3],[52054,3],[55325,3],[59134,3],[79800,3],[110240,3]]},"537":{"position":[[23,3]]},"558":{"position":[[23,3]]}}}],["vip",{"_index":3350,"t":{"504":{"position":[[4540,4]]}}}],["vip并不是只会员的意思，而是指virtu",{"_index":3274,"t":{"502":{"position":[[209,23]]}}}],["vip是否生效，通过查看本机是否成功挂载虚拟ip",{"_index":3347,"t":{"504":{"position":[[4350,32]]}}}],["vip通信时，也可以正常ping通，代表虚拟ip",{"_index":3351,"t":{"504":{"position":[[4545,33]]}}}],["virtual",{"_index":4742,"t":{"516":{"position":[[92494,7],[93562,7]]},"591":{"position":[[572,7],[1640,7]]}}}],["virtual_ipaddress",{"_index":3320,"t":{"504":{"position":[[1518,17],[2566,17]]}}}],["virtual_router_id",{"_index":3308,"t":{"504":{"position":[[1191,17],[2240,17]]}}}],["void",{"_index":470,"t":{"83":{"position":[[201,4],[382,4]]},"110":{"position":[[582,4]]},"114":{"position":[[139,4]]}}}],["vol",{"_index":269,"t":{"38":{"position":[[173,3],[250,3]]}}}],["volum",{"_index":104,"t":{"27":{"position":[[234,6]]},"34":{"position":[[3294,6],[3313,6],[3342,6],[3354,90],[3520,6]]},"38":{"position":[[13,6],[90,11],[123,11],[156,6],[198,6],[232,6]]},"42":{"position":[[9,7],[113,6],[170,13],[198,6],[393,6],[441,6],[545,6],[607,6],[887,6]]},"46":{"position":[[21,6],[40,6],[186,9],[296,6],[377,6],[1004,6],[1299,6]]},"516":{"position":[[19136,8],[19182,6],[24593,8],[29696,8],[29746,15],[31345,7],[107366,10],[107432,6],[107617,6],[107780,6],[107827,6],[107851,8],[107862,9],[107914,6],[107983,6],[108080,6],[108157,6],[108345,6],[108630,10],[108697,6],[108834,6],[108983,6],[109007,8],[109029,6],[109329,6],[109426,6],[109507,6],[109652,6],[110586,6],[110718,6],[110867,6],[110891,8],[110913,6],[111050,6],[111137,6],[111186,6],[111568,6],[112452,6],[115247,6],[115928,6],[115953,8],[115970,6],[116250,6],[116275,8],[116292,6],[116699,6],[118620,8],[120051,8]]},"526":{"position":[[4081,8],[4127,6]]},"624":{"position":[[66,6]]},"632":{"position":[[66,6]]}}}],["volumeattach",{"_index":3711,"t":{"516":{"position":[[12032,17]]}}}],["volumemod",{"_index":5034,"t":{"516":{"position":[[113959,10],[115293,10],[115528,10],[116732,10],[116974,10]]},"620":{"position":[[99,10]]},"624":{"position":[[112,10]]},"626":{"position":[[105,10]]},"632":{"position":[[99,10]]},"634":{"position":[[112,10]]}}}],["volumemount",{"_index":3982,"t":{"516":{"position":[[28151,13],[107542,13],[107758,13],[108807,13],[108956,13],[110691,13],[110840,13],[115906,13],[116228,13],[118544,13],[119983,13]]}}}],["volume挂在到nginx",{"_index":4941,"t":{"516":{"position":[[107564,24]]}}}],["volume是pod中能够被多个容器访问的共享目录，它被定义在pod上，然后被一个pod里的多个容器挂载到具体的文件目录下，kubernetes通过volume实现同一个pod中不同容器之间的数据共享以及数据的持久化存储。volume的生命容器不与pod中单个容器的生命周期相关，当容器终止或者重启时，volum",{"_index":4930,"t":{"516":{"position":[[106711,167]]},"616":{"position":[[128,167]]}}}],["volume）是持久化卷的意思，是对底层的共享存储的一种抽象。一般情况下pv由kubernet",{"_index":4993,"t":{"516":{"position":[[111460,92]]}}}],["volume，类型为emptydir",{"_index":4945,"t":{"516":{"position":[[107882,18]]}}}],["vote",{"_index":1949,"t":{"230":{"position":[[966,5]]}}}],["vrrp_instanc",{"_index":3303,"t":{"504":{"position":[[1050,13],[2099,13]]}}}],["vrrp_script",{"_index":3297,"t":{"504":{"position":[[838,11],[1887,11]]}}}],["vs",{"_index":1934,"t":{"230":{"position":[[442,2]]}}}],["vx8vx",{"_index":4793,"t":{"516":{"position":[[95073,5]]}}}],["w",{"_index":2627,"t":{"309":{"position":[[0,2]]},"311":{"position":[[16,1]]},"325":{"position":[[6,2],[21,2]]},"328":{"position":[[252,3],[256,3]]},"402":{"position":[[662,1],[695,1]]},"516":{"position":[[41483,1],[72982,1],[74136,1],[82390,1],[82895,1],[83329,1],[88075,1],[88338,1],[88650,1]]},"589":{"position":[[270,1],[775,1],[1209,1]]}}}],["w5nzv",{"_index":4481,"t":{"516":{"position":[[73089,5],[73293,5]]}}}],["wait",{"_index":4162,"t":{"516":{"position":[[40629,7],[40770,7],[77476,7]]}}}],["wait（可选）：布尔类型，是否等待下游pipeline执行完成。默认值为tru",{"_index":1028,"t":{"155":{"position":[[1012,42]]}}}],["wantedby=multi",{"_index":421,"t":{"73":{"position":[[1353,14]]}}}],["war",{"_index":369,"t":{"73":{"position":[[21,3]]},"78":{"position":[[561,3]]}}}],["war,bom",{"_index":446,"t":{"78":{"position":[[498,7]]}}}],["warn",{"_index":2949,"t":{"449":{"position":[[135,5]]},"516":{"position":[[38562,7],[44596,7],[45850,7],[47050,7],[49150,7],[52519,7],[54901,7],[55016,7],[58834,7]]},"535":{"position":[[84,7],[199,7]]},"555":{"position":[[121,7]]}}}],["watch",{"_index":5132,"t":{"516":{"position":[[122810,8],[123058,8],[123436,8],[126450,8]]}}}],["way",{"_index":583,"t":{"94":{"position":[[23,3]]}}}],["wc",{"_index":2607,"t":{"303":{"position":[[2083,2],[2159,2]]},"504":{"position":[[2989,2],[3216,2]]}}}],["web",{"_index":1972,"t":{"232":{"position":[[679,16],[750,16]]},"247":{"position":[[34,3],[46,3],[61,3]]},"273":{"position":[[1238,6]]},"467":{"position":[[8,3]]},"516":{"position":[[2936,3]]}}}],["webhook：通过调用外部rest",{"_index":5120,"t":{"516":{"position":[[122168,27]]}}}],["wed",{"_index":3817,"t":{"516":{"position":[[18411,4],[18881,4],[24162,4]]},"526":{"position":[[3356,4],[3826,4]]}}}],["weight",{"_index":3301,"t":{"504":{"position":[[1006,6],[2055,6]]},"516":{"position":[[53762,6],[56025,7],[57247,6],[92603,6],[93671,6]]},"541":{"position":[[521,7]]},"545":{"position":[[963,6]]},"591":{"position":[[681,6],[1749,6]]}}}],["weight=3",{"_index":3039,"t":{"455":{"position":[[1005,8]]}}}],["weight=numb",{"_index":3029,"t":{"455":{"position":[[477,13]]}}}],["wget",{"_index":188,"t":{"34":{"position":[[1136,5],[1202,4],[4836,4]]},"504":{"position":[[119,4]]},"516":{"position":[[5384,4],[8236,4],[102101,4],[102247,4],[128895,4]]}}}],["when指令允许pipeline根据给定的条件，决定是否执行阶段内的步骤。when指令必须至少包含一个条件。when指令除了支持branch",{"_index":883,"t":{"139":{"position":[[0,85]]}}}],["when：当满足when",{"_index":865,"t":{"135":{"position":[[505,25]]}}}],["whitelist",{"_index":318,"t":{"52":{"position":[[183,14]]}}}],["wide",{"_index":3856,"t":{"516":{"position":[[19912,4],[23925,4],[25956,4],[26691,4],[38404,4],[43016,4],[50410,4],[50886,4],[51770,4],[52252,4],[54676,4],[55580,4],[59836,4],[60734,4],[61937,4],[62366,4],[62827,4],[63705,4],[63870,4],[66299,4],[68024,4],[68396,4],[68768,4],[76496,4],[77689,4],[78432,4],[85980,4],[86178,4],[88069,4],[94921,4],[95990,4],[98522,4],[100078,4],[108106,4],[109452,4],[113901,4],[115230,4],[115464,4],[116501,4],[116682,4],[116910,4]]},"526":{"position":[[4857,4]]},"532":{"position":[[76,4]]},"541":{"position":[[76,4]]},"562":{"position":[[422,4]]},"567":{"position":[[79,4]]},"569":{"position":[[50,4]]},"571":{"position":[[50,4]]},"620":{"position":[[41,4]]},"624":{"position":[[49,4]]},"626":{"position":[[41,4]]},"630":{"position":[[50,4]]},"632":{"position":[[49,4]]},"634":{"position":[[48,4]]}}}],["widget=checkboxselectmultipl",{"_index":1174,"t":{"177":{"position":[[307,29]]}}}],["width_field",{"_index":2143,"t":{"252":{"position":[[4619,30]]}}}],["width_field=non",{"_index":2140,"t":{"252":{"position":[[4357,17]]}}}],["window",{"_index":557,"t":{"90":{"position":[[1537,10]]},"294":{"position":[[110,7]]}}}],["wnncx",{"_index":4795,"t":{"516":{"position":[[95148,5]]}}}],["woker",{"_index":2991,"t":{"451":{"position":[[19,5]]}}}],["work",{"_index":3270,"t":{"496":{"position":[[228,4]]}}}],["workdir",{"_index":99,"t":{"27":{"position":[[90,7],[649,7],[1158,25],[1206,7]]},"34":{"position":[[316,7],[4097,7],[4117,7],[4138,7],[4146,56],[4249,7],[4280,7],[4292,7],[4303,7],[4313,7],[4405,7],[4413,26]]}}}],["worker",{"_index":2997,"t":{"451":{"position":[[236,6],[290,24],[338,6],[485,6],[595,6],[688,6],[724,6],[795,6],[1025,6],[1093,6]]},"453":{"position":[[132,6]]},"455":{"position":[[179,6],[662,6],[1865,6]]},"498":{"position":[[112,6],[137,6],[162,6]]},"510":{"position":[[312,6]]}}}],["worker_connect",{"_index":2954,"t":{"449":{"position":[[296,18]]},"453":{"position":[[112,19],[156,18]]}}}],["worker_cpu_affin",{"_index":3006,"t":{"451":{"position":[[570,20],[622,19]]}}}],["worker_prior",{"_index":3010,"t":{"451":{"position":[[775,16],[853,15]]}}}],["worker_process",{"_index":2946,"t":{"449":{"position":[[49,16]]},"451":{"position":[[499,16],[531,16]]}}}],["worker_processes_numb",{"_index":3005,"t":{"451":{"position":[[447,24]]}}}],["worker_rlimit_cor",{"_index":3000,"t":{"451":{"position":[[315,19],[373,18]]}}}],["worker_rlimit_nofil",{"_index":2998,"t":{"451":{"position":[[260,20]]}}}],["worker_rlimit_nofile_numb",{"_index":2996,"t":{"451":{"position":[[204,28]]}}}],["worker_shutdown_timeout",{"_index":3015,"t":{"451":{"position":[[997,24],[1047,23]]}}}],["worker进程启动时调用的计时器，如果master进程不允许则只会在init_by_lua",{"_index":3389,"t":{"510":{"position":[[332,51]]}}}],["workflowrun",{"_index":694,"t":{"110":{"position":[[1695,15]]}}}],["working_directori",{"_index":3003,"t":{"451":{"position":[[406,17]]}}}],["workingdir",{"_index":3981,"t":{"516":{"position":[[28123,11]]}}}],["workspac",{"_index":676,"t":{"110":{"position":[[971,9]]},"155":{"position":[[1055,9]]}}}],["workunit",{"_index":733,"t":{"112":{"position":[[786,8]]}}}],["world",{"_index":217,"t":{"34":{"position":[[2560,9]]},"128":{"position":[[179,6]]},"132":{"position":[[515,6]]},"137":{"position":[[919,6]]},"275":{"position":[[1112,8],[1157,7]]}}}],["world_thi",{"_index":2671,"t":{"328":{"position":[[348,10],[516,10]]}}}],["wq",{"_index":2628,"t":{"309":{"position":[[54,3]]}}}],["write_onli",{"_index":1326,"t":{"184":{"position":[[2906,10]]}}}],["writefil",{"_index":964,"t":{"149":{"position":[[415,21],[437,16]]},"151":{"position":[[687,9]]}}}],["writefile(fil",{"_index":969,"t":{"149":{"position":[[681,15]]}}}],["wrong",{"_index":1418,"t":{"188":{"position":[[1095,5]]}}}],["wsgi",{"_index":1973,"t":{"232":{"position":[[701,4],[745,4],[772,4]]}}}],["wsgi.pi",{"_index":1960,"t":{"232":{"position":[[66,7]]}}}],["wvjd8",{"_index":4457,"t":{"516":{"position":[[71258,5],[71871,5],[72303,5]]}}}],["www.a.shifen.com",{"_index":4854,"t":{"516":{"position":[[100992,17],[101010,17],[101049,17]]}}}],["www.baidu.com",{"_index":4850,"t":{"516":{"position":[[100664,13],[100950,14],[100965,14]]}}}],["www.nginx",{"_index":3058,"t":{"457":{"position":[[184,11],[385,9],[450,9],[514,9],[1023,9],[1167,9],[1283,9],[1370,9],[1440,9],[2128,9],[2156,9],[2312,9],[2454,9],[2672,9],[2791,9]]}}}],["www.nginx.com",{"_index":3056,"t":{"457":{"position":[[74,14],[118,13]]}}}],["www.test.com/image/1.png",{"_index":3078,"t":{"457":{"position":[[1624,24],[1831,24]]}}}],["www.xxx.com",{"_index":3265,"t":{"493":{"position":[[567,12]]}}}],["www\\.nginx",{"_index":3059,"t":{"457":{"position":[[216,16]]}}}],["x",{"_index":183,"t":{"34":{"position":[[1103,2],[3260,1],[4942,2]]},"170":{"position":[[634,1],[696,1],[767,1]]},"311":{"position":[[49,1],[63,1]]},"347":{"position":[[14,2]]},"369":{"position":[[570,2]]},"402":{"position":[[715,1],[749,1]]},"457":{"position":[[4344,1],[4351,1]]},"485":{"position":[[145,11]]},"504":{"position":[[3512,2]]},"516":{"position":[[5148,2]]}}}],["x2",{"_index":4197,"t":{"516":{"position":[[44380,3],[44452,3],[45877,3],[47180,3]]}}}],["x3",{"_index":4065,"t":{"516":{"position":[[33782,3],[33887,3],[33960,3],[46821,3],[46926,3],[46997,3],[49172,3]]}}}],["x4tsm",{"_index":4725,"t":{"516":{"position":[[91682,5]]}}}],["x5",{"_index":4201,"t":{"516":{"position":[[44617,3]]}}}],["x509",{"_index":4913,"t":{"516":{"position":[[105274,4],[125227,4]]},"606":{"position":[[13,4]]}}}],["x6",{"_index":4219,"t":{"516":{"position":[[47071,3]]}}}],["x64.tar.gz",{"_index":136,"t":{"27":{"position":[[1059,10]]}}}],["x86_64",{"_index":544,"t":{"90":{"position":[[789,9]]},"516":{"position":[[6301,6]]}}}],["xbqhh",{"_index":5239,"t":{"516":{"position":[[130218,5],[130338,5],[130396,5]]}}}],["xml",{"_index":311,"t":{"52":{"position":[[24,3],[37,4]]},"247":{"position":[[94,3]]},"457":{"position":[[4892,3]]}}}],["xml、json",{"_index":3652,"t":{"516":{"position":[[9824,8]]},"520":{"position":[[414,8]]}}}],["xpt7w",{"_index":4482,"t":{"516":{"position":[[73138,5],[73187,5]]}}}],["xshell",{"_index":2621,"t":{"305":{"position":[[222,20]]}}}],["xx_usernam",{"_index":789,"t":{"114":{"position":[[597,14]]}}}],["xxx",{"_index":661,"t":{"110":{"position":[[610,8]]},"516":{"position":[[54025,5]]}}}],["xxx\",\"yyi",{"_index":4288,"t":{"516":{"position":[[53941,13],[54455,13],[55268,13],[56137,13],[58299,13],[59019,13]]},"541":{"position":[[633,13]]},"549":{"position":[[504,13]]}}}],["xxx.crt",{"_index":3246,"t":{"493":{"position":[[27,7]]}}}],["xxx.key",{"_index":3247,"t":{"493":{"position":[[37,7]]}}}],["xxx.yaml",{"_index":3760,"t":{"516":{"position":[[14953,8],[14995,8]]},"524":{"position":[[636,8],[678,8]]}}}],["xxx_ftp.com",{"_index":786,"t":{"114":{"position":[[553,13]]}}}],["xxx_pwd",{"_index":790,"t":{"114":{"position":[[612,9]]}}}],["xxxx",{"_index":235,"t":{"34":{"position":[[3662,4]]},"516":{"position":[[51919,17]]}}}],["xxxxx",{"_index":4411,"t":{"516":{"position":[[66470,8]]}}}],["xz",{"_index":177,"t":{"34":{"position":[[637,2]]}}}],["xzf",{"_index":198,"t":{"34":{"position":[[1317,3]]}}}],["y",{"_index":117,"t":{"27":{"position":[[674,1],[697,1],[842,1],[1144,1]]},"34":{"position":[[1184,1],[1537,1]]},"264":{"position":[[1078,3]]},"294":{"position":[[191,1]]},"315":{"position":[[6,1]]},"442":{"position":[[12,1]]},"516":{"position":[[4898,1],[5707,1],[6606,1],[79555,1],[110136,1],[110504,1]]}}}],["yaml",{"_index":3651,"t":{"516":{"position":[[9804,9],[9814,9],[9833,62],[9980,20],[10077,15],[10735,9],[10756,26],[10860,4],[11601,4],[14279,22],[14377,14],[14508,16],[16213,4],[36966,4],[69153,17],[128865,6]]},"520":{"position":[[394,9],[404,9],[423,62],[570,20]]},"522":{"position":[[733,22]]},"524":{"position":[[60,14],[191,16]]},"526":{"position":[[1158,4]]}}}],["yaml文件：n",{"_index":3797,"t":{"516":{"position":[[16953,15]]},"526":{"position":[[1898,15]]}}}],["yaml转json的网站，可以通过它验证yaml",{"_index":3681,"t":{"516":{"position":[[10790,35]]}}}],["yaml，并运行dashboard",{"_index":5212,"t":{"516":{"position":[[128843,19]]}}}],["yarn",{"_index":441,"t":{"78":{"position":[[435,4]]}}}],["year",{"_index":2020,"t":{"240":{"position":[[636,4]]}}}],["year=2003",{"_index":2000,"t":{"236":{"position":[[979,10]]}}}],["year=2005",{"_index":1993,"t":{"236":{"position":[[665,10]]}}}],["yum",{"_index":116,"t":{"27":{"position":[[669,3],[692,3],[829,3],[1139,3]]},"442":{"position":[[7,3],[46,3],[77,3]]},"516":{"position":[[4869,3],[5530,3],[5646,3],[6521,3],[79538,3],[110113,3],[110481,3]]}}}],["ywrtaw4",{"_index":5088,"t":{"516":{"position":[[119321,8],[119522,8]]}}}],["yy",{"_index":2644,"t":{"315":{"position":[[11,2]]}}}],["yyyi",{"_index":1422,"t":{"188":{"position":[[1143,5]]}}}],["z",{"_index":2650,"t":{"325":{"position":[[119,2],[152,2]]},"400":{"position":[[152,1],[180,1]]}}}],["z0",{"_index":1262,"t":{"184":{"position":[[1419,2]]}}}],["z95z5",{"_index":5226,"t":{"516":{"position":[[129585,5]]}}}],["za",{"_index":1261,"t":{"184":{"position":[[1416,2]]}}}],["zone",{"_index":3023,"t":{"455":{"position":[[163,4],[1982,4],[1999,20]]},"473":{"position":[[80,4],[95,4]]}}}],["zwfvw",{"_index":5222,"t":{"516":{"position":[[129525,5]]}}}],["zxvf",{"_index":3282,"t":{"504":{"position":[[207,4]]}}}],["zzyy<zzyy167@126.com",{"_index":113,"t":{"27":{"position":[[605,21]]}}}],["zzyy<zzyybs@126.com",{"_index":128,"t":{"27":{"position":[[923,20]]}}}]],"pipeline":["stemmer"]}}]